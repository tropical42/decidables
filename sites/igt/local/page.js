var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

var check = function (it) {
  return it && it.Math == Math && it;
}; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


var global$1 = // eslint-disable-next-line es-x/no-global-this -- safe
check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
function () {
  return this;
}() || Function('return this')();

var path = global$1;

var fails = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

var functionBindNative = !fails(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = function () {
    /* empty */
  }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe


  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

var FunctionPrototype$2 = Function.prototype;
var bind$1 = FunctionPrototype$2.bind;
var call$2 = FunctionPrototype$2.call;
var uncurryThis = functionBindNative && bind$1.bind(call$2, call$2);
var functionUncurryThis = functionBindNative ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call$2.apply(fn, arguments);
  };
};

var TypeError$k = global$1.TypeError; // `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible

var requireObjectCoercible = function (it) {
  if (it == undefined) throw TypeError$k("Can't call method on " + it);
  return it;
};

var Object$6 = global$1.Object; // `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject

var toObject = function (argument) {
  return Object$6(requireObjectCoercible(argument));
};

var hasOwnProperty = functionUncurryThis({}.hasOwnProperty); // `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe

var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};

var isPure = false;

var defineProperty$8 = Object.defineProperty;

var setGlobal = function (key, value) {
  try {
    defineProperty$8(global$1, key, {
      value: value,
      configurable: true,
      writable: true
    });
  } catch (error) {
    global$1[key] = value;
  }

  return value;
};

var SHARED = '__core-js_shared__';
var store$1 = global$1[SHARED] || setGlobal(SHARED, {});
var sharedStore = store$1;

var shared = createCommonjsModule(function (module) {
  (module.exports = function (key, value) {
    return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.22.3',
    mode: 'global',
    copyright: 'Â© 2014-2022 Denis Pushkarev (zloirock.ru)',
    license: 'https://github.com/zloirock/core-js/blob/v3.22.3/LICENSE',
    source: 'https://github.com/zloirock/core-js'
  });
});

var id$1 = 0;
var postfix = Math.random();
var toString$2 = functionUncurryThis(1.0.toString);

var uid = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$2(++id$1 + postfix, 36);
};

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
var isCallable = function (argument) {
  return typeof argument == 'function';
};

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

var getBuiltIn = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global$1[namespace]) : global$1[namespace] && global$1[namespace][method];
};

var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

var process$1 = global$1.process;
var Deno = global$1.Deno;
var versions = process$1 && process$1.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version$3;

if (v8) {
  match = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us

  version$3 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
} // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0


if (!version$3 && engineUserAgent) {
  match = engineUserAgent.match(/Edge\/(\d+)/);

  if (!match || match[1] >= 74) {
    match = engineUserAgent.match(/Chrome\/(\d+)/);
    if (match) version$3 = +match[1];
  }
}

var engineV8Version = version$3;

/* eslint-disable es-x/no-symbol -- required for testing */

var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

  return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && engineV8Version && engineV8Version < 41;
});

/* eslint-disable es-x/no-symbol -- required for testing */
var useSymbolAsUid = nativeSymbol && !Symbol.sham && typeof Symbol.iterator == 'symbol';

var WellKnownSymbolsStore = shared('wks');
var Symbol$1 = global$1.Symbol;
var symbolFor = Symbol$1 && Symbol$1['for'];
var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

var wellKnownSymbol = function (name) {
  if (!hasOwnProperty_1(WellKnownSymbolsStore, name) || !(nativeSymbol || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;

    if (nativeSymbol && hasOwnProperty_1(Symbol$1, name)) {
      WellKnownSymbolsStore[name] = Symbol$1[name];
    } else if (useSymbolAsUid && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  }

  return WellKnownSymbolsStore[name];
};

var f$8 = wellKnownSymbol;
var wellKnownSymbolWrapped = {
  f: f$8
};

var descriptors = !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, {
    get: function () {
      return 7;
    }
  })[1] != 7;
});

var isObject = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};

var document$1 = global$1.document; // typeof document.createElement is 'object' in old IE

var EXISTS$1 = isObject(document$1) && isObject(document$1.createElement);

var documentCreateElement = function (it) {
  return EXISTS$1 ? document$1.createElement(it) : {};
};

var ie8DomDefine = !descriptors && !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(documentCreateElement('div'), 'a', {
    get: function () {
      return 7;
    }
  }).a != 7;
});

// https://bugs.chromium.org/p/v8/issues/detail?id=3334

var v8PrototypeDefineBug = descriptors && fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () {
    /* empty */
  }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});

var String$6 = global$1.String;
var TypeError$j = global$1.TypeError; // `Assert: Type(argument) is Object`

var anObject = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError$j(String$6(argument) + ' is not an object');
};

var call$1 = Function.prototype.call;
var functionCall = functionBindNative ? call$1.bind(call$1) : function () {
  return call$1.apply(call$1, arguments);
};

var objectIsPrototypeOf = functionUncurryThis({}.isPrototypeOf);

var Object$5 = global$1.Object;
var isSymbol = useSymbolAsUid ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && objectIsPrototypeOf($Symbol.prototype, Object$5(it));
};

var String$5 = global$1.String;

var tryToString = function (argument) {
  try {
    return String$5(argument);
  } catch (error) {
    return 'Object';
  }
};

var TypeError$i = global$1.TypeError; // `Assert: IsCallable(argument) is true`

var aCallable = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError$i(tryToString(argument) + ' is not a function');
};

// https://tc39.es/ecma262/#sec-getmethod

var getMethod = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};

var TypeError$h = global$1.TypeError; // `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive

var ordinaryToPrimitive = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = functionCall(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
  throw TypeError$h("Can't convert object to primitive value");
};

var TypeError$g = global$1.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive'); // `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive

var toPrimitive = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;

  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = functionCall(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError$g("Can't convert object to primitive value");
  }

  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

// https://tc39.es/ecma262/#sec-topropertykey

var toPropertyKey = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

var TypeError$f = global$1.TypeError; // eslint-disable-next-line es-x/no-object-defineproperty -- safe

var $defineProperty = Object.defineProperty; // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE$1 = 'configurable';
var WRITABLE = 'writable'; // `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty

var f$7 = descriptors ? v8PrototypeDefineBug ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);

  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor$1(O, P);

    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }

  return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (ie8DomDefine) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError$f('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};
var objectDefineProperty = {
  f: f$7
};

var defineProperty$7 = objectDefineProperty.f;

var defineWellKnownSymbol = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!hasOwnProperty_1(Symbol, NAME)) defineProperty$7(Symbol, NAME, {
    value: wellKnownSymbolWrapped.f(NAME)
  });
};

// https://tc39.es/ecma262/#sec-symbol.matchall

defineWellKnownSymbol('matchAll');

var $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

var NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable.call({
  1: 2
}, 1); // `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

var f$6 = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$2(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;
var objectPropertyIsEnumerable = {
  f: f$6
};

var createPropertyDescriptor = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var toString$1 = functionUncurryThis({}.toString);
var stringSlice$8 = functionUncurryThis(''.slice);

var classofRaw = function (it) {
  return stringSlice$8(toString$1(it), 8, -1);
};

var Object$4 = global$1.Object;
var split$3 = functionUncurryThis(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings

var indexedObject = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object$4('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classofRaw(it) == 'String' ? split$3(it, '') : Object$4(it);
} : Object$4;

var toIndexedObject = function (it) {
  return indexedObject(requireObjectCoercible(it));
};

var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

var f$5 = descriptors ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (ie8DomDefine) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) {
    /* empty */
  }
  if (hasOwnProperty_1(O, P)) return createPropertyDescriptor(!functionCall(objectPropertyIsEnumerable.f, O, P), O[P]);
};
var objectGetOwnPropertyDescriptor = {
  f: f$5
};

var createNonEnumerableProperty = descriptors ? function (object, key, value) {
  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var functionToString = functionUncurryThis(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper

if (!isCallable(sharedStore.inspectSource)) {
  sharedStore.inspectSource = function (it) {
    return functionToString(it);
  };
}

var inspectSource = sharedStore.inspectSource;

var WeakMap$2 = global$1.WeakMap;
var nativeWeakMap = isCallable(WeakMap$2) && /native code/.test(inspectSource(WeakMap$2));

var keys$1 = shared('keys');

var sharedKey = function (key) {
  return keys$1[key] || (keys$1[key] = uid(key));
};

var hiddenKeys$1 = {};

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError$e = global$1.TypeError;
var WeakMap$1 = global$1.WeakMap;
var set$4, get$3, has;

var enforce$1 = function (it) {
  return has(it) ? get$3(it) : set$4(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;

    if (!isObject(it) || (state = get$3(it)).type !== TYPE) {
      throw TypeError$e('Incompatible receiver, ' + TYPE + ' required');
    }

    return state;
  };
};

if (nativeWeakMap || sharedStore.state) {
  var store = sharedStore.state || (sharedStore.state = new WeakMap$1());
  var wmget = functionUncurryThis(store.get);
  var wmhas = functionUncurryThis(store.has);
  var wmset = functionUncurryThis(store.set);

  set$4 = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError$e(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };

  get$3 = function (it) {
    return wmget(store, it) || {};
  };

  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys$1[STATE] = true;

  set$4 = function (it, metadata) {
    if (hasOwnProperty_1(it, STATE)) throw new TypeError$e(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };

  get$3 = function (it) {
    return hasOwnProperty_1(it, STATE) ? it[STATE] : {};
  };

  has = function (it) {
    return hasOwnProperty_1(it, STATE);
  };
}

var internalState = {
  set: set$4,
  get: get$3,
  has: has,
  enforce: enforce$1,
  getterFor: getterFor
};

var FunctionPrototype$1 = Function.prototype; // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

var getDescriptor = descriptors && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwnProperty_1(FunctionPrototype$1, 'name'); // additional protection from minified / mangled / dropped function names

var PROPER = EXISTS && function something() {
  /* empty */
}.name === 'something';

var CONFIGURABLE = EXISTS && (!descriptors || descriptors && getDescriptor(FunctionPrototype$1, 'name').configurable);
var functionName = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

var redefine = createCommonjsModule(function (module) {
  var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
  var getInternalState = internalState.get;
  var enforceInternalState = internalState.enforce;
  var TEMPLATE = String(String).split('String');
  (module.exports = function (O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    var name = options && options.name !== undefined ? options.name : key;
    var state;

    if (isCallable(value)) {
      if (String(name).slice(0, 7) === 'Symbol(') {
        name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
      }

      if (!hasOwnProperty_1(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
        createNonEnumerableProperty(value, 'name', name);
      }

      state = enforceInternalState(value);

      if (!state.source) {
        state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
      }
    }

    if (O === global$1) {
      if (simple) O[key] = value;else setGlobal(key, value);
      return;
    } else if (!unsafe) {
      delete O[key];
    } else if (!noTargetGet && O[key]) {
      simple = true;
    }

    if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, 'toString', function toString() {
    return isCallable(this) && getInternalState(this).source || inspectSource(this);
  });
});

var ceil = Math.ceil;
var floor$7 = Math.floor; // `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity

var toIntegerOrInfinity = function (argument) {
  var number = +argument; // eslint-disable-next-line no-self-compare -- safe

  return number !== number || number === 0 ? 0 : (number > 0 ? floor$7 : ceil)(number);
};

var max$3 = Math.max;
var min$2 = Math.min; // Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

var toAbsoluteIndex = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max$3(integer + length, 0) : min$2(integer, length);
};

var min$1 = Math.min; // `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength

var toLength = function (argument) {
  return argument > 0 ? min$1(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

// https://tc39.es/ecma262/#sec-lengthofarraylike

var lengthOfArrayLike = function (obj) {
  return toLength(obj.length);
};

var createMethod$2 = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    }
    return !IS_INCLUDES && -1;
  };
};

var arrayIncludes = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod$2(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod$2(false)
};

var indexOf$2 = arrayIncludes.indexOf;
var push$7 = functionUncurryThis([].push);

var objectKeysInternal = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;

  for (key in O) !hasOwnProperty_1(hiddenKeys$1, key) && hasOwnProperty_1(O, key) && push$7(result, key); // Don't enum bug & hidden keys


  while (names.length > i) if (hasOwnProperty_1(O, key = names[i++])) {
    ~indexOf$2(result, key) || push$7(result, key);
  }

  return result;
};

// IE8- don't enum bug keys
var enumBugKeys = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

var hiddenKeys = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe

var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return objectKeysInternal(O, hiddenKeys);
};

var objectGetOwnPropertyNames = {
  f: f$4
};

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
var f$3 = Object.getOwnPropertySymbols;
var objectGetOwnPropertySymbols = {
  f: f$3
};

var concat$3 = functionUncurryThis([].concat); // all object keys, includes non-enumerable and symbols

var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = objectGetOwnPropertyNames.f(anObject(it));
  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
  return getOwnPropertySymbols ? concat$3(keys, getOwnPropertySymbols(it)) : keys;
};

var copyConstructorProperties = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = objectDefineProperty.f;
  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];

    if (!hasOwnProperty_1(target, key) && !(exceptions && hasOwnProperty_1(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data$1[normalize(feature)];
  return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data$1 = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';
var isForced_1 = isForced;

var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/

var _export = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;

  if (GLOBAL) {
    target = global$1;
  } else if (STATIC) {
    target = global$1[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global$1[TARGET] || {}).prototype;
  }

  if (target) for (key in source) {
    sourceProperty = source[key];

    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor$1(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];

    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    } // add a flag to not completely full polyfills


    if (options.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    } // extend global


    redefine(target, key, sourceProperty, options);
  }
};

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call; // eslint-disable-next-line es-x/no-reflect -- safe

var functionApply = typeof Reflect == 'object' && Reflect.apply || (functionBindNative ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});

var String$4 = global$1.String;
var TypeError$d = global$1.TypeError;

var aPossiblePrototype = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw TypeError$d("Can't set " + String$4(argument) + ' as a prototype');
};

/* eslint-disable no-proto -- safe */
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es-x/no-object-setprototypeof -- safe

var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;

  try {
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    setter = functionUncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) {
    /* empty */
  }

  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);else O.__proto__ = proto;
    return O;
  };
}() : undefined);

var defineProperty$6 = objectDefineProperty.f;

var proxyAccessor = function (Target, Source, key) {
  key in Target || defineProperty$6(Target, key, {
    configurable: true,
    get: function () {
      return Source[key];
    },
    set: function (it) {
      Source[key] = it;
    }
  });
};

var inheritIfRequired = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if ( // it can work only with native `setPrototypeOf`
  objectSetPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
  isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) objectSetPrototypeOf($this, NewTargetPrototype);
  return $this;
};

var TO_STRING_TAG$5 = wellKnownSymbol('toStringTag');
var test = {};
test[TO_STRING_TAG$5] = 'z';
var toStringTagSupport = String(test) === '[object z]';

var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
var Object$3 = global$1.Object; // ES3 wrong here

var CORRECT_ARGUMENTS = classofRaw(function () {
  return arguments;
}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) {
    /* empty */
  }
}; // getting tag from ES6+ `Object.prototype.toString`


var classof = toStringTagSupport ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
  : typeof (tag = tryGet(O = Object$3(it), TO_STRING_TAG$4)) == 'string' ? tag // builtinTag case
  : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
  : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};

var String$3 = global$1.String;

var toString = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return String$3(argument);
};

var normalizeStringArgument = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};

// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause

var installErrorCause = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};

var $Error = Error;
var replace$5 = functionUncurryThis(''.replace);

var TEST = function (arg) {
  return String($Error(arg).stack);
}('zxcasd');

var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

var clearErrorStack = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
    while (dropEntries--) stack = replace$5(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  }

  return stack;
};

var errorStackInstallable = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true; // eslint-disable-next-line es-x/no-object-defineproperty -- safe

  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});

var wrapErrorConstructorWithCause = function (FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
  var STACK_TRACE_LIMIT = 'stackTraceLimit';
  var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
  var path = FULL_NAME.split('.');
  var ERROR_NAME = path[path.length - 1];
  var OriginalError = getBuiltIn.apply(null, path);
  if (!OriginalError) return;
  var OriginalErrorPrototype = OriginalError.prototype; // V8 9.3- bug https://bugs.chromium.org/p/v8/issues/detail?id=12006

  if (hasOwnProperty_1(OriginalErrorPrototype, 'cause')) delete OriginalErrorPrototype.cause;
  if (!FORCED) return OriginalError;
  var BaseError = getBuiltIn('Error');
  var WrappedError = wrapper(function (a, b) {
    var message = normalizeStringArgument(IS_AGGREGATE_ERROR ? b : a, undefined);
    var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
    if (message !== undefined) createNonEnumerableProperty(result, 'message', message);
    if (errorStackInstallable) createNonEnumerableProperty(result, 'stack', clearErrorStack(result.stack, 2));
    if (this && objectIsPrototypeOf(OriginalErrorPrototype, this)) inheritIfRequired(result, this, WrappedError);
    if (arguments.length > OPTIONS_POSITION) installErrorCause(result, arguments[OPTIONS_POSITION]);
    return result;
  });
  WrappedError.prototype = OriginalErrorPrototype;

  if (ERROR_NAME !== 'Error') {
    if (objectSetPrototypeOf) objectSetPrototypeOf(WrappedError, BaseError);else copyConstructorProperties(WrappedError, BaseError, {
      name: true
    });
  } else if (descriptors && STACK_TRACE_LIMIT in OriginalError) {
    proxyAccessor(WrappedError, OriginalError, STACK_TRACE_LIMIT);
    proxyAccessor(WrappedError, OriginalError, 'prepareStackTrace');
  }

  copyConstructorProperties(WrappedError, OriginalError);
  try {
    // Safari 13- bug: WebAssembly errors does not have a proper `.name`
    if (OriginalErrorPrototype.name !== ERROR_NAME) {
      createNonEnumerableProperty(OriginalErrorPrototype, 'name', ERROR_NAME);
    }

    OriginalErrorPrototype.constructor = WrappedError;
  } catch (error) {
    /* empty */
  }
  return WrappedError;
};

/* eslint-disable no-unused-vars -- required for functions `.length` */
var WEB_ASSEMBLY = 'WebAssembly';
var WebAssembly$1 = global$1[WEB_ASSEMBLY];
var FORCED$3 = Error('e', {
  cause: 7
}).cause !== 7;

var exportGlobalErrorCauseWrapper = function (ERROR_NAME, wrapper) {
  var O = {};
  O[ERROR_NAME] = wrapErrorConstructorWithCause(ERROR_NAME, wrapper, FORCED$3);
  _export({
    global: true,
    forced: FORCED$3
  }, O);
};

var exportWebAssemblyErrorCauseWrapper = function (ERROR_NAME, wrapper) {
  if (WebAssembly$1 && WebAssembly$1[ERROR_NAME]) {
    var O = {};
    O[ERROR_NAME] = wrapErrorConstructorWithCause(WEB_ASSEMBLY + '.' + ERROR_NAME, wrapper, FORCED$3);
    _export({
      target: WEB_ASSEMBLY,
      stat: true,
      forced: FORCED$3
    }, O);
  }
}; // https://github.com/tc39/proposal-error-cause


exportGlobalErrorCauseWrapper('Error', function (init) {
  return function Error(message) {
    return functionApply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('EvalError', function (init) {
  return function EvalError(message) {
    return functionApply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('RangeError', function (init) {
  return function RangeError(message) {
    return functionApply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('ReferenceError', function (init) {
  return function ReferenceError(message) {
    return functionApply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('SyntaxError', function (init) {
  return function SyntaxError(message) {
    return functionApply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('TypeError', function (init) {
  return function TypeError(message) {
    return functionApply(init, this, arguments);
  };
});
exportGlobalErrorCauseWrapper('URIError', function (init) {
  return function URIError(message) {
    return functionApply(init, this, arguments);
  };
});
exportWebAssemblyErrorCauseWrapper('CompileError', function (init) {
  return function CompileError(message) {
    return functionApply(init, this, arguments);
  };
});
exportWebAssemblyErrorCauseWrapper('LinkError', function (init) {
  return function LinkError(message) {
    return functionApply(init, this, arguments);
  };
});
exportWebAssemblyErrorCauseWrapper('RuntimeError', function (init) {
  return function RuntimeError(message) {
    return functionApply(init, this, arguments);
  };
});

var correctPrototypeGetter = !fails(function () {
  function F() {
    /* empty */
  }

  F.prototype.constructor = null; // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing

  return Object.getPrototypeOf(new F()) !== F.prototype;
});

var IE_PROTO$1 = sharedKey('IE_PROTO');
var Object$2 = global$1.Object;
var ObjectPrototype$2 = Object$2.prototype; // `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof

var objectGetPrototypeOf = correctPrototypeGetter ? Object$2.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwnProperty_1(object, IE_PROTO$1)) return object[IE_PROTO$1];
  var constructor = object.constructor;

  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  }

  return object instanceof Object$2 ? ObjectPrototype$2 : null;
};

// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es-x/no-object-keys -- safe

var objectKeys$1 = Object.keys || function keys(O) {
  return objectKeysInternal(O, enumBugKeys);
};

// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe

var f$2 = descriptors && !v8PrototypeDefineBug ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys$1(Properties);
  var length = keys.length;
  var index = 0;
  var key;

  while (length > index) objectDefineProperty.f(O, key = keys[index++], props[key]);

  return O;
};
var objectDefineProperties = {
  f: f$2
};

var html = getBuiltIn('document', 'documentElement');

/* global ActiveXObject -- old IE, WSH */
var GT = '>';
var LT = '<';
var PROTOTYPE$1 = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () {
  /* empty */
};

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
}; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak

  return temp;
}; // Create object with fake `null` prototype: use iframe Object with cleared prototype


var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
}; // Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug


var activeXDocument;

var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) {
    /* ignore */
  }

  NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
  : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH

  var length = enumBugKeys.length;

  while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];

  return NullProtoObject();
};

hiddenKeys$1[IE_PROTO] = true; // `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es-x/no-object-create -- safe

var objectCreate = Object.create || function create(O, Properties) {
  var result;

  if (O !== null) {
    EmptyConstructor[PROTOTYPE$1] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE$1] = null; // add "__proto__" for Object.getPrototypeOf polyfill

    result[IE_PROTO] = O;
  } else result = NullProtoObject();

  return Properties === undefined ? result : objectDefineProperties.f(result, Properties);
};

var bind = functionUncurryThis(functionUncurryThis.bind); // optional / simple context binding

var functionBindContext = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : functionBindNative ? bind(fn, that) : function
    /* ...args */
  () {
    return fn.apply(that, arguments);
  };
};

var iterators = {};

var ITERATOR$7 = wellKnownSymbol('iterator');
var ArrayPrototype$1 = Array.prototype; // check on default Array iterator

var isArrayIteratorMethod = function (it) {
  return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$7] === it);
};

var ITERATOR$6 = wellKnownSymbol('iterator');

var getIteratorMethod = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR$6) || getMethod(it, '@@iterator') || iterators[classof(it)];
};

var TypeError$c = global$1.TypeError;

var getIterator = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(functionCall(iteratorMethod, argument));
  throw TypeError$c(tryToString(argument) + ' is not iterable');
};

var iteratorClose = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);

  try {
    innerResult = getMethod(iterator, 'return');

    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }

    innerResult = functionCall(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }

  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};

var TypeError$b = global$1.TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

var iterate = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = functionBindContext(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    }

    return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw TypeError$b(tryToString(iterable) + ' is not iterable'); // optimisation for array iterators

    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && objectIsPrototypeOf(ResultPrototype, result)) return result;
      }

      return new Result(false);
    }

    iterator = getIterator(iterable, iterFn);
  }

  next = iterator.next;

  while (!(step = functionCall(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }

    if (typeof result == 'object' && result && objectIsPrototypeOf(ResultPrototype, result)) return result;
  }

  return new Result(false);
};

var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
var Error$3 = global$1.Error;
var push$6 = [].push;

var $AggregateError$1 = function AggregateError(errors, message
/* , options */
) {
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var isInstance = objectIsPrototypeOf(AggregateErrorPrototype, this);
  var that;

  if (objectSetPrototypeOf) {
    that = objectSetPrototypeOf(new Error$3(), isInstance ? objectGetPrototypeOf(this) : AggregateErrorPrototype);
  } else {
    that = isInstance ? this : objectCreate(AggregateErrorPrototype);
    createNonEnumerableProperty(that, TO_STRING_TAG$3, 'Error');
  }

  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));
  if (errorStackInstallable) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));
  installErrorCause(that, options);
  var errorsArray = [];
  iterate(errors, push$6, {
    that: errorsArray
  });
  createNonEnumerableProperty(that, 'errors', errorsArray);
  return that;
};

if (objectSetPrototypeOf) objectSetPrototypeOf($AggregateError$1, Error$3);else copyConstructorProperties($AggregateError$1, Error$3, {
  name: true
});
var AggregateErrorPrototype = $AggregateError$1.prototype = objectCreate(Error$3.prototype, {
  constructor: createPropertyDescriptor(1, $AggregateError$1),
  message: createPropertyDescriptor(1, ''),
  name: createPropertyDescriptor(1, 'AggregateError')
}); // `AggregateError` constructor
// https://tc39.es/ecma262/#sec-aggregate-error-constructor

_export({
  global: true
}, {
  AggregateError: $AggregateError$1
});

var AGGREGATE_ERROR = 'AggregateError';
var $AggregateError = getBuiltIn(AGGREGATE_ERROR);
var FORCED$2 = !fails(function () {
  return $AggregateError([1]).errors[0] !== 1;
}) && fails(function () {
  return $AggregateError([1], AGGREGATE_ERROR, {
    cause: 7
  }).cause !== 7;
}); // https://github.com/tc39/proposal-error-cause

_export({
  global: true,
  forced: FORCED$2
}, {
  AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function (init) {
    // eslint-disable-next-line no-unused-vars -- required for functions `.length`
    return function AggregateError(errors, message) {
      return functionApply(init, this, arguments);
    };
  }, FORCED$2, true)
});

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

if (ArrayPrototype[UNSCOPABLES] == undefined) {
  objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: objectCreate(null)
  });
} // add a key to Array.prototype[@@unscopables]


var addToUnscopables = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

// https://github.com/tc39/proposal-relative-indexing-method


_export({
  target: 'Array',
  proto: true
}, {
  at: function at(index) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return k < 0 || k >= len ? undefined : O[k];
  }
});
addToUnscopables('at');

// in popular engines, so it's moved to a separate module
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

addToUnscopables('flat');

// in popular engines, so it's moved to a separate module
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

addToUnscopables('flatMap');

// https://tc39.es/ecma262/#sec-thisnumbervalue

var thisNumberValue = functionUncurryThis(1.0.valueOf);

var RangeError$9 = global$1.RangeError; // `String.prototype.repeat` method implementation
// https://tc39.es/ecma262/#sec-string.prototype.repeat

var stringRepeat = function repeat(count) {
  var str = toString(requireObjectCoercible(this));
  var result = '';
  var n = toIntegerOrInfinity(count);
  if (n < 0 || n == Infinity) throw RangeError$9('Wrong number of repetitions');

  for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;

  return result;
};

var log$1 = Math.log;
var LOG10E = Math.LOG10E; // eslint-disable-next-line es-x/no-math-log10 -- safe

var mathLog10 = Math.log10 || function log10(x) {
  return log$1(x) * LOG10E;
};

var RangeError$8 = global$1.RangeError;
var String$2 = global$1.String;
var isFinite$1 = global$1.isFinite;
var abs$1 = Math.abs;
var floor$6 = Math.floor;
var pow$2 = Math.pow;
var round$1 = Math.round;
var un$ToExponential = functionUncurryThis(1.0.toExponential);
var repeat = functionUncurryThis(stringRepeat);
var stringSlice$7 = functionUncurryThis(''.slice); // Edge 17-

var ROUNDS_PROPERLY = un$ToExponential(-6.9e-11, 4) === '-6.9000e-11' // IE11- && Edge 14-
&& un$ToExponential(1.255, 2) === '1.25e+0' // FF86-, V8 ~ Chrome 49-50
&& un$ToExponential(12345, 3) === '1.235e+4' // FF86-, V8 ~ Chrome 49-50
&& un$ToExponential(25, 0) === '3e+1'; // IE8-

var THROWS_ON_INFINITY_FRACTION = fails(function () {
  un$ToExponential(1, Infinity);
}) && fails(function () {
  un$ToExponential(1, -Infinity);
}); // Safari <11 && FF <50

var PROPER_NON_FINITE_THIS_CHECK = !fails(function () {
  un$ToExponential(Infinity, Infinity);
}) && !fails(function () {
  un$ToExponential(NaN, Infinity);
});
var FORCED$1 = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK; // `Number.prototype.toExponential` method
// https://tc39.es/ecma262/#sec-number.prototype.toexponential

_export({
  target: 'Number',
  proto: true,
  forced: FORCED$1
}, {
  toExponential: function toExponential(fractionDigits) {
    var x = thisNumberValue(this);
    if (fractionDigits === undefined) return un$ToExponential(x);
    var f = toIntegerOrInfinity(fractionDigits);
    if (!isFinite$1(x)) return String$2(x); // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation

    if (f < 0 || f > 20) throw RangeError$8('Incorrect fraction digits');
    if (ROUNDS_PROPERLY) return un$ToExponential(x, f);
    var s = '';
    var m = '';
    var e = 0;
    var c = '';
    var d = '';

    if (x < 0) {
      s = '-';
      x = -x;
    }

    if (x === 0) {
      e = 0;
      m = repeat('0', f + 1);
    } else {
      // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08
      // TODO: improve accuracy with big fraction digits
      var l = mathLog10(x);
      e = floor$6(l);
      var n = 0;
      var w = pow$2(10, e - f);
      n = round$1(x / w);

      if (2 * x >= (2 * n + 1) * w) {
        n += 1;
      }

      if (n >= pow$2(10, f + 1)) {
        n /= 10;
        e += 1;
      }

      m = String$2(n);
    }

    if (f !== 0) {
      m = stringSlice$7(m, 0, 1) + '.' + stringSlice$7(m, 1);
    }

    if (e === 0) {
      c = '+';
      d = '0';
    } else {
      c = e > 0 ? '+' : '-';
      d = String$2(abs$1(e));
    }

    m += 'e' + c + d;
    return s + m;
  }
});

// https://github.com/tc39/proposal-accessible-object-hasownproperty

_export({
  target: 'Object',
  stat: true
}, {
  hasOwn: hasOwnProperty_1
});

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
}; // `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability


var f$1 = function (C) {
  return new PromiseCapability(C);
};

var newPromiseCapability = {
  f: f$1
};

var perform = function (exec) {
  try {
    return {
      error: false,
      value: exec()
    };
  } catch (error) {
    return {
      error: true,
      value: error
    };
  }
};

// https://tc39.es/ecma262/#sec-promise.allsettled


_export({
  target: 'Promise',
  stat: true
}, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapability.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        functionCall(promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = {
            status: 'fulfilled',
            value: value
          };
          --remaining || resolve(values);
        }, function (error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = {
            status: 'rejected',
            reason: error
          };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

var PROMISE_ANY_ERROR = 'No one promise resolved'; // `Promise.any` method
// https://tc39.es/ecma262/#sec-promise.any

_export({
  target: 'Promise',
  stat: true
}, {
  any: function any(iterable) {
    var C = this;
    var AggregateError = getBuiltIn('AggregateError');
    var capability = newPromiseCapability.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var errors = [];
      var counter = 0;
      var remaining = 1;
      var alreadyResolved = false;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyRejected = false;
        remaining++;
        functionCall(promiseResolve, C, promise).then(function (value) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyResolved = true;
          resolve(value);
        }, function (error) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyRejected = true;
          errors[index] = error;
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
      });
      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

var promiseNativeConstructor = global$1.Promise;

var noop$2 = function () {
  /* empty */
};

var empty$1 = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec$2 = functionUncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop$2);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;

  try {
    construct(noop$2, empty$1, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;

  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction':
      return false;
  }

  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true; // `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor

var isConstructor = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function () {
    called = true;
  }) || called;
}) ? isConstructorLegacy : isConstructorModern;

var TypeError$a = global$1.TypeError; // `Assert: IsConstructor(argument) is true`

var aConstructor = function (argument) {
  if (isConstructor(argument)) return argument;
  throw TypeError$a(tryToString(argument) + ' is not a constructor');
};

var SPECIES$3 = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor

var speciesConstructor = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aConstructor(S);
};

var promiseResolve = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var NativePromisePrototype = promiseNativeConstructor && promiseNativeConstructor.prototype; // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829

var NON_GENERIC = !!promiseNativeConstructor && fails(function () {
  // eslint-disable-next-line unicorn/no-thenable -- required for testing
  NativePromisePrototype['finally'].call({
    then: function () {
      /* empty */
    }
  }, function () {
    /* empty */
  });
}); // `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally

_export({
  target: 'Promise',
  proto: true,
  real: true,
  forced: NON_GENERIC
}, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = isCallable(onFinally);
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  }
}); // makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`

if (isCallable(promiseNativeConstructor)) {
  var method = getBuiltIn('Promise').prototype['finally'];

  if (NativePromisePrototype['finally'] !== method) {
    redefine(NativePromisePrototype, 'finally', method, {
      unsafe: true
    });
  }
}

var defineProperty$5 = objectDefineProperty.f;
var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

var setToStringTag = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;

  if (target && !hasOwnProperty_1(target, TO_STRING_TAG$2)) {
    defineProperty$5(target, TO_STRING_TAG$2, {
      configurable: true,
      value: TAG
    });
  }
};

_export({
  global: true
}, {
  Reflect: {}
}); // Reflect[@@toStringTag] property
// https://tc39.es/ecma262/#sec-reflect-@@tostringtag

setToStringTag(global$1.Reflect, 'Reflect', true);

var charAt$7 = functionUncurryThis(''.charAt);
var FORCED = fails(function () {
  // eslint-disable-next-line es-x/no-array-string-prototype-at -- safe
  return 'ð ®·'.at(-2) !== '\uD842';
}); // `String.prototype.at` method
// https://github.com/tc39/proposal-relative-indexing-method

_export({
  target: 'String',
  proto: true,
  forced: FORCED
}, {
  at: function at(index) {
    var S = toString(requireObjectCoercible(this));
    var len = S.length;
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return k < 0 || k >= len ? undefined : charAt$7(S, k);
  }
});

var ITERATOR$5 = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS$1 = false; // `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object

var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;
/* eslint-disable es-x/no-array-prototype-keys -- safe */

if ([].keys) {
  arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;else {
    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails(function () {
  var test = {}; // FF44- legacy iterators case

  return IteratorPrototype$2[ITERATOR$5].call(test) !== test;
});
if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {}; // `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator

if (!isCallable(IteratorPrototype$2[ITERATOR$5])) {
  redefine(IteratorPrototype$2, ITERATOR$5, function () {
    return this;
  });
}

var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$2,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};

var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;

var returnThis$1 = function () {
  return this;
};

var createIteratorConstructor = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, {
    next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next)
  });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
  iterators[TO_STRING_TAG] = returnThis$1;
  return IteratorConstructor;
};

var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp

var isRegexp = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
};

// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags


var regexpFlags = function () {
  var that = anObject(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

var RegExpPrototype$2 = RegExp.prototype;

var regexpGetFlags = function (R) {
  var flags = R.flags;
  return flags === undefined && !('flags' in RegExpPrototype$2) && !hasOwnProperty_1(R, 'flags') && objectIsPrototypeOf(RegExpPrototype$2, R) ? functionCall(regexpFlags, R) : flags;
};

var charAt$6 = functionUncurryThis(''.charAt);
var charCodeAt$1 = functionUncurryThis(''.charCodeAt);
var stringSlice$6 = functionUncurryThis(''.slice);

var createMethod$1 = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt$1(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt$6(S, position) : first : CONVERT_TO_STRING ? stringSlice$6(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

var stringMultibyte = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod$1(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod$1(true)
};

var charAt$5 = stringMultibyte.charAt; // `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex

var advanceStringIndex = function (S, index, unicode) {
  return index + (unicode ? charAt$5(S, index).length : 1);
};

var $RegExp$2 = global$1.RegExp;
var UNSUPPORTED_Y$1 = fails(function () {
  var re = $RegExp$2('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
}); // UC Browser bug
// https://github.com/zloirock/core-js/issues/1008

var MISSED_STICKY = UNSUPPORTED_Y$1 || fails(function () {
  return !$RegExp$2('a', 'y').sticky;
});
var BROKEN_CARET = UNSUPPORTED_Y$1 || fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp$2('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});
var regexpStickyHelpers = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y$1
};

var $RegExp$1 = global$1.RegExp;
var regexpUnsupportedDotAll = fails(function () {
  var re = $RegExp$1('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});

var $RegExp = global$1.RegExp;
var regexpUnsupportedNcg = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' || 'b'.replace(re, '$<a>c') !== 'bc';
});

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */

/* eslint-disable regexp/no-useless-quantifier -- testing */


var getInternalState$4 = internalState.get;
var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt$4 = functionUncurryThis(''.charAt);
var indexOf$1 = functionUncurryThis(''.indexOf);
var replace$4 = functionUncurryThis(''.replace);
var stringSlice$5 = functionUncurryThis(''.slice);

var UPDATES_LAST_INDEX_WRONG = function () {
  var re1 = /a/;
  var re2 = /b*/g;
  functionCall(nativeExec, re1, 'a');
  functionCall(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
}();

var UNSUPPORTED_Y = regexpStickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || regexpUnsupportedDotAll || regexpUnsupportedNcg;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState$4(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = functionCall(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = functionCall(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace$4(flags, 'y', '');

      if (indexOf$1(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice$5(str, re.lastIndex); // Support anchored sticky behavior.

      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$4(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      } // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.


      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }

    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
    match = functionCall(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice$5(match.input, charsAdded);
        match[0] = stringSlice$5(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }

    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      functionCall(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = objectCreate(null);

      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

var regexpExec = patchedExec;

var TypeError$9 = global$1.TypeError; // `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec

var regexpExecAbstract = function (R, S) {
  var exec = R.exec;

  if (isCallable(exec)) {
    var result = functionCall(exec, R, S);
    if (result !== null) anObject(result);
    return result;
  }

  if (classofRaw(R) === 'RegExp') return functionCall(regexpExec, R, S);
  throw TypeError$9('RegExp#exec called on incompatible receiver');
};

/* eslint-disable es-x/no-string-prototype-matchall -- safe */


var MATCH_ALL = wellKnownSymbol('matchAll');
var REGEXP_STRING = 'RegExp String';
var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
var setInternalState$5 = internalState.set;
var getInternalState$3 = internalState.getterFor(REGEXP_STRING_ITERATOR);
var RegExpPrototype$1 = RegExp.prototype;
var TypeError$8 = global$1.TypeError;
var stringIndexOf$2 = functionUncurryThis(''.indexOf);
var un$MatchAll = functionUncurryThis(''.matchAll);
var WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails(function () {
  un$MatchAll('a', /./);
});
var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {
  setInternalState$5(this, {
    type: REGEXP_STRING_ITERATOR,
    regexp: regexp,
    string: string,
    global: $global,
    unicode: fullUnicode,
    done: false
  });
}, REGEXP_STRING, function next() {
  var state = getInternalState$3(this);
  if (state.done) return {
    value: undefined,
    done: true
  };
  var R = state.regexp;
  var S = state.string;
  var match = regexpExecAbstract(R, S);
  if (match === null) return {
    value: undefined,
    done: state.done = true
  };

  if (state.global) {
    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
    return {
      value: match,
      done: false
    };
  }

  state.done = true;
  return {
    value: match,
    done: false
  };
});

var $matchAll = function (string) {
  var R = anObject(this);
  var S = toString(string);
  var C = speciesConstructor(R, RegExp);
  var flags = toString(regexpGetFlags(R));
  var matcher, $global, fullUnicode;
  matcher = new C(C === RegExp ? R.source : R, flags);
  $global = !!~stringIndexOf$2(flags, 'g');
  fullUnicode = !!~stringIndexOf$2(flags, 'u');
  matcher.lastIndex = toLength(R.lastIndex);
  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
}; // `String.prototype.matchAll` method
// https://tc39.es/ecma262/#sec-string.prototype.matchall


_export({
  target: 'String',
  proto: true,
  forced: WORKS_WITH_NON_GLOBAL_REGEX
}, {
  matchAll: function matchAll(regexp) {
    var O = requireObjectCoercible(this);
    var flags, S, matcher, rx;

    if (regexp != null) {
      if (isRegexp(regexp)) {
        flags = toString(requireObjectCoercible(regexpGetFlags(regexp)));
        if (!~stringIndexOf$2(flags, 'g')) throw TypeError$8('`.matchAll` does not allow non-global regexes');
      }

      if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);
      matcher = getMethod(regexp, MATCH_ALL);
      if (matcher === undefined && isPure && classofRaw(regexp) == 'RegExp') matcher = $matchAll;
      if (matcher) return functionCall(matcher, regexp, O);
    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);

    S = toString(O);
    rx = new RegExp(regexp, 'g');
    return rx[MATCH_ALL](S);
  }
});
MATCH_ALL in RegExpPrototype$1 || redefine(RegExpPrototype$1, MATCH_ALL, $matchAll);

// https://tc39.es/ecma262/#sec-regexp.prototype.exec


_export({
  target: 'RegExp',
  proto: true,
  forced: /./.exec !== regexpExec
}, {
  exec: regexpExec
});

var SPECIES$2 = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);
  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};

    O[SYMBOL] = function () {
      return 7;
    };

    return ''[KEY](O) != 7;
  });
  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.

      re.constructor = {};

      re.constructor[SPECIES$2] = function () {
        return re;
      };

      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () {
      execCalled = true;
      return null;
    };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
    var uncurriedNativeRegExpMethod = functionUncurryThis(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = functionUncurryThis(nativeMethod);
      var $exec = regexp.exec;

      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return {
            done: true,
            value: uncurriedNativeRegExpMethod(regexp, str, arg2)
          };
        }

        return {
          done: true,
          value: uncurriedNativeMethod(str, regexp, arg2)
        };
      }

      return {
        done: false
      };
    });
    redefine(String.prototype, KEY, methods[0]);
    redefine(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};

var floor$5 = Math.floor;
var charAt$3 = functionUncurryThis(''.charAt);
var replace$3 = functionUncurryThis(''.replace);
var stringSlice$4 = functionUncurryThis(''.slice);
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g; // `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution

var getSubstitution = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }

  return replace$3(replacement, symbols, function (match, ch) {
    var capture;

    switch (charAt$3(ch, 0)) {
      case '$':
        return '$';

      case '&':
        return matched;

      case '`':
        return stringSlice$4(str, 0, position);

      case "'":
        return stringSlice$4(str, tailPos);

      case '<':
        capture = namedCaptures[stringSlice$4(ch, 1, -1)];
        break;

      default:
        // \d\d?
        var n = +ch;
        if (n === 0) return match;

        if (n > m) {
          var f = floor$5(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? charAt$3(ch, 1) : captures[f - 1] + charAt$3(ch, 1);
          return match;
        }

        capture = captures[n - 1];
    }

    return capture === undefined ? '' : capture;
  });
};

var REPLACE$1 = wellKnownSymbol('replace');
var max$2 = Math.max;
var min = Math.min;
var concat$2 = functionUncurryThis([].concat);
var push$5 = functionUncurryThis([].push);
var stringIndexOf$1 = functionUncurryThis(''.indexOf);
var stringSlice$3 = functionUncurryThis(''.slice);

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
}; // IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0


var REPLACE_KEEPS_$0 = function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
}(); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string


var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
  if (/./[REPLACE$1]) {
    return /./[REPLACE$1]('a', '$0') === '';
  }

  return false;
}();

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var re = /./;

  re.exec = function () {
    var result = [];
    result.groups = {
      a: '7'
    };
    return result;
  }; // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive


  return ''.replace(re, '$<a>') !== '7';
}); // @@replace logic

fixRegexpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
  return [// `String.prototype.replace` method
  // https://tc39.es/ecma262/#sec-string.prototype.replace
  function replace(searchValue, replaceValue) {
    var O = requireObjectCoercible(this);
    var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE$1);
    return replacer ? functionCall(replacer, searchValue, O, replaceValue) : functionCall(nativeReplace, toString(O), searchValue, replaceValue);
  }, // `RegExp.prototype[@@replace]` method
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
  function (string, replaceValue) {
    var rx = anObject(this);
    var S = toString(string);

    if (typeof replaceValue == 'string' && stringIndexOf$1(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf$1(replaceValue, '$<') === -1) {
      var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
      if (res.done) return res.value;
    }

    var functionalReplace = isCallable(replaceValue);
    if (!functionalReplace) replaceValue = toString(replaceValue);
    var global = rx.global;

    if (global) {
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
    }

    var results = [];

    while (true) {
      var result = regexpExecAbstract(rx, S);
      if (result === null) break;
      push$5(results, result);
      if (!global) break;
      var matchStr = toString(result[0]);
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
    }

    var accumulatedResult = '';
    var nextSourcePosition = 0;

    for (var i = 0; i < results.length; i++) {
      result = results[i];
      var matched = toString(result[0]);
      var position = max$2(min(toIntegerOrInfinity(result.index), S.length), 0);
      var captures = []; // NOTE: This is equivalent to
      //   captures = result.slice(1).map(maybeToString)
      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

      for (var j = 1; j < result.length; j++) push$5(captures, maybeToString(result[j]));

      var namedCaptures = result.groups;

      if (functionalReplace) {
        var replacerArgs = concat$2([matched], captures, position, S);
        if (namedCaptures !== undefined) push$5(replacerArgs, namedCaptures);
        var replacement = toString(functionApply(replaceValue, undefined, replacerArgs));
      } else {
        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
      }

      if (position >= nextSourcePosition) {
        accumulatedResult += stringSlice$3(S, nextSourcePosition, position) + replacement;
        nextSourcePosition = position + matched.length;
      }
    }

    return accumulatedResult + stringSlice$3(S, nextSourcePosition);
  }];
}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

var REPLACE = wellKnownSymbol('replace');
var TypeError$7 = global$1.TypeError;
var indexOf = functionUncurryThis(''.indexOf);
functionUncurryThis(''.replace);
var stringSlice$2 = functionUncurryThis(''.slice);
var max$1 = Math.max;

var stringIndexOf = function (string, searchValue, fromIndex) {
  if (fromIndex > string.length) return -1;
  if (searchValue === '') return fromIndex;
  return indexOf(string, searchValue, fromIndex);
}; // `String.prototype.replaceAll` method
// https://tc39.es/ecma262/#sec-string.prototype.replaceall


_export({
  target: 'String',
  proto: true
}, {
  replaceAll: function replaceAll(searchValue, replaceValue) {
    var O = requireObjectCoercible(this);
    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
    var position = 0;
    var endOfLastMatch = 0;
    var result = '';

    if (searchValue != null) {
      IS_REG_EXP = isRegexp(searchValue);

      if (IS_REG_EXP) {
        flags = toString(requireObjectCoercible(regexpGetFlags(searchValue)));
        if (!~indexOf(flags, 'g')) throw TypeError$7('`.replaceAll` does not allow non-global regexes');
      }

      replacer = getMethod(searchValue, REPLACE);

      if (replacer) {
        return functionCall(replacer, searchValue, O, replaceValue);
      }
    }

    string = toString(O);
    searchString = toString(searchValue);
    functionalReplace = isCallable(replaceValue);
    if (!functionalReplace) replaceValue = toString(replaceValue);
    searchLength = searchString.length;
    advanceBy = max$1(1, searchLength);
    position = stringIndexOf(string, searchString, 0);

    while (position !== -1) {
      replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);
      result += stringSlice$2(string, endOfLastMatch, position) + replacement;
      endOfLastMatch = position + searchLength;
      position = stringIndexOf(string, searchString, position + advanceBy);
    }

    if (endOfLastMatch < string.length) {
      result += stringSlice$2(string, endOfLastMatch);
    }

    return result;
  }
});

var ITERATOR$4 = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return {
        done: !!called++
      };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };

  iteratorWithReturn[ITERATOR$4] = function () {
    return this;
  }; // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing


  Array.from(iteratorWithReturn, function () {
    throw 2;
  });
} catch (error) {
  /* empty */
}

var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;

  try {
    var object = {};

    object[ITERATOR$4] = function () {
      return {
        next: function () {
          return {
            done: ITERATION_SUPPORT = true
          };
        }
      };
    };

    exec(object);
  } catch (error) {
    /* empty */
  }

  return ITERATION_SUPPORT;
};

// eslint-disable-next-line es-x/no-typed-arrays -- safe
var arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

var defineProperty$4 = objectDefineProperty.f;
var Int8Array$2 = global$1.Int8Array;
var Int8ArrayPrototype$1 = Int8Array$2 && Int8Array$2.prototype;
var Uint8ClampedArray$1 = global$1.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;
var TypedArray = Int8Array$2 && objectGetPrototypeOf(Int8Array$2);
var TypedArrayPrototype = Int8ArrayPrototype$1 && objectGetPrototypeOf(Int8ArrayPrototype$1);
var ObjectPrototype$1 = Object.prototype;
var TypeError$6 = global$1.TypeError;
var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
var TYPED_ARRAY_CONSTRUCTOR = uid('TYPED_ARRAY_CONSTRUCTOR'); // Fixing native typed arrays in Opera Presto crashes the browser, see #595

var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferNative && !!objectSetPrototypeOf && classof(global$1.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQUIRED = false;
var NAME$1, Constructor, Prototype;
var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};
var BigIntArrayConstructorsList = {
  BigInt64Array: 8,
  BigUint64Array: 8
};

var isView = function isView(it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return klass === 'DataView' || hasOwnProperty_1(TypedArrayConstructorsList, klass) || hasOwnProperty_1(BigIntArrayConstructorsList, klass);
};

var isTypedArray$1 = function (it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return hasOwnProperty_1(TypedArrayConstructorsList, klass) || hasOwnProperty_1(BigIntArrayConstructorsList, klass);
};

var aTypedArray$3 = function (it) {
  if (isTypedArray$1(it)) return it;
  throw TypeError$6('Target is not a typed array');
};

var aTypedArrayConstructor$2 = function (C) {
  if (isCallable(C) && (!objectSetPrototypeOf || objectIsPrototypeOf(TypedArray, C))) return C;
  throw TypeError$6(tryToString(C) + ' is not a typed array constructor');
};

var exportTypedArrayMethod$3 = function (KEY, property, forced, options) {
  if (!descriptors) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global$1[ARRAY];
    if (TypedArrayConstructor && hasOwnProperty_1(TypedArrayConstructor.prototype, KEY)) try {
      delete TypedArrayConstructor.prototype[KEY];
    } catch (error) {
      // old WebKit bug - some methods are non-configurable
      try {
        TypedArrayConstructor.prototype[KEY] = property;
      } catch (error2) {
        /* empty */
      }
    }
  }

  if (!TypedArrayPrototype[KEY] || forced) {
    redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$1 && Int8ArrayPrototype$1[KEY] || property, options);
  }
};

var exportTypedArrayStaticMethod$2 = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!descriptors) return;

  if (objectSetPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global$1[ARRAY];
      if (TypedArrayConstructor && hasOwnProperty_1(TypedArrayConstructor, KEY)) try {
        delete TypedArrayConstructor[KEY];
      } catch (error) {
        /* empty */
      }
    }

    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$1 && TypedArray[KEY] || property);
      } catch (error) {
        /* empty */
      }
    } else return;
  }

  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global$1[ARRAY];

    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      redefine(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME$1 in TypedArrayConstructorsList) {
  Constructor = global$1[NAME$1];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR, Constructor);else NATIVE_ARRAY_BUFFER_VIEWS$1 = false;
}

for (NAME$1 in BigIntArrayConstructorsList) {
  Constructor = global$1[NAME$1];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR, Constructor);
} // WebKit bug - typed arrays constructors prototype is Object.prototype


if (!NATIVE_ARRAY_BUFFER_VIEWS$1 || !isCallable(TypedArray) || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow -- safe
  TypedArray = function TypedArray() {
    throw TypeError$6('Incorrect invocation');
  };

  if (NATIVE_ARRAY_BUFFER_VIEWS$1) for (NAME$1 in TypedArrayConstructorsList) {
    if (global$1[NAME$1]) objectSetPrototypeOf(global$1[NAME$1], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS$1 || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$1) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS$1) for (NAME$1 in TypedArrayConstructorsList) {
    if (global$1[NAME$1]) objectSetPrototypeOf(global$1[NAME$1].prototype, TypedArrayPrototype);
  }
} // WebKit bug - one more object in Uint8ClampedArray prototype chain


if (NATIVE_ARRAY_BUFFER_VIEWS$1 && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (descriptors && !hasOwnProperty_1(TypedArrayPrototype, TO_STRING_TAG$1)) {
  TYPED_ARRAY_TAG_REQUIRED = true;
  defineProperty$4(TypedArrayPrototype, TO_STRING_TAG$1, {
    get: function () {
      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
    }
  });

  for (NAME$1 in TypedArrayConstructorsList) if (global$1[NAME$1]) {
    createNonEnumerableProperty(global$1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
  }
}

var arrayBufferViewCore = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$1,
  TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray$3,
  aTypedArrayConstructor: aTypedArrayConstructor$2,
  exportTypedArrayMethod: exportTypedArrayMethod$3,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod$2,
  isView: isView,
  isTypedArray: isTypedArray$1,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};

/* eslint-disable no-new -- required for testing */
var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var ArrayBuffer$1 = global$1.ArrayBuffer;
var Int8Array$1 = global$1.Int8Array;
var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array$1(1);
}) || !fails(function () {
  new Int8Array$1(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array$1();
  new Int8Array$1(null);
  new Int8Array$1(1.5);
  new Int8Array$1(iterable);
}, true) || fails(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array$1(new ArrayBuffer$1(2), 1, undefined).length !== 1;
});

var redefineAll = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);

  return target;
};

var TypeError$5 = global$1.TypeError;

var anInstance = function (it, Prototype) {
  if (objectIsPrototypeOf(Prototype, it)) return it;
  throw TypeError$5('Incorrect invocation');
};

var RangeError$7 = global$1.RangeError; // `ToIndex` abstract operation
// https://tc39.es/ecma262/#sec-toindex

var toIndex = function (it) {
  if (it === undefined) return 0;
  var number = toIntegerOrInfinity(it);
  var length = toLength(number);
  if (number !== length) throw RangeError$7('Wrong length or index');
  return length;
};

var Array$5 = global$1.Array;
var abs = Math.abs;
var pow$1 = Math.pow;
var floor$4 = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

var pack = function (number, mantissaLength, bytes) {
  var buffer = Array$5(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow$1(2, -24) - pow$1(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number); // eslint-disable-next-line no-self-compare -- NaN check

  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare -- NaN check
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor$4(log(number) / LN2);
    c = pow$1(2, -exponent);

    if (number * c < 1) {
      exponent--;
      c *= 2;
    }

    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow$1(2, 1 - eBias);
    }

    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }

    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow$1(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow$1(2, eBias - 1) * pow$1(2, mantissaLength);
      exponent = 0;
    }
  }

  while (mantissaLength >= 8) {
    buffer[index++] = mantissa & 255;
    mantissa /= 256;
    mantissaLength -= 8;
  }

  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;

  while (exponentLength > 0) {
    buffer[index++] = exponent & 255;
    exponent /= 256;
    exponentLength -= 8;
  }

  buffer[--index] |= sign * 128;
  return buffer;
};

var unpack = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;

  while (nBits > 0) {
    exponent = exponent * 256 + buffer[index--];
    nBits -= 8;
  }

  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;

  while (nBits > 0) {
    mantissa = mantissa * 256 + buffer[index--];
    nBits -= 8;
  }

  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow$1(2, mantissaLength);
    exponent = exponent - eBias;
  }

  return (sign ? -1 : 1) * mantissa * pow$1(2, exponent - mantissaLength);
};

var ieee754 = {
  pack: pack,
  unpack: unpack
};

// https://tc39.es/ecma262/#sec-array.prototype.fill


var arrayFill = function fill(value
/* , start = 0, end = @length */
) {
  var O = toObject(this);
  var length = lengthOfArrayLike(O);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

  while (endPos > index) O[index++] = value;

  return O;
};

var createProperty = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
};

var Array$4 = global$1.Array;
var max = Math.max;

var arraySliceSimple = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = Array$4(max(fin - k, 0));

  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);

  result.length = n;
  return result;
};

var getOwnPropertyNames = objectGetOwnPropertyNames.f;
var defineProperty$3 = objectDefineProperty.f;
var PROPER_FUNCTION_NAME$1 = functionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME$1 = functionName.CONFIGURABLE;
var getInternalState$2 = internalState.get;
var setInternalState$4 = internalState.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global$1[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var ArrayBufferPrototype = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
var $DataView = global$1[DATA_VIEW];
var DataViewPrototype = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var Array$3 = global$1.Array;
var RangeError$6 = global$1.RangeError;
var fill = functionUncurryThis(arrayFill);
var reverse = functionUncurryThis([].reverse);
var packIEEE754 = ieee754.pack;
var unpackIEEE754 = ieee754.unpack;

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter = function (Constructor, key) {
  defineProperty$3(Constructor[PROTOTYPE], key, {
    get: function () {
      return getInternalState$2(this)[key];
    }
  });
};

var get$2 = function (view, count, index, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState$2(view);
  if (intIndex + count > store.byteLength) throw RangeError$6(WRONG_INDEX);
  var bytes = getInternalState$2(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = arraySliceSimple(bytes, start, start + count);
  return isLittleEndian ? pack : reverse(pack);
};

var set$3 = function (view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState$2(view);
  if (intIndex + count > store.byteLength) throw RangeError$6(WRONG_INDEX);
  var bytes = getInternalState$2(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);

  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!arrayBufferNative) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, ArrayBufferPrototype);
    var byteLength = toIndex(length);
    setInternalState$4(this, {
      bytes: fill(Array$3(byteLength), 0),
      byteLength: byteLength
    });
    if (!descriptors) this.byteLength = byteLength;
  };

  ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE];

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, DataViewPrototype);
    anInstance(buffer, ArrayBufferPrototype);
    var bufferLength = getInternalState$2(buffer).byteLength;
    var offset = toIntegerOrInfinity(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError$6('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError$6(WRONG_LENGTH);
    setInternalState$4(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });

    if (!descriptors) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  DataViewPrototype = $DataView[PROTOTYPE];

  if (descriptors) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }

  redefineAll(DataViewPrototype, {
    getInt8: function getInt8(byteOffset) {
      return get$2(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get$2(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get$2(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset
    /* , littleEndian */
    ) {
      var bytes = get$2(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset
    /* , littleEndian */
    ) {
      return unpackInt32(get$2(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset
    /* , littleEndian */
    ) {
      return unpackInt32(get$2(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get$2(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset
    /* , littleEndian */
    ) {
      return unpackIEEE754(get$2(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set$3(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set$3(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value
    /* , littleEndian */
    ) {
      set$3(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value
    /* , littleEndian */
    ) {
      set$3(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value
    /* , littleEndian */
    ) {
      set$3(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value
    /* , littleEndian */
    ) {
      set$3(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value
    /* , littleEndian */
    ) {
      set$3(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value
    /* , littleEndian */
    ) {
      set$3(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME$1 && NativeArrayBuffer.name !== ARRAY_BUFFER;
  /* eslint-disable no-new -- required for testing */

  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1);
  }) || fails(function () {
    new NativeArrayBuffer();
    new NativeArrayBuffer(1.5);
    new NativeArrayBuffer(NaN);
    return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME$1;
  })) {
    /* eslint-enable no-new -- required for testing */
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, ArrayBufferPrototype);
      return new NativeArrayBuffer(toIndex(length));
    };

    $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype;

    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key$1; keys.length > j;) {
      if (!((key$1 = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty($ArrayBuffer, key$1, NativeArrayBuffer[key$1]);
      }
    }

    ArrayBufferPrototype.constructor = $ArrayBuffer;
  } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME$1) {
    createNonEnumerableProperty(NativeArrayBuffer, 'name', ARRAY_BUFFER);
  } // WebKit bug - the same parent prototype for typed arrays and data view


  if (objectSetPrototypeOf && objectGetPrototypeOf(DataViewPrototype) !== ObjectPrototype) {
    objectSetPrototypeOf(DataViewPrototype, ObjectPrototype);
  } // iOS Safari 7.x bug


  var testView = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = functionUncurryThis(DataViewPrototype.setInt8);
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll(DataViewPrototype, {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8(this, byteOffset, value << 24 >> 24);
    }
  }, {
    unsafe: true
  });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
var arrayBuffer = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};

var floor$3 = Math.floor; // `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es-x/no-number-isinteger -- safe

var isIntegralNumber = Number.isInteger || function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor$3(it) === it;
};

var RangeError$5 = global$1.RangeError;

var toPositiveInteger = function (it) {
  var result = toIntegerOrInfinity(it);
  if (result < 0) throw RangeError$5("The argument can't be less than 0");
  return result;
};

var RangeError$4 = global$1.RangeError;

var toOffset = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw RangeError$4('Wrong offset');
  return offset;
};

var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

var typedArrayFrom = function from(source
/* , mapfn, thisArg */
) {
  var C = aConstructor(this);
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator, next;

  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    O = [];

    while (!(step = functionCall(next, iterator)).done) {
      O.push(step.value);
    }
  }

  if (mapping && argumentsLength > 2) {
    mapfn = functionBindContext(mapfn, arguments[2]);
  }

  length = lengthOfArrayLike(O);
  result = new (aTypedArrayConstructor$1(C))(length);

  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }

  return result;
};

// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es-x/no-array-isarray -- safe

var isArray$3 = Array.isArray || function isArray(argument) {
  return classofRaw(argument) == 'Array';
};

var SPECIES$1 = wellKnownSymbol('species');
var Array$2 = global$1.Array; // a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate

var arraySpeciesConstructor = function (originalArray) {
  var C;

  if (isArray$3(originalArray)) {
    C = originalArray.constructor; // cross-realm fallback

    if (isConstructor(C) && (C === Array$2 || isArray$3(C.prototype))) C = undefined;else if (isObject(C)) {
      C = C[SPECIES$1];
      if (C === null) C = undefined;
    }
  }

  return C === undefined ? Array$2 : C;
};

// https://tc39.es/ecma262/#sec-arrayspeciescreate

var arraySpeciesCreate = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

var push$4 = functionUncurryThis([].push); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation

var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = indexedObject(O);
    var boundFunction = functionBindContext(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;

    for (; length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);

      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3:
            return true;
          // some

          case 5:
            return value;
          // find

          case 6:
            return index;
          // findIndex

          case 2:
            push$4(target, value);
          // filter
        } else switch (TYPE) {
          case 4:
            return false;
          // every

          case 7:
            push$4(target, value);
          // filterReject
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

var arrayIteration = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};

var SPECIES = wellKnownSymbol('species');

var setSpecies = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = objectDefineProperty.f;

  if (descriptors && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () {
        return this;
      }
    });
  }
};

var typedArrayConstructor = createCommonjsModule(function (module) {

  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
  var forEach = arrayIteration.forEach;
  var getInternalState = internalState.get;
  var setInternalState = internalState.set;
  var nativeDefineProperty = objectDefineProperty.f;
  var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
  var round = Math.round;
  var RangeError = global$1.RangeError;
  var ArrayBuffer = arrayBuffer.ArrayBuffer;
  var ArrayBufferPrototype = ArrayBuffer.prototype;
  var DataView = arrayBuffer.DataView;
  var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
  var TYPED_ARRAY_CONSTRUCTOR = arrayBufferViewCore.TYPED_ARRAY_CONSTRUCTOR;
  var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
  var TypedArray = arrayBufferViewCore.TypedArray;
  var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
  var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
  var isTypedArray = arrayBufferViewCore.isTypedArray;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var WRONG_LENGTH = 'Wrong length';

  var fromList = function (C, list) {
    aTypedArrayConstructor(C);
    var index = 0;
    var length = list.length;
    var result = new C(length);

    while (length > index) result[index] = list[index++];

    return result;
  };

  var addGetter = function (it, key) {
    nativeDefineProperty(it, key, {
      get: function () {
        return getInternalState(this)[key];
      }
    });
  };

  var isArrayBuffer = function (it) {
    var klass;
    return objectIsPrototypeOf(ArrayBufferPrototype, it) || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
  };

  var isTypedArrayIndex = function (target, key) {
    return isTypedArray(target) && !isSymbol(key) && key in target && isIntegralNumber(+key) && key >= 0;
  };

  var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
    key = toPropertyKey(key);
    return isTypedArrayIndex(target, key) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
  };

  var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
    key = toPropertyKey(key);

    if (isTypedArrayIndex(target, key) && isObject(descriptor) && hasOwnProperty_1(descriptor, 'value') && !hasOwnProperty_1(descriptor, 'get') && !hasOwnProperty_1(descriptor, 'set') // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable && (!hasOwnProperty_1(descriptor, 'writable') || descriptor.writable) && (!hasOwnProperty_1(descriptor, 'enumerable') || descriptor.enumerable)) {
      target[key] = descriptor.value;
      return target;
    }

    return nativeDefineProperty(target, key, descriptor);
  };

  if (descriptors) {
    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      objectGetOwnPropertyDescriptor.f = wrappedGetOwnPropertyDescriptor;
      objectDefineProperty.f = wrappedDefineProperty;
      addGetter(TypedArrayPrototype, 'buffer');
      addGetter(TypedArrayPrototype, 'byteOffset');
      addGetter(TypedArrayPrototype, 'byteLength');
      addGetter(TypedArrayPrototype, 'length');
    }

    _export({
      target: 'Object',
      stat: true,
      forced: !NATIVE_ARRAY_BUFFER_VIEWS
    }, {
      getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
      defineProperty: wrappedDefineProperty
    });

    module.exports = function (TYPE, wrapper, CLAMPED) {
      var BYTES = TYPE.match(/\d+$/)[0] / 8;
      var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
      var GETTER = 'get' + TYPE;
      var SETTER = 'set' + TYPE;
      var NativeTypedArrayConstructor = global$1[CONSTRUCTOR_NAME];
      var TypedArrayConstructor = NativeTypedArrayConstructor;
      var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
      var exported = {};

      var getter = function (that, index) {
        var data = getInternalState(that);
        return data.view[GETTER](index * BYTES + data.byteOffset, true);
      };

      var setter = function (that, index, value) {
        var data = getInternalState(that);
        if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
        data.view[SETTER](index * BYTES + data.byteOffset, value, true);
      };

      var addElement = function (that, index) {
        nativeDefineProperty(that, index, {
          get: function () {
            return getter(this, index);
          },
          set: function (value) {
            return setter(this, index, value);
          },
          enumerable: true
        });
      };

      if (!NATIVE_ARRAY_BUFFER_VIEWS) {
        TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
          anInstance(that, TypedArrayConstructorPrototype);
          var index = 0;
          var byteOffset = 0;
          var buffer, byteLength, length;

          if (!isObject(data)) {
            length = toIndex(data);
            byteLength = length * BYTES;
            buffer = new ArrayBuffer(byteLength);
          } else if (isArrayBuffer(data)) {
            buffer = data;
            byteOffset = toOffset(offset, BYTES);
            var $len = data.byteLength;

            if ($length === undefined) {
              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
              byteLength = $len - byteOffset;
              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
            } else {
              byteLength = toLength($length) * BYTES;
              if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
            }

            length = byteLength / BYTES;
          } else if (isTypedArray(data)) {
            return fromList(TypedArrayConstructor, data);
          } else {
            return functionCall(typedArrayFrom, TypedArrayConstructor, data);
          }

          setInternalState(that, {
            buffer: buffer,
            byteOffset: byteOffset,
            byteLength: byteLength,
            length: length,
            view: new DataView(buffer)
          });

          while (index < length) addElement(that, index++);
        });
        if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
        TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
      } else if (typedArrayConstructorsRequireWrappers) {
        TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
          anInstance(dummy, TypedArrayConstructorPrototype);
          return inheritIfRequired(function () {
            if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
            if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
            if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
            return functionCall(typedArrayFrom, TypedArrayConstructor, data);
          }(), dummy, TypedArrayConstructor);
        });
        if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
        forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
          if (!(key in TypedArrayConstructor)) {
            createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
          }
        });
        TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
      }

      if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
        createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
      }

      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR, TypedArrayConstructor);

      if (TYPED_ARRAY_TAG) {
        createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
      }

      exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
      _export({
        global: true,
        forced: TypedArrayConstructor != NativeTypedArrayConstructor,
        sham: !NATIVE_ARRAY_BUFFER_VIEWS
      }, exported);

      if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
        createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
      }

      if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
        createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
      }

      setSpecies(CONSTRUCTOR_NAME);
    };
  } else module.exports = function () {
    /* empty */
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Float32', function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Float64', function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Int8', function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Int16', function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Int32', function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Uint8', function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Uint8', function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Uint16', function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// https://tc39.es/ecma262/#sec-typedarray-objects

typedArrayConstructor('Uint32', function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

var aTypedArray$2 = arrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod$2 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.at` method
// https://github.com/tc39/proposal-relative-indexing-method

exportTypedArrayMethod$2('at', function at(index) {
  var O = aTypedArray$2(this);
  var len = lengthOfArrayLike(O);
  var relativeIndex = toIntegerOrInfinity(index);
  var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
  return k < 0 || k >= len ? undefined : O[k];
});

var exportTypedArrayStaticMethod$1 = arrayBufferViewCore.exportTypedArrayStaticMethod; // `%TypedArray%.from` method
// https://tc39.es/ecma262/#sec-%typedarray%.from

exportTypedArrayStaticMethod$1('from', typedArrayFrom, typedArrayConstructorsRequireWrappers);

var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayStaticMethod = arrayBufferViewCore.exportTypedArrayStaticMethod; // `%TypedArray%.of` method
// https://tc39.es/ecma262/#sec-%typedarray%.of

exportTypedArrayStaticMethod('of', function
  /* ...items */
of() {
  var index = 0;
  var length = arguments.length;
  var result = new (aTypedArrayConstructor(this))(length);

  while (length > index) result[index] = arguments[index++];

  return result;
}, typedArrayConstructorsRequireWrappers);

var RangeError$3 = global$1.RangeError;
var Int8Array = global$1.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
var aTypedArray$1 = arrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod$1 = arrayBufferViewCore.exportTypedArrayMethod;
var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails(function () {
  // eslint-disable-next-line es-x/no-typed-arrays -- required for testing
  var array = new Uint8ClampedArray(2);
  functionCall($set, array, {
    length: 1,
    0: 3
  }, 1);
  return array[1] !== 3;
}); // https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other

var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS && fails(function () {
  var array = new Int8Array(2);
  array.set(1);
  array.set('2', 1);
  return array[0] !== 0 || array[1] !== 2;
}); // `%TypedArray%.prototype.set` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set

exportTypedArrayMethod$1('set', function set(arrayLike
/* , offset */
) {
  aTypedArray$1(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var src = toObject(arrayLike);
  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return functionCall($set, this, src, offset);
  var length = this.length;
  var len = lengthOfArrayLike(src);
  var index = 0;
  if (len + offset > length) throw RangeError$3('Wrong length');

  while (index < len) this[offset + index] = src[index++];
}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);

var floor$2 = Math.floor;

var mergeSort = function (array, comparefn) {
  var length = array.length;
  var middle = floor$2(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySliceSimple(array, 0, middle), comparefn), mergeSort(arraySliceSimple(array, middle), comparefn), comparefn);
};

var insertionSort = function (array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;

  while (i < length) {
    j = i;
    element = array[i];

    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }

    if (j !== i++) array[j] = element;
  }

  return array;
};

var merge = function (array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;

  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
  }

  return array;
};

var arraySort = mergeSort;

var firefox = engineUserAgent.match(/firefox\/(\d+)/i);
var engineFfVersion = !!firefox && +firefox[1];

var engineIsIeOrEdge = /MSIE|Trident/.test(engineUserAgent);

var webkit = engineUserAgent.match(/AppleWebKit\/(\d+)\./);
var engineWebkitVersion = !!webkit && +webkit[1];

var aTypedArray = arrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = arrayBufferViewCore.exportTypedArrayMethod;
var Uint16Array = global$1.Uint16Array;
var un$Sort = Uint16Array && functionUncurryThis(Uint16Array.prototype.sort); // WebKit

var ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails(function () {
  un$Sort(new Uint16Array(2), null);
}) && fails(function () {
  un$Sort(new Uint16Array(2), {});
}));
var STABLE_SORT = !!un$Sort && !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (engineV8Version) return engineV8Version < 74;
  if (engineFfVersion) return engineFfVersion < 67;
  if (engineIsIeOrEdge) return true;
  if (engineWebkitVersion) return engineWebkitVersion < 602;
  var array = new Uint16Array(516);
  var expected = Array(516);
  var index, mod;

  for (index = 0; index < 516; index++) {
    mod = index % 4;
    array[index] = 515 - index;
    expected[index] = index - 2 * mod + 3;
  }

  un$Sort(array, function (a, b) {
    return (a / 4 | 0) - (b / 4 | 0);
  });

  for (index = 0; index < 516; index++) {
    if (array[index] !== expected[index]) return true;
  }
});

var getSortCompare = function (comparefn) {
  return function (x, y) {
    if (comparefn !== undefined) return +comparefn(x, y) || 0; // eslint-disable-next-line no-self-compare -- NaN check

    if (y !== y) return -1; // eslint-disable-next-line no-self-compare -- NaN check

    if (x !== x) return 1;
    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
    return x > y;
  };
}; // `%TypedArray%.prototype.sort` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort


exportTypedArrayMethod('sort', function sort(comparefn) {
  if (comparefn !== undefined) aCallable(comparefn);
  if (STABLE_SORT) return un$Sort(this, comparefn);
  return arraySort(aTypedArray(this), getSortCompare(comparefn));
}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

var classList$1 = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList$1 && classList$1.constructor && classList$1.constructor.prototype;
var domTokenListPrototype = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

var PROPER_FUNCTION_NAME = functionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
var IteratorPrototype = iteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = iteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$3 = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () {
  return this;
};

var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

    switch (KIND) {
      case KEYS:
        return function keys() {
          return new IteratorConstructor(this, KIND);
        };

      case VALUES:
        return function values() {
          return new IteratorConstructor(this, KIND);
        };

      case ENTRIES:
        return function entries() {
          return new IteratorConstructor(this, KIND);
        };
    }

    return function () {
      return new IteratorConstructor(this);
    };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$3] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY; // fix native

  if (anyNativeIterator) {
    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));

    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (objectSetPrototypeOf) {
          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR$3])) {
          redefine(CurrentIteratorPrototype, ITERATOR$3, returnThis);
        }
      } // Set @@toStringTag to native iterators


      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
    }
  } // fix Array.prototype.{ values, @@iterator }.name in V8 / FF


  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;

      defaultIterator = function values() {
        return functionCall(nativeIterator, this);
      };
    }
  } // export additional methods


  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else _export({
      target: NAME,
      proto: true,
      forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
    }, methods);
  } // define iterator


  if (IterablePrototype[ITERATOR$3] !== defaultIterator) {
    redefine(IterablePrototype, ITERATOR$3, defaultIterator, {
      name: DEFAULT
    });
  }

  iterators[NAME] = defaultIterator;
  return methods;
};

var defineProperty$2 = objectDefineProperty.f;
var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState$3 = internalState.set;
var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator

var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState$3(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated),
    // target
    index: 0,
    // next index
    kind: kind // kind

  }); // `%ArrayIteratorPrototype%.next` method
  // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState$1(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;

  if (!target || index >= target.length) {
    state.target = undefined;
    return {
      value: undefined,
      done: true
    };
  }

  if (kind == 'keys') return {
    value: index,
    done: false
  };
  if (kind == 'values') return {
    value: target[index],
    done: false
  };
  return {
    value: [index, target[index]],
    done: false
  };
}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject

var values = iterators.Arguments = iterators.Array; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries'); // V8 ~ Chrome 45- bug

if (descriptors && values.name !== 'values') try {
  defineProperty$2(values, 'name', {
    value: 'values'
  });
} catch (error) {
  /* empty */
}

var ITERATOR$2 = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = es_array_iterator.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR$2] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR$2, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR$2] = ArrayValues;
    }

    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }

    if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in domIterables) {
  handlePrototype(global$1[COLLECTION_NAME] && global$1[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(domTokenListPrototype, 'DOMTokenList');

var domExceptionConstants = {
  IndexSizeError: {
    s: 'INDEX_SIZE_ERR',
    c: 1,
    m: 1
  },
  DOMStringSizeError: {
    s: 'DOMSTRING_SIZE_ERR',
    c: 2,
    m: 0
  },
  HierarchyRequestError: {
    s: 'HIERARCHY_REQUEST_ERR',
    c: 3,
    m: 1
  },
  WrongDocumentError: {
    s: 'WRONG_DOCUMENT_ERR',
    c: 4,
    m: 1
  },
  InvalidCharacterError: {
    s: 'INVALID_CHARACTER_ERR',
    c: 5,
    m: 1
  },
  NoDataAllowedError: {
    s: 'NO_DATA_ALLOWED_ERR',
    c: 6,
    m: 0
  },
  NoModificationAllowedError: {
    s: 'NO_MODIFICATION_ALLOWED_ERR',
    c: 7,
    m: 1
  },
  NotFoundError: {
    s: 'NOT_FOUND_ERR',
    c: 8,
    m: 1
  },
  NotSupportedError: {
    s: 'NOT_SUPPORTED_ERR',
    c: 9,
    m: 1
  },
  InUseAttributeError: {
    s: 'INUSE_ATTRIBUTE_ERR',
    c: 10,
    m: 1
  },
  InvalidStateError: {
    s: 'INVALID_STATE_ERR',
    c: 11,
    m: 1
  },
  SyntaxError: {
    s: 'SYNTAX_ERR',
    c: 12,
    m: 1
  },
  InvalidModificationError: {
    s: 'INVALID_MODIFICATION_ERR',
    c: 13,
    m: 1
  },
  NamespaceError: {
    s: 'NAMESPACE_ERR',
    c: 14,
    m: 1
  },
  InvalidAccessError: {
    s: 'INVALID_ACCESS_ERR',
    c: 15,
    m: 1
  },
  ValidationError: {
    s: 'VALIDATION_ERR',
    c: 16,
    m: 0
  },
  TypeMismatchError: {
    s: 'TYPE_MISMATCH_ERR',
    c: 17,
    m: 1
  },
  SecurityError: {
    s: 'SECURITY_ERR',
    c: 18,
    m: 1
  },
  NetworkError: {
    s: 'NETWORK_ERR',
    c: 19,
    m: 1
  },
  AbortError: {
    s: 'ABORT_ERR',
    c: 20,
    m: 1
  },
  URLMismatchError: {
    s: 'URL_MISMATCH_ERR',
    c: 21,
    m: 1
  },
  QuotaExceededError: {
    s: 'QUOTA_EXCEEDED_ERR',
    c: 22,
    m: 1
  },
  TimeoutError: {
    s: 'TIMEOUT_ERR',
    c: 23,
    m: 1
  },
  InvalidNodeTypeError: {
    s: 'INVALID_NODE_TYPE_ERR',
    c: 24,
    m: 1
  },
  DataCloneError: {
    s: 'DATA_CLONE_ERR',
    c: 25,
    m: 1
  }
};

var defineProperty$1 = objectDefineProperty.f;
var DOM_EXCEPTION = 'DOMException';
var Error$2 = getBuiltIn('Error');
var NativeDOMException = getBuiltIn(DOM_EXCEPTION);

var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var that = new NativeDOMException(message, name);
  var error = Error$2(message);
  error.name = DOM_EXCEPTION;
  defineProperty$1(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  inheritIfRequired(that, this, $DOMException);
  return that;
};

var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;
var ERROR_HAS_STACK = ('stack' in Error$2(DOM_EXCEPTION));
var DOM_EXCEPTION_HAS_STACK = ('stack' in new NativeDOMException(1, 2));
var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK; // `DOMException` constructor patch for `.stack` where it's required
// https://webidl.spec.whatwg.org/#es-DOMException-specialness

_export({
  global: true,
  forced: FORCED_CONSTRUCTOR
}, {
  // TODO: fix export logic
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});
var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
  {
    defineProperty$1(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));
  }

  for (var key in domExceptionConstants) if (hasOwnProperty_1(domExceptionConstants, key)) {
    var constant$2 = domExceptionConstants[key];
    var constantName = constant$2.s;

    if (!hasOwnProperty_1(PolyfilledDOMException, constantName)) {
      defineProperty$1(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant$2.c));
    }
  }
}

var arraySlice = functionUncurryThis([].slice);

var TypeError$4 = global$1.TypeError;

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError$4('Not enough arguments');
  return passed;
};

var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(engineUserAgent);

var engineIsNode = classofRaw(global$1.process) == 'process';

var set$2 = global$1.setImmediate;
var clear = global$1.clearImmediate;
var process = global$1.process;
var Dispatch$1 = global$1.Dispatch;
var Function$1 = global$1.Function;
var MessageChannel = global$1.MessageChannel;
var String$1 = global$1.String;
var counter$1 = 0;
var queue$1 = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var location, defer, channel, port;

try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  location = global$1.location;
} catch (error) {
  /* empty */
}

var run = function (id) {
  if (hasOwnProperty_1(queue$1, id)) {
    var fn = queue$1[id];
    delete queue$1[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global$1.postMessage(String$1(id), location.protocol + '//' + location.host);
}; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


if (!set$2 || !clear) {
  set$2 = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function$1(handler);
    var args = arraySlice(arguments, 1);

    queue$1[++counter$1] = function () {
      functionApply(fn, undefined, args);
    };

    defer(counter$1);
    return counter$1;
  };

  clear = function clearImmediate(id) {
    delete queue$1[id];
  }; // Node.js 0.8-


  if (engineIsNode) {
    defer = function (id) {
      process.nextTick(runner(id));
    }; // Sphere (JS game engine) Dispatch API

  } else if (Dispatch$1 && Dispatch$1.now) {
    defer = function (id) {
      Dispatch$1.now(runner(id));
    }; // Browsers with MessageChannel, includes WebWorkers
    // except iOS - https://github.com/zloirock/core-js/issues/624

  } else if (MessageChannel && !engineIsIos) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = functionBindContext(port.postMessage, port); // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global$1.addEventListener && isCallable(global$1.postMessage) && !global$1.importScripts && location && location.protocol !== 'file:' && !fails(post)) {
    defer = post;
    global$1.addEventListener('message', listener, false); // IE8-
  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
    defer = function (id) {
      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    }; // Rest old browsers

  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

var task = {
  set: set$2,
  clear: clear
};

var clearImmediate = task.clear; // `clearImmediate` method
// http://w3c.github.io/setImmediate/#si-clearImmediate

_export({
  global: true,
  bind: true,
  enumerable: true,
  forced: global$1.clearImmediate !== clearImmediate
}, {
  clearImmediate: clearImmediate
});

var setImmediate$1 = task.set; // `setImmediate` method
// http://w3c.github.io/setImmediate/#si-setImmediate

_export({
  global: true,
  bind: true,
  enumerable: true,
  forced: global$1.setImmediate !== setImmediate$1
}, {
  setImmediate: setImmediate$1
});

var Object$1 = global$1.Object;
var Date$1 = global$1.Date;
var Error$1 = global$1.Error;
var EvalError = global$1.EvalError;
var RangeError$2 = global$1.RangeError;
var ReferenceError = global$1.ReferenceError;
var SyntaxError = global$1.SyntaxError;
var TypeError$3 = global$1.TypeError;
var URIError = global$1.URIError;
var PerformanceMark = global$1.PerformanceMark;
var WebAssembly = global$1.WebAssembly;
var CompileError = WebAssembly && WebAssembly.CompileError || Error$1;
var LinkError = WebAssembly && WebAssembly.LinkError || Error$1;
var RuntimeError = WebAssembly && WebAssembly.RuntimeError || Error$1;
var DOMException = getBuiltIn('DOMException');
var Set$1 = getBuiltIn('Set');
var Map$1 = getBuiltIn('Map');
var MapPrototype = Map$1.prototype;
var mapHas = functionUncurryThis(MapPrototype.has);
var mapGet = functionUncurryThis(MapPrototype.get);
var mapSet = functionUncurryThis(MapPrototype.set);
var setAdd = functionUncurryThis(Set$1.prototype.add);
var objectKeys = getBuiltIn('Object', 'keys');
var push$3 = functionUncurryThis([].push);
var booleanValueOf = functionUncurryThis(true.valueOf);
var numberValueOf = functionUncurryThis(1.0.valueOf);
var stringValueOf = functionUncurryThis(''.valueOf);
var getTime = functionUncurryThis(Date$1.prototype.getTime);
var PERFORMANCE_MARK = uid('structuredClone');
var DATA_CLONE_ERROR = 'DataCloneError';
var TRANSFERRING = 'Transferring';

var checkBasicSemantic = function (structuredCloneImplementation) {
  return !fails(function () {
    var set1 = new global$1.Set([7]);
    var set2 = structuredCloneImplementation(set1);
    var number = structuredCloneImplementation(Object$1(7));
    return set2 == set1 || !set2.has(7) || typeof number != 'object' || number != 7;
  }) && structuredCloneImplementation;
}; // https://github.com/whatwg/html/pull/5749


var checkNewErrorsSemantic = function (structuredCloneImplementation) {
  return !fails(function () {
    var test = structuredCloneImplementation(new global$1.AggregateError([1], PERFORMANCE_MARK, {
      cause: 3
    }));
    return test.name != 'AggregateError' || test.errors[0] != 1 || test.message != PERFORMANCE_MARK || test.cause != 3;
  }) && structuredCloneImplementation;
}; // FF94+, Safari TP134+, Chrome Canary 98+, NodeJS 17.0+, Deno 1.13+
// current FF and Safari implementations can't clone errors
// https://bugzilla.mozilla.org/show_bug.cgi?id=1556604
// no one of current implementations supports new (html/5749) error cloning semantic


var nativeStructuredClone = global$1.structuredClone;
var FORCED_REPLACEMENT = !checkNewErrorsSemantic(nativeStructuredClone); // Chrome 82+, Safari 14.1+, Deno 1.11+
// Chrome 78-81 implementation swaps `.name` and `.message` of cloned `DOMException`
// Safari 14.1 implementation doesn't clone some `RegExp` flags, so requires a workaround
// current Safari implementation can't clone errors
// Deno 1.2-1.10 implementations too naive
// NodeJS 16.0+ does not have `PerformanceMark` constructor, structured cloning implementation
//   from `performance.mark` is too naive and can't clone, for example, `RegExp` or some boxed primitives
//   https://github.com/nodejs/node/issues/40840
// no one of current implementations supports new (html/5749) error cloning semantic

var structuredCloneFromMark = !nativeStructuredClone && checkBasicSemantic(function (value) {
  return new PerformanceMark(PERFORMANCE_MARK, {
    detail: value
  }).detail;
});
var nativeRestrictedStructuredClone = checkBasicSemantic(nativeStructuredClone) || structuredCloneFromMark;

var throwUncloneable = function (type) {
  throw new DOMException('Uncloneable type: ' + type, DATA_CLONE_ERROR);
};

var throwUnpolyfillable = function (type, kind) {
  throw new DOMException((kind || 'Cloning') + ' of ' + type + ' cannot be properly polyfilled in this engine', DATA_CLONE_ERROR);
};

var structuredCloneInternal = function (value, map) {
  if (isSymbol(value)) throwUncloneable('Symbol');
  if (!isObject(value)) return value; // effectively preserves circular references

  if (map) {
    if (mapHas(map, value)) return mapGet(map, value);
  } else map = new Map$1();

  var type = classof(value);
  var deep = false;
  var C, name, cloned, dataTransfer, i, length, keys, key, source, target;

  switch (type) {
    case 'Array':
      cloned = [];
      deep = true;
      break;

    case 'Object':
      cloned = {};
      deep = true;
      break;

    case 'Map':
      cloned = new Map$1();
      deep = true;
      break;

    case 'Set':
      cloned = new Set$1();
      deep = true;
      break;

    case 'RegExp':
      // in this block because of a Safari 14.1 bug
      // old FF does not clone regexes passed to the constructor, so get the source and flags directly
      cloned = new RegExp(value.source, regexpGetFlags(value));
      break;

    case 'Error':
      name = value.name;

      switch (name) {
        case 'AggregateError':
          cloned = getBuiltIn('AggregateError')([]);
          break;

        case 'EvalError':
          cloned = EvalError();
          break;

        case 'RangeError':
          cloned = RangeError$2();
          break;

        case 'ReferenceError':
          cloned = ReferenceError();
          break;

        case 'SyntaxError':
          cloned = SyntaxError();
          break;

        case 'TypeError':
          cloned = TypeError$3();
          break;

        case 'URIError':
          cloned = URIError();
          break;

        case 'CompileError':
          cloned = CompileError();
          break;

        case 'LinkError':
          cloned = LinkError();
          break;

        case 'RuntimeError':
          cloned = RuntimeError();
          break;

        default:
          cloned = Error$1();
      }

      deep = true;
      break;

    case 'DOMException':
      cloned = new DOMException(value.message, value.name);
      deep = true;
      break;

    case 'DataView':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'BigInt64Array':
    case 'BigUint64Array':
      C = global$1[type]; // in some old engines like Safari 9, typeof C is 'object'
      // on Uint8ClampedArray or some other constructors

      if (!isObject(C)) throwUnpolyfillable(type);
      cloned = new C( // this is safe, since arraybuffer cannot have circular references
      structuredCloneInternal(value.buffer, map), value.byteOffset, type === 'DataView' ? value.byteLength : value.length);
      break;

    case 'DOMQuad':
      try {
        cloned = new DOMQuad(structuredCloneInternal(value.p1, map), structuredCloneInternal(value.p2, map), structuredCloneInternal(value.p3, map), structuredCloneInternal(value.p4, map));
      } catch (error) {
        if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else throwUnpolyfillable(type);
      }

      break;

    case 'FileList':
      C = global$1.DataTransfer;

      if (isConstructor(C)) {
        dataTransfer = new C();

        for (i = 0, length = lengthOfArrayLike(value); i < length; i++) {
          dataTransfer.items.add(structuredCloneInternal(value[i], map));
        }

        cloned = dataTransfer.files;
      } else if (nativeRestrictedStructuredClone) {
        cloned = nativeRestrictedStructuredClone(value);
      } else throwUnpolyfillable(type);

      break;

    case 'ImageData':
      // Safari 9 ImageData is a constructor, but typeof ImageData is 'object'
      try {
        cloned = new ImageData(structuredCloneInternal(value.data, map), value.width, value.height, {
          colorSpace: value.colorSpace
        });
      } catch (error) {
        if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else throwUnpolyfillable(type);
      }

      break;

    default:
      if (nativeRestrictedStructuredClone) {
        cloned = nativeRestrictedStructuredClone(value);
      } else switch (type) {
        case 'BigInt':
          // can be a 3rd party polyfill
          cloned = Object$1(value.valueOf());
          break;

        case 'Boolean':
          cloned = Object$1(booleanValueOf(value));
          break;

        case 'Number':
          cloned = Object$1(numberValueOf(value));
          break;

        case 'String':
          cloned = Object$1(stringValueOf(value));
          break;

        case 'Date':
          cloned = new Date$1(getTime(value));
          break;

        case 'ArrayBuffer':
          C = global$1.DataView; // `ArrayBuffer#slice` is not available in IE10
          // `ArrayBuffer#slice` and `DataView` are not available in old FF

          if (!C && typeof value.slice != 'function') throwUnpolyfillable(type); // detached buffers throws in `DataView` and `.slice`

          try {
            if (typeof value.slice == 'function') {
              cloned = value.slice(0);
            } else {
              length = value.byteLength;
              cloned = new ArrayBuffer(length);
              source = new C(value);
              target = new C(cloned);

              for (i = 0; i < length; i++) {
                target.setUint8(i, source.getUint8(i));
              }
            }
          } catch (error) {
            throw new DOMException('ArrayBuffer is detached', DATA_CLONE_ERROR);
          }

          break;

        case 'SharedArrayBuffer':
          // SharedArrayBuffer should use shared memory, we can't polyfill it, so return the original
          cloned = value;
          break;

        case 'Blob':
          try {
            cloned = value.slice(0, value.size, value.type);
          } catch (error) {
            throwUnpolyfillable(type);
          }

          break;

        case 'DOMPoint':
        case 'DOMPointReadOnly':
          C = global$1[type];

          try {
            cloned = C.fromPoint ? C.fromPoint(value) : new C(value.x, value.y, value.z, value.w);
          } catch (error) {
            throwUnpolyfillable(type);
          }

          break;

        case 'DOMRect':
        case 'DOMRectReadOnly':
          C = global$1[type];

          try {
            cloned = C.fromRect ? C.fromRect(value) : new C(value.x, value.y, value.width, value.height);
          } catch (error) {
            throwUnpolyfillable(type);
          }

          break;

        case 'DOMMatrix':
        case 'DOMMatrixReadOnly':
          C = global$1[type];

          try {
            cloned = C.fromMatrix ? C.fromMatrix(value) : new C(value);
          } catch (error) {
            throwUnpolyfillable(type);
          }

          break;

        case 'AudioData':
        case 'VideoFrame':
          if (!isCallable(value.clone)) throwUnpolyfillable(type);

          try {
            cloned = value.clone();
          } catch (error) {
            throwUncloneable(type);
          }

          break;

        case 'File':
          try {
            cloned = new File([value], value.name, value);
          } catch (error) {
            throwUnpolyfillable(type);
          }

          break;

        case 'CryptoKey':
        case 'GPUCompilationMessage':
        case 'GPUCompilationInfo':
        case 'ImageBitmap':
        case 'RTCCertificate':
        case 'WebAssembly.Module':
          throwUnpolyfillable(type);
        // break omitted

        default:
          throwUncloneable(type);
      }

  }

  mapSet(map, value, cloned);
  if (deep) switch (type) {
    case 'Array':
    case 'Object':
      keys = objectKeys(value);

      for (i = 0, length = lengthOfArrayLike(keys); i < length; i++) {
        key = keys[i];
        createProperty(cloned, key, structuredCloneInternal(value[key], map));
      }

      break;

    case 'Map':
      value.forEach(function (v, k) {
        mapSet(cloned, structuredCloneInternal(k, map), structuredCloneInternal(v, map));
      });
      break;

    case 'Set':
      value.forEach(function (v) {
        setAdd(cloned, structuredCloneInternal(v, map));
      });
      break;

    case 'Error':
      createNonEnumerableProperty(cloned, 'message', structuredCloneInternal(value.message, map));

      if (hasOwnProperty_1(value, 'cause')) {
        createNonEnumerableProperty(cloned, 'cause', structuredCloneInternal(value.cause, map));
      }

      if (name == 'AggregateError') {
        cloned.errors = structuredCloneInternal(value.errors, map);
      }

    // break omitted

    case 'DOMException':
      if (errorStackInstallable) {
        createNonEnumerableProperty(cloned, 'stack', structuredCloneInternal(value.stack, map));
      }

  }
  return cloned;
};

var PROPER_TRANSFER = nativeStructuredClone && !fails(function () {
  var buffer = new ArrayBuffer(8);
  var clone = nativeStructuredClone(buffer, {
    transfer: [buffer]
  });
  return buffer.byteLength != 0 || clone.byteLength != 8;
});

var tryToTransfer = function (rawTransfer, map) {
  if (!isObject(rawTransfer)) throw TypeError$3('Transfer option cannot be converted to a sequence');
  var transfer = [];
  iterate(rawTransfer, function (value) {
    push$3(transfer, anObject(value));
  });
  var i = 0;
  var length = lengthOfArrayLike(transfer);
  var value, type, C, transferredArray, transferred, canvas, context;

  if (PROPER_TRANSFER) {
    transferredArray = nativeStructuredClone(transfer, {
      transfer: transfer
    });

    while (i < length) mapSet(map, transfer[i], transferredArray[i++]);
  } else while (i < length) {
    value = transfer[i++];
    if (mapHas(map, value)) throw new DOMException('Duplicate transferable', DATA_CLONE_ERROR);
    type = classof(value);

    switch (type) {
      case 'ImageBitmap':
        C = global$1.OffscreenCanvas;
        if (!isConstructor(C)) throwUnpolyfillable(type, TRANSFERRING);

        try {
          canvas = new C(value.width, value.height);
          context = canvas.getContext('bitmaprenderer');
          context.transferFromImageBitmap(value);
          transferred = canvas.transferToImageBitmap();
        } catch (error) {
          /* empty */
        }

        break;

      case 'AudioData':
      case 'VideoFrame':
        if (!isCallable(value.clone) || !isCallable(value.close)) throwUnpolyfillable(type, TRANSFERRING);

        try {
          transferred = value.clone();
          value.close();
        } catch (error) {
          /* empty */
        }

        break;

      case 'ArrayBuffer':
      case 'MessagePort':
      case 'OffscreenCanvas':
      case 'ReadableStream':
      case 'TransformStream':
      case 'WritableStream':
        throwUnpolyfillable(type, TRANSFERRING);
    }

    if (transferred === undefined) throw new DOMException('This object cannot be transferred: ' + type, DATA_CLONE_ERROR);
    mapSet(map, value, transferred);
  }
};

_export({
  global: true,
  enumerable: true,
  sham: !PROPER_TRANSFER,
  forced: FORCED_REPLACEMENT
}, {
  structuredClone: function structuredClone(value
  /* , { transfer } */
  ) {
    var options = validateArgumentsLength(arguments.length, 1) > 1 && arguments[1] != null ? anObject(arguments[1]) : undefined;
    var transfer = options ? options.transfer : undefined;
    var map;

    if (transfer !== undefined) {
      map = new Map$1();
      tryToTransfer(transfer, map);
    }

    return structuredCloneInternal(value, map);
  }
});

var charAt$2 = stringMultibyte.charAt;
var STRING_ITERATOR = 'String Iterator';
var setInternalState$2 = internalState.set;
var getInternalState = internalState.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator

defineIterator(String, 'String', function (iterated) {
  setInternalState$2(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  }); // `%StringIteratorPrototype%.next` method
  // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return {
    value: undefined,
    done: true
  };
  point = charAt$2(string, index);
  state.index += point.length;
  return {
    value: point,
    done: false
  };
});

var ITERATOR$1 = wellKnownSymbol('iterator');
var nativeUrl = !fails(function () {
  // eslint-disable-next-line unicorn/relative-url-style -- required for testing
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return isPure && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR$1] // throws in Edge
  || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' // not punycoded in Edge
  || new URL('http://ÑÐµÑÑ').host !== 'xn--e1aybc' // not escaped in Chrome 62-
  || new URL('http://a#Ð±').hash !== '#%D0%B1' // fails in Chrome 66-
  || result !== 'a1c3' // throws in Safari
  || new URL('http://x', undefined).host !== 'x';
});

var $assign = Object.assign; // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing

var defineProperty = Object.defineProperty;
var concat$1 = functionUncurryThis([].concat); // `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign

var objectAssign = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (descriptors && $assign({
    b: 1
  }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), {
    b: 2
  })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

  var A = {};
  var B = {}; // eslint-disable-next-line es-x/no-symbol -- safe

  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) {
    B[chr] = chr;
  });
  return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
  var propertyIsEnumerable = objectPropertyIsEnumerable.f;

  while (argumentsLength > index) {
    var S = indexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat$1(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
    var length = keys.length;
    var j = 0;
    var key;

    while (length > j) {
      key = keys[j++];
      if (!descriptors || functionCall(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  }

  return T;
} : $assign;

var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};

var Array$1 = global$1.Array; // `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from

var arrayFrom = function from(arrayLike
/* , mapfn = undefined, thisArg = undefined */
) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value; // if the target is not iterable or it's an array with the default iterator - use a simple case

  if (iteratorMethod && !(this == Array$1 && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];

    for (; !(step = functionCall(next, iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = lengthOfArrayLike(O);
    result = IS_CONSTRUCTOR ? new this(length) : Array$1(length);

    for (; length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }

  result.length = index;
  return result;
};

var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80

var delimiter = '-'; // '\x2D'

var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars

var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var RangeError$1 = global$1.RangeError;
var exec$1 = functionUncurryThis(regexSeparators.exec);
var floor$1 = Math.floor;
var fromCharCode = String.fromCharCode;
var charCodeAt = functionUncurryThis(''.charCodeAt);
var join$2 = functionUncurryThis([].join);
var push$2 = functionUncurryThis([].push);
var replace$2 = functionUncurryThis(''.replace);
var split$2 = functionUncurryThis(''.split);
var toLowerCase$1 = functionUncurryThis(''.toLowerCase);
/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */

var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;

  while (counter < length) {
    var value = charCodeAt(string, counter++);

    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = charCodeAt(string, counter++);

      if ((extra & 0xFC00) == 0xDC00) {
        // Low surrogate.
        push$2(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        push$2(output, value);
        counter--;
      }
    } else {
      push$2(output, value);
    }
  }

  return output;
};
/**
 * Converts a digit/integer into a basic code point.
 */


var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};
/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */


var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor$1(delta / damp) : delta >> 1;
  delta += floor$1(delta / numPoints);

  while (delta > baseMinusTMin * tMax >> 1) {
    delta = floor$1(delta / baseMinusTMin);
    k += base;
  }

  return floor$1(k + (baseMinusTMin + 1) * delta / (delta + skew));
};
/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */


var encode = function (input) {
  var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

  input = ucs2decode(input); // Cache the length.

  var inputLength = input.length; // Initialize the state.

  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue; // Handle the basic code points.

  for (i = 0; i < input.length; i++) {
    currentValue = input[i];

    if (currentValue < 0x80) {
      push$2(output, fromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.

  var handledCPCount = basicLength; // number of code points that have been handled;
  // Finish the basic string with a delimiter unless it's empty.

  if (basicLength) {
    push$2(output, delimiter);
  } // Main encoding loop:


  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];

      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.


    var handledCPCountPlusOne = handledCPCount + 1;

    if (m - n > floor$1((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError$1(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];

      if (currentValue < n && ++delta > maxInt) {
        throw RangeError$1(OVERFLOW_ERROR);
      }

      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        var k = base;

        while (true) {
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          push$2(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor$1(qMinusT / baseMinusT);
          k += base;
        }

        push$2(output, fromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        handledCPCount++;
      }
    }

    delta++;
    n++;
  }

  return join$2(output, '');
};

var stringPunycodeToAscii = function (input) {
  var encoded = [];
  var labels = split$2(replace$2(toLowerCase$1(input), regexSeparators, '\u002E'), '.');
  var i, label;

  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    push$2(encoded, exec$1(regexNonASCII, label) ? 'xn--' + encode(label) : label);
  }

  return join$2(encoded, '.');
};

var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState$1 = internalState.set;
var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR); // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe

var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Avoid NodeJS experimental warning

var safeGetBuiltIn = function (name) {
  if (!descriptors) return global$1[name];
  var descriptor = getOwnPropertyDescriptor(global$1, name);
  return descriptor && descriptor.value;
};

var nativeFetch = safeGetBuiltIn('fetch');
var NativeRequest = safeGetBuiltIn('Request');
var Headers = safeGetBuiltIn('Headers');
var RequestPrototype = NativeRequest && NativeRequest.prototype;
var HeadersPrototype = Headers && Headers.prototype;
var RegExp$1 = global$1.RegExp;
var TypeError$2 = global$1.TypeError;
var decodeURIComponent = global$1.decodeURIComponent;
var encodeURIComponent$1 = global$1.encodeURIComponent;
var charAt$1 = functionUncurryThis(''.charAt);
var join$1 = functionUncurryThis([].join);
var push$1 = functionUncurryThis([].push);
var replace$1 = functionUncurryThis(''.replace);
var shift$1 = functionUncurryThis([].shift);
var splice = functionUncurryThis([].splice);
var split$1 = functionUncurryThis(''.split);
var stringSlice$1 = functionUncurryThis(''.slice);
var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp$1('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = replace$1(it, plus, ' ');
  var bytes = 4;

  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = replace$1(result, percentSequence(bytes--), percentDecode);
    }

    return result;
  }
};

var find$1 = /[!'()~]|%20/g;
var replacements = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replacements[match];
};

var serialize = function (it) {
  return replace$1(encodeURIComponent$1(it), find$1, replacer);
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState$1(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;

  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  }

  return step;
}, true);

var URLSearchParamsState = function (init) {
  this.entries = [];
  this.url = null;

  if (init !== undefined) {
    if (isObject(init)) this.parseObject(init);else this.parseQuery(typeof init == 'string' ? charAt$1(init, 0) === '?' ? stringSlice$1(init, 1) : init : toString(init));
  }
};

URLSearchParamsState.prototype = {
  type: URL_SEARCH_PARAMS,
  bindURL: function (url) {
    this.url = url;
    this.update();
  },
  parseObject: function (object) {
    var iteratorMethod = getIteratorMethod(object);
    var iterator, next, step, entryIterator, entryNext, first, second;

    if (iteratorMethod) {
      iterator = getIterator(object, iteratorMethod);
      next = iterator.next;

      while (!(step = functionCall(next, iterator)).done) {
        entryIterator = getIterator(anObject(step.value));
        entryNext = entryIterator.next;
        if ((first = functionCall(entryNext, entryIterator)).done || (second = functionCall(entryNext, entryIterator)).done || !functionCall(entryNext, entryIterator).done) throw TypeError$2('Expected sequence with length 2');
        push$1(this.entries, {
          key: toString(first.value),
          value: toString(second.value)
        });
      }
    } else for (var key in object) if (hasOwnProperty_1(object, key)) {
      push$1(this.entries, {
        key: key,
        value: toString(object[key])
      });
    }
  },
  parseQuery: function (query) {
    if (query) {
      var attributes = split$1(query, '&');
      var index = 0;
      var attribute, entry;

      while (index < attributes.length) {
        attribute = attributes[index++];

        if (attribute.length) {
          entry = split$1(attribute, '=');
          push$1(this.entries, {
            key: deserialize(shift$1(entry)),
            value: deserialize(join$1(entry, '='))
          });
        }
      }
    }
  },
  serialize: function () {
    var entries = this.entries;
    var result = [];
    var index = 0;
    var entry;

    while (index < entries.length) {
      entry = entries[index++];
      push$1(result, serialize(entry.key) + '=' + serialize(entry.value));
    }

    return join$1(result, '&');
  },
  update: function () {
    this.entries.length = 0;
    this.parseQuery(this.url.query);
  },
  updateURL: function () {
    if (this.url) this.url.update();
  }
}; // `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams

var URLSearchParamsConstructor = function
  /* init */
URLSearchParams() {
  anInstance(this, URLSearchParamsPrototype);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  setInternalState$1(this, new URLSearchParamsState(init));
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.append` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    push$1(state.entries, {
      key: toString(name),
      value: toString(value)
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = toString(name);
    var index = 0;

    while (index < entries.length) {
      if (entries[index].key === key) splice(entries, index, 1);else index++;
    }

    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = toString(name);
    var index = 0;

    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }

    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = toString(name);
    var result = [];
    var index = 0;

    for (; index < entries.length; index++) {
      if (entries[index].key === key) push$1(result, entries[index].value);
    }

    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = toString(name);
    var index = 0;

    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }

    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = toString(name);
    var val = toString(value);
    var index = 0;
    var entry;

    for (; index < entries.length; index++) {
      entry = entries[index];

      if (entry.key === key) {
        if (found) splice(entries, index--, 1);else {
          found = true;
          entry.value = val;
        }
      }
    }

    if (!found) push$1(entries, {
      key: key,
      value: val
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    arraySort(state.entries, function (a, b) {
      return a.key > b.key ? 1 : -1;
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback
  /* , thisArg */
  ) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = functionBindContext(callback, arguments.length > 1 ? arguments[1] : undefined);
    var index = 0;
    var entry;

    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, {
  enumerable: true
}); // `URLSearchParams.prototype[@@iterator]` method

redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, {
  name: 'entries'
}); // `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior

redefine(URLSearchParamsPrototype, 'toString', function toString() {
  return getInternalParamsState(this).serialize();
}, {
  enumerable: true
});
setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
_export({
  global: true,
  forced: !nativeUrl
}, {
  URLSearchParams: URLSearchParamsConstructor
}); // Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`

if (!nativeUrl && isCallable(Headers)) {
  var headersHas = functionUncurryThis(HeadersPrototype.has);
  var headersSet = functionUncurryThis(HeadersPrototype.set);

  var wrapRequestOptions = function (init) {
    if (isObject(init)) {
      var body = init.body;
      var headers;

      if (classof(body) === URL_SEARCH_PARAMS) {
        headers = init.headers ? new Headers(init.headers) : new Headers();

        if (!headersHas(headers, 'content-type')) {
          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }

        return objectCreate(init, {
          body: createPropertyDescriptor(0, toString(body)),
          headers: createPropertyDescriptor(0, headers)
        });
      }
    }

    return init;
  };

  if (isCallable(nativeFetch)) {
    _export({
      global: true,
      enumerable: true,
      noTargetGet: true,
      forced: true
    }, {
      fetch: function fetch(input
      /* , init */
      ) {
        return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
      }
    });
  }

  if (isCallable(NativeRequest)) {
    var RequestConstructor = function Request(input
    /* , init */
    ) {
      anInstance(this, RequestPrototype);
      return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
    };

    RequestPrototype.constructor = RequestConstructor;
    RequestConstructor.prototype = RequestPrototype;
    _export({
      global: true,
      forced: true,
      noTargetGet: true
    }, {
      Request: RequestConstructor
    });
  }
}

var web_urlSearchParams_constructor = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};

var defineProperties = objectDefineProperties.f;
var codeAt = stringMultibyte.codeAt;
var setInternalState = internalState.set;
var getInternalURLState = internalState.getterFor('URL');
var URLSearchParams$1 = web_urlSearchParams_constructor.URLSearchParams;
var getInternalSearchParamsState = web_urlSearchParams_constructor.getState;
var NativeURL = global$1.URL;
var TypeError$1 = global$1.TypeError;
var parseInt$1 = global$1.parseInt;
var floor = Math.floor;
var pow = Math.pow;
var charAt = functionUncurryThis(''.charAt);
var exec = functionUncurryThis(/./.exec);
var join = functionUncurryThis([].join);
var numberToString = functionUncurryThis(1.0.toString);
var pop = functionUncurryThis([].pop);
var push = functionUncurryThis([].push);
var replace = functionUncurryThis(''.replace);
var shift = functionUncurryThis([].shift);
var split = functionUncurryThis(''.split);
var stringSlice = functionUncurryThis(''.slice);
var toLowerCase = functionUncurryThis(''.toLowerCase);
var unshift = functionUncurryThis([].unshift);
var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';
var ALPHA = /[a-z]/i; // eslint-disable-next-line regexp/no-obscure-range -- safe

var ALPHANUMERIC = /[\d+-.a-z]/i;
var DIGIT = /\d/;
var HEX_START = /^0x/i;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\da-f]+$/i;
/* eslint-disable regexp/no-control-character -- safe */

var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
var TAB_AND_NEW_LINE = /[\t\n\r]/g;
/* eslint-enable regexp/no-control-character -- safe */

var EOF; // https://url.spec.whatwg.org/#ipv4-number-parser

var parseIPv4 = function (input) {
  var parts = split(input, '.');
  var partsLength, numbers, index, part, radix, number, ipv4;

  if (parts.length && parts[parts.length - 1] == '') {
    parts.length--;
  }

  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];

  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;

    if (part.length > 1 && charAt(part, 0) == '0') {
      radix = exec(HEX_START, part) ? 16 : 8;
      part = stringSlice(part, radix == 8 ? 1 : 2);
    }

    if (part === '') {
      number = 0;
    } else {
      if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
      number = parseInt$1(part, radix);
    }

    push(numbers, number);
  }

  for (index = 0; index < partsLength; index++) {
    number = numbers[index];

    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }

  ipv4 = pop(numbers);

  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }

  return ipv4;
}; // https://url.spec.whatwg.org/#concept-ipv6-parser
// eslint-disable-next-line max-statements -- TODO


var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var chr = function () {
    return charAt(input, pointer);
  };

  if (chr() == ':') {
    if (charAt(input, 1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }

  while (chr()) {
    if (pieceIndex == 8) return;

    if (chr() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }

    value = length = 0;

    while (length < 4 && exec(HEX, chr())) {
      value = value * 16 + parseInt$1(chr(), 16);
      pointer++;
      length++;
    }

    if (chr() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;

      while (chr()) {
        ipv4Piece = null;

        if (numbersSeen > 0) {
          if (chr() == '.' && numbersSeen < 4) pointer++;else return;
        }

        if (!exec(DIGIT, chr())) return;

        while (exec(DIGIT, chr())) {
          number = parseInt$1(chr(), 10);
          if (ipv4Piece === null) ipv4Piece = number;else if (ipv4Piece == 0) return;else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }

        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }

      if (numbersSeen != 4) return;
      break;
    } else if (chr() == ':') {
      pointer++;
      if (!chr()) return;
    } else if (chr()) return;

    address[pieceIndex++] = value;
  }

  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;

    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;

  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;

  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }

      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }

  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }

  return maxIndex;
}; // https://url.spec.whatwg.org/#host-serializing


var serializeHost = function (host) {
  var result, index, compress, ignore0; // ipv4

  if (typeof host == 'number') {
    result = [];

    for (index = 0; index < 4; index++) {
      unshift(result, host % 256);
      host = floor(host / 256);
    }

    return join(result, '.'); // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);

    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;

      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += numberToString(host[index], 16);
        if (index < 7) result += ':';
      }
    }

    return '[' + result + ']';
  }

  return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
  ' ': 1,
  '"': 1,
  '<': 1,
  '>': 1,
  '`': 1
});
var pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
  '#': 1,
  '?': 1,
  '{': 1,
  '}': 1
});
var userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
  '/': 1,
  ':': 1,
  ';': 1,
  '=': 1,
  '@': 1,
  '[': 1,
  '\\': 1,
  ']': 1,
  '^': 1,
  '|': 1
});

var percentEncode = function (chr, set) {
  var code = codeAt(chr, 0);
  return code > 0x20 && code < 0x7F && !hasOwnProperty_1(set, chr) ? chr : encodeURIComponent(chr);
}; // https://url.spec.whatwg.org/#special-scheme


var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
}; // https://url.spec.whatwg.org/#windows-drive-letter

var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ':' || !normalized && second == '|');
}; // https://url.spec.whatwg.org/#start-with-a-windows-drive-letter


var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || (third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#');
}; // https://url.spec.whatwg.org/#single-dot-path-segment


var isSingleDot = function (segment) {
  return segment === '.' || toLowerCase(segment) === '%2e';
}; // https://url.spec.whatwg.org/#double-dot-path-segment


var isDoubleDot = function (segment) {
  segment = toLowerCase(segment);
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
}; // States:


var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

var URLState = function (url, isBase, base) {
  var urlString = toString(url);
  var baseState, failure, searchParams;

  if (isBase) {
    failure = this.parse(urlString);
    if (failure) throw TypeError$1(failure);
    this.searchParams = null;
  } else {
    if (base !== undefined) baseState = new URLState(base, true);
    failure = this.parse(urlString, null, baseState);
    if (failure) throw TypeError$1(failure);
    searchParams = getInternalSearchParamsState(new URLSearchParams$1());
    searchParams.bindURL(this);
    this.searchParams = searchParams;
  }
};

URLState.prototype = {
  type: 'URL',
  // https://url.spec.whatwg.org/#url-parsing
  // eslint-disable-next-line max-statements -- TODO
  parse: function (input, stateOverride, base) {
    var url = this;
    var state = stateOverride || SCHEME_START;
    var pointer = 0;
    var buffer = '';
    var seenAt = false;
    var seenBracket = false;
    var seenPasswordToken = false;
    var codePoints, chr, bufferCodePoints, failure;
    input = toString(input);

    if (!stateOverride) {
      url.scheme = '';
      url.username = '';
      url.password = '';
      url.host = null;
      url.port = null;
      url.path = [];
      url.query = null;
      url.fragment = null;
      url.cannotBeABaseURL = false;
      input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
    }

    input = replace(input, TAB_AND_NEW_LINE, '');
    codePoints = arrayFrom(input);

    while (pointer <= codePoints.length) {
      chr = codePoints[pointer];

      switch (state) {
        case SCHEME_START:
          if (chr && exec(ALPHA, chr)) {
            buffer += toLowerCase(chr);
            state = SCHEME;
          } else if (!stateOverride) {
            state = NO_SCHEME;
            continue;
          } else return INVALID_SCHEME;

          break;

        case SCHEME:
          if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
            buffer += toLowerCase(chr);
          } else if (chr == ':') {
            if (stateOverride && (url.isSpecial() != hasOwnProperty_1(specialSchemes, buffer) || buffer == 'file' && (url.includesCredentials() || url.port !== null) || url.scheme == 'file' && !url.host)) return;
            url.scheme = buffer;

            if (stateOverride) {
              if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
              return;
            }

            buffer = '';

            if (url.scheme == 'file') {
              state = FILE;
            } else if (url.isSpecial() && base && base.scheme == url.scheme) {
              state = SPECIAL_RELATIVE_OR_AUTHORITY;
            } else if (url.isSpecial()) {
              state = SPECIAL_AUTHORITY_SLASHES;
            } else if (codePoints[pointer + 1] == '/') {
              state = PATH_OR_AUTHORITY;
              pointer++;
            } else {
              url.cannotBeABaseURL = true;
              push(url.path, '');
              state = CANNOT_BE_A_BASE_URL_PATH;
            }
          } else if (!stateOverride) {
            buffer = '';
            state = NO_SCHEME;
            pointer = 0;
            continue;
          } else return INVALID_SCHEME;

          break;

        case NO_SCHEME:
          if (!base || base.cannotBeABaseURL && chr != '#') return INVALID_SCHEME;

          if (base.cannotBeABaseURL && chr == '#') {
            url.scheme = base.scheme;
            url.path = arraySliceSimple(base.path);
            url.query = base.query;
            url.fragment = '';
            url.cannotBeABaseURL = true;
            state = FRAGMENT;
            break;
          }

          state = base.scheme == 'file' ? FILE : RELATIVE;
          continue;

        case SPECIAL_RELATIVE_OR_AUTHORITY:
          if (chr == '/' && codePoints[pointer + 1] == '/') {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
            pointer++;
          } else {
            state = RELATIVE;
            continue;
          }

          break;

        case PATH_OR_AUTHORITY:
          if (chr == '/') {
            state = AUTHORITY;
            break;
          } else {
            state = PATH;
            continue;
          }

        case RELATIVE:
          url.scheme = base.scheme;

          if (chr == EOF) {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySliceSimple(base.path);
            url.query = base.query;
          } else if (chr == '/' || chr == '\\' && url.isSpecial()) {
            state = RELATIVE_SLASH;
          } else if (chr == '?') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySliceSimple(base.path);
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySliceSimple(base.path);
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySliceSimple(base.path);
            url.path.length--;
            state = PATH;
            continue;
          }

          break;

        case RELATIVE_SLASH:
          if (url.isSpecial() && (chr == '/' || chr == '\\')) {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          } else if (chr == '/') {
            state = AUTHORITY;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            state = PATH;
            continue;
          }

          break;

        case SPECIAL_AUTHORITY_SLASHES:
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
          pointer++;
          break;

        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
          if (chr != '/' && chr != '\\') {
            state = AUTHORITY;
            continue;
          }

          break;

        case AUTHORITY:
          if (chr == '@') {
            if (seenAt) buffer = '%40' + buffer;
            seenAt = true;
            bufferCodePoints = arrayFrom(buffer);

            for (var i = 0; i < bufferCodePoints.length; i++) {
              var codePoint = bufferCodePoints[i];

              if (codePoint == ':' && !seenPasswordToken) {
                seenPasswordToken = true;
                continue;
              }

              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
              if (seenPasswordToken) url.password += encodedCodePoints;else url.username += encodedCodePoints;
            }

            buffer = '';
          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
            if (seenAt && buffer == '') return INVALID_AUTHORITY;
            pointer -= arrayFrom(buffer).length + 1;
            buffer = '';
            state = HOST;
          } else buffer += chr;

          break;

        case HOST:
        case HOSTNAME:
          if (stateOverride && url.scheme == 'file') {
            state = FILE_HOST;
            continue;
          } else if (chr == ':' && !seenBracket) {
            if (buffer == '') return INVALID_HOST;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PORT;
            if (stateOverride == HOSTNAME) return;
          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial()) {
            if (url.isSpecial() && buffer == '') return INVALID_HOST;
            if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PATH_START;
            if (stateOverride) return;
            continue;
          } else {
            if (chr == '[') seenBracket = true;else if (chr == ']') seenBracket = false;
            buffer += chr;
          }

          break;

        case PORT:
          if (exec(DIGIT, chr)) {
            buffer += chr;
          } else if (chr == EOF || chr == '/' || chr == '?' || chr == '#' || chr == '\\' && url.isSpecial() || stateOverride) {
            if (buffer != '') {
              var port = parseInt$1(buffer, 10);
              if (port > 0xFFFF) return INVALID_PORT;
              url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
              buffer = '';
            }

            if (stateOverride) return;
            state = PATH_START;
            continue;
          } else return INVALID_PORT;

          break;

        case FILE:
          url.scheme = 'file';
          if (chr == '/' || chr == '\\') state = FILE_SLASH;else if (base && base.scheme == 'file') {
            if (chr == EOF) {
              url.host = base.host;
              url.path = arraySliceSimple(base.path);
              url.query = base.query;
            } else if (chr == '?') {
              url.host = base.host;
              url.path = arraySliceSimple(base.path);
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.host = base.host;
              url.path = arraySliceSimple(base.path);
              url.query = base.query;
              url.fragment = '';
              state = FRAGMENT;
            } else {
              if (!startsWithWindowsDriveLetter(join(arraySliceSimple(codePoints, pointer), ''))) {
                url.host = base.host;
                url.path = arraySliceSimple(base.path);
                url.shortenPath();
              }

              state = PATH;
              continue;
            }
          } else {
            state = PATH;
            continue;
          }
          break;

        case FILE_SLASH:
          if (chr == '/' || chr == '\\') {
            state = FILE_HOST;
            break;
          }

          if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySliceSimple(codePoints, pointer), ''))) {
            if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);else url.host = base.host;
          }

          state = PATH;
          continue;

        case FILE_HOST:
          if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
            if (!stateOverride && isWindowsDriveLetter(buffer)) {
              state = PATH;
            } else if (buffer == '') {
              url.host = '';
              if (stateOverride) return;
              state = PATH_START;
            } else {
              failure = url.parseHost(buffer);
              if (failure) return failure;
              if (url.host == 'localhost') url.host = '';
              if (stateOverride) return;
              buffer = '';
              state = PATH_START;
            }

            continue;
          } else buffer += chr;

          break;

        case PATH_START:
          if (url.isSpecial()) {
            state = PATH;
            if (chr != '/' && chr != '\\') continue;
          } else if (!stateOverride && chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            state = PATH;
            if (chr != '/') continue;
          }

          break;

        case PATH:
          if (chr == EOF || chr == '/' || chr == '\\' && url.isSpecial() || !stateOverride && (chr == '?' || chr == '#')) {
            if (isDoubleDot(buffer)) {
              url.shortenPath();

              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else if (isSingleDot(buffer)) {
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else {
              if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                if (url.host) url.host = '';
                buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
              }

              push(url.path, buffer);
            }

            buffer = '';

            if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
              while (url.path.length > 1 && url.path[0] === '') {
                shift(url.path);
              }
            }

            if (chr == '?') {
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            }
          } else {
            buffer += percentEncode(chr, pathPercentEncodeSet);
          }

          break;

        case CANNOT_BE_A_BASE_URL_PATH:
          if (chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
          }

          break;

        case QUERY:
          if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            if (chr == "'" && url.isSpecial()) url.query += '%27';else if (chr == '#') url.query += '%23';else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
          }

          break;

        case FRAGMENT:
          if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
          break;
      }

      pointer++;
    }
  },
  // https://url.spec.whatwg.org/#host-parsing
  parseHost: function (input) {
    var result, codePoints, index;

    if (charAt(input, 0) == '[') {
      if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
      result = parseIPv6(stringSlice(input, 1, -1));
      if (!result) return INVALID_HOST;
      this.host = result; // opaque host
    } else if (!this.isSpecial()) {
      if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
      result = '';
      codePoints = arrayFrom(input);

      for (index = 0; index < codePoints.length; index++) {
        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
      }

      this.host = result;
    } else {
      input = stringPunycodeToAscii(input);
      if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
      result = parseIPv4(input);
      if (result === null) return INVALID_HOST;
      this.host = result;
    }
  },
  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
  cannotHaveUsernamePasswordPort: function () {
    return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
  },
  // https://url.spec.whatwg.org/#include-credentials
  includesCredentials: function () {
    return this.username != '' || this.password != '';
  },
  // https://url.spec.whatwg.org/#is-special
  isSpecial: function () {
    return hasOwnProperty_1(specialSchemes, this.scheme);
  },
  // https://url.spec.whatwg.org/#shorten-a-urls-path
  shortenPath: function () {
    var path = this.path;
    var pathSize = path.length;

    if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
      path.length--;
    }
  },
  // https://url.spec.whatwg.org/#concept-url-serializer
  serialize: function () {
    var url = this;
    var scheme = url.scheme;
    var username = url.username;
    var password = url.password;
    var host = url.host;
    var port = url.port;
    var path = url.path;
    var query = url.query;
    var fragment = url.fragment;
    var output = scheme + ':';

    if (host !== null) {
      output += '//';

      if (url.includesCredentials()) {
        output += username + (password ? ':' + password : '') + '@';
      }

      output += serializeHost(host);
      if (port !== null) output += ':' + port;
    } else if (scheme == 'file') output += '//';

    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
    if (query !== null) output += '?' + query;
    if (fragment !== null) output += '#' + fragment;
    return output;
  },
  // https://url.spec.whatwg.org/#dom-url-href
  setHref: function (href) {
    var failure = this.parse(href);
    if (failure) throw TypeError$1(failure);
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-origin
  getOrigin: function () {
    var scheme = this.scheme;
    var port = this.port;
    if (scheme == 'blob') try {
      return new URLConstructor(scheme.path[0]).origin;
    } catch (error) {
      return 'null';
    }
    if (scheme == 'file' || !this.isSpecial()) return 'null';
    return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
  },
  // https://url.spec.whatwg.org/#dom-url-protocol
  getProtocol: function () {
    return this.scheme + ':';
  },
  setProtocol: function (protocol) {
    this.parse(toString(protocol) + ':', SCHEME_START);
  },
  // https://url.spec.whatwg.org/#dom-url-username
  getUsername: function () {
    return this.username;
  },
  setUsername: function (username) {
    var codePoints = arrayFrom(toString(username));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.username = '';

    for (var i = 0; i < codePoints.length; i++) {
      this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-password
  getPassword: function () {
    return this.password;
  },
  setPassword: function (password) {
    var codePoints = arrayFrom(toString(password));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.password = '';

    for (var i = 0; i < codePoints.length; i++) {
      this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-host
  getHost: function () {
    var host = this.host;
    var port = this.port;
    return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
  },
  setHost: function (host) {
    if (this.cannotBeABaseURL) return;
    this.parse(host, HOST);
  },
  // https://url.spec.whatwg.org/#dom-url-hostname
  getHostname: function () {
    var host = this.host;
    return host === null ? '' : serializeHost(host);
  },
  setHostname: function (hostname) {
    if (this.cannotBeABaseURL) return;
    this.parse(hostname, HOSTNAME);
  },
  // https://url.spec.whatwg.org/#dom-url-port
  getPort: function () {
    var port = this.port;
    return port === null ? '' : toString(port);
  },
  setPort: function (port) {
    if (this.cannotHaveUsernamePasswordPort()) return;
    port = toString(port);
    if (port == '') this.port = null;else this.parse(port, PORT);
  },
  // https://url.spec.whatwg.org/#dom-url-pathname
  getPathname: function () {
    var path = this.path;
    return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
  },
  setPathname: function (pathname) {
    if (this.cannotBeABaseURL) return;
    this.path = [];
    this.parse(pathname, PATH_START);
  },
  // https://url.spec.whatwg.org/#dom-url-search
  getSearch: function () {
    var query = this.query;
    return query ? '?' + query : '';
  },
  setSearch: function (search) {
    search = toString(search);

    if (search == '') {
      this.query = null;
    } else {
      if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
      this.query = '';
      this.parse(search, QUERY);
    }

    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-searchparams
  getSearchParams: function () {
    return this.searchParams.facade;
  },
  // https://url.spec.whatwg.org/#dom-url-hash
  getHash: function () {
    var fragment = this.fragment;
    return fragment ? '#' + fragment : '';
  },
  setHash: function (hash) {
    hash = toString(hash);

    if (hash == '') {
      this.fragment = null;
      return;
    }

    if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
    this.fragment = '';
    this.parse(hash, FRAGMENT);
  },
  update: function () {
    this.query = this.searchParams.serialize() || null;
  }
}; // `URL` constructor
// https://url.spec.whatwg.org/#url-class

var URLConstructor = function URL(url
/* , base */
) {
  var that = anInstance(this, URLPrototype);
  var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
  var state = setInternalState(that, new URLState(url, false, base));

  if (!descriptors) {
    that.href = state.serialize();
    that.origin = state.getOrigin();
    that.protocol = state.getProtocol();
    that.username = state.getUsername();
    that.password = state.getPassword();
    that.host = state.getHost();
    that.hostname = state.getHostname();
    that.port = state.getPort();
    that.pathname = state.getPathname();
    that.search = state.getSearch();
    that.searchParams = state.getSearchParams();
    that.hash = state.getHash();
  }
};

var URLPrototype = URLConstructor.prototype;

var accessorDescriptor = function (getter, setter) {
  return {
    get: function () {
      return getInternalURLState(this)[getter]();
    },
    set: setter && function (value) {
      return getInternalURLState(this)[setter](value);
    },
    configurable: true,
    enumerable: true
  };
};

if (descriptors) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor('serialize', 'setHref'),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor('getOrigin'),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor('getProtocol', 'setProtocol'),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor('getUsername', 'setUsername'),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor('getPassword', 'setPassword'),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor('getHost', 'setHost'),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor('getHostname', 'setHostname'),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor('getPort', 'setPort'),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor('getPathname', 'setPathname'),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor('getSearch', 'setSearch'),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor('getSearchParams'),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor('getHash', 'setHash')
  });
} // `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson


redefine(URLPrototype, 'toJSON', function toJSON() {
  return getInternalURLState(this).serialize();
}, {
  enumerable: true
}); // `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior

redefine(URLPrototype, 'toString', function toString() {
  return getInternalURLState(this).serialize();
}, {
  enumerable: true
});

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL; // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL

  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', functionBindContext(nativeCreateObjectURL, NativeURL)); // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL

  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', functionBindContext(nativeRevokeObjectURL, NativeURL));
}

setToStringTag(URLConstructor, 'URL');
_export({
  global: true,
  forced: !nativeUrl,
  sham: !descriptors
}, {
  URL: URLConstructor
});

// https://url.spec.whatwg.org/#dom-url-tojson


_export({
  target: 'URL',
  proto: true,
  enumerable: true
}, {
  toJSON: function toJSON() {
    return functionCall(URL.prototype.toString, this);
  }
});

/*!
  * Bootstrap event-handler.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
var eventHandler = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory() ;
  })(commonjsGlobal, function () {
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): util/index.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    const getjQuery = () => {
      const {
        jQuery
      } = window;

      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
        return jQuery;
      }

      return null;
    };
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): dom/event-handler.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */


    const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
    const stripNameRegex = /\..*/;
    const stripUidRegex = /::\d+$/;
    const eventRegistry = {}; // Events storage

    let uidEvent = 1;
    const customEvents = {
      mouseenter: 'mouseover',
      mouseleave: 'mouseout'
    };
    const customEventsRegex = /^(mouseenter|mouseleave)/i;
    const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
    /**
     * ------------------------------------------------------------------------
     * Private methods
     * ------------------------------------------------------------------------
     */

    function getUidEvent(element, uid) {
      return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
    }

    function getEvent(element) {
      const uid = getUidEvent(element);
      element.uidEvent = uid;
      eventRegistry[uid] = eventRegistry[uid] || {};
      return eventRegistry[uid];
    }

    function bootstrapHandler(element, fn) {
      return function handler(event) {
        event.delegateTarget = element;

        if (handler.oneOff) {
          EventHandler.off(element, event.type, fn);
        }

        return fn.apply(element, [event]);
      };
    }

    function bootstrapDelegationHandler(element, selector, fn) {
      return function handler(event) {
        const domElements = element.querySelectorAll(selector);

        for (let {
          target
        } = event; target && target !== this; target = target.parentNode) {
          for (let i = domElements.length; i--;) {
            if (domElements[i] === target) {
              event.delegateTarget = target;

              if (handler.oneOff) {
                EventHandler.off(element, event.type, selector, fn);
              }

              return fn.apply(target, [event]);
            }
          }
        } // To please ESLint


        return null;
      };
    }

    function findHandler(events, handler, delegationSelector = null) {
      const uidEventList = Object.keys(events);

      for (let i = 0, len = uidEventList.length; i < len; i++) {
        const event = events[uidEventList[i]];

        if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
          return event;
        }
      }

      return null;
    }

    function normalizeParams(originalTypeEvent, handler, delegationFn) {
      const delegation = typeof handler === 'string';
      const originalHandler = delegation ? delegationFn : handler;
      let typeEvent = getTypeEvent(originalTypeEvent);
      const isNative = nativeEvents.has(typeEvent);

      if (!isNative) {
        typeEvent = originalTypeEvent;
      }

      return [delegation, originalHandler, typeEvent];
    }

    function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }

      if (!handler) {
        handler = delegationFn;
        delegationFn = null;
      } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
      // this prevents the handler from being dispatched the same way as mouseover or mouseout does


      if (customEventsRegex.test(originalTypeEvent)) {
        const wrapFn = fn => {
          return function (event) {
            if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
              return fn.call(this, event);
            }
          };
        };

        if (delegationFn) {
          delegationFn = wrapFn(delegationFn);
        } else {
          handler = wrapFn(handler);
        }
      }

      const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
      const events = getEvent(element);
      const handlers = events[typeEvent] || (events[typeEvent] = {});
      const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

      if (previousFn) {
        previousFn.oneOff = previousFn.oneOff && oneOff;
        return;
      }

      const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
      const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
      fn.delegationSelector = delegation ? handler : null;
      fn.originalHandler = originalHandler;
      fn.oneOff = oneOff;
      fn.uidEvent = uid;
      handlers[uid] = fn;
      element.addEventListener(typeEvent, fn, delegation);
    }

    function removeHandler(element, events, typeEvent, handler, delegationSelector) {
      const fn = findHandler(events[typeEvent], handler, delegationSelector);

      if (!fn) {
        return;
      }

      element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
      delete events[typeEvent][fn.uidEvent];
    }

    function removeNamespacedHandlers(element, events, typeEvent, namespace) {
      const storeElementEvent = events[typeEvent] || {};
      Object.keys(storeElementEvent).forEach(handlerKey => {
        if (handlerKey.includes(namespace)) {
          const event = storeElementEvent[handlerKey];
          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
        }
      });
    }

    function getTypeEvent(event) {
      // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
      event = event.replace(stripNameRegex, '');
      return customEvents[event] || event;
    }

    const EventHandler = {
      on(element, event, handler, delegationFn) {
        addHandler(element, event, handler, delegationFn, false);
      },

      one(element, event, handler, delegationFn) {
        addHandler(element, event, handler, delegationFn, true);
      },

      off(element, originalTypeEvent, handler, delegationFn) {
        if (typeof originalTypeEvent !== 'string' || !element) {
          return;
        }

        const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
        const inNamespace = typeEvent !== originalTypeEvent;
        const events = getEvent(element);
        const isNamespace = originalTypeEvent.startsWith('.');

        if (typeof originalHandler !== 'undefined') {
          // Simplest case: handler is passed, remove that listener ONLY.
          if (!events || !events[typeEvent]) {
            return;
          }

          removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
          return;
        }

        if (isNamespace) {
          Object.keys(events).forEach(elementEvent => {
            removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
          });
        }

        const storeElementEvent = events[typeEvent] || {};
        Object.keys(storeElementEvent).forEach(keyHandlers => {
          const handlerKey = keyHandlers.replace(stripUidRegex, '');

          if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
            const event = storeElementEvent[keyHandlers];
            removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
          }
        });
      },

      trigger(element, event, args) {
        if (typeof event !== 'string' || !element) {
          return null;
        }

        const $ = getjQuery();
        const typeEvent = getTypeEvent(event);
        const inNamespace = event !== typeEvent;
        const isNative = nativeEvents.has(typeEvent);
        let jQueryEvent;
        let bubbles = true;
        let nativeDispatch = true;
        let defaultPrevented = false;
        let evt = null;

        if (inNamespace && $) {
          jQueryEvent = $.Event(event, args);
          $(element).trigger(jQueryEvent);
          bubbles = !jQueryEvent.isPropagationStopped();
          nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
          defaultPrevented = jQueryEvent.isDefaultPrevented();
        }

        if (isNative) {
          evt = document.createEvent('HTMLEvents');
          evt.initEvent(typeEvent, bubbles, true);
        } else {
          evt = new CustomEvent(event, {
            bubbles,
            cancelable: true
          });
        } // merge custom information in our event


        if (typeof args !== 'undefined') {
          Object.keys(args).forEach(key => {
            Object.defineProperty(evt, key, {
              get() {
                return args[key];
              }

            });
          });
        }

        if (defaultPrevented) {
          evt.preventDefault();
        }

        if (nativeDispatch) {
          element.dispatchEvent(evt);
        }

        if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
          jQueryEvent.preventDefault();
        }

        return evt;
      }

    };
    return EventHandler;
  });
});

/*!
  * Bootstrap data.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
var data = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory() ;
  })(commonjsGlobal, function () {
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): dom/data.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */

    const elementMap = new Map();
    const data = {
      set(element, key, instance) {
        if (!elementMap.has(element)) {
          elementMap.set(element, new Map());
        }

        const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
        // can be removed later when multiple key/instances are fine to be used

        if (!instanceMap.has(key) && instanceMap.size !== 0) {
          // eslint-disable-next-line no-console
          console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
          return;
        }

        instanceMap.set(key, instance);
      },

      get(element, key) {
        if (elementMap.has(element)) {
          return elementMap.get(element).get(key) || null;
        }

        return null;
      },

      remove(element, key) {
        if (!elementMap.has(element)) {
          return;
        }

        const instanceMap = elementMap.get(element);
        instanceMap.delete(key); // free up element references if there are no instances left for an element

        if (instanceMap.size === 0) {
          elementMap.delete(element);
        }
      }

    };
    return data;
  });
});

/*!
  * Bootstrap base-component.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
var baseComponent = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory(data, eventHandler) ;
  })(commonjsGlobal, function (Data, EventHandler) {

    const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {
      default: e
    };

    const Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);

    const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): util/index.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */


    const MILLISECONDS_MULTIPLIER = 1000;
    const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

    const getTransitionDurationFromElement = element => {
      if (!element) {
        return 0;
      } // Get transition-duration of the element


      let {
        transitionDuration,
        transitionDelay
      } = window.getComputedStyle(element);
      const floatTransitionDuration = Number.parseFloat(transitionDuration);
      const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      } // If multiple durations are defined, take the first


      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    };

    const triggerTransitionEnd = element => {
      element.dispatchEvent(new Event(TRANSITION_END));
    };

    const isElement = obj => {
      if (!obj || typeof obj !== 'object') {
        return false;
      }

      if (typeof obj.jquery !== 'undefined') {
        obj = obj[0];
      }

      return typeof obj.nodeType !== 'undefined';
    };

    const getElement = obj => {
      if (isElement(obj)) {
        // it's a jQuery object or a node element
        return obj.jquery ? obj[0] : obj;
      }

      if (typeof obj === 'string' && obj.length > 0) {
        return document.querySelector(obj);
      }

      return null;
    };

    const execute = callback => {
      if (typeof callback === 'function') {
        callback();
      }
    };

    const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
      if (!waitForTransition) {
        execute(callback);
        return;
      }

      const durationPadding = 5;
      const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
      let called = false;

      const handler = ({
        target
      }) => {
        if (target !== transitionElement) {
          return;
        }

        called = true;
        transitionElement.removeEventListener(TRANSITION_END, handler);
        execute(callback);
      };

      transitionElement.addEventListener(TRANSITION_END, handler);
      setTimeout(() => {
        if (!called) {
          triggerTransitionEnd(transitionElement);
        }
      }, emulatedDuration);
    };
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): base-component.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */


    const VERSION = '5.1.3';

    class BaseComponent {
      constructor(element) {
        element = getElement(element);

        if (!element) {
          return;
        }

        this._element = element;
        Data__default.default.set(this._element, this.constructor.DATA_KEY, this);
      }

      dispose() {
        Data__default.default.remove(this._element, this.constructor.DATA_KEY);
        EventHandler__default.default.off(this._element, this.constructor.EVENT_KEY);
        Object.getOwnPropertyNames(this).forEach(propertyName => {
          this[propertyName] = null;
        });
      }

      _queueCallback(callback, element, isAnimated = true) {
        executeAfterTransition(callback, element, isAnimated);
      }
      /** Static */


      static getInstance(element) {
        return Data__default.default.get(getElement(element), this.DATA_KEY);
      }

      static getOrCreateInstance(element, config = {}) {
        return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
      }

      static get VERSION() {
        return VERSION;
      }

      static get NAME() {
        throw new Error('You have to implement the static method "NAME", for each component!');
      }

      static get DATA_KEY() {
        return `bs.${this.NAME}`;
      }

      static get EVENT_KEY() {
        return `.${this.DATA_KEY}`;
      }

    }

    return BaseComponent;
  });
});

/*!
  * Bootstrap button.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory(eventHandler, baseComponent) ;
  })(commonjsGlobal, function (EventHandler, BaseComponent) {

    const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {
      default: e
    };

    const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

    const BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): util/index.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */


    const getjQuery = () => {
      const {
        jQuery
      } = window;

      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
        return jQuery;
      }

      return null;
    };

    const DOMContentLoadedCallbacks = [];

    const onDOMContentLoaded = callback => {
      if (document.readyState === 'loading') {
        // add listener on the first call when the document is in loading state
        if (!DOMContentLoadedCallbacks.length) {
          document.addEventListener('DOMContentLoaded', () => {
            DOMContentLoadedCallbacks.forEach(callback => callback());
          });
        }

        DOMContentLoadedCallbacks.push(callback);
      } else {
        callback();
      }
    };

    const defineJQueryPlugin = plugin => {
      onDOMContentLoaded(() => {
        const $ = getjQuery();
        /* istanbul ignore if */

        if ($) {
          const name = plugin.NAME;
          const JQUERY_NO_CONFLICT = $.fn[name];
          $.fn[name] = plugin.jQueryInterface;
          $.fn[name].Constructor = plugin;

          $.fn[name].noConflict = () => {
            $.fn[name] = JQUERY_NO_CONFLICT;
            return plugin.jQueryInterface;
          };
        }
      });
    };
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): button.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */


    const NAME = 'button';
    const DATA_KEY = 'bs.button';
    const EVENT_KEY = `.${DATA_KEY}`;
    const DATA_API_KEY = '.data-api';
    const CLASS_NAME_ACTIVE = 'active';
    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="button"]';
    const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    class Button extends BaseComponent__default.default {
      // Getters
      static get NAME() {
        return NAME;
      } // Public


      toggle() {
        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE));
      } // Static


      static jQueryInterface(config) {
        return this.each(function () {
          const data = Button.getOrCreateInstance(this);

          if (config === 'toggle') {
            data[config]();
          }
        });
      }

    }
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, event => {
      event.preventDefault();
      const button = event.target.closest(SELECTOR_DATA_TOGGLE);
      const data = Button.getOrCreateInstance(button);
      data.toggle();
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     * add .Button to jQuery only if jQuery is present
     */

    defineJQueryPlugin(Button);
    return Button;
  });
});

/*!
  * Bootstrap manipulator.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
var manipulator = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory() ;
  })(commonjsGlobal, function () {
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): dom/manipulator.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    function normalizeData(val) {
      if (val === 'true') {
        return true;
      }

      if (val === 'false') {
        return false;
      }

      if (val === Number(val).toString()) {
        return Number(val);
      }

      if (val === '' || val === 'null') {
        return null;
      }

      return val;
    }

    function normalizeDataKey(key) {
      return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
    }

    const Manipulator = {
      setDataAttribute(element, key, value) {
        element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
      },

      removeDataAttribute(element, key) {
        element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
      },

      getDataAttributes(element) {
        if (!element) {
          return {};
        }

        const attributes = {};
        Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {
          let pureKey = key.replace(/^bs/, '');
          pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
          attributes[pureKey] = normalizeData(element.dataset[key]);
        });
        return attributes;
      },

      getDataAttribute(element, key) {
        return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
      },

      offset(element) {
        const rect = element.getBoundingClientRect();
        return {
          top: rect.top + window.pageYOffset,
          left: rect.left + window.pageXOffset
        };
      },

      position(element) {
        return {
          top: element.offsetTop,
          left: element.offsetLeft
        };
      }

    };
    return Manipulator;
  });
});

/*!
  * Bootstrap selector-engine.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
var selectorEngine = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory() ;
  })(commonjsGlobal, function () {
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): util/index.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    const isElement = obj => {
      if (!obj || typeof obj !== 'object') {
        return false;
      }

      if (typeof obj.jquery !== 'undefined') {
        obj = obj[0];
      }

      return typeof obj.nodeType !== 'undefined';
    };

    const isVisible = element => {
      if (!isElement(element) || element.getClientRects().length === 0) {
        return false;
      }

      return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
    };

    const isDisabled = element => {
      if (!element || element.nodeType !== Node.ELEMENT_NODE) {
        return true;
      }

      if (element.classList.contains('disabled')) {
        return true;
      }

      if (typeof element.disabled !== 'undefined') {
        return element.disabled;
      }

      return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
    };
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): dom/selector-engine.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */


    const NODE_TEXT = 3;
    const SelectorEngine = {
      find(selector, element = document.documentElement) {
        return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
      },

      findOne(selector, element = document.documentElement) {
        return Element.prototype.querySelector.call(element, selector);
      },

      children(element, selector) {
        return [].concat(...element.children).filter(child => child.matches(selector));
      },

      parents(element, selector) {
        const parents = [];
        let ancestor = element.parentNode;

        while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
          if (ancestor.matches(selector)) {
            parents.push(ancestor);
          }

          ancestor = ancestor.parentNode;
        }

        return parents;
      },

      prev(element, selector) {
        let previous = element.previousElementSibling;

        while (previous) {
          if (previous.matches(selector)) {
            return [previous];
          }

          previous = previous.previousElementSibling;
        }

        return [];
      },

      next(element, selector) {
        let next = element.nextElementSibling;

        while (next) {
          if (next.matches(selector)) {
            return [next];
          }

          next = next.nextElementSibling;
        }

        return [];
      },

      focusableChildren(element) {
        const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(', ');
        return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));
      }

    };
    return SelectorEngine;
  });
});

/*!
  * Bootstrap collapse.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory(data, eventHandler, manipulator, selectorEngine, baseComponent) ;
  })(commonjsGlobal, function (Data, EventHandler, Manipulator, SelectorEngine, BaseComponent) {

    const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {
      default: e
    };

    const Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);

    const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

    const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);

    const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);

    const BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): util/index.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */


    const toType = obj => {
      if (obj === null || obj === undefined) {
        return `${obj}`;
      }

      return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
    };

    const getSelector = element => {
      let selector = element.getAttribute('data-bs-target');

      if (!selector || selector === '#') {
        let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
        // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
        // `document.querySelector` will rightfully complain it is invalid.
        // See https://github.com/twbs/bootstrap/issues/32273

        if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
          return null;
        } // Just in case some CMS puts out a full URL with the anchor appended


        if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
          hrefAttr = `#${hrefAttr.split('#')[1]}`;
        }

        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
      }

      return selector;
    };

    const getSelectorFromElement = element => {
      const selector = getSelector(element);

      if (selector) {
        return document.querySelector(selector) ? selector : null;
      }

      return null;
    };

    const getElementFromSelector = element => {
      const selector = getSelector(element);
      return selector ? document.querySelector(selector) : null;
    };

    const isElement = obj => {
      if (!obj || typeof obj !== 'object') {
        return false;
      }

      if (typeof obj.jquery !== 'undefined') {
        obj = obj[0];
      }

      return typeof obj.nodeType !== 'undefined';
    };

    const getElement = obj => {
      if (isElement(obj)) {
        // it's a jQuery object or a node element
        return obj.jquery ? obj[0] : obj;
      }

      if (typeof obj === 'string' && obj.length > 0) {
        return document.querySelector(obj);
      }

      return null;
    };

    const typeCheckConfig = (componentName, config, configTypes) => {
      Object.keys(configTypes).forEach(property => {
        const expectedTypes = configTypes[property];
        const value = config[property];
        const valueType = value && isElement(value) ? 'element' : toType(value);

        if (!new RegExp(expectedTypes).test(valueType)) {
          throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        }
      });
    };
    /**
     * Trick to restart an element's animation
     *
     * @param {HTMLElement} element
     * @return void
     *
     * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
     */


    const reflow = element => {
      // eslint-disable-next-line no-unused-expressions
      element.offsetHeight;
    };

    const getjQuery = () => {
      const {
        jQuery
      } = window;

      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
        return jQuery;
      }

      return null;
    };

    const DOMContentLoadedCallbacks = [];

    const onDOMContentLoaded = callback => {
      if (document.readyState === 'loading') {
        // add listener on the first call when the document is in loading state
        if (!DOMContentLoadedCallbacks.length) {
          document.addEventListener('DOMContentLoaded', () => {
            DOMContentLoadedCallbacks.forEach(callback => callback());
          });
        }

        DOMContentLoadedCallbacks.push(callback);
      } else {
        callback();
      }
    };

    const defineJQueryPlugin = plugin => {
      onDOMContentLoaded(() => {
        const $ = getjQuery();
        /* istanbul ignore if */

        if ($) {
          const name = plugin.NAME;
          const JQUERY_NO_CONFLICT = $.fn[name];
          $.fn[name] = plugin.jQueryInterface;
          $.fn[name].Constructor = plugin;

          $.fn[name].noConflict = () => {
            $.fn[name] = JQUERY_NO_CONFLICT;
            return plugin.jQueryInterface;
          };
        }
      });
    };
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v5.1.3): collapse.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
     * --------------------------------------------------------------------------
     */

    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */


    const NAME = 'collapse';
    const DATA_KEY = 'bs.collapse';
    const EVENT_KEY = `.${DATA_KEY}`;
    const DATA_API_KEY = '.data-api';
    const Default = {
      toggle: true,
      parent: null
    };
    const DefaultType = {
      toggle: 'boolean',
      parent: '(null|element)'
    };
    const EVENT_SHOW = `show${EVENT_KEY}`;
    const EVENT_SHOWN = `shown${EVENT_KEY}`;
    const EVENT_HIDE = `hide${EVENT_KEY}`;
    const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
    const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
    const CLASS_NAME_SHOW = 'show';
    const CLASS_NAME_COLLAPSE = 'collapse';
    const CLASS_NAME_COLLAPSING = 'collapsing';
    const CLASS_NAME_COLLAPSED = 'collapsed';
    const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
    const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
    const WIDTH = 'width';
    const HEIGHT = 'height';
    const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="collapse"]';
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

    class Collapse extends BaseComponent__default.default {
      constructor(element, config) {
        super(element);
        this._isTransitioning = false;
        this._config = this._getConfig(config);
        this._triggerArray = [];
        const toggleList = SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE);

        for (let i = 0, len = toggleList.length; i < len; i++) {
          const elem = toggleList[i];
          const selector = getSelectorFromElement(elem);
          const filterElement = SelectorEngine__default.default.find(selector).filter(foundElem => foundElem === this._element);

          if (selector !== null && filterElement.length) {
            this._selector = selector;

            this._triggerArray.push(elem);
          }
        }

        this._initializeChildren();

        if (!this._config.parent) {
          this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
        }

        if (this._config.toggle) {
          this.toggle();
        }
      } // Getters


      static get Default() {
        return Default;
      }

      static get NAME() {
        return NAME;
      } // Public


      toggle() {
        if (this._isShown()) {
          this.hide();
        } else {
          this.show();
        }
      }

      show() {
        if (this._isTransitioning || this._isShown()) {
          return;
        }

        let actives = [];
        let activesData;

        if (this._config.parent) {
          const children = SelectorEngine__default.default.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
          actives = SelectorEngine__default.default.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth
        }

        const container = SelectorEngine__default.default.findOne(this._selector);

        if (actives.length) {
          const tempActiveData = actives.find(elem => container !== elem);
          activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;

          if (activesData && activesData._isTransitioning) {
            return;
          }
        }

        const startEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW);

        if (startEvent.defaultPrevented) {
          return;
        }

        actives.forEach(elemActive => {
          if (container !== elemActive) {
            Collapse.getOrCreateInstance(elemActive, {
              toggle: false
            }).hide();
          }

          if (!activesData) {
            Data__default.default.set(elemActive, DATA_KEY, null);
          }
        });

        const dimension = this._getDimension();

        this._element.classList.remove(CLASS_NAME_COLLAPSE);

        this._element.classList.add(CLASS_NAME_COLLAPSING);

        this._element.style[dimension] = 0;

        this._addAriaAndCollapsedClass(this._triggerArray, true);

        this._isTransitioning = true;

        const complete = () => {
          this._isTransitioning = false;

          this._element.classList.remove(CLASS_NAME_COLLAPSING);

          this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

          this._element.style[dimension] = '';
          EventHandler__default.default.trigger(this._element, EVENT_SHOWN);
        };

        const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        const scrollSize = `scroll${capitalizedDimension}`;

        this._queueCallback(complete, this._element, true);

        this._element.style[dimension] = `${this._element[scrollSize]}px`;
      }

      hide() {
        if (this._isTransitioning || !this._isShown()) {
          return;
        }

        const startEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE);

        if (startEvent.defaultPrevented) {
          return;
        }

        const dimension = this._getDimension();

        this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
        reflow(this._element);

        this._element.classList.add(CLASS_NAME_COLLAPSING);

        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

        const triggerArrayLength = this._triggerArray.length;

        for (let i = 0; i < triggerArrayLength; i++) {
          const trigger = this._triggerArray[i];
          const elem = getElementFromSelector(trigger);

          if (elem && !this._isShown(elem)) {
            this._addAriaAndCollapsedClass([trigger], false);
          }
        }

        this._isTransitioning = true;

        const complete = () => {
          this._isTransitioning = false;

          this._element.classList.remove(CLASS_NAME_COLLAPSING);

          this._element.classList.add(CLASS_NAME_COLLAPSE);

          EventHandler__default.default.trigger(this._element, EVENT_HIDDEN);
        };

        this._element.style[dimension] = '';

        this._queueCallback(complete, this._element, true);
      }

      _isShown(element = this._element) {
        return element.classList.contains(CLASS_NAME_SHOW);
      } // Private


      _getConfig(config) {
        config = { ...Default,
          ...Manipulator__default.default.getDataAttributes(this._element),
          ...config
        };
        config.toggle = Boolean(config.toggle); // Coerce string values

        config.parent = getElement(config.parent);
        typeCheckConfig(NAME, config, DefaultType);
        return config;
      }

      _getDimension() {
        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
      }

      _initializeChildren() {
        if (!this._config.parent) {
          return;
        }

        const children = SelectorEngine__default.default.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
        SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {
          const selected = getElementFromSelector(element);

          if (selected) {
            this._addAriaAndCollapsedClass([element], this._isShown(selected));
          }
        });
      }

      _addAriaAndCollapsedClass(triggerArray, isOpen) {
        if (!triggerArray.length) {
          return;
        }

        triggerArray.forEach(elem => {
          if (isOpen) {
            elem.classList.remove(CLASS_NAME_COLLAPSED);
          } else {
            elem.classList.add(CLASS_NAME_COLLAPSED);
          }

          elem.setAttribute('aria-expanded', isOpen);
        });
      } // Static


      static jQueryInterface(config) {
        return this.each(function () {
          const _config = {};

          if (typeof config === 'string' && /show|hide/.test(config)) {
            _config.toggle = false;
          }

          const data = Collapse.getOrCreateInstance(this, _config);

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError(`No method named "${config}"`);
            }

            data[config]();
          }
        });
      }

    }
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
      // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
      if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
        event.preventDefault();
      }

      const selector = getSelectorFromElement(this);
      const selectorElements = SelectorEngine__default.default.find(selector);
      selectorElements.forEach(element => {
        Collapse.getOrCreateInstance(element, {
          toggle: false
        }).toggle();
      });
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     * add .Collapse to jQuery only if jQuery is present
     */

    defineJQueryPlugin(Collapse);
    return Collapse;
  });
});

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$1 = window.ShadowRoot && (void 0 === window.ShadyCSS || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype,
      e$2 = Symbol(),
      n$3 = new Map();

class s$3 {
  constructor(t, n) {
    if (this._$cssResult$ = !0, n !== e$2) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t;
  }

  get styleSheet() {
    let e = n$3.get(this.cssText);
    return t$1 && void 0 === e && (n$3.set(this.cssText, e = new CSSStyleSheet()), e.replaceSync(this.cssText)), e;
  }

  toString() {
    return this.cssText;
  }

}

const o$3 = t => new s$3("string" == typeof t ? t : t + "", e$2),
      r$2 = (t, ...n) => {
  const o = 1 === t.length ? t[0] : n.reduce((e, n, s) => e + (t => {
    if (!0 === t._$cssResult$) return t.cssText;
    if ("number" == typeof t) return t;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + t + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(n) + t[s + 1], t[0]);
  return new s$3(o, e$2);
},
      i$1 = (e, n) => {
  t$1 ? e.adoptedStyleSheets = n.map(t => t instanceof CSSStyleSheet ? t : t.styleSheet) : n.forEach(t => {
    const n = document.createElement("style"),
          s = window.litNonce;
    void 0 !== s && n.setAttribute("nonce", s), n.textContent = t.cssText, e.appendChild(n);
  });
},
      S$1 = t$1 ? t => t : t => t instanceof CSSStyleSheet ? (t => {
  let e = "";

  for (const n of t.cssRules) e += n.cssText;

  return o$3(e);
})(t) : t;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

var s$2;

const e$1 = window.trustedTypes,
      r$1 = e$1 ? e$1.emptyScript : "",
      h$1 = window.reactiveElementPolyfillSupport,
      o$2 = {
  toAttribute(t, i) {
    switch (i) {
      case Boolean:
        t = t ? r$1 : null;
        break;

      case Object:
      case Array:
        t = null == t ? t : JSON.stringify(t);
    }

    return t;
  },

  fromAttribute(t, i) {
    let s = t;

    switch (i) {
      case Boolean:
        s = null !== t;
        break;

      case Number:
        s = null === t ? null : Number(t);
        break;

      case Object:
      case Array:
        try {
          s = JSON.parse(t);
        } catch (t) {
          s = null;
        }

    }

    return s;
  }

},
      n$2 = (t, i) => i !== t && (i == i || t == t),
      l$3 = {
  attribute: !0,
  type: String,
  converter: o$2,
  reflect: !1,
  hasChanged: n$2
};

class a$1 extends HTMLElement {
  constructor() {
    super(), this._$Et = new Map(), this.isUpdatePending = !1, this.hasUpdated = !1, this._$Ei = null, this.o();
  }

  static addInitializer(t) {
    var i;
    null !== (i = this.l) && void 0 !== i || (this.l = []), this.l.push(t);
  }

  static get observedAttributes() {
    this.finalize();
    const t = [];
    return this.elementProperties.forEach((i, s) => {
      const e = this._$Eh(s, i);

      void 0 !== e && (this._$Eu.set(e, s), t.push(e));
    }), t;
  }

  static createProperty(t, i = l$3) {
    if (i.state && (i.attribute = !1), this.finalize(), this.elementProperties.set(t, i), !i.noAccessor && !this.prototype.hasOwnProperty(t)) {
      const s = "symbol" == typeof t ? Symbol() : "__" + t,
            e = this.getPropertyDescriptor(t, s, i);
      void 0 !== e && Object.defineProperty(this.prototype, t, e);
    }
  }

  static getPropertyDescriptor(t, i, s) {
    return {
      get() {
        return this[i];
      },

      set(e) {
        const r = this[t];
        this[i] = e, this.requestUpdate(t, r, s);
      },

      configurable: !0,
      enumerable: !0
    };
  }

  static getPropertyOptions(t) {
    return this.elementProperties.get(t) || l$3;
  }

  static finalize() {
    if (this.hasOwnProperty("finalized")) return !1;
    this.finalized = !0;
    const t = Object.getPrototypeOf(this);

    if (t.finalize(), this.elementProperties = new Map(t.elementProperties), this._$Eu = new Map(), this.hasOwnProperty("properties")) {
      const t = this.properties,
            i = [...Object.getOwnPropertyNames(t), ...Object.getOwnPropertySymbols(t)];

      for (const s of i) this.createProperty(s, t[s]);
    }

    return this.elementStyles = this.finalizeStyles(this.styles), !0;
  }

  static finalizeStyles(i) {
    const s = [];

    if (Array.isArray(i)) {
      const e = new Set(i.flat(1 / 0).reverse());

      for (const i of e) s.unshift(S$1(i));
    } else void 0 !== i && s.push(S$1(i));

    return s;
  }

  static _$Eh(t, i) {
    const s = i.attribute;
    return !1 === s ? void 0 : "string" == typeof s ? s : "string" == typeof t ? t.toLowerCase() : void 0;
  }

  o() {
    var t;
    this._$Ep = new Promise(t => this.enableUpdating = t), this._$AL = new Map(), this._$Em(), this.requestUpdate(), null === (t = this.constructor.l) || void 0 === t || t.forEach(t => t(this));
  }

  addController(t) {
    var i, s;
    (null !== (i = this._$Eg) && void 0 !== i ? i : this._$Eg = []).push(t), void 0 !== this.renderRoot && this.isConnected && (null === (s = t.hostConnected) || void 0 === s || s.call(t));
  }

  removeController(t) {
    var i;
    null === (i = this._$Eg) || void 0 === i || i.splice(this._$Eg.indexOf(t) >>> 0, 1);
  }

  _$Em() {
    this.constructor.elementProperties.forEach((t, i) => {
      this.hasOwnProperty(i) && (this._$Et.set(i, this[i]), delete this[i]);
    });
  }

  createRenderRoot() {
    var t;
    const s = null !== (t = this.shadowRoot) && void 0 !== t ? t : this.attachShadow(this.constructor.shadowRootOptions);
    return i$1(s, this.constructor.elementStyles), s;
  }

  connectedCallback() {
    var t;
    void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), null === (t = this._$Eg) || void 0 === t || t.forEach(t => {
      var i;
      return null === (i = t.hostConnected) || void 0 === i ? void 0 : i.call(t);
    });
  }

  enableUpdating(t) {}

  disconnectedCallback() {
    var t;
    null === (t = this._$Eg) || void 0 === t || t.forEach(t => {
      var i;
      return null === (i = t.hostDisconnected) || void 0 === i ? void 0 : i.call(t);
    });
  }

  attributeChangedCallback(t, i, s) {
    this._$AK(t, s);
  }

  _$ES(t, i, s = l$3) {
    var e, r;

    const h = this.constructor._$Eh(t, s);

    if (void 0 !== h && !0 === s.reflect) {
      const n = (null !== (r = null === (e = s.converter) || void 0 === e ? void 0 : e.toAttribute) && void 0 !== r ? r : o$2.toAttribute)(i, s.type);
      this._$Ei = t, null == n ? this.removeAttribute(h) : this.setAttribute(h, n), this._$Ei = null;
    }
  }

  _$AK(t, i) {
    var s, e, r;

    const h = this.constructor,
          n = h._$Eu.get(t);

    if (void 0 !== n && this._$Ei !== n) {
      const t = h.getPropertyOptions(n),
            l = t.converter,
            a = null !== (r = null !== (e = null === (s = l) || void 0 === s ? void 0 : s.fromAttribute) && void 0 !== e ? e : "function" == typeof l ? l : null) && void 0 !== r ? r : o$2.fromAttribute;
      this._$Ei = n, this[n] = a(i, t.type), this._$Ei = null;
    }
  }

  requestUpdate(t, i, s) {
    let e = !0;
    void 0 !== t && (((s = s || this.constructor.getPropertyOptions(t)).hasChanged || n$2)(this[t], i) ? (this._$AL.has(t) || this._$AL.set(t, i), !0 === s.reflect && this._$Ei !== t && (void 0 === this._$EC && (this._$EC = new Map()), this._$EC.set(t, s))) : e = !1), !this.isUpdatePending && e && (this._$Ep = this._$E_());
  }

  async _$E_() {
    this.isUpdatePending = !0;

    try {
      await this._$Ep;
    } catch (t) {
      Promise.reject(t);
    }

    const t = this.scheduleUpdate();
    return null != t && (await t), !this.isUpdatePending;
  }

  scheduleUpdate() {
    return this.performUpdate();
  }

  performUpdate() {
    var t;
    if (!this.isUpdatePending) return;
    this.hasUpdated, this._$Et && (this._$Et.forEach((t, i) => this[i] = t), this._$Et = void 0);
    let i = !1;
    const s = this._$AL;

    try {
      i = this.shouldUpdate(s), i ? (this.willUpdate(s), null === (t = this._$Eg) || void 0 === t || t.forEach(t => {
        var i;
        return null === (i = t.hostUpdate) || void 0 === i ? void 0 : i.call(t);
      }), this.update(s)) : this._$EU();
    } catch (t) {
      throw i = !1, this._$EU(), t;
    }

    i && this._$AE(s);
  }

  willUpdate(t) {}

  _$AE(t) {
    var i;
    null === (i = this._$Eg) || void 0 === i || i.forEach(t => {
      var i;
      return null === (i = t.hostUpdated) || void 0 === i ? void 0 : i.call(t);
    }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);
  }

  _$EU() {
    this._$AL = new Map(), this.isUpdatePending = !1;
  }

  get updateComplete() {
    return this.getUpdateComplete();
  }

  getUpdateComplete() {
    return this._$Ep;
  }

  shouldUpdate(t) {
    return !0;
  }

  update(t) {
    void 0 !== this._$EC && (this._$EC.forEach((t, i) => this._$ES(i, this[i], t)), this._$EC = void 0), this._$EU();
  }

  updated(t) {}

  firstUpdated(t) {}

}

a$1.finalized = !0, a$1.elementProperties = new Map(), a$1.elementStyles = [], a$1.shadowRootOptions = {
  mode: "open"
}, null == h$1 || h$1({
  ReactiveElement: a$1
}), (null !== (s$2 = globalThis.reactiveElementVersions) && void 0 !== s$2 ? s$2 : globalThis.reactiveElementVersions = []).push("1.3.1");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var t;

const i = globalThis.trustedTypes,
      s$1 = i ? i.createPolicy("lit-html", {
  createHTML: t => t
}) : void 0,
      e = `lit$${(Math.random() + "").slice(9)}$`,
      o$1 = "?" + e,
      n$1 = `<${o$1}>`,
      l$2 = document,
      h = (t = "") => l$2.createComment(t),
      r = t => null === t || "object" != typeof t && "function" != typeof t,
      d = Array.isArray,
      u = t => {
  var i;
  return d(t) || "function" == typeof (null === (i = t) || void 0 === i ? void 0 : i[Symbol.iterator]);
},
      c = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,
      v = /-->/g,
      a = />/g,
      f = />|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,
      _$d = /'/g,
      m = /"/g,
      g = /^(?:script|style|textarea|title)$/i,
      p = t => (i, ...s) => ({
  _$litType$: t,
  strings: i,
  values: s
}),
      $ = p(1),
      y = p(2),
      b = Symbol.for("lit-noChange"),
      w = Symbol.for("lit-nothing"),
      T = new WeakMap(),
      x = (t, i, s) => {
  var e, o;
  const n = null !== (e = null == s ? void 0 : s.renderBefore) && void 0 !== e ? e : i;
  let l = n._$litPart$;

  if (void 0 === l) {
    const t = null !== (o = null == s ? void 0 : s.renderBefore) && void 0 !== o ? o : null;
    n._$litPart$ = l = new N(i.insertBefore(h(), t), t, void 0, null != s ? s : {});
  }

  return l._$AI(t), l;
},
      A = l$2.createTreeWalker(l$2, 129, null, !1),
      C = (t, i) => {
  const o = t.length - 1,
        l = [];
  let h,
      r = 2 === i ? "<svg>" : "",
      d = c;

  for (let i = 0; i < o; i++) {
    const s = t[i];
    let o,
        u,
        p = -1,
        $ = 0;

    for (; $ < s.length && (d.lastIndex = $, u = d.exec(s), null !== u);) $ = d.lastIndex, d === c ? "!--" === u[1] ? d = v : void 0 !== u[1] ? d = a : void 0 !== u[2] ? (g.test(u[2]) && (h = RegExp("</" + u[2], "g")), d = f) : void 0 !== u[3] && (d = f) : d === f ? ">" === u[0] ? (d = null != h ? h : c, p = -1) : void 0 === u[1] ? p = -2 : (p = d.lastIndex - u[2].length, o = u[1], d = void 0 === u[3] ? f : '"' === u[3] ? m : _$d) : d === m || d === _$d ? d = f : d === v || d === a ? d = c : (d = f, h = void 0);

    const y = d === f && t[i + 1].startsWith("/>") ? " " : "";
    r += d === c ? s + n$1 : p >= 0 ? (l.push(o), s.slice(0, p) + "$lit$" + s.slice(p) + e + y) : s + e + (-2 === p ? (l.push(void 0), i) : y);
  }

  const u = r + (t[o] || "<?>") + (2 === i ? "</svg>" : "");
  if (!Array.isArray(t) || !t.hasOwnProperty("raw")) throw Error("invalid template strings array");
  return [void 0 !== s$1 ? s$1.createHTML(u) : u, l];
};

class E {
  constructor({
    strings: t,
    _$litType$: s
  }, n) {
    let l;
    this.parts = [];
    let r = 0,
        d = 0;
    const u = t.length - 1,
          c = this.parts,
          [v, a] = C(t, s);

    if (this.el = E.createElement(v, n), A.currentNode = this.el.content, 2 === s) {
      const t = this.el.content,
            i = t.firstChild;
      i.remove(), t.append(...i.childNodes);
    }

    for (; null !== (l = A.nextNode()) && c.length < u;) {
      if (1 === l.nodeType) {
        if (l.hasAttributes()) {
          const t = [];

          for (const i of l.getAttributeNames()) if (i.endsWith("$lit$") || i.startsWith(e)) {
            const s = a[d++];

            if (t.push(i), void 0 !== s) {
              const t = l.getAttribute(s.toLowerCase() + "$lit$").split(e),
                    i = /([.?@])?(.*)/.exec(s);
              c.push({
                type: 1,
                index: r,
                name: i[2],
                strings: t,
                ctor: "." === i[1] ? M : "?" === i[1] ? H : "@" === i[1] ? I : S
              });
            } else c.push({
              type: 6,
              index: r
            });
          }

          for (const i of t) l.removeAttribute(i);
        }

        if (g.test(l.tagName)) {
          const t = l.textContent.split(e),
                s = t.length - 1;

          if (s > 0) {
            l.textContent = i ? i.emptyScript : "";

            for (let i = 0; i < s; i++) l.append(t[i], h()), A.nextNode(), c.push({
              type: 2,
              index: ++r
            });

            l.append(t[s], h());
          }
        }
      } else if (8 === l.nodeType) if (l.data === o$1) c.push({
        type: 2,
        index: r
      });else {
        let t = -1;

        for (; -1 !== (t = l.data.indexOf(e, t + 1));) c.push({
          type: 7,
          index: r
        }), t += e.length - 1;
      }

      r++;
    }
  }

  static createElement(t, i) {
    const s = l$2.createElement("template");
    return s.innerHTML = t, s;
  }

}

function P(t, i, s = t, e) {
  var o, n, l, h;
  if (i === b) return i;
  let d = void 0 !== e ? null === (o = s._$Cl) || void 0 === o ? void 0 : o[e] : s._$Cu;
  const u = r(i) ? void 0 : i._$litDirective$;
  return (null == d ? void 0 : d.constructor) !== u && (null === (n = null == d ? void 0 : d._$AO) || void 0 === n || n.call(d, !1), void 0 === u ? d = void 0 : (d = new u(t), d._$AT(t, s, e)), void 0 !== e ? (null !== (l = (h = s)._$Cl) && void 0 !== l ? l : h._$Cl = [])[e] = d : s._$Cu = d), void 0 !== d && (i = P(t, d._$AS(t, i.values), d, e)), i;
}

class V {
  constructor(t, i) {
    this.v = [], this._$AN = void 0, this._$AD = t, this._$AM = i;
  }

  get parentNode() {
    return this._$AM.parentNode;
  }

  get _$AU() {
    return this._$AM._$AU;
  }

  p(t) {
    var i;
    const {
      el: {
        content: s
      },
      parts: e
    } = this._$AD,
          o = (null !== (i = null == t ? void 0 : t.creationScope) && void 0 !== i ? i : l$2).importNode(s, !0);
    A.currentNode = o;
    let n = A.nextNode(),
        h = 0,
        r = 0,
        d = e[0];

    for (; void 0 !== d;) {
      if (h === d.index) {
        let i;
        2 === d.type ? i = new N(n, n.nextSibling, this, t) : 1 === d.type ? i = new d.ctor(n, d.name, d.strings, this, t) : 6 === d.type && (i = new L(n, this, t)), this.v.push(i), d = e[++r];
      }

      h !== (null == d ? void 0 : d.index) && (n = A.nextNode(), h++);
    }

    return o;
  }

  m(t) {
    let i = 0;

    for (const s of this.v) void 0 !== s && (void 0 !== s.strings ? (s._$AI(t, s, i), i += s.strings.length - 2) : s._$AI(t[i])), i++;
  }

}

class N {
  constructor(t, i, s, e) {
    var o;
    this.type = 2, this._$AH = w, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this._$Cg = null === (o = null == e ? void 0 : e.isConnected) || void 0 === o || o;
  }

  get _$AU() {
    var t, i;
    return null !== (i = null === (t = this._$AM) || void 0 === t ? void 0 : t._$AU) && void 0 !== i ? i : this._$Cg;
  }

  get parentNode() {
    let t = this._$AA.parentNode;
    const i = this._$AM;
    return void 0 !== i && 11 === t.nodeType && (t = i.parentNode), t;
  }

  get startNode() {
    return this._$AA;
  }

  get endNode() {
    return this._$AB;
  }

  _$AI(t, i = this) {
    t = P(this, t, i), r(t) ? t === w || null == t || "" === t ? (this._$AH !== w && this._$AR(), this._$AH = w) : t !== this._$AH && t !== b && this.$(t) : void 0 !== t._$litType$ ? this.T(t) : void 0 !== t.nodeType ? this.k(t) : u(t) ? this.S(t) : this.$(t);
  }

  A(t, i = this._$AB) {
    return this._$AA.parentNode.insertBefore(t, i);
  }

  k(t) {
    this._$AH !== t && (this._$AR(), this._$AH = this.A(t));
  }

  $(t) {
    this._$AH !== w && r(this._$AH) ? this._$AA.nextSibling.data = t : this.k(l$2.createTextNode(t)), this._$AH = t;
  }

  T(t) {
    var i;
    const {
      values: s,
      _$litType$: e
    } = t,
          o = "number" == typeof e ? this._$AC(t) : (void 0 === e.el && (e.el = E.createElement(e.h, this.options)), e);
    if ((null === (i = this._$AH) || void 0 === i ? void 0 : i._$AD) === o) this._$AH.m(s);else {
      const t = new V(o, this),
            i = t.p(this.options);
      t.m(s), this.k(i), this._$AH = t;
    }
  }

  _$AC(t) {
    let i = T.get(t.strings);
    return void 0 === i && T.set(t.strings, i = new E(t)), i;
  }

  S(t) {
    d(this._$AH) || (this._$AH = [], this._$AR());
    const i = this._$AH;
    let s,
        e = 0;

    for (const o of t) e === i.length ? i.push(s = new N(this.A(h()), this.A(h()), this, this.options)) : s = i[e], s._$AI(o), e++;

    e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);
  }

  _$AR(t = this._$AA.nextSibling, i) {
    var s;

    for (null === (s = this._$AP) || void 0 === s || s.call(this, !1, !0, i); t && t !== this._$AB;) {
      const i = t.nextSibling;
      t.remove(), t = i;
    }
  }

  setConnected(t) {
    var i;
    void 0 === this._$AM && (this._$Cg = t, null === (i = this._$AP) || void 0 === i || i.call(this, t));
  }

}

class S {
  constructor(t, i, s, e, o) {
    this.type = 1, this._$AH = w, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = o, s.length > 2 || "" !== s[0] || "" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = w;
  }

  get tagName() {
    return this.element.tagName;
  }

  get _$AU() {
    return this._$AM._$AU;
  }

  _$AI(t, i = this, s, e) {
    const o = this.strings;
    let n = !1;
    if (void 0 === o) t = P(this, t, i, 0), n = !r(t) || t !== this._$AH && t !== b, n && (this._$AH = t);else {
      const e = t;
      let l, h;

      for (t = o[0], l = 0; l < o.length - 1; l++) h = P(this, e[s + l], i, l), h === b && (h = this._$AH[l]), n || (n = !r(h) || h !== this._$AH[l]), h === w ? t = w : t !== w && (t += (null != h ? h : "") + o[l + 1]), this._$AH[l] = h;
    }
    n && !e && this.C(t);
  }

  C(t) {
    t === w ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t ? t : "");
  }

}

class M extends S {
  constructor() {
    super(...arguments), this.type = 3;
  }

  C(t) {
    this.element[this.name] = t === w ? void 0 : t;
  }

}

const k = i ? i.emptyScript : "";

class H extends S {
  constructor() {
    super(...arguments), this.type = 4;
  }

  C(t) {
    t && t !== w ? this.element.setAttribute(this.name, k) : this.element.removeAttribute(this.name);
  }

}

class I extends S {
  constructor(t, i, s, e, o) {
    super(t, i, s, e, o), this.type = 5;
  }

  _$AI(t, i = this) {
    var s;
    if ((t = null !== (s = P(this, t, i, 0)) && void 0 !== s ? s : w) === b) return;
    const e = this._$AH,
          o = t === w && e !== w || t.capture !== e.capture || t.once !== e.once || t.passive !== e.passive,
          n = t !== w && (e === w || o);
    o && this.element.removeEventListener(this.name, this, e), n && this.element.addEventListener(this.name, this, t), this._$AH = t;
  }

  handleEvent(t) {
    var i, s;
    "function" == typeof this._$AH ? this._$AH.call(null !== (s = null === (i = this.options) || void 0 === i ? void 0 : i.host) && void 0 !== s ? s : this.element, t) : this._$AH.handleEvent(t);
  }

}

class L {
  constructor(t, i, s) {
    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;
  }

  get _$AU() {
    return this._$AM._$AU;
  }

  _$AI(t) {
    P(this, t);
  }

}

const z = window.litHtmlPolyfillSupport;
null == z || z(E, N), (null !== (t = globalThis.litHtmlVersions) && void 0 !== t ? t : globalThis.litHtmlVersions = []).push("2.2.1");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

var l$1, o;

class s extends a$1 {
  constructor() {
    super(...arguments), this.renderOptions = {
      host: this
    }, this._$Dt = void 0;
  }

  createRenderRoot() {
    var t, e;
    const i = super.createRenderRoot();
    return null !== (t = (e = this.renderOptions).renderBefore) && void 0 !== t || (e.renderBefore = i.firstChild), i;
  }

  update(t) {
    const i = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Dt = x(i, this.renderRoot, this.renderOptions);
  }

  connectedCallback() {
    var t;
    super.connectedCallback(), null === (t = this._$Dt) || void 0 === t || t.setConnected(!0);
  }

  disconnectedCallback() {
    var t;
    super.disconnectedCallback(), null === (t = this._$Dt) || void 0 === t || t.setConnected(!1);
  }

  render() {
    return b;
  }

}

s.finalized = !0, s._$litElement$ = !0, null === (l$1 = globalThis.litElementHydrateSupport) || void 0 === l$1 || l$1.call(globalThis, {
  LitElement: s
});
const n = globalThis.litElementPolyfillSupport;
null == n || n({
  LitElement: s
});
(null !== (o = globalThis.litElementVersions) && void 0 !== o ? o : globalThis.litElementVersions = []).push("3.2.0");

var noop$1 = {
  value: () => {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames$1(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames$1(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get$1(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set$1(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace (name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {
    space: namespaces[prefix],
    local: name
  } : name; // eslint-disable-line no-prototype-builtins
}

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator (name) {
  var fullname = namespace(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

function none() {}

function selector$1 (selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}

function selection_select (select) {
  if (typeof select !== "function") select = selector$1(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection$1(subgroups, this._parents);
}

// Given something array like (or null), returns something that is strictly an
// array. This is used to ensure that array-like objects passed to d3.selectAll
// or selection.selectAll are converted into proper arrays when creating a
// selection; we donât ever want to create a selection backed by a live
// HTMLCollection or NodeList. However, note that selection.selectAll will use a
// static NodeList as a group, since it safely derived from querySelectorAll.
function array$1(x) {
  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}

function empty() {
  return [];
}

function selectorAll (selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}

function arrayAll(select) {
  return function () {
    return array$1(select.apply(this, arguments));
  };
}

function selection_selectAll (select) {
  if (typeof select === "function") select = arrayAll(select);else select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection$1(subgroups, parents);
}

function matcher (selector) {
  return function () {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function (node) {
    return node.matches(selector);
  };
}

var find = Array.prototype.find;

function childFind(match) {
  return function () {
    return find.call(this.children, match);
  };
}

function childFirst() {
  return this.firstElementChild;
}

function selection_selectChild (match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

var filter = Array.prototype.filter;

function children() {
  return Array.from(this.children);
}

function childrenFilter(match) {
  return function () {
    return filter.call(this.children, match);
  };
}

function selection_selectChildren (match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

function selection_filter (match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection$1(subgroups, this._parents);
}

function sparse (update) {
  return new Array(update.length);
}

function selection_enter () {
  return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
}
function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};

function constant$1 (x) {
  return function () {
    return x;
  };
}

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that donât fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = new Map(),
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";

      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";

    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}

function datum(node) {
  return node.__data__;
}

function selection_data (value, key) {
  if (!arguments.length) return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = constant$1(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new Selection$1(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
} // Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isnât worried about âliveâ collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// donât; weâd rather avoid a gratuitous copy.)

function arraylike(data) {
  return typeof data === "object" && "length" in data ? data // Array, TypedArray, NodeList, array-like
  : Array.from(data); // Map, Set, iterable, string, or anything else
}

function selection_exit () {
  return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join (onenter, onupdate, onexit) {
  var enter = this.enter(),
      update = this,
      exit = this.exit();

  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter) enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }

  if (onupdate != null) {
    update = onupdate(update);
    if (update) update = update.selection();
  }

  if (onexit == null) exit.remove();else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge (context) {
  var selection = context.selection ? context.selection() : context;

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection$1(merges, this._parents);
}

function selection_order () {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort (compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new Selection$1(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call () {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes () {
  return Array.from(this);
}

function selection_node () {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size () {
  let size = 0;

  for (const node of this) ++size; // eslint-disable-line no-unused-vars


  return size;
}

function selection_empty () {
  return !this.node();
}

function selection_each (callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove$1(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$1(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$1(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS$1(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction$1(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS$1(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr (name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS$1 : attrRemove$1 : typeof value === "function" ? fullname.local ? attrFunctionNS$1 : attrFunction$1 : fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, value));
}

function defaultView (node) {
  return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
  || node.document && node // node is a Window
  || node.defaultView; // node is a Document
}

function styleRemove$1(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant$1(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction$1(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function selection_style (name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove$1 : typeof value === "function" ? styleFunction$1 : styleConstant$1)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function selection_property (name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed (name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant$1(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction$1(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text (value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction$1 : textConstant$1)(value)) : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html (value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise () {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower () {
  return this.each(lower);
}

function selection_append (name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert (name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector$1(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove () {
  return this.each(remove);
}

function selection_cloneShallow() {
  var clone = this.cloneNode(false),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true),
      parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_clone (deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum (value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

function contextListener(listener) {
  return function (event) {
    listener.call(this, event, this.__data__);
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, options) {
  return function () {
    var on = this.__on,
        o,
        listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      options: options
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function selection_on (typename, value, options) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));

  return this;
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch (type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}

function* selection_iterator () {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}

var root = [null];
function Selection$1(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection$1([[document.documentElement]], root);
}

function selection_selection() {
  return this;
}

Selection$1.prototype = selection.prototype = {
  constructor: Selection$1,
  select: selection_select,
  selectAll: selection_selectAll,
  selectChild: selection_selectChild,
  selectChildren: selection_selectChildren,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  selection: selection_selection,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch,
  [Symbol.iterator]: selection_iterator
};

function select$3 (selector) {
  return typeof selector === "string" ? new Selection$1([[document.querySelector(selector)]], [document.documentElement]) : new Selection$1([[selector]], root);
}

function define (constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend$1(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}

function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
define(Color, color, {
  copy: function (channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define(Rgb, rgb, extend$1(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend$1(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

var constant = (x => () => x);

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
}

var interpolateRgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb$1(start, end) {
    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$1.gamma = rgbGamma;
  return rgb$1;
})(1);

function interpolateNumber (a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function interpolateString (a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: interpolateNumber(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}

var degrees = 180 / Math.PI;
var identity$4 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose (a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var svgNode;
/* eslint-disable no-undef */

function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity$4 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null) return identity$4;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$4;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
      }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: interpolateNumber(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: interpolateNumber(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
      }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var frame = 0,
    // is an animation frame pending?
timeout$1 = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend weâve set an alarm, if we havenât already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout$1 = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout$1) timeout$1 = clearTimeout(timeout$1);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout (callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(elapsed => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

var emptyOn = dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule (node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create$1(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}
function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}
function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create$1(node, id, self) {
  var schedules = node.__transition,
      tween; // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!

  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!

      if (o.state === STARTED) return timeout(start); // Interrupt the active transition, if any.

      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } // Cancel any pre-empted transitions.
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    } // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.


    timeout(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    }); // Dispatch the start event.
    // Note this must be done before the tween are initialized.

    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted

    self.state = STARTED; // Initialize the tween, deleting null tween.

    tween = new Array(n = self.tween.length);

    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }

    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    } // Dispatch the end event.


    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];

    for (var i in schedules) return; // eslint-disable-line no-unused-vars


    delete node.__transition;
  }
}

function interrupt (node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;
  if (!schedules) return;
  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }

    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}

function selection_interrupt (name) {
  return this.each(function () {
    interrupt(this, name);
  });
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = set(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and weâre done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = tween0 = tween;

      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = set(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and weâre done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();

      for (var t = {
        name: name,
        value: value
      }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }

      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function transition_tween (name, value) {
  var id = this._id;
  name += "";

  if (arguments.length < 2) {
    var tween = get(this.node(), id).tween;

    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }

    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}
function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = set(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return get(node, id).value[name];
  };
}

function interpolate (a, b) {
  var c;
  return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
}

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0,
        value1 = value(this),
        string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function transition_attr (name, value) {
  var fullname = namespace(name),
      i = fullname === "transform" ? interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}

function attrInterpolate(name, i) {
  return function (t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function (t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function transition_attrTween (name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function () {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    init(this, id).delay = value;
  };
}

function transition_delay (value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function () {
    set(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    set(this, id).duration = value;
  };
}

function transition_duration (value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    set(this, id).ease = value;
  };
}

function transition_ease (value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : get(this.node(), id).ease;
}

function easeVarying(id, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (typeof v !== "function") throw new Error();
    set(this, id).ease = v;
  };
}

function transition_easeVarying (value) {
  if (typeof value !== "function") throw new Error();
  return this.each(easeVarying(this._id, value));
}

function transition_filter (match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
}

function transition_merge (transition) {
  if (transition._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? init : set;
  return function () {
    var schedule = sit(this, id),
        on = schedule.on; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and weâre done!
    // Otherwise, copy-on-write.

    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}

function transition_on (name, listener) {
  var id = this._id;
  return arguments.length < 2 ? get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;

    for (var i in this.__transition) if (+i !== id) return;

    if (parent) parent.removeChild(this);
  };
}

function transition_remove () {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select (select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = selector$1(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
}

function transition_selectAll (select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }

        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
}

var Selection = selection.prototype.constructor;
function transition_selection () {
  return new Selection(this._groups, this._parents);
}

function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = styleValue(this, name),
        string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function () {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function () {
    var string0 = styleValue(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0,
      on1,
      listener0,
      key = "style." + name,
      event = "end." + key,
      remove;
  return function () {
    var schedule = set(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and weâre done!
    // Otherwise, copy-on-write.

    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}

function transition_style (name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
}

function styleInterpolate(name, i, priority) {
  return function (t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }

  tween._value = value;
  return tween;
}

function transition_styleTween (name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function transition_text (value) {
  return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}

function textInterpolate(i) {
  return function (t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;

  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }

  tween._value = value;
  return tween;
}

function transition_textTween (value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}

function transition_transition () {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
}

function transition_end () {
  var on0,
      on1,
      that = this,
      id = that._id,
      size = that.size();
  return new Promise(function (resolve, reject) {
    var cancel = {
      value: reject
    },
        end = {
      value: function () {
        if (--size === 0) resolve();
      }
    };
    that.each(function () {
      var schedule = set(this, id),
          on = schedule.on; // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and weâre done!
      // Otherwise, copy-on-write.

      if (on !== on0) {
        on1 = (on0 = on).copy();

        on1._.cancel.push(cancel);

        on1._.interrupt.push(cancel);

        on1._.end.push(end);
      }

      schedule.on = on1;
    }); // The selection was empty, resolve end immediately

    if (size === 0) resolve();
  });
}

var id = 0;
function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}
function newId() {
  return ++id;
}
var selection_prototype = selection.prototype;
Transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  textTween: transition_textTween,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  easeVarying: transition_easeVarying,
  end: transition_end,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};

function inherit(node, id) {
  var timing;

  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id} not found`);
    }
  }

  return timing;
}

function selection_transition (name) {
  var id, timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
}

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

function colors (specifier) {
  var n = specifier.length / 6 | 0,
      colors = new Array(n),
      i = 0;

  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);

  return colors;
}

var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

let _$c = t => t,
    _t$c,
    _t2$a,
    _t3$2,
    _t4$2,
    _t5$1,
    _t6$1,
    _t7$1,
    _t8$1,
    _t9$1;
/*
  DecidablesElement Base Class - Not intended for instantiation!
  <decidables-element>
*/

class DecidablesElement extends s {
  getComputedStyleValue(property) {
    return getComputedStyle(this).getPropertyValue(property).trim();
  }

  firstUpdated(changedProperties) {
    super.firstUpdated(changedProperties); // Use focus highlighting if keyboard is used at all

    select$3(this.renderRoot.host).classed('keyboard', true).on('mousemove.keyboard touchstart.keyboard', event => {
      const element = event.currentTarget;
      select$3(element.renderRoot.host).classed('keyboard', false).on('mousemove.keyboard touchstart.keyboard', null);
    }).on('keydown.keyboard', event => {
      const element = event.currentTarget;
      select$3(element.renderRoot.host).classed('keyboard', true).on('keydown.keyboard mousemove.keyboard touchstart.keyboard', null);
    });
  }

  static get greys() {
    const grey = '#999999';
    const greys = {};
    greys.white = '#ffffff';
    greys.light75 = interpolateRgb(grey, '#ffffff')(0.75);
    greys.light50 = interpolateRgb(grey, '#ffffff')(0.5);
    greys.light25 = interpolateRgb(grey, '#ffffff')(0.25);
    greys.grey = grey;
    greys.dark25 = interpolateRgb(grey, '#000000')(0.25);
    greys.dark50 = interpolateRgb(grey, '#000000')(0.5);
    greys.dark75 = interpolateRgb(grey, '#000000')(0.75);
    greys.black = '#000000';
    return greys;
  }

  static get shadows() {
    // Material Design elevation styles
    // References:
    //   https://github.com/material-components/material-components-web/tree/master/packages/mdc-elevation
    //   https://codepen.io/hanger/pen/yOGvQp

    /* eslint-disable key-spacing, object-curly-newline */
    return {
      elevations: [0, 2, 4, 8, 16],
      baselineColor: '#000000',
      baselineColorString: '0, 0, 0',
      inverseBaselineColor: '#FFFFFF',
      inverseBaselineColorString: '255, 255, 255',
      opacityUmbra: 0.2,
      opacityPenumbra: 0.14,
      opacityAmbient: 0.12,
      opacityBoost: 0.2,
      mapUmbra: {
        // $mdc-elevation-umbra-map
        0: {
          x: 0,
          y: 0,
          b: 0,
          s: 0
        },
        // offset-x, offset-y, blur-radius, spread-radius
        2: {
          x: 0,
          y: 3,
          b: 1,
          s: -2
        },
        4: {
          x: 0,
          y: 2,
          b: 4,
          s: -1
        },
        8: {
          x: 0,
          y: 5,
          b: 5,
          s: -3
        },
        16: {
          x: 0,
          y: 8,
          b: 10,
          s: -5
        }
      },
      mapPenumbra: {
        // $mdc-elevation-penumbra-map
        0: {
          x: 0,
          y: 0,
          b: 0,
          s: 0
        },
        // offset-x, offset-y, blur-radius, spread-radius
        2: {
          x: 0,
          y: 2,
          b: 2,
          s: 0
        },
        4: {
          x: 0,
          y: 4,
          b: 5,
          s: 0
        },
        8: {
          x: 0,
          y: 8,
          b: 10,
          s: 1
        },
        16: {
          x: 0,
          y: 16,
          b: 24,
          s: 2
        }
      },
      mapAmbient: {
        // $mdc-elevation-ambient-map
        0: {
          x: 0,
          y: 0,
          b: 0,
          s: 0
        },
        // offset-x, offset-y, blur-radius, spread-radius
        2: {
          x: 0,
          y: 1,
          b: 5,
          s: 0
        },
        4: {
          x: 0,
          y: 1,
          b: 10,
          s: 0
        },
        8: {
          x: 0,
          y: 3,
          b: 14,
          s: 2
        },
        16: {
          x: 0,
          y: 6,
          b: 30,
          s: 5
        }
      }
    };
    /* eslint-enable key-spacing, object-curly-newline */
  }

  static cssBoxShadow(elevation, rotate = false, inverse = false) {
    const umbraO = this.shadows.opacityUmbra + this.shadows.opacityBoost;
    const penumbraO = this.shadows.opacityPenumbra + this.shadows.opacityBoost;
    const ambientO = this.shadows.opacityAmbient + this.shadows.opacityBoost;
    const umbraC = inverse ? `rgba(${this.shadows.inverseBaselineColorString}, ${umbraO})` : `rgba(${this.shadows.baselineColorString}, ${umbraO})`;
    const penumbraC = inverse ? `rgba(${this.shadows.inverseBaselineColorString}, ${penumbraO})` : `rgba(${this.shadows.baselineColorString}, ${penumbraO})`;
    const ambientC = inverse ? `rgba(${this.shadows.inverseBaselineColorString}, ${ambientO})` : `rgba(${this.shadows.baselineColorString}, ${ambientO})`;
    const umbraM = this.shadows.mapUmbra[elevation];
    const penumbraM = this.shadows.mapPenumbra[elevation];
    const ambientM = this.shadows.mapAmbient[elevation];
    const umbraS = rotate ? `${-umbraM.y}px ${umbraM.y / 2}px ${umbraM.b}px ${umbraM.s}px` : `${umbraM.y / 2}px ${umbraM.y}px ${umbraM.b}px ${umbraM.s}px`;
    const penumbraS = rotate ? `${-penumbraM.y}px ${penumbraM.y / 2}px ${penumbraM.b}px ${penumbraM.s}px` : `${penumbraM.y / 2}px ${penumbraM.y}px ${penumbraM.b}px ${penumbraM.s}px`;
    const ambientS = rotate ? `${-ambientM.y}px ${ambientM.y / 2}px ${ambientM.b}px ${ambientM.s}px` : `${ambientM.y / 2}px ${ambientM.y}px ${ambientM.b}px ${ambientM.s}px`;
    return `${umbraS} ${umbraC}, ${penumbraS} ${penumbraC}, ${ambientS} ${ambientC}`;
  }

  static get svgFilters() {
    const shadows = DecidablesElement.shadows;
    /* eslint-disable-line prefer-destructuring */

    const filters = shadows.elevations.map(z => {
      return y(_t$c || (_t$c = _$c`
        <filter id=${0} x="-250%" y="-250%" width="600%" height="600%">
          <feComponentTransfer in="SourceAlpha" result="solid">
            <feFuncA  type="table" tableValues="0 1 1"/>
          </feComponentTransfer>
          <feOffset in="solid" result="offU" dx=${0} dy=${0} />
          <feOffset in="solid" result="offP" dx=${0} dy=${0} />
          <feOffset in="solid" result="offA" dx=${0} dy=${0} />
          ${0}
          ${0}
          ${0}
          <feGaussianBlur in=${0} result="blurU" stdDeviation=${0} />
          <feGaussianBlur in=${0} result="blurP" stdDeviation=${0} />
          <feGaussianBlur in=${0} result="blurA" stdDeviation=${0} />
          <feFlood in="SourceGraphic" result="opU" flood-color=${0} flood-opacity=${0} />
          <feFlood in="SourceGraphic" result="opP" flood-color=${0} flood-opacity=${0} />
          <feFlood in="SourceGraphic" result="opA" flood-color=${0} flood-opacity=${0} />
          <feComposite in="opU" in2="blurU" result="shU" operator="in" />
          <feComposite in="opP" in2="blurP" result="shP" operator="in" />
          <feComposite in="opA" in2="blurA" result="shA" operator="in" />
          <feMorphology in="solid" result="smaller" operator="erode" radius="1" />
          <feComposite in="shU" in2="smaller" result="finalU" operator="out" />
          <feComposite in="shP" in2="smaller" result="finalP" operator="out" />
          <feComposite in="shA" in2="smaller" result="finalA" operator="out" />
          <feMerge>
            <feMergeNode in="finalU" />
            <feMergeNode in="finalP" />
            <feMergeNode in="finalA" />
            <feMergeNode in="SourceGraphic" />
          </feMerge>
        </filter>`), `shadow-${z}`, shadows.mapUmbra[z].y / 2, shadows.mapUmbra[z].y, shadows.mapPenumbra[z].y / 2, shadows.mapPenumbra[z].y, shadows.mapAmbient[z].y / 2, shadows.mapAmbient[z].y, shadows.mapUmbra[z].s === 0 ? y(_t2$a || (_t2$a = _$c``)) : y(_t3$2 || (_t3$2 = _$c`<feMorphology in="offU" result="spreadU" operator=${0} radius=${0} />`), shadows.mapUmbra[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapUmbra[z].s)), shadows.mapPenumbra[z].s === 0 ? y(_t4$2 || (_t4$2 = _$c``)) : y(_t5$1 || (_t5$1 = _$c`<feMorphology in="offP" result="spreadP" operator=${0} radius=${0} />`), shadows.mapPenumbra[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapPenumbra[z].s)), shadows.mapAmbient[z].s === 0 ? y(_t6$1 || (_t6$1 = _$c``)) : y(_t7$1 || (_t7$1 = _$c`<feMorphology in="offA" result="spreadA" operator=${0} radius=${0} />`), shadows.mapAmbient[z].s > 0 ? 'dilate' : 'erode', Math.abs(shadows.mapAmbient[z].s)), shadows.mapUmbra[z].s === 0 ? 'offU' : 'spreadU', shadows.mapUmbra[z].b / 2, shadows.mapPenumbra[z].s === 0 ? 'offP' : 'spreadP', shadows.mapPenumbra[z].b / 2, shadows.mapAmbient[z].s === 0 ? 'offA' : 'spreadA', shadows.mapAmbient[z].b / 2, shadows.baselineColor, shadows.opacityUmbra + shadows.opacityBoost, shadows.baselineColor, shadows.opacityPenumbra + shadows.opacityBoost, shadows.baselineColor, shadows.opacityAmbient + shadows.opacityBoost);
    });
    return y(_t8$1 || (_t8$1 = _$c`
      <svg class="defs">
        <defs>
          ${0}
        </defs>
      </svg>
    `), filters);
  }

  static get styles() {
    return r$2(_t9$1 || (_t9$1 = _$c`
      :host {
        ---shadow-0: var(--shadow-0, ${0});
        ---shadow-2: var(--shadow-2, ${0});
        ---shadow-4: var(--shadow-4, ${0});
        ---shadow-8: var(--shadow-8, ${0});

        ---color-background: var(--color-background, ${0});
        ---color-border: var(--color-border, ${0});
        ---color-text: var(--color-text, ${0});
        ---color-text-inverse: var(--color-text-inverse, ${0});
        ---color-link: var(--color-link, ${0});
        ---color-element-background: var(--color-element-background, ${0});
        ---color-element-disabled: var(--color-element-disabled, ${0});
        ---color-element-enabled: var(--color-element-enabled, ${0});
        ---color-element-selected: var(--color-element-selected, ${0});
        ---color-element-border: var(--color-element-border, ${0});
        ---color-element-emphasis: var(--color-element-emphasis, ${0});

        ---font-family-base: var(--font-family-base, "Source Sans", sans-serif);
        ---font-family-math: var(--font-family-math, "Source Serif", serif);

        ---border: var(--border, 1px solid var(---color-border));
        ---border-radius: var(--border-radius, 0.25rem);
        ---transition-duration: var(--transition-duration, 500ms);

        font-family: var(---font-family-base);
      }

      :host,
      :host *,
      :host *::before,
      :host *::after {
        box-sizing: border-box;
      }

      .math-greek {
        font-family: var(---font-family-math);
        font-style: normal;
      }

      .math-num {
        font-family: var(---font-family-base);
        font-style: normal;
      }

      .math-var {
        font-family: var(---font-family-math);
        font-style: italic;
      }

      .defs {
        display: block;

        width: 0;
        height: 0;
      }
    `), o$3(this.cssBoxShadow(0)), o$3(this.cssBoxShadow(2)), o$3(this.cssBoxShadow(4)), o$3(this.cssBoxShadow(8)), o$3(this.greys.white), o$3(this.greys.light75), o$3(this.greys.dark75), o$3(this.greys.white), o$3(this.greys.dark25), o$3(this.greys.light75), o$3(this.greys.light50), o$3(this.greys.dark25), o$3(this.greys.grey), o$3(this.greys.dark50), o$3(this.greys.dark75));
  }

}

let _$b = t => t,
    _t$b,
    _t2$9;
class DecidablesButton extends DecidablesElement {
  static get properties() {
    return {
      disabled: {
        attribute: 'disabled',
        type: Boolean,
        reflect: true
      }
    };
  }

  constructor() {
    super(); // Attributes

    this.disabled = false;
  }

  static get styles() {
    return [super.styles, r$2(_t$b || (_t$b = _$b`
        :host {
          margin: 0.25rem;
        }

        button {
          width: 100%;
          height: 100%;
          padding: 0.375rem 0.75rem;

          font-family: var(---font-family-base);
          font-size: 1.125rem;
          line-height: 1.5;
          color: var(---color-text-inverse);

          border: 0;
          border-radius: var(---border-radius);
          outline: none;
        }

        button:disabled {
          background-color: var(--decidables-button-background-color, var(---color-element-disabled));
          outline: none;
          box-shadow: none;
        }

        button:enabled {
          cursor: pointer;

          background-color: var(--decidables-button-background-color, var(---color-element-enabled));
          outline: none;
          box-shadow: var(---shadow-2);
        }

        button:enabled:hover {
          outline: none;
          box-shadow: var(---shadow-4);
        }

        button:enabled:active {
          outline: none;
          box-shadow: var(---shadow-8);
        }

        :host(.keyboard) button:enabled:focus {
          outline: none;
          box-shadow: var(---shadow-4);
        }

        :host(.keyboard) button:enabled:focus:active {
          outline: none;
          box-shadow: var(---shadow-8);
        }
      `))];
  }

  render() {
    return $(_t2$9 || (_t2$9 = _$b`
      <button ?disabled=${0}>
        <slot></slot>
      </button>
    `), this.disabled);
  }

}
customElements.define('decidables-button', DecidablesButton);

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

const l = l => null != l ? l : w;

let _$a = t => t,
    _t$a,
    _t2$8;
class DecidablesSlider extends DecidablesElement {
  static get properties() {
    return {
      disabled: {
        attribute: 'disabled',
        type: Boolean,
        reflect: true
      },
      max: {
        attribute: 'max',
        type: Number,
        reflect: true
      },
      min: {
        attribute: 'min',
        type: Number,
        reflect: true
      },
      step: {
        attribute: 'step',
        type: Number,
        reflect: true
      },
      value: {
        attribute: 'value',
        type: Number,
        reflect: true
      }
    };
  }

  constructor() {
    super(); // Attributes

    this.disabled = false;
    this.max = undefined;
    this.min = undefined;
    this.step = undefined;
    this.value = undefined;
  }

  changed(event) {
    this.value = event.target.value;
    this.dispatchEvent(new CustomEvent('change', {
      detail: {
        value: this.value
      },
      bubbles: true
    }));
  }

  inputted(event) {
    this.value = event.target.value;
  }

  static get styles() {
    return [super.styles, r$2(_t$a || (_t$a = _$a`
        :host {
          ---shadow-2-rotate: var(--shadow-2-rotate, ${0});
          ---shadow-4-rotate: var(--shadow-4-rotate, ${0});
          ---shadow-8-rotate: var(--shadow-8-rotate, ${0});

          display: flex;

          flex-direction: column;

          align-items: center;
          justify-content: center;
        }

        label {
          margin: 0.25rem 0.25rem 0;
        }

        .range {
          display: inline-block;

          width: 3.5rem;
          height: 4.75rem;
          margin: 0 0.25rem 0.25rem;
        }

        decidables-spinner {
          --decidables-spinner-input-width: 3.5rem;

          margin: 0 0.25rem 0.25rem;
        }

        /* Adapted from http://danielstern.ca/range.css/#/ */
        /* Overall */
        input[type=range] {
          width: 4.75rem;
          height: 3.5rem;
          padding: 0;
          margin: 0;

          background-color: unset;

          transform: rotate(-90deg);
          transform-origin: 2.375rem 2.375rem;

          /* stylelint-disable-next-line property-no-vendor-prefix */
          -webkit-appearance: none;
        }

        input[type=range]:enabled {
          cursor: ns-resize;
        }

        input[type=range]:focus {
          outline: none;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-ms-tooltip {
          display: none;
        }

        /* Track */
        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-webkit-slider-runnable-track {
          width: 100%;
          height: 4px;

          background: var(---color-element-disabled);
          border: 0;
          border-radius: 2px;
          box-shadow: none;
        }

        input[type=range]:focus::-webkit-slider-runnable-track {
          background: var(---color-element-disabled);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-moz-range-track {
          width: 100%;
          height: 4px;

          background: var(---color-element-disabled);
          border: 0;
          border-radius: 2px;
          box-shadow: none;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-ms-track {
          width: 100%;
          height: 4px;

          color: transparent;

          background: transparent;
          border-color: transparent;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-ms-fill-lower {
          background: #cccccc;
          /* background: var(---color-element-disabled); */
          border: 0;
          border-radius: 2px;
          box-shadow: none;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-ms-fill-upper {
          background: #cccccc;
          /* background: var(---color-element-disabled); */
          border: 0;
          border-radius: 2px;
          box-shadow: none;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:focus::-ms-fill-lower {
          background: var(---color-element-disabled);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:focus::-ms-fill-upper {
          background: var(---color-element-disabled);
        }

        /* Thumb */
        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-webkit-slider-thumb {
          width: 10px;
          height: 20px;
          margin-top: -8px;

          border: 0;
          border-radius: 4px;

          /* stylelint-disable-next-line property-no-vendor-prefix */
          -webkit-appearance: none;
        }

        input[type=range]:disabled::-webkit-slider-thumb {
          background: var(---color-element-disabled);
          box-shadow: none;
        }

        input[type=range]:enabled::-webkit-slider-thumb {
          background: var(---color-element-enabled);
          box-shadow: var(---shadow-2-rotate);
        }

        input[type=range]:enabled:hover::-webkit-slider-thumb {
          box-shadow: var(---shadow-4-rotate);
        }

        input[type=range]:enabled:active::-webkit-slider-thumb {
          box-shadow: var(---shadow-8-rotate);
        }

        :host(.keyboard) input[type=range]:enabled:focus::-webkit-slider-thumb {
          box-shadow: var(---shadow-4-rotate);
        }

        :host(.keyboard) input[type=range]:focus:active::-webkit-slider-thumb {
          box-shadow: var(---shadow-8-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-moz-range-thumb {
          width: 10px;
          height: 20px;

          border: 0;
          border-radius: 4px;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:disabled::-moz-range-thumb {
          background: var(---color-element-disabled);
          box-shadow: none;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:enabled::-moz-range-thumb {
          background: var(---color-element-enabled);
          box-shadow: var(---shadow-2-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:enabled:hover::-moz-range-thumb {
          box-shadow: var(---shadow-4-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:enabled:active::-moz-range-thumb {
          box-shadow: var(---shadow-8-rotate);
        }

        :host(.keyboard) input[type=range]:enabled:focus::-moz-range-thumb {
          box-shadow: var(---shadow-4-rotate);
        }

        :host(.keyboard) input[type=range]:enabled:focus:active::-moz-range-thumb {
          box-shadow: var(---shadow-8-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]::-ms-thumb {
          width: 10px;
          height: 20px;
          margin-top: 0;

          background: #999999;
          /* background: var(---color-element-enabled); */
          border: 0;
          border-radius: 4px;
          box-shadow: var(---shadow-2-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:disabled::-ms-thumb {
          background: var(---color-element-disabled);
          box-shadow: none;
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:enabled::-ms-thumb {
          background: var(---color-element-enabled);
          box-shadow: var(---shadow-2-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:enabled:hover::-ms-thumb {
          box-shadow: var(---shadow-4-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        input[type=range]:enabled:active::-ms-thumb {
          box-shadow: var(---shadow-8-rotate);
        }

        /* stylelint-disable-next-line no-descending-specificity */ /* stylelint ERROR */
        :host(.keyboard) input[type=range]:enabled:focus::-ms-thumb {
          box-shadow: var(---shadow-4-rotate);
        }

        :host(.keyboard) input[type=range]:enabled:focus:active::-ms-thumb {
          box-shadow: var(---shadow-8-rotate);
        }
      `), o$3(this.cssBoxShadow(2, true, false)), o$3(this.cssBoxShadow(4, true, false)), o$3(this.cssBoxShadow(8, true, false)))];
  }

  render() {
    return $(_t2$8 || (_t2$8 = _$a`
      <label for="slider">
        <slot></slot>
      </label>
      <div class="range">
        <input type="range" id="slider" min=${0} max=${0} step=${0} .value=${0} @change=${0} @input=${0}>
      </div>
      <decidables-spinner min=${0} max=${0} step=${0} .value=${0} @input=${0}></decidables-spinner>
    `), l(this.min), l(this.max), l(this.step), this.value, this.changed.bind(this), this.inputted.bind(this), l(this.min), l(this.max), l(this.step), this.value, this.inputted.bind(this));
  }

}
customElements.define('decidables-slider', DecidablesSlider);

let _$9 = t => t,
    _t$9,
    _t2$7;
class DecidablesSpinner extends DecidablesElement {
  static get properties() {
    return {
      disabled: {
        attribute: 'disabled',
        type: Boolean,
        reflect: true
      },
      max: {
        attribute: 'max',
        type: Number,
        reflect: true
      },
      min: {
        attribute: 'min',
        type: Number,
        reflect: true
      },
      step: {
        attribute: 'step',
        type: Number,
        reflect: true
      },
      value: {
        attribute: 'value',
        type: Number,
        reflect: true
      }
    };
  }

  constructor() {
    super(); // Attributes

    this.disabled = false;
    this.max = undefined;
    this.min = undefined;
    this.step = undefined;
    this.value = undefined;
  }

  inputted(event) {
    this.value = event.target.value;
  }

  static get styles() {
    return [super.styles, r$2(_t$9 || (_t$9 = _$9`
        :host {
          ---decidables-spinner-font-size: var(--decidables-spinner-font-size, 1.125rem);
          ---decidables-spinner-input-width: var(--decidables-spinner-input-width, 4rem);
          ---decidables-spinner-prefix: var(--decidables-spinner-prefix, "");

          display: block;
        }

        label {
          position: relative;
          display: flex;

          flex-direction: column;

          align-items: center;

          margin: 0;

          font-size: 0.75rem;
        }

        label::before {
          position: absolute;
          bottom: 1px;
          left: calc(50% - var(---decidables-spinner-input-width) / 2 + 0.25rem);

          font-size: var(---decidables-spinner-font-size);
          line-height: normal;

          content: var(---decidables-spinner-prefix);
        }

        input[type=number] {
          width: var(---decidables-spinner-input-width);

          font-family: var(---font-family-base);
          font-size: var(---decidables-spinner-font-size);
          color: inherit;
          text-align: right;

          background: none;
          border: 0;
          border-radius: 0;
          outline: none;
          box-shadow: var(---shadow-2);

          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */
        }

        input[type=number]:hover {
          box-shadow: var(---shadow-4);
        }

        input[type=number]:focus,
        input[type=number]:active {
          box-shadow: var(---shadow-8);
        }

        input[type=number]:disabled {
          color: var(---color-text);

          border: 0;
          box-shadow: none;

          /* HACK: Use correct text color in Safari */
          -webkit-opacity: 1;
          /* HACK: Hide spinners in disabled input for Firefox and Safari */
          -moz-appearance: textfield; /* stylelint-disable-line property-no-vendor-prefix */
          /* HACK: Use correct text color in Safari */
          -webkit-text-fill-color: var(---color-text);
        }

        /* HACK: Hide spinners in disabled input for Firefox and Safari */
        input[type=number]:disabled::-webkit-outer-spin-button,
        input[type=number]:disabled::-webkit-inner-spin-button {
          margin: 0;
          -webkit-appearance: none; /* stylelint-disable-line property-no-vendor-prefix */
        }
      `))];
  }

  render() {
    return $(_t2$7 || (_t2$7 = _$9`
      <label>
        <slot></slot>
        <input ?disabled=${0} type="number" min=${0} max=${0} step=${0} .value=${0} @input=${0}>
      </label>
    `), this.disabled, l(this.min), l(this.max), l(this.step), this.value, this.inputted.bind(this));
  }

}
customElements.define('decidables-spinner', DecidablesSpinner);

let _$8 = t => t,
    _t$8,
    _t2$6;
class DecidablesSwitch extends DecidablesElement {
  static get properties() {
    return {
      checked: {
        attribute: 'checked',
        type: Boolean,
        reflect: true
      },
      disabled: {
        attribute: 'disabled',
        type: Boolean,
        reflect: true
      }
    };
  }

  constructor() {
    super(); // Attributes

    this.checked = false;
    this.disabled = false;
  }

  changed(event) {
    this.checked = event.target.checked;
    this.dispatchEvent(new CustomEvent('change', {
      detail: {
        checked: this.checked
      },
      bubbles: true
    }));
  }

  static get styles() {
    return [super.styles, r$2(_t$8 || (_t$8 = _$8`
        :host {
          display: flex;

          flex-direction: column;

          align-items: center;
          justify-content: center;
        }

        /* Adapted from https://codepen.io/guuslieben/pen/YyPRVP */
        input[type=checkbox] {
          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */
          position: absolute;

          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0 0 0 0);

          white-space: nowrap;

          border: 0;
          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */
        }

        input[type=checkbox] + label {
          order: 1;

          margin: 0 0.25rem 0.25rem;

          font-weight: 400;
        }

        input[type=checkbox] + label + label {
          position: relative;

          min-width: 24px;
          padding: 0 0 36px;
          margin: 0.25rem 0.25rem 0;

          font-weight: 400;

          outline: none;
        }

        input[type=checkbox] + label + label::before,
        input[type=checkbox] + label + label::after {
          position: absolute;

          left: 50%;

          margin: 0;

          content: "";

          outline: 0;

          transition: all var(---transition-duration) ease;
          transform: translate(-50%, 0);
        }

        input[type=checkbox] + label + label::before {
          bottom: 1px;

          width: 8px;
          height: 34px;

          background-color: var(---color-element-disabled);
          border-radius: 4px;
        }

        input[type=checkbox] + label + label::after {
          bottom: 0;

          width: 18px;
          height: 18px;

          background-color: var(---color-element-enabled);
          border-radius: 50%;
          box-shadow: var(---shadow-2);
        }

        input[type=checkbox]:checked + label + label::after {
          transform: translate(-50%, -100%);
        }

        input[type=checkbox]:disabled + label + label::after {
          background-color: var(---color-element-disabled);
          box-shadow: none;
        }

        input[type=checkbox]:enabled + label,
        input[type=checkbox]:enabled + label + label {
          cursor: pointer;
        }

        input[type=checkbox]:enabled + label:hover + label::after,
        input[type=checkbox]:enabled + label + label:hover::after {
          box-shadow: var(---shadow-4);
        }

        input[type=checkbox]:enabled + label:active + label::after,
        input[type=checkbox]:enabled + label + label:active::after {
          box-shadow: var(---shadow-8);
        }

        /* stylelint-disable-next-line selector-max-compound-selectors */
        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label::after {
          box-shadow: var(---shadow-4);
        }

        /* stylelint-disable-next-line selector-max-compound-selectors */
        :host(.keyboard) input[type=checkbox]:enabled:focus + label + label:active::after,
        :host(.keyboard) input[type=checkbox]:enabled:focus:active + label + label::after {
          box-shadow: var(---shadow-8);
        }
      `))];
  }

  render() {
    return $(_t2$6 || (_t2$6 = _$8`
      <input type="checkbox" id="switch" ?checked=${0} ?disabled=${0} @change=${0}>
      <label for="switch">
        <slot name="off-label"></slot>
      </label>
      <label for="switch">
        <slot></slot>
      </label>
    `), this.checked, this.disabled, this.changed.bind(this));
  }

}
customElements.define('decidables-switch', DecidablesSwitch);

let _$7 = t => t,
    _t$7,
    _t2$5;
class DecidablesToggle extends DecidablesElement {
  static get properties() {
    return {
      disabled: {
        attribute: 'disabled',
        type: Boolean,
        reflect: true
      }
    };
  }

  constructor() {
    super(); // Attributes

    this.disabled = false;
  }

  static get styles() {
    return [super.styles, r$2(_t$7 || (_t$7 = _$7`
        fieldset {
          display: flex;

          flex-direction: column;

          align-items: stretch;
          justify-content: center;

          margin: 0.25rem;

          border: 0;
        }

        legend {
          text-align: center;
        }
      `))];
  }

  render() {
    return $(_t2$5 || (_t2$5 = _$7`
      <fieldset ?disabled=${0}>
        <legend><slot name="label"></slot></legend>
        <slot></slot>
      </fieldset>
    `), this.disabled);
  }

}
customElements.define('decidables-toggle', DecidablesToggle);

let _$6 = t => t,
    _t$6,
    _t2$4;
class DecidablesToggleOption extends DecidablesElement {
  static get properties() {
    return {
      checked: {
        attribute: 'checked',
        type: Boolean,
        reflect: true
      },
      disabled: {
        attribute: 'disabled',
        type: Boolean,
        reflect: true
      },
      name: {
        attribute: 'name',
        type: String,
        reflect: true
      },
      value: {
        attribute: 'value',
        type: String,
        reflect: true
      }
    };
  }

  constructor() {
    super(); // Attributes

    this.checked = false;
    this.disabled = false;
    this.name = undefined;
    this.value = undefined;
  }

  changed(event) {
    this.checked = event.target.checked;
    this.dispatchEvent(new CustomEvent('change', {
      detail: {
        checked: this.checked,
        value: this.value
      },
      bubbles: true
    }));
  }

  static get styles() {
    return [super.styles, r$2(_t$6 || (_t$6 = _$6`
        :host {
          display: flex;
        }

        input[type=radio] {
          /* visuallyhidden: https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/css.md */
          position: absolute;

          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0 0 0 0);

          white-space: nowrap;

          border: 0;
          clip-path: inset(100%); /* May cause a performance issue: https://github.com/h5bp/html5-boilerplate/issues/2021 */
        }

        input[type=radio] + label {
          width: 100%;
          padding: 0.375rem 0.75rem;

          font-family: var(---font-family-base);
          font-size: 1.125rem;
          line-height: 1.5;
          color: var(---color-text-inverse);
          text-align: center;

          cursor: pointer;

          background-color: var(---color-element-enabled);
          border: 0;
          border-radius: 0;
          outline: none;

          box-shadow: var(---shadow-2);
        }

        input[type=radio]:checked + label {
          background-color: var(---color-element-selected);
          outline: none;
          box-shadow: var(---shadow-2);
        }

        input[type=radio] + label:hover {
          z-index: 1;

          outline: none;
          box-shadow: var(---shadow-4);
        }

        input[type=radio] + label:active {
          z-index: 2;

          outline: none;
          box-shadow: var(---shadow-8);
        }

        :host(:first-of-type) input[type=radio] + label {
          border-top-left-radius: 0.25rem;
          border-top-right-radius: 0.25rem;
        }

        :host(:last-of-type) input[type=radio] + label {
          border-bottom-right-radius: 0.25rem;
          border-bottom-left-radius: 0.25rem;
        }

        :host(.keyboard) input[type=radio]:focus + label {
          z-index: 1;

          outline: none;
          box-shadow: var(---shadow-4);
        }

        :host(.keyboard) input[type=radio]:focus:checked + label {
          z-index: 1;

          background-color: var(---color-element-selected);
          outline: none;
          box-shadow: var(---shadow-4);
        }

        :host(.keyboard) input[type=radio]:focus + label:active {
          z-index: 2;

          outline: none;
          box-shadow: var(---shadow-8);
        }
      `))];
  }

  render() {
    return $(_t2$4 || (_t2$4 = _$6`
      <input type="radio" id="toggle-option" name=${0} value=${0} .checked=${0} @change=${0}>
      <label for="toggle-option">
        <slot></slot>
      </label>
    `), this.name, this.value, this.checked, this.changed.bind(this));
  }

}
customElements.define('decidables-toggle-option', DecidablesToggleOption);

let _$5 = t => t,
    _t$5;
/*
  DetectableElement Base Class - Not intended for instantiation!
  <detectable-element>
*/

class igtElement extends DecidablesElement {
  static get properties() {
    return {
      interactive: {
        attribute: 'interactive',
        type: Boolean,
        reflect: true
      }
    };
  }

  constructor() {
    super();
    this.interactive = false;
  }

  static get colors() {
    return {
      h: Set1[2],
      m: Set1[4],
      fa: Set1[1],
      cr: Set1[0],
      hr: Set1[5],
      far: Set1[3],
      acc: Set1[8],
      d: Set1[7],
      c: Set1[6],
      s: '#4545d0',
      present: '#f032e6',
      absent: '#10dbc9',
      correct: '#ffffff',
      error: '#000000',
      nr: '#cccccc'
    };
  }

  static get lights() {
    return Object.keys(igtElement.colors).reduce((acc, cur) => {
      acc[cur] = interpolateRgb(igtElement.colors[cur], '#ffffff')(0.5);
      return acc;
    }, {});
  }

  static get darks() {
    return Object.keys(igtElement.colors).reduce((acc, cur) => {
      acc[cur] = interpolateRgb(igtElement.colors[cur], '#000000')(0.5);
      return acc;
    }, {});
  }

  static get styles() {
    return [super.styles, r$2(_t$5 || (_t$5 = _$5`
        :host {
          ---color-h: var(--color-h, ${0});
          ---color-m: var(--color-m, ${0});
          ---color-fa: var(--color-fa, ${0});
          ---color-cr: var(--color-cr, ${0});
          ---color-hr: var(--color-hr, ${0});
          ---color-far: var(--color-far, ${0});
          ---color-acc: var(--color-acc, ${0});
          ---color-d: var(--color-d, ${0});
          ---color-c: var(--color-c, ${0});
          ---color-s: var(--color-s, ${0});
          ---color-present: var(--color-present, ${0});
          ---color-absent: var(--color-absent, ${0});
          ---color-correct: var(--color-correct, ${0});
          ---color-error: var(--color-error, ${0});
          ---color-nr: var(--color-nr, ${0});

          ---color-h-light: var(--color-h-light, ${0});
          ---color-m-light: var(--color-m-light, ${0});
          ---color-fa-light: var(--color-fa-light, ${0});
          ---color-cr-light: var(--color-cr-light, ${0});
          ---color-hr-light: var(--color-hr-light, ${0});
          ---color-far-light: var(--color-far-light, ${0});
          ---color-acc-light: var(--color-acc-light, ${0});
          ---color-d-light: var(--color-d-light, ${0});
          ---color-c-light: var(--color-c-light, ${0});
          ---color-s-light: var(--color-s-light, ${0});
          ---color-present-light: var(--color-present-light, ${0});
          ---color-absent-light: var(--color-absent-light, ${0});
          ---color-correct-light: var(--color-correct-light, ${0});
          ---color-error-light: var(--color-error-light, ${0});
          ---color-nr-light: var(--color-nr-light, ${0});

          ---color-h-dark: var(--color-h-dark, ${0});
          ---color-m-dark: var(--color-m-dark, ${0});
          ---color-fa-dark: var(--color-fa-dark, ${0});
          ---color-cr-dark: var(--color-cr-dark, ${0});
          ---color-hr-dark: var(--color-hr-dark, ${0});
          ---color-far-dark: var(--color-far-dark, ${0});
          ---color-acc-dark: var(--color-acc-dark, ${0});
          ---color-d-dark: var(--color-d-dark, ${0});
          ---color-c-dark: var(--color-c-dark, ${0});
          ---color-s-dark: var(--color-s-dark, ${0});
          ---color-present-dark: var(--color-present-dark, ${0});
          ---color-absent-dark: var(--color-absent-dark, ${0});
          ---color-correct-dark: var(--color-correct-dark, ${0});
          ---color-error-dark: var(--color-error-dark, ${0});
          ---color-nr-dark: var(--color-nr-dark, ${0});
        }
      `), o$3(this.colors.h), o$3(this.colors.m), o$3(this.colors.fa), o$3(this.colors.cr), o$3(this.colors.hr), o$3(this.colors.far), o$3(this.colors.acc), o$3(this.colors.d), o$3(this.colors.c), o$3(this.colors.s), o$3(this.colors.present), o$3(this.colors.absent), o$3(this.colors.correct), o$3(this.colors.error), o$3(this.colors.nr), o$3(this.lights.h), o$3(this.lights.m), o$3(this.lights.fa), o$3(this.lights.cr), o$3(this.lights.hr), o$3(this.lights.far), o$3(this.lights.acc), o$3(this.lights.d), o$3(this.lights.c), o$3(this.lights.s), o$3(this.lights.present), o$3(this.lights.absent), o$3(this.lights.correct), o$3(this.lights.error), o$3(this.lights.nr), o$3(this.darks.h), o$3(this.darks.m), o$3(this.darks.fa), o$3(this.darks.cr), o$3(this.darks.hr), o$3(this.darks.far), o$3(this.darks.acc), o$3(this.darks.d), o$3(this.darks.c), o$3(this.darks.s), o$3(this.darks.present), o$3(this.darks.absent), o$3(this.darks.correct), o$3(this.darks.error), o$3(this.darks.nr))];
  }

}

let _$4 = t => t,
    _t$4,
    _t2$3,
    _t3$1,
    _t4$1,
    _t5,
    _t6,
    _t7,
    _t8,
    _t9,
    _t10;
/*
  DetectableTable element
  <detectable-table>

  Attributes:
  Hit; Miss; FalseAlarm; CorrectRejection;
*/

class igtTask extends igtElement {
  static get properties() {
    return {
      deck: {
        attribute: false,
        type: Number,
        reflect: false
      },
      gain: {
        attribute: false,
        type: Number,
        reflect: false
      },
      loss: {
        attribute: false,
        type: Number,
        reflect: false
      },
      deck1count: {
        attribute: false,
        type: Number,
        reflect: false
      },
      deck2count: {
        attribute: false,
        type: Number,
        reflect: false
      },
      deck3count: {
        attribute: false,
        type: Number,
        reflect: false
      },
      deck4count: {
        attribute: false,
        type: Number,
        reflect: false
      }
    };
  }

  constructor() {
    super();
    this.deck = 0;
    this.gain = 0;
    this.loss = 0;
    this.deck1count = 0;
    this.deck2count = 0;
    this.deck3count = 0;
    this.deck4count = 0;
    this.deck1gain = 100;
    this.deck2gain = 100;
    this.deck3gain = 50;
    this.deck4gain = 50;
    this.trial = 0;
    this.deck1loss = [0, 0, -150, 0, -300, 0, -200, 0, -250, -350, 0, -350, 0, -250, -200, 0, -300, -150, 0, 0, 0, -300, 0, -350, 0, -200, -250, -150, 0, 0, -350, -200, -250, 0, 0, 0, -150, -300, 0, 0];
    this.deck2loss = [0, 0, 0, 0, 0, 0, 0, 0, -1250, 0, 0, 0, 0, -1250, 0, 0, 0, 0, 0, 0, -1250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1250, 0, 0, 0, 0, 0, 0, 0, 0];
    this.deck3loss = [0, 0, -50, 0, -50, 0, -50, 0, -50, -50, 0, -25, -75, 0, 0, 0, -25, -75, 0, -50, 0, 0, 0, -50, -25, -50, 0, 0, -75, -50, 0, 0, 0, -25, -25, 0, -75, 0, -50, -75];
    this.deck4loss = [0, 0, 0, 0, 0, 0, 0, 0, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, -250, 0, 0, 0, 0, 0, -250, 0, 0, 0, 0, 0];
  }

  sendEvent(deck) {
    this.deck = deck;
    this.trial++;
    this.gain = deck === 1 ? this.deck1gain : deck === 2 ? this.deck2gain : deck === 3 ? this.deck3gain : this.deck4gain;
    this.loss = deck === 1 ? this.deck1loss[this.deck1count - 1] : deck === 2 ? this.deck2loss[this.deck2count - 1] : deck === 3 ? this.deck3loss[this.deck3count - 1] : this.deck4loss[this.deck4count - 1];
    this.dispatchEvent(new CustomEvent('igt-task-change', {
      detail: {
        trial: this.trial,
        deck,
        gain: this.gain,
        loss: this.loss,
        deck1count: this.deck1count,
        deck2count: this.deck2count,
        deck3count: this.deck3count,
        deck4count: this.deck4count
      },
      bubbles: true
    }));
  }

  deck1event() {
    if (this.trial == 40) return;
    this.deck1count += 1;
    this.sendEvent(1);
  }

  deck2event() {
    if (this.trial == 40) return;
    this.deck2count += 1;
    this.sendEvent(2);
  }

  deck3event() {
    if (this.trial == 40) return;
    this.deck3count += 1;
    this.sendEvent(3);
  }

  deck4event() {
    if (this.trial == 40) return;
    this.deck4count += 1;
    this.sendEvent(4);
  }

  reset() {
    this.deck = 0;
    this.gain = 0;
    this.loss = 0;
    this.deck1count = 0;
    this.deck2count = 0;
    this.deck3count = 0;
    this.deck4count = 0;
    this.trial = 0;
  }

  static get styles() {
    return [super.styles, r$2(_t$4 || (_t$4 = _$4`
        :host {
          display: inline-block;
        }
        div.deck {
          display: flex;
          gap: 5px;
        }
        div.gain{
          color: green;
        }
        div.loss{
          color: red;
        }
        div.card {
          width: 200px;
          height: 300px;
          border: 1px solid black;
          text-align: center;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
        }
      `))];
  }

  render() {
    return $(_t2$3 || (_t2$3 = _$4`
    <div class="deck">
    <div class="card" @click=${0}><div>Deck 1</div><div><div class="gain">${0}</div><div class="loss">${0}</div></div><div></div></div>
    <div class="card" @click=${0}><div>Deck 2</div><div><div class="gain">${0}</div><div class="loss">${0}</div></div><div></div></div>
    <div class="card" @click=${0}><div>Deck 3</div><div><div class="gain">${0}</div><div class="loss">${0}</div></div><div></div></div>
    <div class="card" @click=${0}><div>Deck 4</div><div><div class="gain">${0}</div><div class="loss">${0}</div></div><div></div></div>
    </div>  `), this.deck1event.bind(this), this.deck === 1 ? $(_t3$1 || (_t3$1 = _$4`gain is ${0}`), this.gain) : "", this.deck === 1 ? $(_t4$1 || (_t4$1 = _$4`loss is ${0}`), this.loss) : "", this.deck2event.bind(this), this.deck === 2 ? $(_t5 || (_t5 = _$4`gain is ${0}`), this.gain) : "", this.deck === 2 ? $(_t6 || (_t6 = _$4`loss is ${0}`), this.loss) : "", this.deck3event.bind(this), this.deck === 3 ? $(_t7 || (_t7 = _$4`gain is ${0}`), this.gain) : "", this.deck === 3 ? $(_t8 || (_t8 = _$4`loss is ${0}`), this.loss) : "", this.deck4event.bind(this), this.deck === 4 ? $(_t9 || (_t9 = _$4`gain is ${0}`), this.gain) : "", this.deck === 4 ? $(_t10 || (_t10 = _$4`loss is ${0}`), this.loss) : "");
  }

}
customElements.define('igt-task', igtTask);

let _$3 = t => t,
    _t$3,
    _t2$2;
/*
  DetectableControl element
  <detectable-control>

  Attributes:

*/

class igtControl extends igtElement {
  static get properties() {
    return {
      reset: {
        attribute: 'reset',
        type: Boolean,
        reflect: true
      }
    };
  }

  constructor() {
    super(); // Attributes

    this.reset = false; // Properties
  }

  doReset() {
    this.dispatchEvent(new CustomEvent('igt-control-reset', {
      detail: {},
      bubbles: true
    }));
  }

  static get styles() {
    return [super.styles, r$2(_t$3 || (_t$3 = _$3`
        :host {
          display: inline-block;
        }

        .holder {
          display: flex;

          flex-direction: row;

          align-items: stretch;
          justify-content: center;
        }

        .buttons {
          display: flex;

          flex-direction: column;

          align-items: stretch;
          justify-content: center;
        }
      `))];
  }

  render() {
    return $(_t2$2 || (_t2$2 = _$3`
      <div class="holder">
            <div class="buttons">
              <decidables-button name="reset" @click=${0}>Reset</decidables-button>
                
            </div>
      </div>`), this.doReset.bind(this));
  }

}
customElements.define('igt-control', igtControl);

var version_1 = '2.11.1';
var version$2 = {
  version: version_1
};

/*! Native Promise Only
    v0.8.1 (c) Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
createCommonjsModule(function (module) {
  (function UMD(name, context, definition) {
    // special form of UMD for polyfilling across evironments
    context[name] = context[name] || definition();

    if (module.exports) {
      module.exports = context[name];
    }
  })("Promise", typeof commonjsGlobal != "undefined" ? commonjsGlobal : commonjsGlobal, function DEF() {

    var builtInProp,
        cycle,
        scheduling_queue,
        ToString = Object.prototype.toString,
        timer = typeof setImmediate != "undefined" ? function timer(fn) {
      return setImmediate(fn);
    } : setTimeout; // dammit, IE8.

    try {
      Object.defineProperty({}, "x", {});

      builtInProp = function builtInProp(obj, name, val, config) {
        return Object.defineProperty(obj, name, {
          value: val,
          writable: true,
          configurable: config !== false
        });
      };
    } catch (err) {
      builtInProp = function builtInProp(obj, name, val) {
        obj[name] = val;
        return obj;
      };
    } // Note: using a queue instead of array for efficiency


    scheduling_queue = function Queue() {
      var first, last, item;

      function Item(fn, self) {
        this.fn = fn;
        this.self = self;
        this.next = void 0;
      }

      return {
        add: function add(fn, self) {
          item = new Item(fn, self);

          if (last) {
            last.next = item;
          } else {
            first = item;
          }

          last = item;
          item = void 0;
        },
        drain: function drain() {
          var f = first;
          first = last = cycle = void 0;

          while (f) {
            f.fn.call(f.self);
            f = f.next;
          }
        }
      };
    }();

    function schedule(fn, self) {
      scheduling_queue.add(fn, self);

      if (!cycle) {
        cycle = timer(scheduling_queue.drain);
      }
    } // promise duck typing


    function isThenable(o) {
      var _then,
          o_type = typeof o;

      if (o != null && (o_type == "object" || o_type == "function")) {
        _then = o.then;
      }

      return typeof _then == "function" ? _then : false;
    }

    function notify() {
      for (var i = 0; i < this.chain.length; i++) {
        notifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);
      }

      this.chain.length = 0;
    } // NOTE: This is a separate function to isolate
    // the `try..catch` so that other code can be
    // optimized better


    function notifyIsolated(self, cb, chain) {
      var ret, _then;

      try {
        if (cb === false) {
          chain.reject(self.msg);
        } else {
          if (cb === true) {
            ret = self.msg;
          } else {
            ret = cb.call(void 0, self.msg);
          }

          if (ret === chain.promise) {
            chain.reject(TypeError("Promise-chain cycle"));
          } else if (_then = isThenable(ret)) {
            _then.call(ret, chain.resolve, chain.reject);
          } else {
            chain.resolve(ret);
          }
        }
      } catch (err) {
        chain.reject(err);
      }
    }

    function resolve(msg) {
      var _then,
          self = this; // already triggered?


      if (self.triggered) {
        return;
      }

      self.triggered = true; // unwrap

      if (self.def) {
        self = self.def;
      }

      try {
        if (_then = isThenable(msg)) {
          schedule(function () {
            var def_wrapper = new MakeDefWrapper(self);

            try {
              _then.call(msg, function $resolve$() {
                resolve.apply(def_wrapper, arguments);
              }, function $reject$() {
                reject.apply(def_wrapper, arguments);
              });
            } catch (err) {
              reject.call(def_wrapper, err);
            }
          });
        } else {
          self.msg = msg;
          self.state = 1;

          if (self.chain.length > 0) {
            schedule(notify, self);
          }
        }
      } catch (err) {
        reject.call(new MakeDefWrapper(self), err);
      }
    }

    function reject(msg) {
      var self = this; // already triggered?

      if (self.triggered) {
        return;
      }

      self.triggered = true; // unwrap

      if (self.def) {
        self = self.def;
      }

      self.msg = msg;
      self.state = 2;

      if (self.chain.length > 0) {
        schedule(notify, self);
      }
    }

    function iteratePromises(Constructor, arr, resolver, rejecter) {
      for (var idx = 0; idx < arr.length; idx++) {
        (function IIFE(idx) {
          Constructor.resolve(arr[idx]).then(function $resolver$(msg) {
            resolver(idx, msg);
          }, rejecter);
        })(idx);
      }
    }

    function MakeDefWrapper(self) {
      this.def = self;
      this.triggered = false;
    }

    function MakeDef(self) {
      this.promise = self;
      this.state = 0;
      this.triggered = false;
      this.chain = [];
      this.msg = void 0;
    }

    function Promise(executor) {
      if (typeof executor != "function") {
        throw TypeError("Not a function");
      }

      if (this.__NPO__ !== 0) {
        throw TypeError("Not a promise");
      } // instance shadowing the inherited "brand"
      // to signal an already "initialized" promise


      this.__NPO__ = 1;
      var def = new MakeDef(this);

      this["then"] = function then(success, failure) {
        var o = {
          success: typeof success == "function" ? success : true,
          failure: typeof failure == "function" ? failure : false
        }; // Note: `then(..)` itself can be borrowed to be used against
        // a different promise constructor for making the chained promise,
        // by substituting a different `this` binding.

        o.promise = new this.constructor(function extractChain(resolve, reject) {
          if (typeof resolve != "function" || typeof reject != "function") {
            throw TypeError("Not a function");
          }

          o.resolve = resolve;
          o.reject = reject;
        });
        def.chain.push(o);

        if (def.state !== 0) {
          schedule(notify, def);
        }

        return o.promise;
      };

      this["catch"] = function $catch$(failure) {
        return this.then(void 0, failure);
      };

      try {
        executor.call(void 0, function publicResolve(msg) {
          resolve.call(def, msg);
        }, function publicReject(msg) {
          reject.call(def, msg);
        });
      } catch (err) {
        reject.call(def, err);
      }
    }

    var PromisePrototype = builtInProp({}, "constructor", Promise,
    /*configurable=*/
    false); // Note: Android 4 cannot use `Object.defineProperty(..)` here

    Promise.prototype = PromisePrototype; // built-in "brand" to signal an "uninitialized" promise

    builtInProp(PromisePrototype, "__NPO__", 0,
    /*configurable=*/
    false);
    builtInProp(Promise, "resolve", function Promise$resolve(msg) {
      var Constructor = this; // spec mandated checks
      // note: best "isPromise" check that's practical for now

      if (msg && typeof msg == "object" && msg.__NPO__ === 1) {
        return msg;
      }

      return new Constructor(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        resolve(msg);
      });
    });
    builtInProp(Promise, "reject", function Promise$reject(msg) {
      return new this(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        reject(msg);
      });
    });
    builtInProp(Promise, "all", function Promise$all(arr) {
      var Constructor = this; // spec mandated checks

      if (ToString.call(arr) != "[object Array]") {
        return Constructor.reject(TypeError("Not an array"));
      }

      if (arr.length === 0) {
        return Constructor.resolve([]);
      }

      return new Constructor(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        var len = arr.length,
            msgs = Array(len),
            count = 0;
        iteratePromises(Constructor, arr, function resolver(idx, msg) {
          msgs[idx] = msg;

          if (++count === len) {
            resolve(msgs);
          }
        }, reject);
      });
    });
    builtInProp(Promise, "race", function Promise$race(arr) {
      var Constructor = this; // spec mandated checks

      if (ToString.call(arr) != "[object Array]") {
        return Constructor.reject(TypeError("Not an array"));
      }

      return new Constructor(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        iteratePromises(Constructor, arr, function resolver(idx, msg) {
          resolve(msg);
        }, reject);
      });
    });
    return Promise;
  });
});

var d3 = createCommonjsModule(function (module) {
  !function () {
    var d3 = {
      version: "3.8.0"
    };

    var d3_arraySlice = [].slice,
        d3_array = function (list) {
      return d3_arraySlice.call(list);
    };

    var d3_document = self.document;

    function d3_documentElement(node) {
      return node && (node.ownerDocument || node.document || node).documentElement;
    }

    function d3_window(node) {
      return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
    }

    if (d3_document) {
      try {
        d3_array(d3_document.documentElement.childNodes)[0].nodeType;
      } catch (e) {
        d3_array = function (list) {
          var i = list.length,
              array = new Array(i);

          while (i--) array[i] = list[i];

          return array;
        };
      }
    }

    if (!Date.now) Date.now = function () {
      return +new Date();
    };

    if (d3_document) {
      try {
        d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
      } catch (error) {
        var d3_element_prototype = this.Element.prototype,
            d3_element_setAttribute = d3_element_prototype.setAttribute,
            d3_element_setAttributeNS = d3_element_prototype.setAttributeNS,
            d3_style_prototype = this.CSSStyleDeclaration.prototype,
            d3_style_setProperty = d3_style_prototype.setProperty;

        d3_element_prototype.setAttribute = function (name, value) {
          d3_element_setAttribute.call(this, name, value + "");
        };

        d3_element_prototype.setAttributeNS = function (space, local, value) {
          d3_element_setAttributeNS.call(this, space, local, value + "");
        };

        d3_style_prototype.setProperty = function (name, value, priority) {
          d3_style_setProperty.call(this, name, value + "", priority);
        };
      }
    }

    d3.ascending = d3_ascending;

    function d3_ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    d3.descending = function (a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    };

    d3.min = function (array, f) {
      var i = -1,
          n = array.length,
          a,
          b;

      if (arguments.length === 1) {
        while (++i < n) if ((b = array[i]) != null && b >= b) {
          a = b;
          break;
        }

        while (++i < n) if ((b = array[i]) != null && a > b) a = b;
      } else {
        while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
          a = b;
          break;
        }

        while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
      }

      return a;
    };

    d3.max = function (array, f) {
      var i = -1,
          n = array.length,
          a,
          b;

      if (arguments.length === 1) {
        while (++i < n) if ((b = array[i]) != null && b >= b) {
          a = b;
          break;
        }

        while (++i < n) if ((b = array[i]) != null && b > a) a = b;
      } else {
        while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
          a = b;
          break;
        }

        while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
      }

      return a;
    };

    d3.extent = function (array, f) {
      var i = -1,
          n = array.length,
          a,
          b,
          c;

      if (arguments.length === 1) {
        while (++i < n) if ((b = array[i]) != null && b >= b) {
          a = c = b;
          break;
        }

        while (++i < n) if ((b = array[i]) != null) {
          if (a > b) a = b;
          if (c < b) c = b;
        }
      } else {
        while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
          a = c = b;
          break;
        }

        while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
          if (a > b) a = b;
          if (c < b) c = b;
        }
      }

      return [a, c];
    };

    function d3_number(x) {
      return x === null ? NaN : +x;
    }

    function d3_numeric(x) {
      return !isNaN(x);
    }

    d3.sum = function (array, f) {
      var s = 0,
          n = array.length,
          a,
          i = -1;

      if (arguments.length === 1) {
        while (++i < n) if (d3_numeric(a = +array[i])) s += a;
      } else {
        while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
      }

      return s;
    };

    d3.mean = function (array, f) {
      var s = 0,
          n = array.length,
          a,
          i = -1,
          j = n;

      if (arguments.length === 1) {
        while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a;else --j;
      } else {
        while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a;else --j;
      }

      if (j) return s / j;
    };

    d3.quantile = function (values, p) {
      var H = (values.length - 1) * p + 1,
          h = Math.floor(H),
          v = +values[h - 1],
          e = H - h;
      return e ? v + e * (values[h] - v) : v;
    };

    d3.median = function (array, f) {
      var numbers = [],
          n = array.length,
          a,
          i = -1;

      if (arguments.length === 1) {
        while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
      } else {
        while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
      }

      if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
    };

    d3.variance = function (array, f) {
      var n = array.length,
          m = 0,
          a,
          d,
          s = 0,
          i = -1,
          j = 0;

      if (arguments.length === 1) {
        while (++i < n) {
          if (d3_numeric(a = d3_number(array[i]))) {
            d = a - m;
            m += d / ++j;
            s += d * (a - m);
          }
        }
      } else {
        while (++i < n) {
          if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
            d = a - m;
            m += d / ++j;
            s += d * (a - m);
          }
        }
      }

      if (j > 1) return s / (j - 1);
    };

    d3.deviation = function () {
      var v = d3.variance.apply(this, arguments);
      return v ? Math.sqrt(v) : v;
    };

    function d3_bisector(compare) {
      return {
        left: function (a, x, lo, hi) {
          if (arguments.length < 3) lo = 0;
          if (arguments.length < 4) hi = a.length;

          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
          }

          return lo;
        },
        right: function (a, x, lo, hi) {
          if (arguments.length < 3) lo = 0;
          if (arguments.length < 4) hi = a.length;

          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
          }

          return lo;
        }
      };
    }

    var d3_bisect = d3_bisector(d3_ascending);
    d3.bisectLeft = d3_bisect.left;
    d3.bisect = d3.bisectRight = d3_bisect.right;

    d3.bisector = function (f) {
      return d3_bisector(f.length === 1 ? function (d, x) {
        return d3_ascending(f(d), x);
      } : f);
    };

    d3.shuffle = function (array, i0, i1) {
      if ((m = arguments.length) < 3) {
        i1 = array.length;
        if (m < 2) i0 = 0;
      }

      var m = i1 - i0,
          t,
          i;

      while (m) {
        i = Math.random() * m-- | 0;
        t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
      }

      return array;
    };

    d3.permute = function (array, indexes) {
      var i = indexes.length,
          permutes = new Array(i);

      while (i--) permutes[i] = array[indexes[i]];

      return permutes;
    };

    d3.pairs = function (array) {
      var i = 0,
          n = array.length - 1,
          p1 = array[0],
          pairs = new Array(n < 0 ? 0 : n);

      while (i < n) pairs[i] = [p1, p1 = array[++i]];

      return pairs;
    };

    d3.transpose = function (matrix) {
      if (!(n = matrix.length)) return [];

      for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m;) {
        for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
          row[j] = matrix[j][i];
        }
      }

      return transpose;
    };

    function d3_transposeLength(d) {
      return d.length;
    }

    d3.zip = function () {
      return d3.transpose(arguments);
    };

    d3.keys = function (map) {
      var keys = [];

      for (var key in map) keys.push(key);

      return keys;
    };

    d3.values = function (map) {
      var values = [];

      for (var key in map) values.push(map[key]);

      return values;
    };

    d3.entries = function (map) {
      var entries = [];

      for (var key in map) entries.push({
        key: key,
        value: map[key]
      });

      return entries;
    };

    d3.merge = function (arrays) {
      var n = arrays.length,
          m,
          i = -1,
          j = 0,
          merged,
          array;

      while (++i < n) j += arrays[i].length;

      merged = new Array(j);

      while (--n >= 0) {
        array = arrays[n];
        m = array.length;

        while (--m >= 0) {
          merged[--j] = array[m];
        }
      }

      return merged;
    };

    var abs = Math.abs;

    d3.range = function (start, stop, step) {
      if (arguments.length < 3) {
        step = 1;

        if (arguments.length < 2) {
          stop = start;
          start = 0;
        }
      }

      if ((stop - start) / step === Infinity) throw new Error("infinite range");
      var range = [],
          k = d3_range_integerScale(abs(step)),
          i = -1,
          j;
      start *= k, stop *= k, step *= k;
      if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k);else while ((j = start + step * ++i) < stop) range.push(j / k);
      return range;
    };

    function d3_range_integerScale(x) {
      var k = 1;

      while (x * k % 1) k *= 10;

      return k;
    }

    function d3_class(ctor, properties) {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    }

    d3.map = function (object, f) {
      var map = new d3_Map();

      if (object instanceof d3_Map) {
        object.forEach(function (key, value) {
          map.set(key, value);
        });
      } else if (Array.isArray(object)) {
        var i = -1,
            n = object.length,
            o;
        if (arguments.length === 1) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f.call(object, o = object[i], i), o);
      } else {
        for (var key in object) map.set(key, object[key]);
      }

      return map;
    };

    function d3_Map() {
      this._ = Object.create(null);
    }

    var d3_map_proto = "__proto__",
        d3_map_zero = "\x00";
    d3_class(d3_Map, {
      has: d3_map_has,
      get: function (key) {
        return this._[d3_map_escape(key)];
      },
      set: function (key, value) {
        return this._[d3_map_escape(key)] = value;
      },
      remove: d3_map_remove,
      keys: d3_map_keys,
      values: function () {
        var values = [];

        for (var key in this._) values.push(this._[key]);

        return values;
      },
      entries: function () {
        var entries = [];

        for (var key in this._) entries.push({
          key: d3_map_unescape(key),
          value: this._[key]
        });

        return entries;
      },
      size: d3_map_size,
      empty: d3_map_empty,
      forEach: function (f) {
        for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
      }
    });

    function d3_map_escape(key) {
      return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
    }

    function d3_map_unescape(key) {
      return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
    }

    function d3_map_has(key) {
      return d3_map_escape(key) in this._;
    }

    function d3_map_remove(key) {
      return (key = d3_map_escape(key)) in this._ && delete this._[key];
    }

    function d3_map_keys() {
      var keys = [];

      for (var key in this._) keys.push(d3_map_unescape(key));

      return keys;
    }

    function d3_map_size() {
      var size = 0;

      for (var key in this._) ++size;

      return size;
    }

    function d3_map_empty() {
      for (var key in this._) return false;

      return true;
    }

    d3.nest = function () {
      var nest = {},
          keys = [],
          sortKeys = [],
          sortValues,
          rollup;

      function map(mapType, array, depth) {
        if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
        var i = -1,
            n = array.length,
            key = keys[depth++],
            keyValue,
            object,
            setter,
            valuesByKey = new d3_Map(),
            values;

        while (++i < n) {
          if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
            values.push(object);
          } else {
            valuesByKey.set(keyValue, [object]);
          }
        }

        if (mapType) {
          object = mapType();

          setter = function (keyValue, values) {
            object.set(keyValue, map(mapType, values, depth));
          };
        } else {
          object = {};

          setter = function (keyValue, values) {
            object[keyValue] = map(mapType, values, depth);
          };
        }

        valuesByKey.forEach(setter);
        return object;
      }

      function entries(map, depth) {
        if (depth >= keys.length) return map;
        var array = [],
            sortKey = sortKeys[depth++];
        map.forEach(function (key, keyMap) {
          array.push({
            key: key,
            values: entries(keyMap, depth)
          });
        });
        return sortKey ? array.sort(function (a, b) {
          return sortKey(a.key, b.key);
        }) : array;
      }

      nest.map = function (array, mapType) {
        return map(mapType, array, 0);
      };

      nest.entries = function (array) {
        return entries(map(d3.map, array, 0), 0);
      };

      nest.key = function (d) {
        keys.push(d);
        return nest;
      };

      nest.sortKeys = function (order) {
        sortKeys[keys.length - 1] = order;
        return nest;
      };

      nest.sortValues = function (order) {
        sortValues = order;
        return nest;
      };

      nest.rollup = function (f) {
        rollup = f;
        return nest;
      };

      return nest;
    };

    d3.set = function (array) {
      var set = new d3_Set();
      if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
      return set;
    };

    function d3_Set() {
      this._ = Object.create(null);
    }

    d3_class(d3_Set, {
      has: d3_map_has,
      add: function (key) {
        this._[d3_map_escape(key += "")] = true;
        return key;
      },
      remove: d3_map_remove,
      values: d3_map_keys,
      size: d3_map_size,
      empty: d3_map_empty,
      forEach: function (f) {
        for (var key in this._) f.call(this, d3_map_unescape(key));
      }
    });
    d3.behavior = {};

    function d3_identity(d) {
      return d;
    }

    d3.rebind = function (target, source) {
      var i = 1,
          n = arguments.length,
          method;

      while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);

      return target;
    };

    function d3_rebind(target, source, method) {
      return function () {
        var value = method.apply(source, arguments);
        return value === source ? target : value;
      };
    }

    function d3_vendorSymbol(object, name) {
      if (name in object) return name;
      name = name.charAt(0).toUpperCase() + name.slice(1);

      for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
        var prefixName = d3_vendorPrefixes[i] + name;
        if (prefixName in object) return prefixName;
      }
    }

    var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];

    function d3_noop() {}

    d3.dispatch = function () {
      var dispatch = new d3_dispatch(),
          i = -1,
          n = arguments.length;

      while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);

      return dispatch;
    };

    function d3_dispatch() {}

    d3_dispatch.prototype.on = function (type, listener) {
      var i = type.indexOf("."),
          name = "";

      if (i >= 0) {
        name = type.slice(i + 1);
        type = type.slice(0, i);
      }

      if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);

      if (arguments.length === 2) {
        if (listener == null) for (type in this) {
          if (this.hasOwnProperty(type)) this[type].on(name, null);
        }
        return this;
      }
    };

    function d3_dispatch_event(dispatch) {
      var listeners = [],
          listenerByName = new d3_Map();

      function event() {
        var z = listeners,
            i = -1,
            n = z.length,
            l;

        while (++i < n) if (l = z[i].on) l.apply(this, arguments);

        return dispatch;
      }

      event.on = function (name, listener) {
        var l = listenerByName.get(name),
            i;
        if (arguments.length < 2) return l && l.on;

        if (l) {
          l.on = null;
          listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
          listenerByName.remove(name);
        }

        if (listener) listeners.push(listenerByName.set(name, {
          on: listener
        }));
        return dispatch;
      };

      return event;
    }

    d3.event = null;

    function d3_eventPreventDefault() {
      d3.event.preventDefault();
    }

    function d3_eventSource() {
      var e = d3.event,
          s;

      while (s = e.sourceEvent) e = s;

      return e;
    }

    function d3_eventDispatch(target) {
      var dispatch = new d3_dispatch(),
          i = 0,
          n = arguments.length;

      while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);

      dispatch.of = function (thiz, argumentz) {
        return function (e1) {
          try {
            var e0 = e1.sourceEvent = d3.event;
            e1.target = target;
            d3.event = e1;
            dispatch[e1.type].apply(thiz, argumentz);
          } finally {
            d3.event = e0;
          }
        };
      };

      return dispatch;
    }

    d3.requote = function (s) {
      return s.replace(d3_requote_re, "\\$&");
    };

    var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    var d3_subclass = {}.__proto__ ? function (object, prototype) {
      object.__proto__ = prototype;
    } : function (object, prototype) {
      for (var property in prototype) object[property] = prototype[property];
    };

    function d3_selection(groups) {
      d3_subclass(groups, d3_selectionPrototype);
      return groups;
    }

    var d3_select = function (s, n) {
      return n.querySelector(s);
    },
        d3_selectAll = function (s, n) {
      return n.querySelectorAll(s);
    },
        d3_selectMatches = function (n, s) {
      var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];

      d3_selectMatches = function (n, s) {
        return d3_selectMatcher.call(n, s);
      };

      return d3_selectMatches(n, s);
    };

    if (typeof Sizzle === "function") {
      d3_select = function (s, n) {
        return Sizzle(s, n)[0] || null;
      };

      d3_selectAll = Sizzle;
      d3_selectMatches = Sizzle.matchesSelector;
    }

    d3.selection = function () {
      return d3.select(d3_document.documentElement);
    };

    var d3_selectionPrototype = d3.selection.prototype = [];

    d3_selectionPrototype.select = function (selector) {
      var subgroups = [],
          subgroup,
          subnode,
          group,
          node;
      selector = d3_selection_selector(selector);

      for (var j = -1, m = this.length; ++j < m;) {
        subgroups.push(subgroup = []);
        subgroup.parentNode = (group = this[j]).parentNode;

        for (var i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            subgroup.push(subnode = selector.call(node, node.__data__, i, j));
            if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
          } else {
            subgroup.push(null);
          }
        }
      }

      return d3_selection(subgroups);
    };

    function d3_selection_selector(selector) {
      return typeof selector === "function" ? selector : function () {
        return d3_select(selector, this);
      };
    }

    d3_selectionPrototype.selectAll = function (selector) {
      var subgroups = [],
          subgroup,
          node;
      selector = d3_selection_selectorAll(selector);

      for (var j = -1, m = this.length; ++j < m;) {
        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
            subgroup.parentNode = node;
          }
        }
      }

      return d3_selection(subgroups);
    };

    function d3_selection_selectorAll(selector) {
      return typeof selector === "function" ? selector : function () {
        return d3_selectAll(selector, this);
      };
    }

    var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
    var d3_nsPrefix = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: d3_nsXhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };
    d3.ns = {
      prefix: d3_nsPrefix,
      qualify: function (name) {
        var i = name.indexOf(":"),
            prefix = name;
        if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
        return d3_nsPrefix.hasOwnProperty(prefix) ? {
          space: d3_nsPrefix[prefix],
          local: name
        } : name;
      }
    };

    d3_selectionPrototype.attr = function (name, value) {
      if (arguments.length < 2) {
        if (typeof name === "string") {
          var node = this.node();
          name = d3.ns.qualify(name);
          return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
        }

        for (value in name) this.each(d3_selection_attr(value, name[value]));

        return this;
      }

      return this.each(d3_selection_attr(name, value));
    };

    function d3_selection_attr(name, value) {
      name = d3.ns.qualify(name);

      function attrNull() {
        this.removeAttribute(name);
      }

      function attrNullNS() {
        this.removeAttributeNS(name.space, name.local);
      }

      function attrConstant() {
        this.setAttribute(name, value);
      }

      function attrConstantNS() {
        this.setAttributeNS(name.space, name.local, value);
      }

      function attrFunction() {
        var x = value.apply(this, arguments);
        if (x == null) this.removeAttribute(name);else this.setAttribute(name, x);
      }

      function attrFunctionNS() {
        var x = value.apply(this, arguments);
        if (x == null) this.removeAttributeNS(name.space, name.local);else this.setAttributeNS(name.space, name.local, x);
      }

      return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
    }

    function d3_collapse(s) {
      return s.trim().replace(/\s+/g, " ");
    }

    d3_selectionPrototype.classed = function (name, value) {
      if (arguments.length < 2) {
        if (typeof name === "string") {
          var node = this.node(),
              n = (name = d3_selection_classes(name)).length,
              i = -1;

          if (value = node.classList) {
            while (++i < n) if (!value.contains(name[i])) return false;
          } else {
            value = node.getAttribute("class");

            while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
          }

          return true;
        }

        for (value in name) this.each(d3_selection_classed(value, name[value]));

        return this;
      }

      return this.each(d3_selection_classed(name, value));
    };

    function d3_selection_classedRe(name) {
      return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
    }

    function d3_selection_classes(name) {
      return (name + "").trim().split(/^|\s+/);
    }

    function d3_selection_classed(name, value) {
      name = d3_selection_classes(name).map(d3_selection_classedName);
      var n = name.length;

      function classedConstant() {
        var i = -1;

        while (++i < n) name[i](this, value);
      }

      function classedFunction() {
        var i = -1,
            x = value.apply(this, arguments);

        while (++i < n) name[i](this, x);
      }

      return typeof value === "function" ? classedFunction : classedConstant;
    }

    function d3_selection_classedName(name) {
      var re = d3_selection_classedRe(name);
      return function (node, value) {
        if (c = node.classList) return value ? c.add(name) : c.remove(name);
        var c = node.getAttribute("class") || "";

        if (value) {
          re.lastIndex = 0;
          if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
        } else {
          node.setAttribute("class", d3_collapse(c.replace(re, " ")));
        }
      };
    }

    d3_selectionPrototype.style = function (name, value, priority) {
      var n = arguments.length;

      if (n < 3) {
        if (typeof name !== "string") {
          if (n < 2) value = "";

          for (priority in name) this.each(d3_selection_style(priority, name[priority], value));

          return this;
        }

        if (n < 2) {
          var node = this.node();
          return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
        }

        priority = "";
      }

      return this.each(d3_selection_style(name, value, priority));
    };

    function d3_selection_style(name, value, priority) {
      function styleNull() {
        this.style.removeProperty(name);
      }

      function styleConstant() {
        this.style.setProperty(name, value, priority);
      }

      function styleFunction() {
        var x = value.apply(this, arguments);
        if (x == null) this.style.removeProperty(name);else this.style.setProperty(name, x, priority);
      }

      return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
    }

    d3_selectionPrototype.property = function (name, value) {
      if (arguments.length < 2) {
        if (typeof name === "string") return this.node()[name];

        for (value in name) this.each(d3_selection_property(value, name[value]));

        return this;
      }

      return this.each(d3_selection_property(name, value));
    };

    function d3_selection_property(name, value) {
      function propertyNull() {
        delete this[name];
      }

      function propertyConstant() {
        this[name] = value;
      }

      function propertyFunction() {
        var x = value.apply(this, arguments);
        if (x == null) delete this[name];else this[name] = x;
      }

      return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
    }

    d3_selectionPrototype.text = function (value) {
      return arguments.length ? this.each(typeof value === "function" ? function () {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      } : value == null ? function () {
        this.textContent = "";
      } : function () {
        this.textContent = value;
      }) : this.node().textContent;
    };

    d3_selectionPrototype.html = function (value) {
      return arguments.length ? this.each(typeof value === "function" ? function () {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      } : value == null ? function () {
        this.innerHTML = "";
      } : function () {
        this.innerHTML = value;
      }) : this.node().innerHTML;
    };

    d3_selectionPrototype.append = function (name) {
      name = d3_selection_creator(name);
      return this.select(function () {
        return this.appendChild(name.apply(this, arguments));
      });
    };

    function d3_selection_creator(name) {
      function create() {
        var document = this.ownerDocument,
            namespace = this.namespaceURI;
        return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
      }

      function createNS() {
        return this.ownerDocument.createElementNS(name.space, name.local);
      }

      return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
    }

    d3_selectionPrototype.insert = function (name, before) {
      name = d3_selection_creator(name);
      before = d3_selection_selector(before);
      return this.select(function () {
        return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
      });
    };

    d3_selectionPrototype.remove = function () {
      return this.each(d3_selectionRemove);
    };

    function d3_selectionRemove() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }

    d3_selectionPrototype.data = function (value, key) {
      var i = -1,
          n = this.length,
          group,
          node;

      if (!arguments.length) {
        value = new Array(n = (group = this[0]).length);

        while (++i < n) {
          if (node = group[i]) {
            value[i] = node.__data__;
          }
        }

        return value;
      }

      function bind(group, groupData) {
        var i,
            n = group.length,
            m = groupData.length,
            n0 = Math.min(n, m),
            updateNodes = new Array(m),
            enterNodes = new Array(m),
            exitNodes = new Array(n),
            node,
            nodeData;

        if (key) {
          var nodeByKeyValue = new d3_Map(),
              keyValues = new Array(n),
              keyValue;

          for (i = -1; ++i < n;) {
            if (node = group[i]) {
              if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
                exitNodes[i] = node;
              } else {
                nodeByKeyValue.set(keyValue, node);
              }

              keyValues[i] = keyValue;
            }
          }

          for (i = -1; ++i < m;) {
            if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
              enterNodes[i] = d3_selection_dataNode(nodeData);
            } else if (node !== true) {
              updateNodes[i] = node;
              node.__data__ = nodeData;
            }

            nodeByKeyValue.set(keyValue, true);
          }

          for (i = -1; ++i < n;) {
            if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
              exitNodes[i] = group[i];
            }
          }
        } else {
          for (i = -1; ++i < n0;) {
            node = group[i];
            nodeData = groupData[i];

            if (node) {
              node.__data__ = nodeData;
              updateNodes[i] = node;
            } else {
              enterNodes[i] = d3_selection_dataNode(nodeData);
            }
          }

          for (; i < m; ++i) {
            enterNodes[i] = d3_selection_dataNode(groupData[i]);
          }

          for (; i < n; ++i) {
            exitNodes[i] = group[i];
          }
        }

        enterNodes.update = updateNodes;
        enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
        enter.push(enterNodes);
        update.push(updateNodes);
        exit.push(exitNodes);
      }

      var enter = d3_selection_enter([]),
          update = d3_selection([]),
          exit = d3_selection([]);

      if (typeof value === "function") {
        while (++i < n) {
          bind(group = this[i], value.call(group, group.parentNode.__data__, i));
        }
      } else {
        while (++i < n) {
          bind(group = this[i], value);
        }
      }

      update.enter = function () {
        return enter;
      };

      update.exit = function () {
        return exit;
      };

      return update;
    };

    function d3_selection_dataNode(data) {
      return {
        __data__: data
      };
    }

    d3_selectionPrototype.datum = function (value) {
      return arguments.length ? this.property("__data__", value) : this.property("__data__");
    };

    d3_selectionPrototype.filter = function (filter) {
      var subgroups = [],
          subgroup,
          group,
          node;
      if (typeof filter !== "function") filter = d3_selection_filter(filter);

      for (var j = 0, m = this.length; j < m; j++) {
        subgroups.push(subgroup = []);
        subgroup.parentNode = (group = this[j]).parentNode;

        for (var i = 0, n = group.length; i < n; i++) {
          if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
            subgroup.push(node);
          }
        }
      }

      return d3_selection(subgroups);
    };

    function d3_selection_filter(selector) {
      return function () {
        return d3_selectMatches(this, selector);
      };
    }

    d3_selectionPrototype.order = function () {
      for (var j = -1, m = this.length; ++j < m;) {
        for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }

      return this;
    };

    d3_selectionPrototype.sort = function (comparator) {
      comparator = d3_selection_sortComparator.apply(this, arguments);

      for (var j = -1, m = this.length; ++j < m;) this[j].sort(comparator);

      return this.order();
    };

    function d3_selection_sortComparator(comparator) {
      if (!arguments.length) comparator = d3_ascending;
      return function (a, b) {
        return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
      };
    }

    d3_selectionPrototype.each = function (callback) {
      return d3_selection_each(this, function (node, i, j) {
        callback.call(node, node.__data__, i, j);
      });
    };

    function d3_selection_each(groups, callback) {
      for (var j = 0, m = groups.length; j < m; j++) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
          if (node = group[i]) callback(node, i, j);
        }
      }

      return groups;
    }

    d3_selectionPrototype.call = function (callback) {
      var args = d3_array(arguments);
      callback.apply(args[0] = this, args);
      return this;
    };

    d3_selectionPrototype.empty = function () {
      return !this.node();
    };

    d3_selectionPrototype.node = function () {
      for (var j = 0, m = this.length; j < m; j++) {
        for (var group = this[j], i = 0, n = group.length; i < n; i++) {
          var node = group[i];
          if (node) return node;
        }
      }

      return null;
    };

    d3_selectionPrototype.size = function () {
      var n = 0;
      d3_selection_each(this, function () {
        ++n;
      });
      return n;
    };

    function d3_selection_enter(selection) {
      d3_subclass(selection, d3_selection_enterPrototype);
      return selection;
    }

    var d3_selection_enterPrototype = [];
    d3.selection.enter = d3_selection_enter;
    d3.selection.enter.prototype = d3_selection_enterPrototype;
    d3_selection_enterPrototype.append = d3_selectionPrototype.append;
    d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
    d3_selection_enterPrototype.node = d3_selectionPrototype.node;
    d3_selection_enterPrototype.call = d3_selectionPrototype.call;
    d3_selection_enterPrototype.size = d3_selectionPrototype.size;

    d3_selection_enterPrototype.select = function (selector) {
      var subgroups = [],
          subgroup,
          subnode,
          upgroup,
          group,
          node;

      for (var j = -1, m = this.length; ++j < m;) {
        upgroup = (group = this[j]).update;
        subgroups.push(subgroup = []);
        subgroup.parentNode = group.parentNode;

        for (var i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
            subnode.__data__ = node.__data__;
          } else {
            subgroup.push(null);
          }
        }
      }

      return d3_selection(subgroups);
    };

    d3_selection_enterPrototype.insert = function (name, before) {
      if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
      return d3_selectionPrototype.insert.call(this, name, before);
    };

    function d3_selection_enterInsertBefore(enter) {
      var i0, j0;
      return function (d, i, j) {
        var group = enter[j].update,
            n = group.length,
            node;
        if (j != j0) j0 = j, i0 = 0;
        if (i >= i0) i0 = i + 1;

        while (!(node = group[i0]) && ++i0 < n);

        return node;
      };
    }

    d3.select = function (node) {
      var group;

      if (typeof node === "string") {
        group = [d3_select(node, d3_document)];
        group.parentNode = d3_document.documentElement;
      } else {
        group = [node];
        group.parentNode = d3_documentElement(node);
      }

      return d3_selection([group]);
    };

    d3.selectAll = function (nodes) {
      var group;

      if (typeof nodes === "string") {
        group = d3_array(d3_selectAll(nodes, d3_document));
        group.parentNode = d3_document.documentElement;
      } else {
        group = d3_array(nodes);
        group.parentNode = null;
      }

      return d3_selection([group]);
    };

    d3_selectionPrototype.on = function (type, listener, capture) {
      var n = arguments.length;

      if (n < 3) {
        if (typeof type !== "string") {
          if (n < 2) listener = false;

          for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));

          return this;
        }

        if (n < 2) return (n = this.node()["__on" + type]) && n._;
        capture = false;
      }

      return this.each(d3_selection_on(type, listener, capture));
    };

    function d3_selection_on(type, listener, capture) {
      var name = "__on" + type,
          i = type.indexOf("."),
          wrap = d3_selection_onListener;
      if (i > 0) type = type.slice(0, i);
      var filter = d3_selection_onFilters.get(type);
      if (filter) type = filter, wrap = d3_selection_onFilter;

      function onRemove() {
        var l = this[name];

        if (l) {
          this.removeEventListener(type, l, l.$);
          delete this[name];
        }
      }

      function onAdd() {
        var l = wrap(listener, d3_array(arguments));
        onRemove.call(this);
        this.addEventListener(type, this[name] = l, l.$ = capture);
        l._ = listener;
      }

      function removeAll() {
        var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"),
            match;

        for (var name in this) {
          if (match = name.match(re)) {
            var l = this[name];
            this.removeEventListener(match[1], l, l.$);
            delete this[name];
          }
        }
      }

      return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
    }

    var d3_selection_onFilters = d3.map({
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    });

    if (d3_document) {
      d3_selection_onFilters.forEach(function (k) {
        if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
      });
    }

    function d3_selection_onListener(listener, argumentz) {
      return function (e) {
        var o = d3.event;
        d3.event = e;
        argumentz[0] = this.__data__;

        try {
          listener.apply(this, argumentz);
        } finally {
          d3.event = o;
        }
      };
    }

    function d3_selection_onFilter(listener, argumentz) {
      var l = d3_selection_onListener(listener, argumentz);
      return function (e) {
        var target = this,
            related = e.relatedTarget;

        if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
          l.call(target, e);
        }
      };
    }

    var d3_event_dragSelect,
        d3_event_dragId = 0;

    function d3_event_dragSuppress(node) {
      var name = ".dragsuppress-" + ++d3_event_dragId,
          click = "click" + name,
          w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);

      if (d3_event_dragSelect == null) {
        d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
      }

      if (d3_event_dragSelect) {
        var style = d3_documentElement(node).style,
            select = style[d3_event_dragSelect];
        style[d3_event_dragSelect] = "none";
      }

      return function (suppressClick) {
        w.on(name, null);
        if (d3_event_dragSelect) style[d3_event_dragSelect] = select;

        if (suppressClick) {
          var off = function () {
            w.on(click, null);
          };

          w.on(click, function () {
            d3_eventPreventDefault();
            off();
          }, true);
          setTimeout(off, 0);
        }
      };
    }

    d3.mouse = function (container) {
      return d3_mousePoint(container, d3_eventSource());
    };

    var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;

    function d3_mousePoint(container, e) {
      if (e.changedTouches) e = e.changedTouches[0];
      var svg = container.ownerSVGElement || container;

      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();

        if (d3_mouse_bug44083 < 0) {
          var window = d3_window(container);

          if (window.scrollX || window.scrollY) {
            svg = d3.select("body").append("svg").style({
              position: "absolute",
              top: 0,
              left: 0,
              margin: 0,
              padding: 0,
              border: "none"
            }, "important");
            var ctm = svg[0][0].getScreenCTM();
            d3_mouse_bug44083 = !(ctm.f || ctm.e);
            svg.remove();
          }
        }

        if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY;else point.x = e.clientX, point.y = e.clientY;
        point = point.matrixTransform(container.getScreenCTM().inverse());
        return [point.x, point.y];
      }

      var rect = container.getBoundingClientRect();
      return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop];
    }

    d3.touch = function (container, touches, identifier) {
      if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
      if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
        if ((touch = touches[i]).identifier === identifier) {
          return d3_mousePoint(container, touch);
        }
      }
    };

    d3.behavior.drag = function () {
      var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"),
          origin = null,
          mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"),
          touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");

      function drag() {
        this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
      }

      function dragstart(id, position, subject, move, end) {
        return function () {
          var that = this,
              target = d3.event.target.correspondingElement || d3.event.target,
              parent = that.parentNode,
              dispatch = event.of(that, arguments),
              dragged = 0,
              dragId = id(),
              dragName = ".drag" + (dragId == null ? "" : "-" + dragId),
              dragOffset,
              dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended),
              dragRestore = d3_event_dragSuppress(target),
              position0 = position(parent, dragId);

          if (origin) {
            dragOffset = origin.apply(that, arguments);
            dragOffset = [dragOffset.x - position0[0], dragOffset.y - position0[1]];
          } else {
            dragOffset = [0, 0];
          }

          dispatch({
            type: "dragstart"
          });

          function moved() {
            var position1 = position(parent, dragId),
                dx,
                dy;
            if (!position1) return;
            dx = position1[0] - position0[0];
            dy = position1[1] - position0[1];
            dragged |= dx | dy;
            position0 = position1;
            dispatch({
              type: "drag",
              x: position1[0] + dragOffset[0],
              y: position1[1] + dragOffset[1],
              dx: dx,
              dy: dy
            });
          }

          function ended() {
            if (!position(parent, dragId)) return;
            dragSubject.on(move + dragName, null).on(end + dragName, null);
            dragRestore(dragged);
            dispatch({
              type: "dragend"
            });
          }
        };
      }

      drag.origin = function (x) {
        if (!arguments.length) return origin;
        origin = x;
        return drag;
      };

      return d3.rebind(drag, event, "on");
    };

    function d3_behavior_dragTouchId() {
      return d3.event.changedTouches[0].identifier;
    }

    d3.touches = function (container, touches) {
      if (arguments.length < 2) touches = d3_eventSource().touches;
      return touches ? d3_array(touches).map(function (touch) {
        var point = d3_mousePoint(container, touch);
        point.identifier = touch.identifier;
        return point;
      }) : [];
    };

    var Îµ = 1e-6,
        Îµ2 = Îµ * Îµ,
        Ï = Math.PI,
        Ï = 2 * Ï,
        ÏÎµ = Ï - Îµ,
        halfÏ = Ï / 2,
        d3_radians = Ï / 180,
        d3_degrees = 180 / Ï;

    function d3_cross2d(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }

    function d3_asin(x) {
      return x > 1 ? halfÏ : x < -1 ? -halfÏ : Math.asin(x);
    }

    function d3_sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function d3_cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function d3_tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    var Ï = Math.SQRT2,
        Ï2 = 2,
        Ï4 = 4;

    d3.interpolateZoom = function (p0, p1) {
      var ux0 = p0[0],
          uy0 = p0[1],
          w0 = p0[2],
          ux1 = p1[0],
          uy1 = p1[1],
          w1 = p1[2],
          dx = ux1 - ux0,
          dy = uy1 - uy0,
          d2 = dx * dx + dy * dy,
          i,
          S;

      if (d2 < Îµ2) {
        S = Math.log(w1 / w0) / Ï;

        i = function (t) {
          return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(Ï * t * S)];
        };
      } else {
        var d1 = Math.sqrt(d2),
            b0 = (w1 * w1 - w0 * w0 + Ï4 * d2) / (2 * w0 * Ï2 * d1),
            b1 = (w1 * w1 - w0 * w0 - Ï4 * d2) / (2 * w1 * Ï2 * d1),
            r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
            r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / Ï;

        i = function (t) {
          var s = t * S,
              coshr0 = d3_cosh(r0),
              u = w0 / (Ï2 * d1) * (coshr0 * d3_tanh(Ï * s + r0) - d3_sinh(r0));
          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(Ï * s + r0)];
        };
      }

      i.duration = S * 1e3;
      return i;
    };

    d3.behavior.zoom = function () {
      var view = {
        x: 0,
        y: 0,
        k: 1
      },
          translate0,
          center0,
          center,
          size = [960, 500],
          scaleExtent = d3_behavior_zoomInfinity,
          duration = 250,
          zooming = 0,
          mousedown = "mousedown.zoom",
          mousemove = "mousemove.zoom",
          mouseup = "mouseup.zoom",
          mousewheelTimer,
          touchstart = "touchstart.zoom",
          touchtime,
          event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"),
          x0,
          x1,
          y0,
          y1;

      if (!d3_behavior_zoomWheel) {
        d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function () {
          return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
        }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function () {
          return d3.event.wheelDelta;
        }, "mousewheel") : (d3_behavior_zoomDelta = function () {
          return -d3.event.detail;
        }, "MozMousePixelScroll");
      }

      function zoom(g) {
        g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
      }

      zoom.event = function (g) {
        g.each(function () {
          var dispatch = event.of(this, arguments),
              view1 = view;

          if (d3_transitionInheritId) {
            d3.select(this).transition().each("start.zoom", function () {
              view = this.__chart__ || {
                x: 0,
                y: 0,
                k: 1
              };
              zoomstarted(dispatch);
            }).tween("zoom:zoom", function () {
              var dx = size[0],
                  dy = size[1],
                  cx = center0 ? center0[0] : dx / 2,
                  cy = center0 ? center0[1] : dy / 2,
                  i = d3.interpolateZoom([(cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k], [(cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k]);
              return function (t) {
                var l = i(t),
                    k = dx / l[2];
                this.__chart__ = view = {
                  x: cx - l[0] * k,
                  y: cy - l[1] * k,
                  k: k
                };
                zoomed(dispatch);
              };
            }).each("interrupt.zoom", function () {
              zoomended(dispatch);
            }).each("end.zoom", function () {
              zoomended(dispatch);
            });
          } else {
            this.__chart__ = view;
            zoomstarted(dispatch);
            zoomed(dispatch);
            zoomended(dispatch);
          }
        });
      };

      zoom.translate = function (_) {
        if (!arguments.length) return [view.x, view.y];
        view = {
          x: +_[0],
          y: +_[1],
          k: view.k
        };
        rescale();
        return zoom;
      };

      zoom.scale = function (_) {
        if (!arguments.length) return view.k;
        view = {
          x: view.x,
          y: view.y,
          k: null
        };
        scaleTo(+_);
        rescale();
        return zoom;
      };

      zoom.scaleExtent = function (_) {
        if (!arguments.length) return scaleExtent;
        scaleExtent = _ == null ? d3_behavior_zoomInfinity : [+_[0], +_[1]];
        return zoom;
      };

      zoom.center = function (_) {
        if (!arguments.length) return center;
        center = _ && [+_[0], +_[1]];
        return zoom;
      };

      zoom.size = function (_) {
        if (!arguments.length) return size;
        size = _ && [+_[0], +_[1]];
        return zoom;
      };

      zoom.duration = function (_) {
        if (!arguments.length) return duration;
        duration = +_;
        return zoom;
      };

      zoom.x = function (z) {
        if (!arguments.length) return x1;
        x1 = z;
        x0 = z.copy();
        view = {
          x: 0,
          y: 0,
          k: 1
        };
        return zoom;
      };

      zoom.y = function (z) {
        if (!arguments.length) return y1;
        y1 = z;
        y0 = z.copy();
        view = {
          x: 0,
          y: 0,
          k: 1
        };
        return zoom;
      };

      function location(p) {
        return [(p[0] - view.x) / view.k, (p[1] - view.y) / view.k];
      }

      function point(l) {
        return [l[0] * view.k + view.x, l[1] * view.k + view.y];
      }

      function scaleTo(s) {
        view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
      }

      function translateTo(p, l) {
        l = point(l);
        view.x += p[0] - l[0];
        view.y += p[1] - l[1];
      }

      function zoomTo(that, p, l, k) {
        that.__chart__ = {
          x: view.x,
          y: view.y,
          k: view.k
        };
        scaleTo(Math.pow(2, k));
        translateTo(center0 = p, l);
        that = d3.select(that);
        if (duration > 0) that = that.transition().duration(duration);
        that.call(zoom.event);
      }

      function rescale() {
        if (x1) x1.domain(x0.range().map(function (x) {
          return (x - view.x) / view.k;
        }).map(x0.invert));
        if (y1) y1.domain(y0.range().map(function (y) {
          return (y - view.y) / view.k;
        }).map(y0.invert));
      }

      function zoomstarted(dispatch) {
        if (!zooming++) dispatch({
          type: "zoomstart"
        });
      }

      function zoomed(dispatch) {
        rescale();
        dispatch({
          type: "zoom",
          scale: view.k,
          translate: [view.x, view.y]
        });
      }

      function zoomended(dispatch) {
        if (! --zooming) dispatch({
          type: "zoomend"
        }), center0 = null;
      }

      function mousedowned() {
        var that = this,
            dispatch = event.of(that, arguments),
            dragged = 0,
            subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended),
            location0 = location(d3.mouse(that)),
            dragRestore = d3_event_dragSuppress(that);
        d3_selection_interrupt.call(that);
        zoomstarted(dispatch);

        function moved() {
          dragged = 1;
          translateTo(d3.mouse(that), location0);
          zoomed(dispatch);
        }

        function ended() {
          subject.on(mousemove, null).on(mouseup, null);
          dragRestore(dragged);
          zoomended(dispatch);
        }
      }

      function touchstarted() {
        var that = this,
            dispatch = event.of(that, arguments),
            locations0 = {},
            distance0 = 0,
            scale0,
            zoomName = ".zoom-" + d3.event.changedTouches[0].identifier,
            touchmove = "touchmove" + zoomName,
            touchend = "touchend" + zoomName,
            targets = [],
            subject = d3.select(that),
            dragRestore = d3_event_dragSuppress(that);
        started();
        zoomstarted(dispatch);
        subject.on(mousedown, null).on(touchstart, started);

        function relocate() {
          var touches = d3.touches(that);
          scale0 = view.k;
          touches.forEach(function (t) {
            if (t.identifier in locations0) locations0[t.identifier] = location(t);
          });
          return touches;
        }

        function started() {
          var target = d3.event.target;
          d3.select(target).on(touchmove, moved).on(touchend, ended);
          targets.push(target);
          var changed = d3.event.changedTouches;

          for (var i = 0, n = changed.length; i < n; ++i) {
            locations0[changed[i].identifier] = null;
          }

          var touches = relocate(),
              now = Date.now();

          if (touches.length === 1) {
            if (now - touchtime < 500) {
              var p = touches[0];
              zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
              d3_eventPreventDefault();
            }

            touchtime = now;
          } else if (touches.length > 1) {
            var p = touches[0],
                q = touches[1],
                dx = p[0] - q[0],
                dy = p[1] - q[1];
            distance0 = dx * dx + dy * dy;
          }
        }

        function moved() {
          var touches = d3.touches(that),
              p0,
              l0,
              p1,
              l1;
          d3_selection_interrupt.call(that);

          for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
            p1 = touches[i];

            if (l1 = locations0[p1.identifier]) {
              if (l0) break;
              p0 = p1, l0 = l1;
            }
          }

          if (l1) {
            var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1,
                scale1 = distance0 && Math.sqrt(distance1 / distance0);
            p0 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
            l0 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
            scaleTo(scale1 * scale0);
          }

          touchtime = null;
          translateTo(p0, l0);
          zoomed(dispatch);
        }

        function ended() {
          if (d3.event.touches.length) {
            var changed = d3.event.changedTouches;

            for (var i = 0, n = changed.length; i < n; ++i) {
              delete locations0[changed[i].identifier];
            }

            for (var identifier in locations0) {
              return void relocate();
            }
          }

          d3.selectAll(targets).on(zoomName, null);
          subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
          dragRestore();
          zoomended(dispatch);
        }
      }

      function mousewheeled() {
        var dispatch = event.of(this, arguments);
        if (mousewheelTimer) clearTimeout(mousewheelTimer);else d3_selection_interrupt.call(this), translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
        mousewheelTimer = setTimeout(function () {
          mousewheelTimer = null;
          zoomended(dispatch);
        }, 50);
        d3_eventPreventDefault();
        scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
        translateTo(center0, translate0);
        zoomed(dispatch);
      }

      function dblclicked() {
        var p = d3.mouse(this),
            k = Math.log(view.k) / Math.LN2;
        zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
      }

      return d3.rebind(zoom, event, "on");
    };

    var d3_behavior_zoomInfinity = [0, Infinity],
        d3_behavior_zoomDelta,
        d3_behavior_zoomWheel;
    d3.color = d3_color;

    function d3_color() {}

    d3_color.prototype.toString = function () {
      return this.rgb() + "";
    };

    d3.hsl = d3_hsl;

    function d3_hsl(h, s, l) {
      return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
    }

    var d3_hslPrototype = d3_hsl.prototype = new d3_color();

    d3_hslPrototype.brighter = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      return new d3_hsl(this.h, this.s, this.l / k);
    };

    d3_hslPrototype.darker = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      return new d3_hsl(this.h, this.s, k * this.l);
    };

    d3_hslPrototype.rgb = function () {
      return d3_hsl_rgb(this.h, this.s, this.l);
    };

    function d3_hsl_rgb(h, s, l) {
      var m1, m2;
      h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
      s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
      l = l < 0 ? 0 : l > 1 ? 1 : l;
      m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
      m1 = 2 * l - m2;

      function v(h) {
        if (h > 360) h -= 360;else if (h < 0) h += 360;
        if (h < 60) return m1 + (m2 - m1) * h / 60;
        if (h < 180) return m2;
        if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
        return m1;
      }

      function vv(h) {
        return Math.round(v(h) * 255);
      }

      return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
    }

    d3.hcl = d3_hcl;

    function d3_hcl(h, c, l) {
      return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
    }

    var d3_hclPrototype = d3_hcl.prototype = new d3_color();

    d3_hclPrototype.brighter = function (k) {
      return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
    };

    d3_hclPrototype.darker = function (k) {
      return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
    };

    d3_hclPrototype.rgb = function () {
      return d3_hcl_lab(this.h, this.c, this.l).rgb();
    };

    function d3_hcl_lab(h, c, l) {
      if (isNaN(h)) h = 0;
      if (isNaN(c)) c = 0;
      return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
    }

    d3.lab = d3_lab;

    function d3_lab(l, a, b) {
      return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
    }

    var d3_lab_K = 18;
    var d3_lab_X = .95047,
        d3_lab_Y = 1,
        d3_lab_Z = 1.08883;
    var d3_labPrototype = d3_lab.prototype = new d3_color();

    d3_labPrototype.brighter = function (k) {
      return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };

    d3_labPrototype.darker = function (k) {
      return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };

    d3_labPrototype.rgb = function () {
      return d3_lab_rgb(this.l, this.a, this.b);
    };

    function d3_lab_rgb(l, a, b) {
      var y = (l + 16) / 116,
          x = y + a / 500,
          z = y - b / 200;
      x = d3_lab_xyz(x) * d3_lab_X;
      y = d3_lab_xyz(y) * d3_lab_Y;
      z = d3_lab_xyz(z) * d3_lab_Z;
      return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
    }

    function d3_lab_hcl(l, a, b) {
      return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
    }

    function d3_lab_xyz(x) {
      return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
    }

    function d3_xyz_lab(x) {
      return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
    }

    function d3_xyz_rgb(r) {
      return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
    }

    d3.rgb = d3_rgb;

    function d3_rgb(r, g, b) {
      return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
    }

    function d3_rgbNumber(value) {
      return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
    }

    function d3_rgbString(value) {
      return d3_rgbNumber(value) + "";
    }

    var d3_rgbPrototype = d3_rgb.prototype = new d3_color();

    d3_rgbPrototype.brighter = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      var r = this.r,
          g = this.g,
          b = this.b,
          i = 30;
      if (!r && !g && !b) return new d3_rgb(i, i, i);
      if (r && r < i) r = i;
      if (g && g < i) g = i;
      if (b && b < i) b = i;
      return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
    };

    d3_rgbPrototype.darker = function (k) {
      k = Math.pow(.7, arguments.length ? k : 1);
      return new d3_rgb(k * this.r, k * this.g, k * this.b);
    };

    d3_rgbPrototype.hsl = function () {
      return d3_rgb_hsl(this.r, this.g, this.b);
    };

    d3_rgbPrototype.toString = function () {
      return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
    };

    function d3_rgb_hex(v) {
      return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
    }

    function d3_rgb_parse(format, rgb, hsl) {
      var r = 0,
          g = 0,
          b = 0,
          m1,
          m2,
          color;
      m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());

      if (m1) {
        m2 = m1[2].split(",");

        switch (m1[1]) {
          case "hsl":
            {
              return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
            }

          case "rgb":
            {
              return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
            }
        }
      }

      if (color = d3_rgb_names.get(format)) {
        return rgb(color.r, color.g, color.b);
      }

      if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
        if (format.length === 4) {
          r = (color & 3840) >> 4;
          r = r >> 4 | r;
          g = color & 240;
          g = g >> 4 | g;
          b = color & 15;
          b = b << 4 | b;
        } else if (format.length === 7) {
          r = (color & 16711680) >> 16;
          g = (color & 65280) >> 8;
          b = color & 255;
        }
      }

      return rgb(r, g, b);
    }

    function d3_rgb_hsl(r, g, b) {
      var min = Math.min(r /= 255, g /= 255, b /= 255),
          max = Math.max(r, g, b),
          d = max - min,
          h,
          s,
          l = (max + min) / 2;

      if (d) {
        s = l < .5 ? d / (max + min) : d / (2 - max - min);
        if (r == max) h = (g - b) / d + (g < b ? 6 : 0);else if (g == max) h = (b - r) / d + 2;else h = (r - g) / d + 4;
        h *= 60;
      } else {
        h = NaN;
        s = l > 0 && l < 1 ? 0 : h;
      }

      return new d3_hsl(h, s, l);
    }

    function d3_rgb_lab(r, g, b) {
      r = d3_rgb_xyz(r);
      g = d3_rgb_xyz(g);
      b = d3_rgb_xyz(b);
      var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X),
          y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y),
          z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
      return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
    }

    function d3_rgb_xyz(r) {
      return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
    }

    function d3_rgb_parseNumber(c) {
      var f = parseFloat(c);
      return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
    }

    var d3_rgb_names = d3.map({
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    });
    d3_rgb_names.forEach(function (key, value) {
      d3_rgb_names.set(key, d3_rgbNumber(value));
    });

    function d3_functor(v) {
      return typeof v === "function" ? v : function () {
        return v;
      };
    }

    d3.functor = d3_functor;
    d3.xhr = d3_xhrType(d3_identity);

    function d3_xhrType(response) {
      return function (url, mimeType, callback) {
        if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, mimeType = null;
        return d3_xhr(url, mimeType, response, callback);
      };
    }

    function d3_xhr(url, mimeType, response, callback) {
      var xhr = {},
          dispatch = d3.dispatch("beforesend", "progress", "load", "error"),
          headers = {},
          request = new XMLHttpRequest(),
          responseType = null;
      if (self.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
      "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {
        request.readyState > 3 && respond();
      };

      function respond() {
        var status = request.status,
            result;

        if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
          try {
            result = response.call(xhr, request);
          } catch (e) {
            dispatch.error.call(xhr, e);
            return;
          }

          dispatch.load.call(xhr, result);
        } else {
          dispatch.error.call(xhr, request);
        }
      }

      request.onprogress = function (event) {
        var o = d3.event;
        d3.event = event;

        try {
          dispatch.progress.call(xhr, request);
        } finally {
          d3.event = o;
        }
      };

      xhr.header = function (name, value) {
        name = (name + "").toLowerCase();
        if (arguments.length < 2) return headers[name];
        if (value == null) delete headers[name];else headers[name] = value + "";
        return xhr;
      };

      xhr.mimeType = function (value) {
        if (!arguments.length) return mimeType;
        mimeType = value == null ? null : value + "";
        return xhr;
      };

      xhr.responseType = function (value) {
        if (!arguments.length) return responseType;
        responseType = value;
        return xhr;
      };

      xhr.response = function (value) {
        response = value;
        return xhr;
      };

      ["get", "post"].forEach(function (method) {
        xhr[method] = function () {
          return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
        };
      });

      xhr.send = function (method, data, callback) {
        if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
        request.open(method, url, true);
        if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
        if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
        if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
        if (responseType != null) request.responseType = responseType;
        if (callback != null) xhr.on("error", callback).on("load", function (request) {
          callback(null, request);
        });
        dispatch.beforesend.call(xhr, request);
        request.send(data == null ? null : data);
        return xhr;
      };

      xhr.abort = function () {
        request.abort();
        return xhr;
      };

      d3.rebind(xhr, dispatch, "on");
      return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
    }

    function d3_xhr_fixCallback(callback) {
      return callback.length === 1 ? function (error, request) {
        callback(error == null ? request : null);
      } : callback;
    }

    function d3_xhrHasResponse(request) {
      var type = request.responseType;
      return type && type !== "text" ? request.response : request.responseText;
    }

    d3.dsv = function (delimiter, mimeType) {
      var reFormat = new RegExp('["' + delimiter + "\n]"),
          delimiterCode = delimiter.charCodeAt(0);

      function dsv(url, row, callback) {
        if (arguments.length < 3) callback = row, row = null;
        var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);

        xhr.row = function (_) {
          return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
        };

        return xhr;
      }

      function response(request) {
        return dsv.parse(request.responseText);
      }

      function typedResponse(f) {
        return function (request) {
          return dsv.parse(request.responseText, f);
        };
      }

      dsv.parse = function (text, f) {
        var o;
        return dsv.parseRows(text, function (row, i) {
          if (o) return o(row, i - 1);

          var a = function (d) {
            var obj = {};
            var len = row.length;

            for (var k = 0; k < len; ++k) {
              obj[row[k]] = d[k];
            }

            return obj;
          };

          o = f ? function (row, i) {
            return f(a(row), i);
          } : a;
        });
      };

      dsv.parseRows = function (text, f) {
        var EOL = {},
            EOF = {},
            rows = [],
            N = text.length,
            I = 0,
            n = 0,
            t,
            eol;

        function token() {
          if (I >= N) return EOF;
          if (eol) return eol = false, EOL;
          var j = I;

          if (text.charCodeAt(j) === 34) {
            var i = j;

            while (i++ < N) {
              if (text.charCodeAt(i) === 34) {
                if (text.charCodeAt(i + 1) !== 34) break;
                ++i;
              }
            }

            I = i + 2;
            var c = text.charCodeAt(i + 1);

            if (c === 13) {
              eol = true;
              if (text.charCodeAt(i + 2) === 10) ++I;
            } else if (c === 10) {
              eol = true;
            }

            return text.slice(j + 1, i).replace(/""/g, '"');
          }

          while (I < N) {
            var c = text.charCodeAt(I++),
                k = 1;
            if (c === 10) eol = true;else if (c === 13) {
              eol = true;
              if (text.charCodeAt(I) === 10) ++I, ++k;
            } else if (c !== delimiterCode) continue;
            return text.slice(j, I - k);
          }

          return text.slice(j);
        }

        while ((t = token()) !== EOF) {
          var a = [];

          while (t !== EOL && t !== EOF) {
            a.push(t);
            t = token();
          }

          if (f && (a = f(a, n++)) == null) continue;
          rows.push(a);
        }

        return rows;
      };

      dsv.format = function (rows) {
        if (Array.isArray(rows[0])) return dsv.formatRows(rows);
        var fieldSet = new d3_Set(),
            fields = [];
        rows.forEach(function (row) {
          for (var field in row) {
            if (!fieldSet.has(field)) {
              fields.push(fieldSet.add(field));
            }
          }
        });
        return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
          return fields.map(function (field) {
            return formatValue(row[field]);
          }).join(delimiter);
        })).join("\n");
      };

      dsv.formatRows = function (rows) {
        return rows.map(formatRow).join("\n");
      };

      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }

      function formatValue(text) {
        return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
      }

      return dsv;
    };

    d3.csv = d3.dsv(",", "text/csv");
    d3.tsv = d3.dsv("	", "text/tab-separated-values");

    var d3_timer_queueHead,
        d3_timer_queueTail,
        d3_timer_interval,
        d3_timer_timeout,
        d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function (callback) {
      setTimeout(callback, 17);
    };

    d3.timer = function () {
      d3_timer.apply(this, arguments);
    };

    function d3_timer(callback, delay, then) {
      var n = arguments.length;
      if (n < 2) delay = 0;
      if (n < 3) then = Date.now();
      var time = then + delay,
          timer = {
        c: callback,
        t: time,
        n: null
      };
      if (d3_timer_queueTail) d3_timer_queueTail.n = timer;else d3_timer_queueHead = timer;
      d3_timer_queueTail = timer;

      if (!d3_timer_interval) {
        d3_timer_timeout = clearTimeout(d3_timer_timeout);
        d3_timer_interval = 1;
        d3_timer_frame(d3_timer_step);
      }

      return timer;
    }

    function d3_timer_step() {
      var now = d3_timer_mark(),
          delay = d3_timer_sweep() - now;

      if (delay > 24) {
        if (isFinite(delay)) {
          clearTimeout(d3_timer_timeout);
          d3_timer_timeout = setTimeout(d3_timer_step, delay);
        }

        d3_timer_interval = 0;
      } else {
        d3_timer_interval = 1;
        d3_timer_frame(d3_timer_step);
      }
    }

    d3.timer.flush = function () {
      d3_timer_mark();
      d3_timer_sweep();
    };

    function d3_timer_mark() {
      var now = Date.now(),
          timer = d3_timer_queueHead;

      while (timer) {
        if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
        timer = timer.n;
      }

      return now;
    }

    function d3_timer_sweep() {
      var t0,
          t1 = d3_timer_queueHead,
          time = Infinity;

      while (t1) {
        if (t1.c) {
          if (t1.t < time) time = t1.t;
          t1 = (t0 = t1).n;
        } else {
          t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
        }
      }

      d3_timer_queueTail = t0;
      return time;
    }

    d3.round = function (x, n) {
      return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
    };

    d3.geom = {};

    function d3_geom_pointX(d) {
      return d[0];
    }

    function d3_geom_pointY(d) {
      return d[1];
    }

    d3.geom.hull = function (vertices) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY;
      if (arguments.length) return hull(vertices);

      function hull(data) {
        if (data.length < 3) return [];
        var fx = d3_functor(x),
            fy = d3_functor(y),
            i,
            n = data.length,
            points = [],
            flippedPoints = [];

        for (i = 0; i < n; i++) {
          points.push([+fx.call(this, data[i], i), +fy.call(this, data[i], i), i]);
        }

        points.sort(d3_geom_hullOrder);

        for (i = 0; i < n; i++) flippedPoints.push([points[i][0], -points[i][1]]);

        var upper = d3_geom_hullUpper(points),
            lower = d3_geom_hullUpper(flippedPoints);
        var skipLeft = lower[0] === upper[0],
            skipRight = lower[lower.length - 1] === upper[upper.length - 1],
            polygon = [];

        for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);

        for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);

        return polygon;
      }

      hull.x = function (_) {
        return arguments.length ? (x = _, hull) : x;
      };

      hull.y = function (_) {
        return arguments.length ? (y = _, hull) : y;
      };

      return hull;
    };

    function d3_geom_hullUpper(points) {
      var n = points.length,
          hull = [0, 1],
          hs = 2;

      for (var i = 2; i < n; i++) {
        while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;

        hull[hs++] = i;
      }

      return hull.slice(0, hs);
    }

    function d3_geom_hullOrder(a, b) {
      return a[0] - b[0] || a[1] - b[1];
    }

    d3.geom.polygon = function (coordinates) {
      d3_subclass(coordinates, d3_geom_polygonPrototype);
      return coordinates;
    };

    var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];

    d3_geom_polygonPrototype.area = function () {
      var i = -1,
          n = this.length,
          a,
          b = this[n - 1],
          area = 0;

      while (++i < n) {
        a = b;
        b = this[i];
        area += a[1] * b[0] - a[0] * b[1];
      }

      return area * .5;
    };

    d3_geom_polygonPrototype.centroid = function (k) {
      var i = -1,
          n = this.length,
          x = 0,
          y = 0,
          a,
          b = this[n - 1],
          c;
      if (!arguments.length) k = -1 / (6 * this.area());

      while (++i < n) {
        a = b;
        b = this[i];
        c = a[0] * b[1] - b[0] * a[1];
        x += (a[0] + b[0]) * c;
        y += (a[1] + b[1]) * c;
      }

      return [x * k, y * k];
    };

    d3_geom_polygonPrototype.clip = function (subject) {
      var input,
          closed = d3_geom_polygonClosed(subject),
          i = -1,
          n = this.length - d3_geom_polygonClosed(this),
          j,
          m,
          a = this[n - 1],
          b,
          c,
          d;

      while (++i < n) {
        input = subject.slice();
        subject.length = 0;
        b = this[i];
        c = input[(m = input.length - closed) - 1];
        j = -1;

        while (++j < m) {
          d = input[j];

          if (d3_geom_polygonInside(d, a, b)) {
            if (!d3_geom_polygonInside(c, a, b)) {
              subject.push(d3_geom_polygonIntersect(c, d, a, b));
            }

            subject.push(d);
          } else if (d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }

          c = d;
        }

        if (closed) subject.push(subject[0]);
        a = b;
      }

      return subject;
    };

    function d3_geom_polygonInside(p, a, b) {
      return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
    }

    function d3_geom_polygonIntersect(c, d, a, b) {
      var x1 = c[0],
          x3 = a[0],
          x21 = d[0] - x1,
          x43 = b[0] - x3,
          y1 = c[1],
          y3 = a[1],
          y21 = d[1] - y1,
          y43 = b[1] - y3,
          ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
      return [x1 + ua * x21, y1 + ua * y21];
    }

    function d3_geom_polygonClosed(coordinates) {
      var a = coordinates[0],
          b = coordinates[coordinates.length - 1];
      return !(a[0] - b[0] || a[1] - b[1]);
    }

    var d3_geom_voronoiEdges,
        d3_geom_voronoiCells,
        d3_geom_voronoiBeaches,
        d3_geom_voronoiBeachPool = [],
        d3_geom_voronoiFirstCircle,
        d3_geom_voronoiCircles,
        d3_geom_voronoiCirclePool = [];

    function d3_geom_voronoiBeach() {
      d3_geom_voronoiRedBlackNode(this);
      this.edge = this.site = this.circle = null;
    }

    function d3_geom_voronoiCreateBeach(site) {
      var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
      beach.site = site;
      return beach;
    }

    function d3_geom_voronoiDetachBeach(beach) {
      d3_geom_voronoiDetachCircle(beach);
      d3_geom_voronoiBeaches.remove(beach);
      d3_geom_voronoiBeachPool.push(beach);
      d3_geom_voronoiRedBlackNode(beach);
    }

    function d3_geom_voronoiRemoveBeach(beach) {
      var circle = beach.circle,
          x = circle.x,
          y = circle.cy,
          vertex = {
        x: x,
        y: y
      },
          previous = beach.P,
          next = beach.N,
          disappearing = [beach];
      d3_geom_voronoiDetachBeach(beach);
      var lArc = previous;

      while (lArc.circle && abs(x - lArc.circle.x) < Îµ && abs(y - lArc.circle.cy) < Îµ) {
        previous = lArc.P;
        disappearing.unshift(lArc);
        d3_geom_voronoiDetachBeach(lArc);
        lArc = previous;
      }

      disappearing.unshift(lArc);
      d3_geom_voronoiDetachCircle(lArc);
      var rArc = next;

      while (rArc.circle && abs(x - rArc.circle.x) < Îµ && abs(y - rArc.circle.cy) < Îµ) {
        next = rArc.N;
        disappearing.push(rArc);
        d3_geom_voronoiDetachBeach(rArc);
        rArc = next;
      }

      disappearing.push(rArc);
      d3_geom_voronoiDetachCircle(rArc);
      var nArcs = disappearing.length,
          iArc;

      for (iArc = 1; iArc < nArcs; ++iArc) {
        rArc = disappearing[iArc];
        lArc = disappearing[iArc - 1];
        d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
      }

      lArc = disappearing[0];
      rArc = disappearing[nArcs - 1];
      rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
    }

    function d3_geom_voronoiAddBeach(site) {
      var x = site.x,
          directrix = site.y,
          lArc,
          rArc,
          dxl,
          dxr,
          node = d3_geom_voronoiBeaches._;

      while (node) {
        dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
        if (dxl > Îµ) node = node.L;else {
          dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);

          if (dxr > Îµ) {
            if (!node.R) {
              lArc = node;
              break;
            }

            node = node.R;
          } else {
            if (dxl > -Îµ) {
              lArc = node.P;
              rArc = node;
            } else if (dxr > -Îµ) {
              lArc = node;
              rArc = node.N;
            } else {
              lArc = rArc = node;
            }

            break;
          }
        }
      }

      var newArc = d3_geom_voronoiCreateBeach(site);
      d3_geom_voronoiBeaches.insert(lArc, newArc);
      if (!lArc && !rArc) return;

      if (lArc === rArc) {
        d3_geom_voronoiDetachCircle(lArc);
        rArc = d3_geom_voronoiCreateBeach(lArc.site);
        d3_geom_voronoiBeaches.insert(newArc, rArc);
        newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
        return;
      }

      if (!rArc) {
        newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
        return;
      }

      d3_geom_voronoiDetachCircle(lArc);
      d3_geom_voronoiDetachCircle(rArc);
      var lSite = lArc.site,
          ax = lSite.x,
          ay = lSite.y,
          bx = site.x - ax,
          by = site.y - ay,
          rSite = rArc.site,
          cx = rSite.x - ax,
          cy = rSite.y - ay,
          d = 2 * (bx * cy - by * cx),
          hb = bx * bx + by * by,
          hc = cx * cx + cy * cy,
          vertex = {
        x: (cy * hb - by * hc) / d + ax,
        y: (bx * hc - cx * hb) / d + ay
      };
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
      newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
      rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
    }

    function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
      var site = arc.site,
          rfocx = site.x,
          rfocy = site.y,
          pby2 = rfocy - directrix;
      if (!pby2) return rfocx;
      var lArc = arc.P;
      if (!lArc) return -Infinity;
      site = lArc.site;
      var lfocx = site.x,
          lfocy = site.y,
          plby2 = lfocy - directrix;
      if (!plby2) return lfocx;
      var hl = lfocx - rfocx,
          aby2 = 1 / pby2 - 1 / plby2,
          b = hl / plby2;
      if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
      return (rfocx + lfocx) / 2;
    }

    function d3_geom_voronoiRightBreakPoint(arc, directrix) {
      var rArc = arc.N;
      if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
      var site = arc.site;
      return site.y === directrix ? site.x : Infinity;
    }

    function d3_geom_voronoiCell(site) {
      this.site = site;
      this.edges = [];
    }

    d3_geom_voronoiCell.prototype.prepare = function () {
      var halfEdges = this.edges,
          iHalfEdge = halfEdges.length,
          edge;

      while (iHalfEdge--) {
        edge = halfEdges[iHalfEdge].edge;
        if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
      }

      halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
      return halfEdges.length;
    };

    function d3_geom_voronoiCloseCells(extent) {
      var x0 = extent[0][0],
          x1 = extent[1][0],
          y0 = extent[0][1],
          y1 = extent[1][1],
          x2,
          y2,
          x3,
          y3,
          cells = d3_geom_voronoiCells,
          iCell = cells.length,
          cell,
          iHalfEdge,
          halfEdges,
          nHalfEdges,
          start,
          end;

      while (iCell--) {
        cell = cells[iCell];
        if (!cell || !cell.prepare()) continue;
        halfEdges = cell.edges;
        nHalfEdges = halfEdges.length;
        iHalfEdge = 0;

        while (iHalfEdge < nHalfEdges) {
          end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
          start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;

          if (abs(x3 - x2) > Îµ || abs(y3 - y2) > Îµ) {
            halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < Îµ && y1 - y3 > Îµ ? {
              x: x0,
              y: abs(x2 - x0) < Îµ ? y2 : y1
            } : abs(y3 - y1) < Îµ && x1 - x3 > Îµ ? {
              x: abs(y2 - y1) < Îµ ? x2 : x1,
              y: y1
            } : abs(x3 - x1) < Îµ && y3 - y0 > Îµ ? {
              x: x1,
              y: abs(x2 - x1) < Îµ ? y2 : y0
            } : abs(y3 - y0) < Îµ && x3 - x0 > Îµ ? {
              x: abs(y2 - y0) < Îµ ? x2 : x0,
              y: y0
            } : null), cell.site, null));
            ++nHalfEdges;
          }
        }
      }
    }

    function d3_geom_voronoiHalfEdgeOrder(a, b) {
      return b.angle - a.angle;
    }

    function d3_geom_voronoiCircle() {
      d3_geom_voronoiRedBlackNode(this);
      this.x = this.y = this.arc = this.site = this.cy = null;
    }

    function d3_geom_voronoiAttachCircle(arc) {
      var lArc = arc.P,
          rArc = arc.N;
      if (!lArc || !rArc) return;
      var lSite = lArc.site,
          cSite = arc.site,
          rSite = rArc.site;
      if (lSite === rSite) return;
      var bx = cSite.x,
          by = cSite.y,
          ax = lSite.x - bx,
          ay = lSite.y - by,
          cx = rSite.x - bx,
          cy = rSite.y - by;
      var d = 2 * (ax * cy - ay * cx);
      if (d >= -Îµ2) return;
      var ha = ax * ax + ay * ay,
          hc = cx * cx + cy * cy,
          x = (cy * ha - ay * hc) / d,
          y = (ax * hc - cx * ha) / d,
          cy = y + by;
      var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
      circle.arc = arc;
      circle.site = cSite;
      circle.x = x + bx;
      circle.y = cy + Math.sqrt(x * x + y * y);
      circle.cy = cy;
      arc.circle = circle;
      var before = null,
          node = d3_geom_voronoiCircles._;

      while (node) {
        if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
          if (node.L) node = node.L;else {
            before = node.P;
            break;
          }
        } else {
          if (node.R) node = node.R;else {
            before = node;
            break;
          }
        }
      }

      d3_geom_voronoiCircles.insert(before, circle);
      if (!before) d3_geom_voronoiFirstCircle = circle;
    }

    function d3_geom_voronoiDetachCircle(arc) {
      var circle = arc.circle;

      if (circle) {
        if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
        d3_geom_voronoiCircles.remove(circle);
        d3_geom_voronoiCirclePool.push(circle);
        d3_geom_voronoiRedBlackNode(circle);
        arc.circle = null;
      }
    }

    function d3_geom_clipLine(x0, y0, x1, y1) {
      return function (line) {
        var a = line.a,
            b = line.b,
            ax = a.x,
            ay = a.y,
            bx = b.x,
            by = b.y,
            t0 = 0,
            t1 = 1,
            dx = bx - ax,
            dy = by - ay,
            r;
        r = x0 - ax;
        if (!dx && r > 0) return;
        r /= dx;

        if (dx < 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        } else if (dx > 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        }

        r = x1 - ax;
        if (!dx && r < 0) return;
        r /= dx;

        if (dx < 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        } else if (dx > 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        }

        r = y0 - ay;
        if (!dy && r > 0) return;
        r /= dy;

        if (dy < 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        } else if (dy > 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        }

        r = y1 - ay;
        if (!dy && r < 0) return;
        r /= dy;

        if (dy < 0) {
          if (r > t1) return;
          if (r > t0) t0 = r;
        } else if (dy > 0) {
          if (r < t0) return;
          if (r < t1) t1 = r;
        }

        if (t0 > 0) line.a = {
          x: ax + t0 * dx,
          y: ay + t0 * dy
        };
        if (t1 < 1) line.b = {
          x: ax + t1 * dx,
          y: ay + t1 * dy
        };
        return line;
      };
    }

    function d3_geom_voronoiClipEdges(extent) {
      var edges = d3_geom_voronoiEdges,
          clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]),
          i = edges.length,
          e;

      while (i--) {
        e = edges[i];

        if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < Îµ && abs(e.a.y - e.b.y) < Îµ) {
          e.a = e.b = null;
          edges.splice(i, 1);
        }
      }
    }

    function d3_geom_voronoiConnectEdge(edge, extent) {
      var vb = edge.b;
      if (vb) return true;
      var va = edge.a,
          x0 = extent[0][0],
          x1 = extent[1][0],
          y0 = extent[0][1],
          y1 = extent[1][1],
          lSite = edge.l,
          rSite = edge.r,
          lx = lSite.x,
          ly = lSite.y,
          rx = rSite.x,
          ry = rSite.y,
          fx = (lx + rx) / 2,
          fy = (ly + ry) / 2,
          fm,
          fb;

      if (ry === ly) {
        if (fx < x0 || fx >= x1) return;

        if (lx > rx) {
          if (!va) va = {
            x: fx,
            y: y0
          };else if (va.y >= y1) return;
          vb = {
            x: fx,
            y: y1
          };
        } else {
          if (!va) va = {
            x: fx,
            y: y1
          };else if (va.y < y0) return;
          vb = {
            x: fx,
            y: y0
          };
        }
      } else {
        fm = (lx - rx) / (ry - ly);
        fb = fy - fm * fx;

        if (fm < -1 || fm > 1) {
          if (lx > rx) {
            if (!va) va = {
              x: (y0 - fb) / fm,
              y: y0
            };else if (va.y >= y1) return;
            vb = {
              x: (y1 - fb) / fm,
              y: y1
            };
          } else {
            if (!va) va = {
              x: (y1 - fb) / fm,
              y: y1
            };else if (va.y < y0) return;
            vb = {
              x: (y0 - fb) / fm,
              y: y0
            };
          }
        } else {
          if (ly < ry) {
            if (!va) va = {
              x: x0,
              y: fm * x0 + fb
            };else if (va.x >= x1) return;
            vb = {
              x: x1,
              y: fm * x1 + fb
            };
          } else {
            if (!va) va = {
              x: x1,
              y: fm * x1 + fb
            };else if (va.x < x0) return;
            vb = {
              x: x0,
              y: fm * x0 + fb
            };
          }
        }
      }

      edge.a = va;
      edge.b = vb;
      return true;
    }

    function d3_geom_voronoiEdge(lSite, rSite) {
      this.l = lSite;
      this.r = rSite;
      this.a = this.b = null;
    }

    function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
      var edge = new d3_geom_voronoiEdge(lSite, rSite);
      d3_geom_voronoiEdges.push(edge);
      if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
      if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
      d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
      d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
      return edge;
    }

    function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
      var edge = new d3_geom_voronoiEdge(lSite, null);
      edge.a = va;
      edge.b = vb;
      d3_geom_voronoiEdges.push(edge);
      return edge;
    }

    function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
      if (!edge.a && !edge.b) {
        edge.a = vertex;
        edge.l = lSite;
        edge.r = rSite;
      } else if (edge.l === rSite) {
        edge.b = vertex;
      } else {
        edge.a = vertex;
      }
    }

    function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
      var va = edge.a,
          vb = edge.b;
      this.edge = edge;
      this.site = lSite;
      this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
    }

    d3_geom_voronoiHalfEdge.prototype = {
      start: function () {
        return this.edge.l === this.site ? this.edge.a : this.edge.b;
      },
      end: function () {
        return this.edge.l === this.site ? this.edge.b : this.edge.a;
      }
    };

    function d3_geom_voronoiRedBlackTree() {
      this._ = null;
    }

    function d3_geom_voronoiRedBlackNode(node) {
      node.U = node.C = node.L = node.R = node.P = node.N = null;
    }

    d3_geom_voronoiRedBlackTree.prototype = {
      insert: function (after, node) {
        var parent, grandpa, uncle;

        if (after) {
          node.P = after;
          node.N = after.N;
          if (after.N) after.N.P = node;
          after.N = node;

          if (after.R) {
            after = after.R;

            while (after.L) after = after.L;

            after.L = node;
          } else {
            after.R = node;
          }

          parent = after;
        } else if (this._) {
          after = d3_geom_voronoiRedBlackFirst(this._);
          node.P = null;
          node.N = after;
          after.P = after.L = node;
          parent = after;
        } else {
          node.P = node.N = null;
          this._ = node;
          parent = null;
        }

        node.L = node.R = null;
        node.U = parent;
        node.C = true;
        after = node;

        while (parent && parent.C) {
          grandpa = parent.U;

          if (parent === grandpa.L) {
            uncle = grandpa.R;

            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.R) {
                d3_geom_voronoiRedBlackRotateLeft(this, parent);
                after = parent;
                parent = after.U;
              }

              parent.C = false;
              grandpa.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, grandpa);
            }
          } else {
            uncle = grandpa.L;

            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.L) {
                d3_geom_voronoiRedBlackRotateRight(this, parent);
                after = parent;
                parent = after.U;
              }

              parent.C = false;
              grandpa.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
            }
          }

          parent = after.U;
        }

        this._.C = false;
      },
      remove: function (node) {
        if (node.N) node.N.P = node.P;
        if (node.P) node.P.N = node.N;
        node.N = node.P = null;
        var parent = node.U,
            sibling,
            left = node.L,
            right = node.R,
            next,
            red;
        if (!left) next = right;else if (!right) next = left;else next = d3_geom_voronoiRedBlackFirst(right);

        if (parent) {
          if (parent.L === node) parent.L = next;else parent.R = next;
        } else {
          this._ = next;
        }

        if (left && right) {
          red = next.C;
          next.C = node.C;
          next.L = left;
          left.U = next;

          if (next !== right) {
            parent = next.U;
            next.U = node.U;
            node = next.R;
            parent.L = node;
            next.R = right;
            right.U = next;
          } else {
            next.U = parent;
            parent = next;
            node = next.R;
          }
        } else {
          red = node.C;
          node = next;
        }

        if (node) node.U = parent;
        if (red) return;

        if (node && node.C) {
          node.C = false;
          return;
        }

        do {
          if (node === this._) break;

          if (node === parent.L) {
            sibling = parent.R;

            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              sibling = parent.R;
            }

            if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
              if (!sibling.R || !sibling.R.C) {
                sibling.L.C = false;
                sibling.C = true;
                d3_geom_voronoiRedBlackRotateRight(this, sibling);
                sibling = parent.R;
              }

              sibling.C = parent.C;
              parent.C = sibling.R.C = false;
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              node = this._;
              break;
            }
          } else {
            sibling = parent.L;

            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              sibling = parent.L;
            }

            if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
              if (!sibling.L || !sibling.L.C) {
                sibling.R.C = false;
                sibling.C = true;
                d3_geom_voronoiRedBlackRotateLeft(this, sibling);
                sibling = parent.L;
              }

              sibling.C = parent.C;
              parent.C = sibling.L.C = false;
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              node = this._;
              break;
            }
          }

          sibling.C = true;
          node = parent;
          parent = parent.U;
        } while (!node.C);

        if (node) node.C = false;
      }
    };

    function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
      var p = node,
          q = node.R,
          parent = p.U;

      if (parent) {
        if (parent.L === p) parent.L = q;else parent.R = q;
      } else {
        tree._ = q;
      }

      q.U = parent;
      p.U = q;
      p.R = q.L;
      if (p.R) p.R.U = p;
      q.L = p;
    }

    function d3_geom_voronoiRedBlackRotateRight(tree, node) {
      var p = node,
          q = node.L,
          parent = p.U;

      if (parent) {
        if (parent.L === p) parent.L = q;else parent.R = q;
      } else {
        tree._ = q;
      }

      q.U = parent;
      p.U = q;
      p.L = q.R;
      if (p.L) p.L.U = p;
      q.R = p;
    }

    function d3_geom_voronoiRedBlackFirst(node) {
      while (node.L) node = node.L;

      return node;
    }

    function d3_geom_voronoi(sites, bbox) {
      var site = sites.sort(d3_geom_voronoiVertexOrder).pop(),
          x0,
          y0,
          circle;
      d3_geom_voronoiEdges = [];
      d3_geom_voronoiCells = new Array(sites.length);
      d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
      d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();

      while (true) {
        circle = d3_geom_voronoiFirstCircle;

        if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
          if (site.x !== x0 || site.y !== y0) {
            d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
            d3_geom_voronoiAddBeach(site);
            x0 = site.x, y0 = site.y;
          }

          site = sites.pop();
        } else if (circle) {
          d3_geom_voronoiRemoveBeach(circle.arc);
        } else {
          break;
        }
      }

      if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
      var diagram = {
        cells: d3_geom_voronoiCells,
        edges: d3_geom_voronoiEdges
      };
      d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
      return diagram;
    }

    function d3_geom_voronoiVertexOrder(a, b) {
      return b.y - a.y || b.x - a.x;
    }

    d3.geom.voronoi = function (points) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY,
          fx = x,
          fy = y,
          clipExtent = d3_geom_voronoiClipExtent;
      if (points) return voronoi(points);

      function voronoi(data) {
        var polygons = new Array(data.length),
            x0 = clipExtent[0][0],
            y0 = clipExtent[0][1],
            x1 = clipExtent[1][0],
            y1 = clipExtent[1][1];
        d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {
          var edges = cell.edges,
              site = cell.site,
              polygon = polygons[i] = edges.length ? edges.map(function (e) {
            var s = e.start();
            return [s.x, s.y];
          }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [[x0, y1], [x1, y1], [x1, y0], [x0, y0]] : [];
          polygon.point = data[i];
        });
        return polygons;
      }

      function sites(data) {
        return data.map(function (d, i) {
          return {
            x: Math.round(fx(d, i) / Îµ) * Îµ,
            y: Math.round(fy(d, i) / Îµ) * Îµ,
            i: i
          };
        });
      }

      voronoi.links = function (data) {
        return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {
          return edge.l && edge.r;
        }).map(function (edge) {
          return {
            source: data[edge.l.i],
            target: data[edge.r.i]
          };
        });
      };

      voronoi.triangles = function (data) {
        var triangles = [];
        d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {
          var site = cell.site,
              edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder),
              j = -1,
              m = edges.length,
              s0,
              e1 = edges[m - 1].edge,
              s1 = e1.l === site ? e1.r : e1.l;

          while (++j < m) {
            s0 = s1;
            e1 = edges[j].edge;
            s1 = e1.l === site ? e1.r : e1.l;

            if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
              triangles.push([data[i], data[s0.i], data[s1.i]]);
            }
          }
        });
        return triangles;
      };

      voronoi.x = function (_) {
        return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
      };

      voronoi.y = function (_) {
        return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
      };

      voronoi.clipExtent = function (_) {
        if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
        clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
        return voronoi;
      };

      voronoi.size = function (_) {
        if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
        return voronoi.clipExtent(_ && [[0, 0], _]);
      };

      return voronoi;
    };

    var d3_geom_voronoiClipExtent = [[-1e6, -1e6], [1e6, 1e6]];

    function d3_geom_voronoiTriangleArea(a, b, c) {
      return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
    }

    d3.geom.delaunay = function (vertices) {
      return d3.geom.voronoi().triangles(vertices);
    };

    d3.geom.quadtree = function (points, x1, y1, x2, y2) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY,
          compat;

      if (compat = arguments.length) {
        x = d3_geom_quadtreeCompatX;
        y = d3_geom_quadtreeCompatY;

        if (compat === 3) {
          y2 = y1;
          x2 = x1;
          y1 = x1 = 0;
        }

        return quadtree(points);
      }

      function quadtree(data) {
        var d,
            fx = d3_functor(x),
            fy = d3_functor(y),
            xs,
            ys,
            i,
            n,
            x1_,
            y1_,
            x2_,
            y2_;

        if (x1 != null) {
          x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
        } else {
          x2_ = y2_ = -(x1_ = y1_ = Infinity);
          xs = [], ys = [];
          n = data.length;
          if (compat) for (i = 0; i < n; ++i) {
            d = data[i];
            if (d.x < x1_) x1_ = d.x;
            if (d.y < y1_) y1_ = d.y;
            if (d.x > x2_) x2_ = d.x;
            if (d.y > y2_) y2_ = d.y;
            xs.push(d.x);
            ys.push(d.y);
          } else for (i = 0; i < n; ++i) {
            var x_ = +fx(d = data[i], i),
                y_ = +fy(d, i);
            if (x_ < x1_) x1_ = x_;
            if (y_ < y1_) y1_ = y_;
            if (x_ > x2_) x2_ = x_;
            if (y_ > y2_) y2_ = y_;
            xs.push(x_);
            ys.push(y_);
          }
        }

        var dx = x2_ - x1_,
            dy = y2_ - y1_;
        if (dx > dy) y2_ = y1_ + dx;else x2_ = x1_ + dy;

        function insert(n, d, x, y, x1, y1, x2, y2) {
          if (isNaN(x) || isNaN(y)) return;

          if (n.leaf) {
            var nx = n.x,
                ny = n.y;

            if (nx != null) {
              if (abs(nx - x) + abs(ny - y) < .01) {
                insertChild(n, d, x, y, x1, y1, x2, y2);
              } else {
                var nPoint = n.point;
                n.x = n.y = n.point = null;
                insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
                insertChild(n, d, x, y, x1, y1, x2, y2);
              }
            } else {
              n.x = x, n.y = y, n.point = d;
            }
          } else {
            insertChild(n, d, x, y, x1, y1, x2, y2);
          }
        }

        function insertChild(n, d, x, y, x1, y1, x2, y2) {
          var xm = (x1 + x2) * .5,
              ym = (y1 + y2) * .5,
              right = x >= xm,
              below = y >= ym,
              i = below << 1 | right;
          n.leaf = false;
          n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
          if (right) x1 = xm;else x2 = xm;
          if (below) y1 = ym;else y2 = ym;
          insert(n, d, x, y, x1, y1, x2, y2);
        }

        var root = d3_geom_quadtreeNode();

        root.add = function (d) {
          insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
        };

        root.visit = function (f) {
          d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
        };

        root.find = function (point) {
          return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
        };

        i = -1;

        if (x1 == null) {
          while (++i < n) {
            insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
          }

          --i;
        } else data.forEach(root.add);

        xs = ys = data = d = null;
        return root;
      }

      quadtree.x = function (_) {
        return arguments.length ? (x = _, quadtree) : x;
      };

      quadtree.y = function (_) {
        return arguments.length ? (y = _, quadtree) : y;
      };

      quadtree.extent = function (_) {
        if (!arguments.length) return x1 == null ? null : [[x1, y1], [x2, y2]];
        if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
        return quadtree;
      };

      quadtree.size = function (_) {
        if (!arguments.length) return x1 == null ? null : [x2 - x1, y2 - y1];
        if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
        return quadtree;
      };

      return quadtree;
    };

    function d3_geom_quadtreeCompatX(d) {
      return d.x;
    }

    function d3_geom_quadtreeCompatY(d) {
      return d.y;
    }

    function d3_geom_quadtreeNode() {
      return {
        leaf: true,
        nodes: [],
        point: null,
        x: null,
        y: null
      };
    }

    function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
      if (!f(node, x1, y1, x2, y2)) {
        var sx = (x1 + x2) * .5,
            sy = (y1 + y2) * .5,
            children = node.nodes;
        if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
        if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
        if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
        if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
      }
    }

    function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
      var minDistance2 = Infinity,
          closestPoint;

      (function find(node, x1, y1, x2, y2) {
        if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;

        if (point = node.point) {
          var point,
              dx = x - node.x,
              dy = y - node.y,
              distance2 = dx * dx + dy * dy;

          if (distance2 < minDistance2) {
            var distance = Math.sqrt(minDistance2 = distance2);
            x0 = x - distance, y0 = y - distance;
            x3 = x + distance, y3 = y + distance;
            closestPoint = point;
          }
        }

        var children = node.nodes,
            xm = (x1 + x2) * .5,
            ym = (y1 + y2) * .5,
            right = x >= xm,
            below = y >= ym;

        for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
          if (node = children[i & 3]) switch (i & 3) {
            case 0:
              find(node, x1, y1, xm, ym);
              break;

            case 1:
              find(node, xm, y1, x2, ym);
              break;

            case 2:
              find(node, x1, ym, xm, y2);
              break;

            case 3:
              find(node, xm, ym, x2, y2);
              break;
          }
        }
      })(root, x0, y0, x3, y3);

      return closestPoint;
    }

    d3.interpolateRgb = d3_interpolateRgb;

    function d3_interpolateRgb(a, b) {
      a = d3.rgb(a);
      b = d3.rgb(b);
      var ar = a.r,
          ag = a.g,
          ab = a.b,
          br = b.r - ar,
          bg = b.g - ag,
          bb = b.b - ab;
      return function (t) {
        return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
      };
    }

    d3.interpolateObject = d3_interpolateObject;

    function d3_interpolateObject(a, b) {
      var i = {},
          c = {},
          k;

      for (k in a) {
        if (k in b) {
          i[k] = d3_interpolate(a[k], b[k]);
        } else {
          c[k] = a[k];
        }
      }

      for (k in b) {
        if (!(k in a)) {
          c[k] = b[k];
        }
      }

      return function (t) {
        for (k in i) c[k] = i[k](t);

        return c;
      };
    }

    d3.interpolateNumber = d3_interpolateNumber;

    function d3_interpolateNumber(a, b) {
      a = +a, b = +b;
      return function (t) {
        return a * (1 - t) + b * t;
      };
    }

    d3.interpolateString = d3_interpolateString;

    function d3_interpolateString(a, b) {
      var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0,
          am,
          bm,
          bs,
          i = -1,
          s = [],
          q = [];
      a = a + "", b = b + "";

      while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
        if ((bs = bm.index) > bi) {
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs;else s[++i] = bs;
        }

        if ((am = am[0]) === (bm = bm[0])) {
          if (s[i]) s[i] += bm;else s[++i] = bm;
        } else {
          s[++i] = null;
          q.push({
            i: i,
            x: d3_interpolateNumber(am, bm)
          });
        }

        bi = d3_interpolate_numberB.lastIndex;
      }

      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs;else s[++i] = bs;
      }

      return s.length < 2 ? q[0] ? (b = q[0].x, function (t) {
        return b(t) + "";
      }) : function () {
        return b;
      } : (b = q.length, function (t) {
        for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

        return s.join("");
      });
    }

    var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
    d3.interpolate = d3_interpolate;

    function d3_interpolate(a, b) {
      var i = d3.interpolators.length,
          f;

      while (--i >= 0 && !(f = d3.interpolators[i](a, b)));

      return f;
    }

    d3.interpolators = [function (a, b) {
      var t = typeof b;
      return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
    }];
    d3.interpolateArray = d3_interpolateArray;

    function d3_interpolateArray(a, b) {
      var x = [],
          c = [],
          na = a.length,
          nb = b.length,
          n0 = Math.min(a.length, b.length),
          i;

      for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));

      for (; i < na; ++i) c[i] = a[i];

      for (; i < nb; ++i) c[i] = b[i];

      return function (t) {
        for (i = 0; i < n0; ++i) c[i] = x[i](t);

        return c;
      };
    }

    var d3_ease_default = function () {
      return d3_identity;
    };

    var d3_ease = d3.map({
      linear: d3_ease_default,
      poly: d3_ease_poly,
      quad: function () {
        return d3_ease_quad;
      },
      cubic: function () {
        return d3_ease_cubic;
      },
      sin: function () {
        return d3_ease_sin;
      },
      exp: function () {
        return d3_ease_exp;
      },
      circle: function () {
        return d3_ease_circle;
      },
      elastic: d3_ease_elastic,
      back: d3_ease_back,
      bounce: function () {
        return d3_ease_bounce;
      }
    });
    var d3_ease_mode = d3.map({
      "in": d3_identity,
      out: d3_ease_reverse,
      "in-out": d3_ease_reflect,
      "out-in": function (f) {
        return d3_ease_reflect(d3_ease_reverse(f));
      }
    });

    d3.ease = function (name) {
      var i = name.indexOf("-"),
          t = i >= 0 ? name.slice(0, i) : name,
          m = i >= 0 ? name.slice(i + 1) : "in";
      t = d3_ease.get(t) || d3_ease_default;
      m = d3_ease_mode.get(m) || d3_identity;
      return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
    };

    function d3_ease_clamp(f) {
      return function (t) {
        return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
      };
    }

    function d3_ease_reverse(f) {
      return function (t) {
        return 1 - f(1 - t);
      };
    }

    function d3_ease_reflect(f) {
      return function (t) {
        return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
      };
    }

    function d3_ease_quad(t) {
      return t * t;
    }

    function d3_ease_cubic(t) {
      return t * t * t;
    }

    function d3_ease_cubicInOut(t) {
      if (t <= 0) return 0;
      if (t >= 1) return 1;
      var t2 = t * t,
          t3 = t2 * t;
      return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
    }

    function d3_ease_poly(e) {
      return function (t) {
        return Math.pow(t, e);
      };
    }

    function d3_ease_sin(t) {
      return 1 - Math.cos(t * halfÏ);
    }

    function d3_ease_exp(t) {
      return Math.pow(2, 10 * (t - 1));
    }

    function d3_ease_circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    }

    function d3_ease_elastic(a, p) {
      var s;
      if (arguments.length < 2) p = .45;
      if (arguments.length) s = p / Ï * Math.asin(1 / a);else a = 1, s = p / 4;
      return function (t) {
        return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * Ï / p);
      };
    }

    function d3_ease_back(s) {
      if (!s) s = 1.70158;
      return function (t) {
        return t * t * ((s + 1) * t - s);
      };
    }

    function d3_ease_bounce(t) {
      return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
    }

    d3.interpolateHcl = d3_interpolateHcl;

    function d3_interpolateHcl(a, b) {
      a = d3.hcl(a);
      b = d3.hcl(b);
      var ah = a.h,
          ac = a.c,
          al = a.l,
          bh = b.h - ah,
          bc = b.c - ac,
          bl = b.l - al;
      if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
      if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;
      return function (t) {
        return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
      };
    }

    d3.interpolateHsl = d3_interpolateHsl;

    function d3_interpolateHsl(a, b) {
      a = d3.hsl(a);
      b = d3.hsl(b);
      var ah = a.h,
          as = a.s,
          al = a.l,
          bh = b.h - ah,
          bs = b.s - as,
          bl = b.l - al;
      if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
      if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;
      return function (t) {
        return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
      };
    }

    d3.interpolateLab = d3_interpolateLab;

    function d3_interpolateLab(a, b) {
      a = d3.lab(a);
      b = d3.lab(b);
      var al = a.l,
          aa = a.a,
          ab = a.b,
          bl = b.l - al,
          ba = b.a - aa,
          bb = b.b - ab;
      return function (t) {
        return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
      };
    }

    d3.interpolateRound = d3_interpolateRound;

    function d3_interpolateRound(a, b) {
      b -= a;
      return function (t) {
        return Math.round(a + b * t);
      };
    }

    d3.transform = function (string) {
      var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
      return (d3.transform = function (string) {
        if (string != null) {
          g.setAttribute("transform", string);
          var t = g.transform.baseVal.consolidate();
        }

        return new d3_transform(t ? t.matrix : d3_transformIdentity);
      })(string);
    };

    function d3_transform(m) {
      var r0 = [m.a, m.b],
          r1 = [m.c, m.d],
          kx = d3_transformNormalize(r0),
          kz = d3_transformDot(r0, r1),
          ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;

      if (r0[0] * r1[1] < r1[0] * r0[1]) {
        r0[0] *= -1;
        r0[1] *= -1;
        kx *= -1;
        kz *= -1;
      }

      this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
      this.translate = [m.e, m.f];
      this.scale = [kx, ky];
      this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
    }

    d3_transform.prototype.toString = function () {
      return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
    };

    function d3_transformDot(a, b) {
      return a[0] * b[0] + a[1] * b[1];
    }

    function d3_transformNormalize(a) {
      var k = Math.sqrt(d3_transformDot(a, a));

      if (k) {
        a[0] /= k;
        a[1] /= k;
      }

      return k;
    }

    function d3_transformCombine(a, b, k) {
      a[0] += k * b[0];
      a[1] += k * b[1];
      return a;
    }

    var d3_transformIdentity = {
      a: 1,
      b: 0,
      c: 0,
      d: 1,
      e: 0,
      f: 0
    };
    d3.interpolateTransform = d3_interpolateTransform;

    function d3_interpolateTransformPop(s) {
      return s.length ? s.pop() + "," : "";
    }

    function d3_interpolateTranslate(ta, tb, s, q) {
      if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
        var i = s.push("translate(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: d3_interpolateNumber(ta[0], tb[0])
        }, {
          i: i - 2,
          x: d3_interpolateNumber(ta[1], tb[1])
        });
      } else if (tb[0] || tb[1]) {
        s.push("translate(" + tb + ")");
      }
    }

    function d3_interpolateRotate(ra, rb, s, q) {
      if (ra !== rb) {
        if (ra - rb > 180) rb += 360;else if (rb - ra > 180) ra += 360;
        q.push({
          i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
          x: d3_interpolateNumber(ra, rb)
        });
      } else if (rb) {
        s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
      }
    }

    function d3_interpolateSkew(wa, wb, s, q) {
      if (wa !== wb) {
        q.push({
          i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
          x: d3_interpolateNumber(wa, wb)
        });
      } else if (wb) {
        s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
      }
    }

    function d3_interpolateScale(ka, kb, s, q) {
      if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
        var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: d3_interpolateNumber(ka[0], kb[0])
        }, {
          i: i - 2,
          x: d3_interpolateNumber(ka[1], kb[1])
        });
      } else if (kb[0] !== 1 || kb[1] !== 1) {
        s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
      }
    }

    function d3_interpolateTransform(a, b) {
      var s = [],
          q = [];
      a = d3.transform(a), b = d3.transform(b);
      d3_interpolateTranslate(a.translate, b.translate, s, q);
      d3_interpolateRotate(a.rotate, b.rotate, s, q);
      d3_interpolateSkew(a.skew, b.skew, s, q);
      d3_interpolateScale(a.scale, b.scale, s, q);
      a = b = null;
      return function (t) {
        var i = -1,
            n = q.length,
            o;

        while (++i < n) s[(o = q[i]).i] = o.x(t);

        return s.join("");
      };
    }

    function d3_uninterpolateNumber(a, b) {
      b = (b -= a = +a) || 1 / b;
      return function (x) {
        return (x - a) / b;
      };
    }

    function d3_uninterpolateClamp(a, b) {
      b = (b -= a = +a) || 1 / b;
      return function (x) {
        return Math.max(0, Math.min(1, (x - a) / b));
      };
    }

    d3.layout = {};

    d3.layout.bundle = function () {
      return function (links) {
        var paths = [],
            i = -1,
            n = links.length;

        while (++i < n) paths.push(d3_layout_bundlePath(links[i]));

        return paths;
      };
    };

    function d3_layout_bundlePath(link) {
      var start = link.source,
          end = link.target,
          lca = d3_layout_bundleLeastCommonAncestor(start, end),
          points = [start];

      while (start !== lca) {
        start = start.parent;
        points.push(start);
      }

      var k = points.length;

      while (end !== lca) {
        points.splice(k, 0, end);
        end = end.parent;
      }

      return points;
    }

    function d3_layout_bundleAncestors(node) {
      var ancestors = [],
          parent = node.parent;

      while (parent != null) {
        ancestors.push(node);
        node = parent;
        parent = parent.parent;
      }

      ancestors.push(node);
      return ancestors;
    }

    function d3_layout_bundleLeastCommonAncestor(a, b) {
      if (a === b) return a;
      var aNodes = d3_layout_bundleAncestors(a),
          bNodes = d3_layout_bundleAncestors(b),
          aNode = aNodes.pop(),
          bNode = bNodes.pop(),
          sharedNode = null;

      while (aNode === bNode) {
        sharedNode = aNode;
        aNode = aNodes.pop();
        bNode = bNodes.pop();
      }

      return sharedNode;
    }

    d3.layout.chord = function () {
      var chord = {},
          chords,
          groups,
          matrix,
          n,
          padding = 0,
          sortGroups,
          sortSubgroups,
          sortChords;

      function relayout() {
        var subgroups = {},
            groupSums = [],
            groupIndex = d3.range(n),
            subgroupIndex = [],
            k,
            x,
            x0,
            i,
            j;
        chords = [];
        groups = [];
        k = 0, i = -1;

        while (++i < n) {
          x = 0, j = -1;

          while (++j < n) {
            x += matrix[i][j];
          }

          groupSums.push(x);
          subgroupIndex.push(d3.range(n));
          k += x;
        }

        if (sortGroups) {
          groupIndex.sort(function (a, b) {
            return sortGroups(groupSums[a], groupSums[b]);
          });
        }

        if (sortSubgroups) {
          subgroupIndex.forEach(function (d, i) {
            d.sort(function (a, b) {
              return sortSubgroups(matrix[i][a], matrix[i][b]);
            });
          });
        }

        k = (Ï - padding * n) / k;
        x = 0, i = -1;

        while (++i < n) {
          x0 = x, j = -1;

          while (++j < n) {
            var di = groupIndex[i],
                dj = subgroupIndex[di][j],
                v = matrix[di][dj],
                a0 = x,
                a1 = x += v * k;
            subgroups[di + "-" + dj] = {
              index: di,
              subindex: dj,
              startAngle: a0,
              endAngle: a1,
              value: v
            };
          }

          groups[di] = {
            index: di,
            startAngle: x0,
            endAngle: x,
            value: groupSums[di]
          };
          x += padding;
        }

        i = -1;

        while (++i < n) {
          j = i - 1;

          while (++j < n) {
            var source = subgroups[i + "-" + j],
                target = subgroups[j + "-" + i];

            if (source.value || target.value) {
              chords.push(source.value < target.value ? {
                source: target,
                target: source
              } : {
                source: source,
                target: target
              });
            }
          }
        }

        if (sortChords) resort();
      }

      function resort() {
        chords.sort(function (a, b) {
          return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
        });
      }

      chord.matrix = function (x) {
        if (!arguments.length) return matrix;
        n = (matrix = x) && matrix.length;
        chords = groups = null;
        return chord;
      };

      chord.padding = function (x) {
        if (!arguments.length) return padding;
        padding = x;
        chords = groups = null;
        return chord;
      };

      chord.sortGroups = function (x) {
        if (!arguments.length) return sortGroups;
        sortGroups = x;
        chords = groups = null;
        return chord;
      };

      chord.sortSubgroups = function (x) {
        if (!arguments.length) return sortSubgroups;
        sortSubgroups = x;
        chords = null;
        return chord;
      };

      chord.sortChords = function (x) {
        if (!arguments.length) return sortChords;
        sortChords = x;
        if (chords) resort();
        return chord;
      };

      chord.chords = function () {
        if (!chords) relayout();
        return chords;
      };

      chord.groups = function () {
        if (!groups) relayout();
        return groups;
      };

      return chord;
    };

    d3.layout.force = function () {
      var force = {},
          event = d3.dispatch("start", "tick", "end"),
          timer,
          size = [1, 1],
          drag,
          alpha,
          friction = .9,
          linkDistance = d3_layout_forceLinkDistance,
          linkStrength = d3_layout_forceLinkStrength,
          charge = -30,
          chargeDistance2 = d3_layout_forceChargeDistance2,
          gravity = .1,
          theta2 = .64,
          nodes = [],
          links = [],
          distances,
          strengths,
          charges;

      function repulse(node) {
        return function (quad, x1, _, x2) {
          if (quad.point !== node) {
            var dx = quad.cx - node.x,
                dy = quad.cy - node.y,
                dw = x2 - x1,
                dn = dx * dx + dy * dy;

            if (dw * dw / theta2 < dn) {
              if (dn < chargeDistance2) {
                var k = quad.charge / dn;
                node.px -= dx * k;
                node.py -= dy * k;
              }

              return true;
            }

            if (quad.point && dn && dn < chargeDistance2) {
              var k = quad.pointCharge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
          }

          return !quad.charge;
        };
      }

      force.tick = function () {
        if ((alpha *= .99) < .005) {
          timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
          return true;
        }

        var n = nodes.length,
            m = links.length,
            q,
            i,
            o,
            s,
            t,
            l,
            k,
            x,
            y;

        for (i = 0; i < m; ++i) {
          o = links[i];
          s = o.source;
          t = o.target;
          x = t.x - s.x;
          y = t.y - s.y;

          if (l = x * x + y * y) {
            l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
            x *= l;
            y *= l;
            t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
            t.y -= y * k;
            s.x += x * (k = 1 - k);
            s.y += y * k;
          }
        }

        if (k = alpha * gravity) {
          x = size[0] / 2;
          y = size[1] / 2;
          i = -1;
          if (k) while (++i < n) {
            o = nodes[i];
            o.x += (x - o.x) * k;
            o.y += (y - o.y) * k;
          }
        }

        if (charge) {
          d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
          i = -1;

          while (++i < n) {
            if (!(o = nodes[i]).fixed) {
              q.visit(repulse(o));
            }
          }
        }

        i = -1;

        while (++i < n) {
          o = nodes[i];

          if (o.fixed) {
            o.x = o.px;
            o.y = o.py;
          } else {
            o.x -= (o.px - (o.px = o.x)) * friction;
            o.y -= (o.py - (o.py = o.y)) * friction;
          }
        }

        event.tick({
          type: "tick",
          alpha: alpha
        });
      };

      force.nodes = function (x) {
        if (!arguments.length) return nodes;
        nodes = x;
        return force;
      };

      force.links = function (x) {
        if (!arguments.length) return links;
        links = x;
        return force;
      };

      force.size = function (x) {
        if (!arguments.length) return size;
        size = x;
        return force;
      };

      force.linkDistance = function (x) {
        if (!arguments.length) return linkDistance;
        linkDistance = typeof x === "function" ? x : +x;
        return force;
      };

      force.distance = force.linkDistance;

      force.linkStrength = function (x) {
        if (!arguments.length) return linkStrength;
        linkStrength = typeof x === "function" ? x : +x;
        return force;
      };

      force.friction = function (x) {
        if (!arguments.length) return friction;
        friction = +x;
        return force;
      };

      force.charge = function (x) {
        if (!arguments.length) return charge;
        charge = typeof x === "function" ? x : +x;
        return force;
      };

      force.chargeDistance = function (x) {
        if (!arguments.length) return Math.sqrt(chargeDistance2);
        chargeDistance2 = x * x;
        return force;
      };

      force.gravity = function (x) {
        if (!arguments.length) return gravity;
        gravity = +x;
        return force;
      };

      force.theta = function (x) {
        if (!arguments.length) return Math.sqrt(theta2);
        theta2 = x * x;
        return force;
      };

      force.alpha = function (x) {
        if (!arguments.length) return alpha;
        x = +x;

        if (alpha) {
          if (x > 0) {
            alpha = x;
          } else {
            timer.c = null, timer.t = NaN, timer = null;
            event.end({
              type: "end",
              alpha: alpha = 0
            });
          }
        } else if (x > 0) {
          event.start({
            type: "start",
            alpha: alpha = x
          });
          timer = d3_timer(force.tick);
        }

        return force;
      };

      force.start = function () {
        var i,
            n = nodes.length,
            m = links.length,
            w = size[0],
            h = size[1],
            neighbors,
            o;

        for (i = 0; i < n; ++i) {
          (o = nodes[i]).index = i;
          o.weight = 0;
        }

        for (i = 0; i < m; ++i) {
          o = links[i];
          if (typeof o.source == "number") o.source = nodes[o.source];
          if (typeof o.target == "number") o.target = nodes[o.target];
          ++o.source.weight;
          ++o.target.weight;
        }

        for (i = 0; i < n; ++i) {
          o = nodes[i];
          if (isNaN(o.x)) o.x = position("x", w);
          if (isNaN(o.y)) o.y = position("y", h);
          if (isNaN(o.px)) o.px = o.x;
          if (isNaN(o.py)) o.py = o.y;
        }

        distances = [];
        if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i);else for (i = 0; i < m; ++i) distances[i] = linkDistance;
        strengths = [];
        if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i);else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
        charges = [];
        if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i);else for (i = 0; i < n; ++i) charges[i] = charge;

        function position(dimension, size) {
          if (!neighbors) {
            neighbors = new Array(n);

            for (j = 0; j < n; ++j) {
              neighbors[j] = [];
            }

            for (j = 0; j < m; ++j) {
              var o = links[j];
              neighbors[o.source.index].push(o.target);
              neighbors[o.target.index].push(o.source);
            }
          }

          var candidates = neighbors[i],
              j = -1,
              l = candidates.length,
              x;

          while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;

          return Math.random() * size;
        }

        return force.resume();
      };

      force.resume = function () {
        return force.alpha(.1);
      };

      force.stop = function () {
        return force.alpha(0);
      };

      force.drag = function () {
        if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
        if (!arguments.length) return drag;
        this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
      };

      function dragmove(d) {
        d.px = d3.event.x, d.py = d3.event.y;
        force.resume();
      }

      return d3.rebind(force, event, "on");
    };

    function d3_layout_forceDragstart(d) {
      d.fixed |= 2;
    }

    function d3_layout_forceDragend(d) {
      d.fixed &= ~6;
    }

    function d3_layout_forceMouseover(d) {
      d.fixed |= 4;
      d.px = d.x, d.py = d.y;
    }

    function d3_layout_forceMouseout(d) {
      d.fixed &= ~4;
    }

    function d3_layout_forceAccumulate(quad, alpha, charges) {
      var cx = 0,
          cy = 0;
      quad.charge = 0;

      if (!quad.leaf) {
        var nodes = quad.nodes,
            n = nodes.length,
            i = -1,
            c;

        while (++i < n) {
          c = nodes[i];
          if (c == null) continue;
          d3_layout_forceAccumulate(c, alpha, charges);
          quad.charge += c.charge;
          cx += c.charge * c.cx;
          cy += c.charge * c.cy;
        }
      }

      if (quad.point) {
        if (!quad.leaf) {
          quad.point.x += Math.random() - .5;
          quad.point.y += Math.random() - .5;
        }

        var k = alpha * charges[quad.point.index];
        quad.charge += quad.pointCharge = k;
        cx += k * quad.point.x;
        cy += k * quad.point.y;
      }

      quad.cx = cx / quad.charge;
      quad.cy = cy / quad.charge;
    }

    var d3_layout_forceLinkDistance = 20,
        d3_layout_forceLinkStrength = 1,
        d3_layout_forceChargeDistance2 = Infinity;

    d3.layout.hierarchy = function () {
      var sort = d3_layout_hierarchySort,
          children = d3_layout_hierarchyChildren,
          value = d3_layout_hierarchyValue;

      function hierarchy(root) {
        var stack = [root],
            nodes = [],
            node;
        root.depth = 0;

        while ((node = stack.pop()) != null) {
          nodes.push(node);

          if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
            var n, childs, child;

            while (--n >= 0) {
              stack.push(child = childs[n]);
              child.parent = node;
              child.depth = node.depth + 1;
            }

            if (value) node.value = 0;
            node.children = childs;
          } else {
            if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
            delete node.children;
          }
        }

        d3_layout_hierarchyVisitAfter(root, function (node) {
          var childs, parent;
          if (sort && (childs = node.children)) childs.sort(sort);
          if (value && (parent = node.parent)) parent.value += node.value;
        });
        return nodes;
      }

      hierarchy.sort = function (x) {
        if (!arguments.length) return sort;
        sort = x;
        return hierarchy;
      };

      hierarchy.children = function (x) {
        if (!arguments.length) return children;
        children = x;
        return hierarchy;
      };

      hierarchy.value = function (x) {
        if (!arguments.length) return value;
        value = x;
        return hierarchy;
      };

      hierarchy.revalue = function (root) {
        if (value) {
          d3_layout_hierarchyVisitBefore(root, function (node) {
            if (node.children) node.value = 0;
          });
          d3_layout_hierarchyVisitAfter(root, function (node) {
            var parent;
            if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
            if (parent = node.parent) parent.value += node.value;
          });
        }

        return root;
      };

      return hierarchy;
    };

    function d3_layout_hierarchyRebind(object, hierarchy) {
      d3.rebind(object, hierarchy, "sort", "children", "value");
      object.nodes = object;
      object.links = d3_layout_hierarchyLinks;
      return object;
    }

    function d3_layout_hierarchyVisitBefore(node, callback) {
      var nodes = [node];

      while ((node = nodes.pop()) != null) {
        callback(node);

        if ((children = node.children) && (n = children.length)) {
          var n, children;

          while (--n >= 0) nodes.push(children[n]);
        }
      }
    }

    function d3_layout_hierarchyVisitAfter(node, callback) {
      var nodes = [node],
          nodes2 = [];

      while ((node = nodes.pop()) != null) {
        nodes2.push(node);

        if ((children = node.children) && (n = children.length)) {
          var i = -1,
              n,
              children;

          while (++i < n) nodes.push(children[i]);
        }
      }

      while ((node = nodes2.pop()) != null) {
        callback(node);
      }
    }

    function d3_layout_hierarchyChildren(d) {
      return d.children;
    }

    function d3_layout_hierarchyValue(d) {
      return d.value;
    }

    function d3_layout_hierarchySort(a, b) {
      return b.value - a.value;
    }

    function d3_layout_hierarchyLinks(nodes) {
      return d3.merge(nodes.map(function (parent) {
        return (parent.children || []).map(function (child) {
          return {
            source: parent,
            target: child
          };
        });
      }));
    }

    d3.layout.partition = function () {
      var hierarchy = d3.layout.hierarchy(),
          size = [1, 1];

      function position(node, x, dx, dy) {
        var children = node.children;
        node.x = x;
        node.y = node.depth * dy;
        node.dx = dx;
        node.dy = dy;

        if (children && (n = children.length)) {
          var i = -1,
              n,
              c,
              d;
          dx = node.value ? dx / node.value : 0;

          while (++i < n) {
            position(c = children[i], x, d = c.value * dx, dy);
            x += d;
          }
        }
      }

      function depth(node) {
        var children = node.children,
            d = 0;

        if (children && (n = children.length)) {
          var i = -1,
              n;

          while (++i < n) d = Math.max(d, depth(children[i]));
        }

        return 1 + d;
      }

      function partition(d, i) {
        var nodes = hierarchy.call(this, d, i);
        position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
        return nodes;
      }

      partition.size = function (x) {
        if (!arguments.length) return size;
        size = x;
        return partition;
      };

      return d3_layout_hierarchyRebind(partition, hierarchy);
    };

    d3.layout.pie = function () {
      var value = Number,
          sort = d3_layout_pieSortByValue,
          startAngle = 0,
          endAngle = Ï,
          padAngle = 0;

      function pie(data) {
        var n = data.length,
            values = data.map(function (d, i) {
          return +value.call(pie, d, i);
        }),
            a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle),
            da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a,
            p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)),
            pa = p * (da < 0 ? -1 : 1),
            sum = d3.sum(values),
            k = sum ? (da - n * pa) / sum : 0,
            index = d3.range(n),
            arcs = [],
            v;
        if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {
          return values[j] - values[i];
        } : function (i, j) {
          return sort(data[i], data[j]);
        });
        index.forEach(function (i) {
          arcs[i] = {
            data: data[i],
            value: v = values[i],
            startAngle: a,
            endAngle: a += v * k + pa,
            padAngle: p
          };
        });
        return arcs;
      }

      pie.value = function (_) {
        if (!arguments.length) return value;
        value = _;
        return pie;
      };

      pie.sort = function (_) {
        if (!arguments.length) return sort;
        sort = _;
        return pie;
      };

      pie.startAngle = function (_) {
        if (!arguments.length) return startAngle;
        startAngle = _;
        return pie;
      };

      pie.endAngle = function (_) {
        if (!arguments.length) return endAngle;
        endAngle = _;
        return pie;
      };

      pie.padAngle = function (_) {
        if (!arguments.length) return padAngle;
        padAngle = _;
        return pie;
      };

      return pie;
    };

    var d3_layout_pieSortByValue = {};

    d3.layout.stack = function () {
      var values = d3_identity,
          order = d3_layout_stackOrderDefault,
          offset = d3_layout_stackOffsetZero,
          out = d3_layout_stackOut,
          x = d3_layout_stackX,
          y = d3_layout_stackY;

      function stack(data, index) {
        if (!(n = data.length)) return data;
        var series = data.map(function (d, i) {
          return values.call(stack, d, i);
        });
        var points = series.map(function (d) {
          return d.map(function (v, i) {
            return [x.call(stack, v, i), y.call(stack, v, i)];
          });
        });
        var orders = order.call(stack, points, index);
        series = d3.permute(series, orders);
        points = d3.permute(points, orders);
        var offsets = offset.call(stack, points, index);
        var m = series[0].length,
            n,
            i,
            j,
            o;

        for (j = 0; j < m; ++j) {
          out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);

          for (i = 1; i < n; ++i) {
            out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
          }
        }

        return data;
      }

      stack.values = function (x) {
        if (!arguments.length) return values;
        values = x;
        return stack;
      };

      stack.order = function (x) {
        if (!arguments.length) return order;
        order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
        return stack;
      };

      stack.offset = function (x) {
        if (!arguments.length) return offset;
        offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
        return stack;
      };

      stack.x = function (z) {
        if (!arguments.length) return x;
        x = z;
        return stack;
      };

      stack.y = function (z) {
        if (!arguments.length) return y;
        y = z;
        return stack;
      };

      stack.out = function (z) {
        if (!arguments.length) return out;
        out = z;
        return stack;
      };

      return stack;
    };

    function d3_layout_stackX(d) {
      return d.x;
    }

    function d3_layout_stackY(d) {
      return d.y;
    }

    function d3_layout_stackOut(d, y0, y) {
      d.y0 = y0;
      d.y = y;
    }

    var d3_layout_stackOrders = d3.map({
      "inside-out": function (data) {
        var n = data.length,
            i,
            j,
            max = data.map(d3_layout_stackMaxIndex),
            sums = data.map(d3_layout_stackReduceSum),
            index = d3.range(n).sort(function (a, b) {
          return max[a] - max[b];
        }),
            top = 0,
            bottom = 0,
            tops = [],
            bottoms = [];

        for (i = 0; i < n; ++i) {
          j = index[i];

          if (top < bottom) {
            top += sums[j];
            tops.push(j);
          } else {
            bottom += sums[j];
            bottoms.push(j);
          }
        }

        return bottoms.reverse().concat(tops);
      },
      reverse: function (data) {
        return d3.range(data.length).reverse();
      },
      "default": d3_layout_stackOrderDefault
    });
    var d3_layout_stackOffsets = d3.map({
      silhouette: function (data) {
        var n = data.length,
            m = data[0].length,
            sums = [],
            max = 0,
            i,
            j,
            o,
            y0 = [];

        for (j = 0; j < m; ++j) {
          for (i = 0, o = 0; i < n; i++) o += data[i][j][1];

          if (o > max) max = o;
          sums.push(o);
        }

        for (j = 0; j < m; ++j) {
          y0[j] = (max - sums[j]) / 2;
        }

        return y0;
      },
      wiggle: function (data) {
        var n = data.length,
            x = data[0],
            m = x.length,
            i,
            j,
            k,
            s1,
            s2,
            s3,
            dx,
            o,
            o0,
            y0 = [];
        y0[0] = o = o0 = 0;

        for (j = 1; j < m; ++j) {
          for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];

          for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
            for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
              s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
            }

            s2 += s3 * data[i][j][1];
          }

          y0[j] = o -= s1 ? s2 / s1 * dx : 0;
          if (o < o0) o0 = o;
        }

        for (j = 0; j < m; ++j) y0[j] -= o0;

        return y0;
      },
      expand: function (data) {
        var n = data.length,
            m = data[0].length,
            k = 1 / n,
            i,
            j,
            o,
            y0 = [];

        for (j = 0; j < m; ++j) {
          for (i = 0, o = 0; i < n; i++) o += data[i][j][1];

          if (o) for (i = 0; i < n; i++) data[i][j][1] /= o;else for (i = 0; i < n; i++) data[i][j][1] = k;
        }

        for (j = 0; j < m; ++j) y0[j] = 0;

        return y0;
      },
      zero: d3_layout_stackOffsetZero
    });

    function d3_layout_stackOrderDefault(data) {
      return d3.range(data.length);
    }

    function d3_layout_stackOffsetZero(data) {
      var j = -1,
          m = data[0].length,
          y0 = [];

      while (++j < m) y0[j] = 0;

      return y0;
    }

    function d3_layout_stackMaxIndex(array) {
      var i = 1,
          j = 0,
          v = array[0][1],
          k,
          n = array.length;

      for (; i < n; ++i) {
        if ((k = array[i][1]) > v) {
          j = i;
          v = k;
        }
      }

      return j;
    }

    function d3_layout_stackReduceSum(d) {
      return d.reduce(d3_layout_stackSum, 0);
    }

    function d3_layout_stackSum(p, d) {
      return p + d[1];
    }

    d3.layout.histogram = function () {
      var frequency = true,
          valuer = Number,
          ranger = d3_layout_histogramRange,
          binner = d3_layout_histogramBinSturges;

      function histogram(data, i) {
        var bins = [],
            values = data.map(valuer, this),
            range = ranger.call(this, values, i),
            thresholds = binner.call(this, range, values, i),
            bin,
            i = -1,
            n = values.length,
            m = thresholds.length - 1,
            k = frequency ? 1 : 1 / n,
            x;

        while (++i < m) {
          bin = bins[i] = [];
          bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
          bin.y = 0;
        }

        if (m > 0) {
          i = -1;

          while (++i < n) {
            x = values[i];

            if (x >= range[0] && x <= range[1]) {
              bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
              bin.y += k;
              bin.push(data[i]);
            }
          }
        }

        return bins;
      }

      histogram.value = function (x) {
        if (!arguments.length) return valuer;
        valuer = x;
        return histogram;
      };

      histogram.range = function (x) {
        if (!arguments.length) return ranger;
        ranger = d3_functor(x);
        return histogram;
      };

      histogram.bins = function (x) {
        if (!arguments.length) return binner;
        binner = typeof x === "number" ? function (range) {
          return d3_layout_histogramBinFixed(range, x);
        } : d3_functor(x);
        return histogram;
      };

      histogram.frequency = function (x) {
        if (!arguments.length) return frequency;
        frequency = !!x;
        return histogram;
      };

      return histogram;
    };

    function d3_layout_histogramBinSturges(range, values) {
      return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
    }

    function d3_layout_histogramBinFixed(range, n) {
      var x = -1,
          b = +range[0],
          m = (range[1] - b) / n,
          f = [];

      while (++x <= n) f[x] = m * x + b;

      return f;
    }

    function d3_layout_histogramRange(values) {
      return [d3.min(values), d3.max(values)];
    }

    d3.layout.pack = function () {
      var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort),
          padding = 0,
          size = [1, 1],
          radius;

      function pack(d, i) {
        var nodes = hierarchy.call(this, d, i),
            root = nodes[0],
            w = size[0],
            h = size[1],
            r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function () {
          return radius;
        };
        root.x = root.y = 0;
        d3_layout_hierarchyVisitAfter(root, function (d) {
          d.r = +r(d.value);
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);

        if (padding) {
          var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
          d3_layout_hierarchyVisitAfter(root, function (d) {
            d.r += dr;
          });
          d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
          d3_layout_hierarchyVisitAfter(root, function (d) {
            d.r -= dr;
          });
        }

        d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
        return nodes;
      }

      pack.size = function (_) {
        if (!arguments.length) return size;
        size = _;
        return pack;
      };

      pack.radius = function (_) {
        if (!arguments.length) return radius;
        radius = _ == null || typeof _ === "function" ? _ : +_;
        return pack;
      };

      pack.padding = function (_) {
        if (!arguments.length) return padding;
        padding = +_;
        return pack;
      };

      return d3_layout_hierarchyRebind(pack, hierarchy);
    };

    function d3_layout_packSort(a, b) {
      return a.value - b.value;
    }

    function d3_layout_packInsert(a, b) {
      var c = a._pack_next;
      a._pack_next = b;
      b._pack_prev = a;
      b._pack_next = c;
      c._pack_prev = b;
    }

    function d3_layout_packSplice(a, b) {
      a._pack_next = b;
      b._pack_prev = a;
    }

    function d3_layout_packIntersects(a, b) {
      var dx = b.x - a.x,
          dy = b.y - a.y,
          dr = a.r + b.r;
      return .999 * dr * dr > dx * dx + dy * dy;
    }

    function d3_layout_packSiblings(node) {
      if (!(nodes = node.children) || !(n = nodes.length)) return;
      var nodes,
          xMin = Infinity,
          xMax = -Infinity,
          yMin = Infinity,
          yMax = -Infinity,
          a,
          b,
          c,
          i,
          j,
          k,
          n;

      function bound(node) {
        xMin = Math.min(node.x - node.r, xMin);
        xMax = Math.max(node.x + node.r, xMax);
        yMin = Math.min(node.y - node.r, yMin);
        yMax = Math.max(node.y + node.r, yMax);
      }

      nodes.forEach(d3_layout_packLink);
      a = nodes[0];
      a.x = -a.r;
      a.y = 0;
      bound(a);

      if (n > 1) {
        b = nodes[1];
        b.x = b.r;
        b.y = 0;
        bound(b);

        if (n > 2) {
          c = nodes[2];
          d3_layout_packPlace(a, b, c);
          bound(c);
          d3_layout_packInsert(a, c);
          a._pack_prev = c;
          d3_layout_packInsert(c, b);
          b = a._pack_next;

          for (i = 3; i < n; i++) {
            d3_layout_packPlace(a, b, c = nodes[i]);
            var isect = 0,
                s1 = 1,
                s2 = 1;

            for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
              if (d3_layout_packIntersects(j, c)) {
                isect = 1;
                break;
              }
            }

            if (isect == 1) {
              for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
                if (d3_layout_packIntersects(k, c)) {
                  break;
                }
              }
            }

            if (isect) {
              if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j);else d3_layout_packSplice(a = k, b);
              i--;
            } else {
              d3_layout_packInsert(a, c);
              b = c;
              bound(c);
            }
          }
        }
      }

      var cx = (xMin + xMax) / 2,
          cy = (yMin + yMax) / 2,
          cr = 0;

      for (i = 0; i < n; i++) {
        c = nodes[i];
        c.x -= cx;
        c.y -= cy;
        cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
      }

      node.r = cr;
      nodes.forEach(d3_layout_packUnlink);
    }

    function d3_layout_packLink(node) {
      node._pack_next = node._pack_prev = node;
    }

    function d3_layout_packUnlink(node) {
      delete node._pack_next;
      delete node._pack_prev;
    }

    function d3_layout_packTransform(node, x, y, k) {
      var children = node.children;
      node.x = x += k * node.x;
      node.y = y += k * node.y;
      node.r *= k;

      if (children) {
        var i = -1,
            n = children.length;

        while (++i < n) d3_layout_packTransform(children[i], x, y, k);
      }
    }

    function d3_layout_packPlace(a, b, c) {
      var db = a.r + c.r,
          dx = b.x - a.x,
          dy = b.y - a.y;

      if (db && (dx || dy)) {
        var da = b.r + c.r,
            dc = dx * dx + dy * dy;
        da *= da;
        db *= db;
        var x = .5 + (db - da) / (2 * dc),
            y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
        c.x = a.x + x * dx + y * dy;
        c.y = a.y + x * dy - y * dx;
      } else {
        c.x = a.x + db;
        c.y = a.y;
      }
    }

    d3.layout.tree = function () {
      var hierarchy = d3.layout.hierarchy().sort(null).value(null),
          separation = d3_layout_treeSeparation,
          size = [1, 1],
          nodeSize = null;

      function tree(d, i) {
        var nodes = hierarchy.call(this, d, i),
            root0 = nodes[0],
            root1 = wrapTree(root0);
        d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
        d3_layout_hierarchyVisitBefore(root1, secondWalk);
        if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode);else {
          var left = root0,
              right = root0,
              bottom = root0;
          d3_layout_hierarchyVisitBefore(root0, function (node) {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
            if (node.depth > bottom.depth) bottom = node;
          });
          var tx = separation(left, right) / 2 - left.x,
              kx = size[0] / (right.x + separation(right, left) / 2 + tx),
              ky = size[1] / (bottom.depth || 1);
          d3_layout_hierarchyVisitBefore(root0, function (node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
          });
        }
        return nodes;
      }

      function wrapTree(root0) {
        var root1 = {
          A: null,
          children: [root0]
        },
            queue = [root1],
            node1;

        while ((node1 = queue.pop()) != null) {
          for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
            queue.push((children[i] = child = {
              _: children[i],
              parent: node1,
              children: (child = children[i].children) && child.slice() || [],
              A: null,
              a: null,
              z: 0,
              m: 0,
              c: 0,
              s: 0,
              t: null,
              i: i
            }).a = child);
          }
        }

        return root1.children[0];
      }

      function firstWalk(v) {
        var children = v.children,
            siblings = v.parent.children,
            w = v.i ? siblings[v.i - 1] : null;

        if (children.length) {
          d3_layout_treeShift(v);
          var midpoint = (children[0].z + children[children.length - 1].z) / 2;

          if (w) {
            v.z = w.z + separation(v._, w._);
            v.m = v.z - midpoint;
          } else {
            v.z = midpoint;
          }
        } else if (w) {
          v.z = w.z + separation(v._, w._);
        }

        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
      }

      function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
      }

      function apportion(v, w, ancestor) {
        if (w) {
          var vip = v,
              vop = v,
              vim = w,
              vom = vip.parent.children[0],
              sip = vip.m,
              sop = vop.m,
              sim = vim.m,
              som = vom.m,
              shift;

          while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
            vom = d3_layout_treeLeft(vom);
            vop = d3_layout_treeRight(vop);
            vop.a = v;
            shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

            if (shift > 0) {
              d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
              sip += shift;
              sop += shift;
            }

            sim += vim.m;
            sip += vip.m;
            som += vom.m;
            sop += vop.m;
          }

          if (vim && !d3_layout_treeRight(vop)) {
            vop.t = vim;
            vop.m += sim - sop;
          }

          if (vip && !d3_layout_treeLeft(vom)) {
            vom.t = vip;
            vom.m += sip - som;
            ancestor = v;
          }
        }

        return ancestor;
      }

      function sizeNode(node) {
        node.x *= size[0];
        node.y = node.depth * size[1];
      }

      tree.separation = function (x) {
        if (!arguments.length) return separation;
        separation = x;
        return tree;
      };

      tree.size = function (x) {
        if (!arguments.length) return nodeSize ? null : size;
        nodeSize = (size = x) == null ? sizeNode : null;
        return tree;
      };

      tree.nodeSize = function (x) {
        if (!arguments.length) return nodeSize ? size : null;
        nodeSize = (size = x) == null ? null : sizeNode;
        return tree;
      };

      return d3_layout_hierarchyRebind(tree, hierarchy);
    };

    function d3_layout_treeSeparation(a, b) {
      return a.parent == b.parent ? 1 : 2;
    }

    function d3_layout_treeLeft(v) {
      var children = v.children;
      return children.length ? children[0] : v.t;
    }

    function d3_layout_treeRight(v) {
      var children = v.children,
          n;
      return (n = children.length) ? children[n - 1] : v.t;
    }

    function d3_layout_treeMove(wm, wp, shift) {
      var change = shift / (wp.i - wm.i);
      wp.c -= change;
      wp.s += shift;
      wm.c += change;
      wp.z += shift;
      wp.m += shift;
    }

    function d3_layout_treeShift(v) {
      var shift = 0,
          change = 0,
          children = v.children,
          i = children.length,
          w;

      while (--i >= 0) {
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
      }
    }

    function d3_layout_treeAncestor(vim, v, ancestor) {
      return vim.a.parent === v.parent ? vim.a : ancestor;
    }

    d3.layout.cluster = function () {
      var hierarchy = d3.layout.hierarchy().sort(null).value(null),
          separation = d3_layout_treeSeparation,
          size = [1, 1],
          nodeSize = false;

      function cluster(d, i) {
        var nodes = hierarchy.call(this, d, i),
            root = nodes[0],
            previousNode,
            x = 0;
        d3_layout_hierarchyVisitAfter(root, function (node) {
          var children = node.children;

          if (children && children.length) {
            node.x = d3_layout_clusterX(children);
            node.y = d3_layout_clusterY(children);
          } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
          }
        });
        var left = d3_layout_clusterLeft(root),
            right = d3_layout_clusterRight(root),
            x0 = left.x - separation(left, right) / 2,
            x1 = right.x + separation(right, left) / 2;
        d3_layout_hierarchyVisitAfter(root, nodeSize ? function (node) {
          node.x = (node.x - root.x) * size[0];
          node.y = (root.y - node.y) * size[1];
        } : function (node) {
          node.x = (node.x - x0) / (x1 - x0) * size[0];
          node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
        });
        return nodes;
      }

      cluster.separation = function (x) {
        if (!arguments.length) return separation;
        separation = x;
        return cluster;
      };

      cluster.size = function (x) {
        if (!arguments.length) return nodeSize ? null : size;
        nodeSize = (size = x) == null;
        return cluster;
      };

      cluster.nodeSize = function (x) {
        if (!arguments.length) return nodeSize ? size : null;
        nodeSize = (size = x) != null;
        return cluster;
      };

      return d3_layout_hierarchyRebind(cluster, hierarchy);
    };

    function d3_layout_clusterY(children) {
      return 1 + d3.max(children, function (child) {
        return child.y;
      });
    }

    function d3_layout_clusterX(children) {
      return children.reduce(function (x, child) {
        return x + child.x;
      }, 0) / children.length;
    }

    function d3_layout_clusterLeft(node) {
      var children = node.children;
      return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
    }

    function d3_layout_clusterRight(node) {
      var children = node.children,
          n;
      return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
    }

    d3.layout.treemap = function () {
      var hierarchy = d3.layout.hierarchy(),
          round = Math.round,
          size = [1, 1],
          padding = null,
          pad = d3_layout_treemapPadNull,
          sticky = false,
          stickies,
          mode = "squarify",
          ratio = .5 * (1 + Math.sqrt(5));

      function scale(children, k) {
        var i = -1,
            n = children.length,
            child,
            area;

        while (++i < n) {
          area = (child = children[i]).value * (k < 0 ? 0 : k);
          child.area = isNaN(area) || area <= 0 ? 0 : area;
        }
      }

      function squarify(node) {
        var children = node.children;

        if (children && children.length) {
          var rect = pad(node),
              row = [],
              remaining = children.slice(),
              child,
              best = Infinity,
              score,
              u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy),
              n;
          scale(remaining, rect.dx * rect.dy / node.value);
          row.area = 0;

          while ((n = remaining.length) > 0) {
            row.push(child = remaining[n - 1]);
            row.area += child.area;

            if (mode !== "squarify" || (score = worst(row, u)) <= best) {
              remaining.pop();
              best = score;
            } else {
              row.area -= row.pop().area;
              position(row, u, rect, false);
              u = Math.min(rect.dx, rect.dy);
              row.length = row.area = 0;
              best = Infinity;
            }
          }

          if (row.length) {
            position(row, u, rect, true);
            row.length = row.area = 0;
          }

          children.forEach(squarify);
        }
      }

      function stickify(node) {
        var children = node.children;

        if (children && children.length) {
          var rect = pad(node),
              remaining = children.slice(),
              child,
              row = [];
          scale(remaining, rect.dx * rect.dy / node.value);
          row.area = 0;

          while (child = remaining.pop()) {
            row.push(child);
            row.area += child.area;

            if (child.z != null) {
              position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
              row.length = row.area = 0;
            }
          }

          children.forEach(stickify);
        }
      }

      function worst(row, u) {
        var s = row.area,
            r,
            rmax = 0,
            rmin = Infinity,
            i = -1,
            n = row.length;

        while (++i < n) {
          if (!(r = row[i].area)) continue;
          if (r < rmin) rmin = r;
          if (r > rmax) rmax = r;
        }

        s *= s;
        u *= u;
        return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
      }

      function position(row, u, rect, flush) {
        var i = -1,
            n = row.length,
            x = rect.x,
            y = rect.y,
            v = u ? round(row.area / u) : 0,
            o;

        if (u == rect.dx) {
          if (flush || v > rect.dy) v = rect.dy;

          while (++i < n) {
            o = row[i];
            o.x = x;
            o.y = y;
            o.dy = v;
            x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
          }

          o.z = true;
          o.dx += rect.x + rect.dx - x;
          rect.y += v;
          rect.dy -= v;
        } else {
          if (flush || v > rect.dx) v = rect.dx;

          while (++i < n) {
            o = row[i];
            o.x = x;
            o.y = y;
            o.dx = v;
            y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
          }

          o.z = false;
          o.dy += rect.y + rect.dy - y;
          rect.x += v;
          rect.dx -= v;
        }
      }

      function treemap(d) {
        var nodes = stickies || hierarchy(d),
            root = nodes[0];
        root.x = root.y = 0;
        if (root.value) root.dx = size[0], root.dy = size[1];else root.dx = root.dy = 0;
        if (stickies) hierarchy.revalue(root);
        scale([root], root.dx * root.dy / root.value);
        (stickies ? stickify : squarify)(root);
        if (sticky) stickies = nodes;
        return nodes;
      }

      treemap.size = function (x) {
        if (!arguments.length) return size;
        size = x;
        return treemap;
      };

      treemap.padding = function (x) {
        if (!arguments.length) return padding;

        function padFunction(node) {
          var p = x.call(treemap, node, node.depth);
          return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p, p] : p);
        }

        function padConstant(node) {
          return d3_layout_treemapPad(node, x);
        }

        var type;
        pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [x, x, x, x], padConstant) : padConstant;
        return treemap;
      };

      treemap.round = function (x) {
        if (!arguments.length) return round != Number;
        round = x ? Math.round : Number;
        return treemap;
      };

      treemap.sticky = function (x) {
        if (!arguments.length) return sticky;
        sticky = x;
        stickies = null;
        return treemap;
      };

      treemap.ratio = function (x) {
        if (!arguments.length) return ratio;
        ratio = x;
        return treemap;
      };

      treemap.mode = function (x) {
        if (!arguments.length) return mode;
        mode = x + "";
        return treemap;
      };

      return d3_layout_hierarchyRebind(treemap, hierarchy);
    };

    function d3_layout_treemapPadNull(node) {
      return {
        x: node.x,
        y: node.y,
        dx: node.dx,
        dy: node.dy
      };
    }

    function d3_layout_treemapPad(node, padding) {
      var x = node.x + padding[3],
          y = node.y + padding[0],
          dx = node.dx - padding[1] - padding[3],
          dy = node.dy - padding[0] - padding[2];

      if (dx < 0) {
        x += dx / 2;
        dx = 0;
      }

      if (dy < 0) {
        y += dy / 2;
        dy = 0;
      }

      return {
        x: x,
        y: y,
        dx: dx,
        dy: dy
      };
    }

    d3.random = {
      normal: function (Âµ, Ï) {
        var n = arguments.length;
        if (n < 2) Ï = 1;
        if (n < 1) Âµ = 0;
        return function () {
          var x, y, r;

          do {
            x = Math.random() * 2 - 1;
            y = Math.random() * 2 - 1;
            r = x * x + y * y;
          } while (!r || r > 1);

          return Âµ + Ï * x * Math.sqrt(-2 * Math.log(r) / r);
        };
      },
      logNormal: function () {
        var random = d3.random.normal.apply(d3, arguments);
        return function () {
          return Math.exp(random());
        };
      },
      bates: function (m) {
        var random = d3.random.irwinHall(m);
        return function () {
          return random() / m;
        };
      },
      irwinHall: function (m) {
        return function () {
          for (var s = 0, j = 0; j < m; j++) s += Math.random();

          return s;
        };
      }
    };
    d3.scale = {};

    function d3_scaleExtent(domain) {
      var start = domain[0],
          stop = domain[domain.length - 1];
      return start < stop ? [start, stop] : [stop, start];
    }

    function d3_scaleRange(scale) {
      return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
    }

    function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
      var u = uninterpolate(domain[0], domain[1]),
          i = interpolate(range[0], range[1]);
      return function (x) {
        return i(u(x));
      };
    }

    function d3_scale_nice(domain, nice) {
      var i0 = 0,
          i1 = domain.length - 1,
          x0 = domain[i0],
          x1 = domain[i1],
          dx;

      if (x1 < x0) {
        dx = i0, i0 = i1, i1 = dx;
        dx = x0, x0 = x1, x1 = dx;
      }

      domain[i0] = nice.floor(x0);
      domain[i1] = nice.ceil(x1);
      return domain;
    }

    function d3_scale_niceStep(step) {
      return step ? {
        floor: function (x) {
          return Math.floor(x / step) * step;
        },
        ceil: function (x) {
          return Math.ceil(x / step) * step;
        }
      } : d3_scale_niceIdentity;
    }

    var d3_scale_niceIdentity = {
      floor: d3_identity,
      ceil: d3_identity
    };

    function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
      var u = [],
          i = [],
          j = 0,
          k = Math.min(domain.length, range.length) - 1;

      if (domain[k] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++j <= k) {
        u.push(uninterpolate(domain[j - 1], domain[j]));
        i.push(interpolate(range[j - 1], range[j]));
      }

      return function (x) {
        var j = d3.bisect(domain, x, 1, k) - 1;
        return i[j](u[j](x));
      };
    }

    d3.scale.linear = function () {
      return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false);
    };

    function d3_scale_linear(domain, range, interpolate, clamp) {
      var output, input;

      function rescale() {
        var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear,
            uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
        output = linear(domain, range, uninterpolate, interpolate);
        input = linear(range, domain, uninterpolate, d3_interpolate);
        return scale;
      }

      function scale(x) {
        return output(x);
      }

      scale.invert = function (y) {
        return input(y);
      };

      scale.domain = function (x) {
        if (!arguments.length) return domain;
        domain = x.map(Number);
        return rescale();
      };

      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        return rescale();
      };

      scale.rangeRound = function (x) {
        return scale.range(x).interpolate(d3_interpolateRound);
      };

      scale.clamp = function (x) {
        if (!arguments.length) return clamp;
        clamp = x;
        return rescale();
      };

      scale.interpolate = function (x) {
        if (!arguments.length) return interpolate;
        interpolate = x;
        return rescale();
      };

      scale.ticks = function (m) {
        return d3_scale_linearTicks(domain, m);
      };

      scale.tickFormat = function (m, format) {
        return d3_scale_linearTickFormat(domain, m, format);
      };

      scale.nice = function (m) {
        d3_scale_linearNice(domain, m);
        return rescale();
      };

      scale.copy = function () {
        return d3_scale_linear(domain, range, interpolate, clamp);
      };

      return rescale();
    }

    function d3_scale_linearRebind(scale, linear) {
      return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
    }

    function d3_scale_linearNice(domain, m) {
      d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
      d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
      return domain;
    }

    function d3_scale_linearTickRange(domain, m) {
      if (m == null) m = 10;
      var extent = d3_scaleExtent(domain),
          span = extent[1] - extent[0],
          step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)),
          err = m / span * step;
      if (err <= .15) step *= 10;else if (err <= .35) step *= 5;else if (err <= .75) step *= 2;
      extent[0] = Math.ceil(extent[0] / step) * step;
      extent[1] = Math.floor(extent[1] / step) * step + step * .5;
      extent[2] = step;
      return extent;
    }

    function d3_scale_linearTicks(domain, m) {
      return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
    }

    d3.scale.log = function () {
      return d3_scale_log(d3.scale.linear().domain([0, 1]), 10, true, [1, 10]);
    };

    function d3_scale_log(linear, base, positive, domain) {
      function log(x) {
        return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
      }

      function pow(x) {
        return positive ? Math.pow(base, x) : -Math.pow(base, -x);
      }

      function scale(x) {
        return linear(log(x));
      }

      scale.invert = function (x) {
        return pow(linear.invert(x));
      };

      scale.domain = function (x) {
        if (!arguments.length) return domain;
        positive = x[0] >= 0;
        linear.domain((domain = x.map(Number)).map(log));
        return scale;
      };

      scale.base = function (_) {
        if (!arguments.length) return base;
        base = +_;
        linear.domain(domain.map(log));
        return scale;
      };

      scale.nice = function () {
        var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
        linear.domain(niced);
        domain = niced.map(pow);
        return scale;
      };

      scale.ticks = function () {
        var extent = d3_scaleExtent(domain),
            ticks = [],
            u = extent[0],
            v = extent[1],
            i = Math.floor(log(u)),
            j = Math.ceil(log(v)),
            n = base % 1 ? 2 : base;

        if (isFinite(j - i)) {
          if (positive) {
            for (; i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);

            ticks.push(pow(i));
          } else {
            ticks.push(pow(i));

            for (; i++ < j;) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
          }

          for (i = 0; ticks[i] < u; i++) {}

          for (j = ticks.length; ticks[j - 1] > v; j--) {}

          ticks = ticks.slice(i, j);
        }

        return ticks;
      };

      scale.copy = function () {
        return d3_scale_log(linear.copy(), base, positive, domain);
      };

      return d3_scale_linearRebind(scale, linear);
    }

    var d3_scale_logNiceNegative = {
      floor: function (x) {
        return -Math.ceil(-x);
      },
      ceil: function (x) {
        return -Math.floor(-x);
      }
    };

    d3.scale.pow = function () {
      return d3_scale_pow(d3.scale.linear(), 1, [0, 1]);
    };

    function d3_scale_pow(linear, exponent, domain) {
      var powp = d3_scale_powPow(exponent),
          powb = d3_scale_powPow(1 / exponent);

      function scale(x) {
        return linear(powp(x));
      }

      scale.invert = function (x) {
        return powb(linear.invert(x));
      };

      scale.domain = function (x) {
        if (!arguments.length) return domain;
        linear.domain((domain = x.map(Number)).map(powp));
        return scale;
      };

      scale.ticks = function (m) {
        return d3_scale_linearTicks(domain, m);
      };

      scale.tickFormat = function (m, format) {
        return d3_scale_linearTickFormat(domain, m, format);
      };

      scale.nice = function (m) {
        return scale.domain(d3_scale_linearNice(domain, m));
      };

      scale.exponent = function (x) {
        if (!arguments.length) return exponent;
        powp = d3_scale_powPow(exponent = x);
        powb = d3_scale_powPow(1 / exponent);
        linear.domain(domain.map(powp));
        return scale;
      };

      scale.copy = function () {
        return d3_scale_pow(linear.copy(), exponent, domain);
      };

      return d3_scale_linearRebind(scale, linear);
    }

    function d3_scale_powPow(e) {
      return function (x) {
        return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
      };
    }

    d3.scale.sqrt = function () {
      return d3.scale.pow().exponent(.5);
    };

    d3.scale.ordinal = function () {
      return d3_scale_ordinal([], {
        t: "range",
        a: [[]]
      });
    };

    function d3_scale_ordinal(domain, ranger) {
      var index, range, rangeBand;

      function scale(x) {
        return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
      }

      function steps(start, step) {
        return d3.range(domain.length).map(function (i) {
          return start + step * i;
        });
      }

      scale.domain = function (x) {
        if (!arguments.length) return domain;
        domain = [];
        index = new d3_Map();
        var i = -1,
            n = x.length,
            xi;

        while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));

        return scale[ranger.t].apply(scale, ranger.a);
      };

      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        rangeBand = 0;
        ranger = {
          t: "range",
          a: arguments
        };
        return scale;
      };

      scale.rangePoints = function (x, padding) {
        if (arguments.length < 2) padding = 0;
        var start = x[0],
            stop = x[1],
            step = domain.length < 2 ? (start = (start + stop) / 2, 0) : (stop - start) / (domain.length - 1 + padding);
        range = steps(start + step * padding / 2, step);
        rangeBand = 0;
        ranger = {
          t: "rangePoints",
          a: arguments
        };
        return scale;
      };

      scale.rangeRoundPoints = function (x, padding) {
        if (arguments.length < 2) padding = 0;
        var start = x[0],
            stop = x[1],
            step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 0) : (stop - start) / (domain.length - 1 + padding) | 0;
        range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
        rangeBand = 0;
        ranger = {
          t: "rangeRoundPoints",
          a: arguments
        };
        return scale;
      };

      scale.rangeBands = function (x, padding, outerPadding) {
        if (arguments.length < 2) padding = 0;
        if (arguments.length < 3) outerPadding = padding;
        var reverse = x[1] < x[0],
            start = x[reverse - 0],
            stop = x[1 - reverse],
            step = (stop - start) / (domain.length - padding + 2 * outerPadding);
        range = steps(start + step * outerPadding, step);
        if (reverse) range.reverse();
        rangeBand = step * (1 - padding);
        ranger = {
          t: "rangeBands",
          a: arguments
        };
        return scale;
      };

      scale.rangeRoundBands = function (x, padding, outerPadding) {
        if (arguments.length < 2) padding = 0;
        if (arguments.length < 3) outerPadding = padding;
        var reverse = x[1] < x[0],
            start = x[reverse - 0],
            stop = x[1 - reverse],
            step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
        range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
        if (reverse) range.reverse();
        rangeBand = Math.round(step * (1 - padding));
        ranger = {
          t: "rangeRoundBands",
          a: arguments
        };
        return scale;
      };

      scale.rangeBand = function () {
        return rangeBand;
      };

      scale.rangeExtent = function () {
        return d3_scaleExtent(ranger.a[0]);
      };

      scale.copy = function () {
        return d3_scale_ordinal(domain, ranger);
      };

      return scale.domain(domain);
    }

    d3.scale.category10 = function () {
      return d3.scale.ordinal().range(d3_category10);
    };

    d3.scale.category20 = function () {
      return d3.scale.ordinal().range(d3_category20);
    };

    d3.scale.category20b = function () {
      return d3.scale.ordinal().range(d3_category20b);
    };

    d3.scale.category20c = function () {
      return d3.scale.ordinal().range(d3_category20c);
    };

    var d3_category10 = [2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175].map(d3_rgbString);
    var d3_category20 = [2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725].map(d3_rgbString);
    var d3_category20b = [3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654].map(d3_rgbString);
    var d3_category20c = [3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081].map(d3_rgbString);

    d3.scale.quantile = function () {
      return d3_scale_quantile([], []);
    };

    function d3_scale_quantile(domain, range) {
      var thresholds;

      function rescale() {
        var k = 0,
            q = range.length;
        thresholds = [];

        while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);

        return scale;
      }

      function scale(x) {
        if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
      }

      scale.domain = function (x) {
        if (!arguments.length) return domain;
        domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
        return rescale();
      };

      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        return rescale();
      };

      scale.quantiles = function () {
        return thresholds;
      };

      scale.invertExtent = function (y) {
        y = range.indexOf(y);
        return y < 0 ? [NaN, NaN] : [y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1]];
      };

      scale.copy = function () {
        return d3_scale_quantile(domain, range);
      };

      return rescale();
    }

    d3.scale.quantize = function () {
      return d3_scale_quantize(0, 1, [0, 1]);
    };

    function d3_scale_quantize(x0, x1, range) {
      var kx, i;

      function scale(x) {
        return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
      }

      function rescale() {
        kx = range.length / (x1 - x0);
        i = range.length - 1;
        return scale;
      }

      scale.domain = function (x) {
        if (!arguments.length) return [x0, x1];
        x0 = +x[0];
        x1 = +x[x.length - 1];
        return rescale();
      };

      scale.range = function (x) {
        if (!arguments.length) return range;
        range = x;
        return rescale();
      };

      scale.invertExtent = function (y) {
        y = range.indexOf(y);
        y = y < 0 ? NaN : y / kx + x0;
        return [y, y + 1 / kx];
      };

      scale.copy = function () {
        return d3_scale_quantize(x0, x1, range);
      };

      return rescale();
    }

    d3.scale.threshold = function () {
      return d3_scale_threshold([.5], [0, 1]);
    };

    function d3_scale_threshold(domain, range) {
      function scale(x) {
        if (x <= x) return range[d3.bisect(domain, x)];
      }

      scale.domain = function (_) {
        if (!arguments.length) return domain;
        domain = _;
        return scale;
      };

      scale.range = function (_) {
        if (!arguments.length) return range;
        range = _;
        return scale;
      };

      scale.invertExtent = function (y) {
        y = range.indexOf(y);
        return [domain[y - 1], domain[y]];
      };

      scale.copy = function () {
        return d3_scale_threshold(domain, range);
      };

      return scale;
    }

    d3.scale.identity = function () {
      return d3_scale_identity([0, 1]);
    };

    function d3_scale_identity(domain) {
      function identity(x) {
        return +x;
      }

      identity.invert = identity;

      identity.domain = identity.range = function (x) {
        if (!arguments.length) return domain;
        domain = x.map(identity);
        return identity;
      };

      identity.ticks = function (m) {
        return d3_scale_linearTicks(domain, m);
      };

      identity.tickFormat = function (m, format) {
        return d3_scale_linearTickFormat(domain, m, format);
      };

      identity.copy = function () {
        return d3_scale_identity(domain);
      };

      return identity;
    }

    d3.svg = {};

    function d3_zero() {
      return 0;
    }

    d3.svg.arc = function () {
      var innerRadius = d3_svg_arcInnerRadius,
          outerRadius = d3_svg_arcOuterRadius,
          cornerRadius = d3_zero,
          padRadius = d3_svg_arcAuto,
          startAngle = d3_svg_arcStartAngle,
          endAngle = d3_svg_arcEndAngle,
          padAngle = d3_svg_arcPadAngle;

      function arc() {
        var r0 = Math.max(0, +innerRadius.apply(this, arguments)),
            r1 = Math.max(0, +outerRadius.apply(this, arguments)),
            a0 = startAngle.apply(this, arguments) - halfÏ,
            a1 = endAngle.apply(this, arguments) - halfÏ,
            da = Math.abs(a1 - a0),
            cw = a0 > a1 ? 0 : 1;
        if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
        if (da >= ÏÎµ) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
        var rc,
            cr,
            rp,
            ap,
            p0 = 0,
            p1 = 0,
            x0,
            y0,
            x1,
            y1,
            x2,
            y2,
            x3,
            y3,
            path = [];

        if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
          rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
          if (!cw) p1 *= -1;
          if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
          if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
        }

        if (r1) {
          x0 = r1 * Math.cos(a0 + p1);
          y0 = r1 * Math.sin(a0 + p1);
          x1 = r1 * Math.cos(a1 - p1);
          y1 = r1 * Math.sin(a1 - p1);
          var l1 = Math.abs(a1 - a0 - 2 * p1) <= Ï ? 0 : 1;

          if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
            var h1 = (a0 + a1) / 2;
            x0 = r1 * Math.cos(h1);
            y0 = r1 * Math.sin(h1);
            x1 = y1 = null;
          }
        } else {
          x0 = y0 = 0;
        }

        if (r0) {
          x2 = r0 * Math.cos(a1 - p0);
          y2 = r0 * Math.sin(a1 - p0);
          x3 = r0 * Math.cos(a0 + p0);
          y3 = r0 * Math.sin(a0 + p0);
          var l0 = Math.abs(a0 - a1 + 2 * p0) <= Ï ? 0 : 1;

          if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
            var h0 = (a0 + a1) / 2;
            x2 = r0 * Math.cos(h0);
            y2 = r0 * Math.sin(h0);
            x3 = y3 = null;
          }
        } else {
          x2 = y2 = 0;
        }

        if (da > Îµ && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
          cr = r0 < r1 ^ cw ? 0 : 1;
          var rc1 = rc,
              rc0 = rc;

          if (da < Ï) {
            var oc = x3 == null ? [x2, y2] : x1 == null ? [x0, y0] : d3_geom_polygonIntersect([x0, y0], [x3, y3], [x1, y1], [x2, y2]),
                ax = x0 - oc[0],
                ay = y0 - oc[1],
                bx = x1 - oc[0],
                by = y1 - oc[1],
                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
          }

          if (x1 != null) {
            var t30 = d3_svg_arcCornerTangents(x3 == null ? [x2, y2] : [x3, y3], [x0, y0], r1, rc1, cw),
                t12 = d3_svg_arcCornerTangents([x1, y1], [x2, y2], r1, rc1, cw);

            if (rc === rc1) {
              path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
            } else {
              path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
            }
          } else {
            path.push("M", x0, ",", y0);
          }

          if (x3 != null) {
            var t03 = d3_svg_arcCornerTangents([x0, y0], [x3, y3], r0, -rc0, cw),
                t21 = d3_svg_arcCornerTangents([x2, y2], x1 == null ? [x0, y0] : [x1, y1], r0, -rc0, cw);

            if (rc === rc0) {
              path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
            } else {
              path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
            }
          } else {
            path.push("L", x2, ",", y2);
          }
        } else {
          path.push("M", x0, ",", y0);
          if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
          path.push("L", x2, ",", y2);
          if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
        }

        path.push("Z");
        return path.join("");
      }

      function circleSegment(r1, cw) {
        return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
      }

      arc.innerRadius = function (v) {
        if (!arguments.length) return innerRadius;
        innerRadius = d3_functor(v);
        return arc;
      };

      arc.outerRadius = function (v) {
        if (!arguments.length) return outerRadius;
        outerRadius = d3_functor(v);
        return arc;
      };

      arc.cornerRadius = function (v) {
        if (!arguments.length) return cornerRadius;
        cornerRadius = d3_functor(v);
        return arc;
      };

      arc.padRadius = function (v) {
        if (!arguments.length) return padRadius;
        padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
        return arc;
      };

      arc.startAngle = function (v) {
        if (!arguments.length) return startAngle;
        startAngle = d3_functor(v);
        return arc;
      };

      arc.endAngle = function (v) {
        if (!arguments.length) return endAngle;
        endAngle = d3_functor(v);
        return arc;
      };

      arc.padAngle = function (v) {
        if (!arguments.length) return padAngle;
        padAngle = d3_functor(v);
        return arc;
      };

      arc.centroid = function () {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfÏ;
        return [Math.cos(a) * r, Math.sin(a) * r];
      };

      return arc;
    };

    var d3_svg_arcAuto = "auto";

    function d3_svg_arcInnerRadius(d) {
      return d.innerRadius;
    }

    function d3_svg_arcOuterRadius(d) {
      return d.outerRadius;
    }

    function d3_svg_arcStartAngle(d) {
      return d.startAngle;
    }

    function d3_svg_arcEndAngle(d) {
      return d.endAngle;
    }

    function d3_svg_arcPadAngle(d) {
      return d && d.padAngle;
    }

    function d3_svg_arcSweep(x0, y0, x1, y1) {
      return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
    }

    function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
      var x01 = p0[0] - p1[0],
          y01 = p0[1] - p1[1],
          lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x1 = p0[0] + ox,
          y1 = p0[1] + oy,
          x2 = p1[0] + ox,
          y2 = p1[1] + oy,
          x3 = (x1 + x2) / 2,
          y3 = (y1 + y2) / 2,
          dx = x2 - x1,
          dy = y2 - y1,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x1 * y2 - x2 * y1,
          d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x3,
          dy0 = cy0 - y3,
          dx1 = cx1 - x3,
          dy1 = cy1 - y3;
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
      return [[cx0 - ox, cy0 - oy], [cx0 * r1 / r, cy0 * r1 / r]];
    }

    function d3_true() {
      return true;
    }

    function d3_svg_line(projection) {
      var x = d3_geom_pointX,
          y = d3_geom_pointY,
          defined = d3_true,
          interpolate = d3_svg_lineLinear,
          interpolateKey = interpolate.key,
          tension = .7;

      function line(data) {
        var segments = [],
            points = [],
            i = -1,
            n = data.length,
            d,
            fx = d3_functor(x),
            fy = d3_functor(y);

        function segment() {
          segments.push("M", interpolate(projection(points), tension));
        }

        while (++i < n) {
          if (defined.call(this, d = data[i], i)) {
            points.push([+fx.call(this, d, i), +fy.call(this, d, i)]);
          } else if (points.length) {
            segment();
            points = [];
          }
        }

        if (points.length) segment();
        return segments.length ? segments.join("") : null;
      }

      line.x = function (_) {
        if (!arguments.length) return x;
        x = _;
        return line;
      };

      line.y = function (_) {
        if (!arguments.length) return y;
        y = _;
        return line;
      };

      line.defined = function (_) {
        if (!arguments.length) return defined;
        defined = _;
        return line;
      };

      line.interpolate = function (_) {
        if (!arguments.length) return interpolateKey;
        if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
        return line;
      };

      line.tension = function (_) {
        if (!arguments.length) return tension;
        tension = _;
        return line;
      };

      return line;
    }

    d3.svg.line = function () {
      return d3_svg_line(d3_identity);
    };

    var d3_svg_lineInterpolators = d3.map({
      linear: d3_svg_lineLinear,
      "linear-closed": d3_svg_lineLinearClosed,
      step: d3_svg_lineStep,
      "step-before": d3_svg_lineStepBefore,
      "step-after": d3_svg_lineStepAfter,
      basis: d3_svg_lineBasis,
      "basis-open": d3_svg_lineBasisOpen,
      "basis-closed": d3_svg_lineBasisClosed,
      bundle: d3_svg_lineBundle,
      cardinal: d3_svg_lineCardinal,
      "cardinal-open": d3_svg_lineCardinalOpen,
      "cardinal-closed": d3_svg_lineCardinalClosed,
      monotone: d3_svg_lineMonotone
    });
    d3_svg_lineInterpolators.forEach(function (key, value) {
      value.key = key;
      value.closed = /-closed$/.test(key);
    });

    function d3_svg_lineLinear(points) {
      return points.length > 1 ? points.join("L") : points + "Z";
    }

    function d3_svg_lineLinearClosed(points) {
      return points.join("L") + "Z";
    }

    function d3_svg_lineStep(points) {
      var i = 0,
          n = points.length,
          p = points[0],
          path = [p[0], ",", p[1]];

      while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);

      if (n > 1) path.push("H", p[0]);
      return path.join("");
    }

    function d3_svg_lineStepBefore(points) {
      var i = 0,
          n = points.length,
          p = points[0],
          path = [p[0], ",", p[1]];

      while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);

      return path.join("");
    }

    function d3_svg_lineStepAfter(points) {
      var i = 0,
          n = points.length,
          p = points[0],
          path = [p[0], ",", p[1]];

      while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);

      return path.join("");
    }

    function d3_svg_lineCardinalOpen(points, tension) {
      return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
    }

    function d3_svg_lineCardinalClosed(points, tension) {
      return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
    }

    function d3_svg_lineCardinal(points, tension) {
      return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
    }

    function d3_svg_lineHermite(points, tangents) {
      if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
        return d3_svg_lineLinear(points);
      }

      var quad = points.length != tangents.length,
          path = "",
          p0 = points[0],
          p = points[1],
          t0 = tangents[0],
          t = t0,
          pi = 1;

      if (quad) {
        path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
        p0 = points[1];
        pi = 2;
      }

      if (tangents.length > 1) {
        t = tangents[1];
        p = points[pi];
        pi++;
        path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];

        for (var i = 2; i < tangents.length; i++, pi++) {
          p = points[pi];
          t = tangents[i];
          path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
        }
      }

      if (quad) {
        var lp = points[pi];
        path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
      }

      return path;
    }

    function d3_svg_lineCardinalTangents(points, tension) {
      var tangents = [],
          a = (1 - tension) / 2,
          p0,
          p1 = points[0],
          p2 = points[1],
          i = 1,
          n = points.length;

      while (++i < n) {
        p0 = p1;
        p1 = p2;
        p2 = points[i];
        tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])]);
      }

      return tangents;
    }

    function d3_svg_lineBasis(points) {
      if (points.length < 3) return d3_svg_lineLinear(points);
      var i = 1,
          n = points.length,
          pi = points[0],
          x0 = pi[0],
          y0 = pi[1],
          px = [x0, x0, x0, (pi = points[1])[0]],
          py = [y0, y0, y0, pi[1]],
          path = [x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
      points.push(points[n - 1]);

      while (++i <= n) {
        pi = points[i];
        px.shift();
        px.push(pi[0]);
        py.shift();
        py.push(pi[1]);
        d3_svg_lineBasisBezier(path, px, py);
      }

      points.pop();
      path.push("L", pi);
      return path.join("");
    }

    function d3_svg_lineBasisOpen(points) {
      if (points.length < 4) return d3_svg_lineLinear(points);
      var path = [],
          i = -1,
          n = points.length,
          pi,
          px = [0],
          py = [0];

      while (++i < 3) {
        pi = points[i];
        px.push(pi[0]);
        py.push(pi[1]);
      }

      path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
      --i;

      while (++i < n) {
        pi = points[i];
        px.shift();
        px.push(pi[0]);
        py.shift();
        py.push(pi[1]);
        d3_svg_lineBasisBezier(path, px, py);
      }

      return path.join("");
    }

    function d3_svg_lineBasisClosed(points) {
      var path,
          i = -1,
          n = points.length,
          m = n + 4,
          pi,
          px = [],
          py = [];

      while (++i < 4) {
        pi = points[i % n];
        px.push(pi[0]);
        py.push(pi[1]);
      }

      path = [d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
      --i;

      while (++i < m) {
        pi = points[i % n];
        px.shift();
        px.push(pi[0]);
        py.shift();
        py.push(pi[1]);
        d3_svg_lineBasisBezier(path, px, py);
      }

      return path.join("");
    }

    function d3_svg_lineBundle(points, tension) {
      var n = points.length - 1;

      if (n) {
        var x0 = points[0][0],
            y0 = points[0][1],
            dx = points[n][0] - x0,
            dy = points[n][1] - y0,
            i = -1,
            p,
            t;

        while (++i <= n) {
          p = points[i];
          t = i / n;
          p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
          p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
        }
      }

      return d3_svg_lineBasis(points);
    }

    function d3_svg_lineDot4(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }

    var d3_svg_lineBasisBezier1 = [0, 2 / 3, 1 / 3, 0],
        d3_svg_lineBasisBezier2 = [0, 1 / 3, 2 / 3, 0],
        d3_svg_lineBasisBezier3 = [0, 1 / 6, 2 / 3, 1 / 6];

    function d3_svg_lineBasisBezier(path, x, y) {
      path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
    }

    function d3_svg_lineSlope(p0, p1) {
      return (p1[1] - p0[1]) / (p1[0] - p0[0]);
    }

    function d3_svg_lineFiniteDifferences(points) {
      var i = 0,
          j = points.length - 1,
          m = [],
          p0 = points[0],
          p1 = points[1],
          d = m[0] = d3_svg_lineSlope(p0, p1);

      while (++i < j) {
        m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
      }

      m[i] = d;
      return m;
    }

    function d3_svg_lineMonotoneTangents(points) {
      var tangents = [],
          d,
          a,
          b,
          s,
          m = d3_svg_lineFiniteDifferences(points),
          i = -1,
          j = points.length - 1;

      while (++i < j) {
        d = d3_svg_lineSlope(points[i], points[i + 1]);

        if (abs(d) < Îµ) {
          m[i] = m[i + 1] = 0;
        } else {
          a = m[i] / d;
          b = m[i + 1] / d;
          s = a * a + b * b;

          if (s > 9) {
            s = d * 3 / Math.sqrt(s);
            m[i] = s * a;
            m[i + 1] = s * b;
          }
        }
      }

      i = -1;

      while (++i <= j) {
        s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
        tangents.push([s || 0, m[i] * s || 0]);
      }

      return tangents;
    }

    function d3_svg_lineMonotone(points) {
      return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
    }

    d3.svg.line.radial = function () {
      var line = d3_svg_line(d3_svg_lineRadial);
      line.radius = line.x, delete line.x;
      line.angle = line.y, delete line.y;
      return line;
    };

    function d3_svg_lineRadial(points) {
      var point,
          i = -1,
          n = points.length,
          r,
          a;

      while (++i < n) {
        point = points[i];
        r = point[0];
        a = point[1] - halfÏ;
        point[0] = r * Math.cos(a);
        point[1] = r * Math.sin(a);
      }

      return points;
    }

    function d3_svg_area(projection) {
      var x0 = d3_geom_pointX,
          x1 = d3_geom_pointX,
          y0 = 0,
          y1 = d3_geom_pointY,
          defined = d3_true,
          interpolate = d3_svg_lineLinear,
          interpolateKey = interpolate.key,
          interpolateReverse = interpolate,
          L = "L",
          tension = .7;

      function area(data) {
        var segments = [],
            points0 = [],
            points1 = [],
            i = -1,
            n = data.length,
            d,
            fx0 = d3_functor(x0),
            fy0 = d3_functor(y0),
            fx1 = x0 === x1 ? function () {
          return x;
        } : d3_functor(x1),
            fy1 = y0 === y1 ? function () {
          return y;
        } : d3_functor(y1),
            x,
            y;

        function segment() {
          segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
        }

        while (++i < n) {
          if (defined.call(this, d = data[i], i)) {
            points0.push([x = +fx0.call(this, d, i), y = +fy0.call(this, d, i)]);
            points1.push([+fx1.call(this, d, i), +fy1.call(this, d, i)]);
          } else if (points0.length) {
            segment();
            points0 = [];
            points1 = [];
          }
        }

        if (points0.length) segment();
        return segments.length ? segments.join("") : null;
      }

      area.x = function (_) {
        if (!arguments.length) return x1;
        x0 = x1 = _;
        return area;
      };

      area.x0 = function (_) {
        if (!arguments.length) return x0;
        x0 = _;
        return area;
      };

      area.x1 = function (_) {
        if (!arguments.length) return x1;
        x1 = _;
        return area;
      };

      area.y = function (_) {
        if (!arguments.length) return y1;
        y0 = y1 = _;
        return area;
      };

      area.y0 = function (_) {
        if (!arguments.length) return y0;
        y0 = _;
        return area;
      };

      area.y1 = function (_) {
        if (!arguments.length) return y1;
        y1 = _;
        return area;
      };

      area.defined = function (_) {
        if (!arguments.length) return defined;
        defined = _;
        return area;
      };

      area.interpolate = function (_) {
        if (!arguments.length) return interpolateKey;
        if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
        interpolateReverse = interpolate.reverse || interpolate;
        L = interpolate.closed ? "M" : "L";
        return area;
      };

      area.tension = function (_) {
        if (!arguments.length) return tension;
        tension = _;
        return area;
      };

      return area;
    }

    d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
    d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;

    d3.svg.area = function () {
      return d3_svg_area(d3_identity);
    };

    d3.svg.area.radial = function () {
      var area = d3_svg_area(d3_svg_lineRadial);
      area.radius = area.x, delete area.x;
      area.innerRadius = area.x0, delete area.x0;
      area.outerRadius = area.x1, delete area.x1;
      area.angle = area.y, delete area.y;
      area.startAngle = area.y0, delete area.y0;
      area.endAngle = area.y1, delete area.y1;
      return area;
    };

    function d3_source(d) {
      return d.source;
    }

    function d3_target(d) {
      return d.target;
    }

    d3.svg.chord = function () {
      var source = d3_source,
          target = d3_target,
          radius = d3_svg_chordRadius,
          startAngle = d3_svg_arcStartAngle,
          endAngle = d3_svg_arcEndAngle;

      function chord(d, i) {
        var s = subgroup(this, source, d, i),
            t = subgroup(this, target, d, i);
        return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
      }

      function subgroup(self, f, d, i) {
        var subgroup = f.call(self, d, i),
            r = radius.call(self, subgroup, i),
            a0 = startAngle.call(self, subgroup, i) - halfÏ,
            a1 = endAngle.call(self, subgroup, i) - halfÏ;
        return {
          r: r,
          a0: a0,
          a1: a1,
          p0: [r * Math.cos(a0), r * Math.sin(a0)],
          p1: [r * Math.cos(a1), r * Math.sin(a1)]
        };
      }

      function equals(a, b) {
        return a.a0 == b.a0 && a.a1 == b.a1;
      }

      function arc(r, p, a) {
        return "A" + r + "," + r + " 0 " + +(a > Ï) + ",1 " + p;
      }

      function curve(r0, p0, r1, p1) {
        return "Q 0,0 " + p1;
      }

      chord.radius = function (v) {
        if (!arguments.length) return radius;
        radius = d3_functor(v);
        return chord;
      };

      chord.source = function (v) {
        if (!arguments.length) return source;
        source = d3_functor(v);
        return chord;
      };

      chord.target = function (v) {
        if (!arguments.length) return target;
        target = d3_functor(v);
        return chord;
      };

      chord.startAngle = function (v) {
        if (!arguments.length) return startAngle;
        startAngle = d3_functor(v);
        return chord;
      };

      chord.endAngle = function (v) {
        if (!arguments.length) return endAngle;
        endAngle = d3_functor(v);
        return chord;
      };

      return chord;
    };

    function d3_svg_chordRadius(d) {
      return d.radius;
    }

    d3.svg.diagonal = function () {
      var source = d3_source,
          target = d3_target,
          projection = d3_svg_diagonalProjection;

      function diagonal(d, i) {
        var p0 = source.call(this, d, i),
            p3 = target.call(this, d, i),
            m = (p0.y + p3.y) / 2,
            p = [p0, {
          x: p0.x,
          y: m
        }, {
          x: p3.x,
          y: m
        }, p3];
        p = p.map(projection);
        return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
      }

      diagonal.source = function (x) {
        if (!arguments.length) return source;
        source = d3_functor(x);
        return diagonal;
      };

      diagonal.target = function (x) {
        if (!arguments.length) return target;
        target = d3_functor(x);
        return diagonal;
      };

      diagonal.projection = function (x) {
        if (!arguments.length) return projection;
        projection = x;
        return diagonal;
      };

      return diagonal;
    };

    function d3_svg_diagonalProjection(d) {
      return [d.x, d.y];
    }

    d3.svg.diagonal.radial = function () {
      var diagonal = d3.svg.diagonal(),
          projection = d3_svg_diagonalProjection,
          projection_ = diagonal.projection;

      diagonal.projection = function (x) {
        return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
      };

      return diagonal;
    };

    function d3_svg_diagonalRadialProjection(projection) {
      return function () {
        var d = projection.apply(this, arguments),
            r = d[0],
            a = d[1] - halfÏ;
        return [r * Math.cos(a), r * Math.sin(a)];
      };
    }

    d3.svg.symbol = function () {
      var type = d3_svg_symbolType,
          size = d3_svg_symbolSize;

      function symbol(d, i) {
        return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
      }

      symbol.type = function (x) {
        if (!arguments.length) return type;
        type = d3_functor(x);
        return symbol;
      };

      symbol.size = function (x) {
        if (!arguments.length) return size;
        size = d3_functor(x);
        return symbol;
      };

      return symbol;
    };

    function d3_svg_symbolSize() {
      return 64;
    }

    function d3_svg_symbolType() {
      return "circle";
    }

    function d3_svg_symbolCircle(size) {
      var r = Math.sqrt(size / Ï);
      return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
    }

    var d3_svg_symbols = d3.map({
      circle: d3_svg_symbolCircle,
      cross: function (size) {
        var r = Math.sqrt(size / 5) / 2;
        return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
      },
      diamond: function (size) {
        var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)),
            rx = ry * d3_svg_symbolTan30;
        return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
      },
      square: function (size) {
        var r = Math.sqrt(size) / 2;
        return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
      },
      "triangle-down": function (size) {
        var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
            ry = rx * d3_svg_symbolSqrt3 / 2;
        return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
      },
      "triangle-up": function (size) {
        var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
            ry = rx * d3_svg_symbolSqrt3 / 2;
        return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
      }
    });
    d3.svg.symbolTypes = d3_svg_symbols.keys();
    var d3_svg_symbolSqrt3 = Math.sqrt(3),
        d3_svg_symbolTan30 = Math.tan(30 * d3_radians);

    d3_selectionPrototype.transition = function (name) {
      var id = d3_transitionInheritId || ++d3_transitionId,
          ns = d3_transitionNamespace(name),
          subgroups = [],
          subgroup,
          node,
          transition = d3_transitionInherit || {
        time: Date.now(),
        ease: d3_ease_cubicInOut,
        delay: 0,
        duration: 250
      };

      for (var j = -1, m = this.length; ++j < m;) {
        subgroups.push(subgroup = []);

        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
          subgroup.push(node);
        }
      }

      return d3_transition(subgroups, ns, id);
    };

    d3_selectionPrototype.interrupt = function (name) {
      return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
    };

    var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());

    function d3_selection_interruptNS(ns) {
      return function () {
        var lock, activeId, active;

        if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
          active.timer.c = null;
          active.timer.t = NaN;
          if (--lock.count) delete lock[activeId];else delete this[ns];
          lock.active += .5;
          active.event && active.event.interrupt.call(this, this.__data__, active.index);
        }
      };
    }

    function d3_transition(groups, ns, id) {
      d3_subclass(groups, d3_transitionPrototype);
      groups.namespace = ns;
      groups.id = id;
      return groups;
    }

    var d3_transitionPrototype = [],
        d3_transitionId = 0,
        d3_transitionInheritId,
        d3_transitionInherit;
    d3_transitionPrototype.call = d3_selectionPrototype.call;
    d3_transitionPrototype.empty = d3_selectionPrototype.empty;
    d3_transitionPrototype.node = d3_selectionPrototype.node;
    d3_transitionPrototype.size = d3_selectionPrototype.size;

    d3.transition = function (selection, name) {
      return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
    };

    d3.transition.prototype = d3_transitionPrototype;

    d3_transitionPrototype.select = function (selector) {
      var id = this.id,
          ns = this.namespace,
          subgroups = [],
          subgroup,
          subnode,
          node;
      selector = d3_selection_selector(selector);

      for (var j = -1, m = this.length; ++j < m;) {
        subgroups.push(subgroup = []);

        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            d3_transitionNode(subnode, i, ns, id, node[ns][id]);
            subgroup.push(subnode);
          } else {
            subgroup.push(null);
          }
        }
      }

      return d3_transition(subgroups, ns, id);
    };

    d3_transitionPrototype.selectAll = function (selector) {
      var id = this.id,
          ns = this.namespace,
          subgroups = [],
          subgroup,
          subnodes,
          node,
          subnode,
          transition;
      selector = d3_selection_selectorAll(selector);

      for (var j = -1, m = this.length; ++j < m;) {
        for (var group = this[j], i = -1, n = group.length; ++i < n;) {
          if (node = group[i]) {
            transition = node[ns][id];
            subnodes = selector.call(node, node.__data__, i, j);
            subgroups.push(subgroup = []);

            for (var k = -1, o = subnodes.length; ++k < o;) {
              if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
              subgroup.push(subnode);
            }
          }
        }
      }

      return d3_transition(subgroups, ns, id);
    };

    d3_transitionPrototype.filter = function (filter) {
      var subgroups = [],
          subgroup,
          group,
          node;
      if (typeof filter !== "function") filter = d3_selection_filter(filter);

      for (var j = 0, m = this.length; j < m; j++) {
        subgroups.push(subgroup = []);

        for (var group = this[j], i = 0, n = group.length; i < n; i++) {
          if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
            subgroup.push(node);
          }
        }
      }

      return d3_transition(subgroups, this.namespace, this.id);
    };

    d3_transitionPrototype.tween = function (name, tween) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
      return d3_selection_each(this, tween == null ? function (node) {
        node[ns][id].tween.remove(name);
      } : function (node) {
        node[ns][id].tween.set(name, tween);
      });
    };

    function d3_transition_tween(groups, name, value, tween) {
      var id = groups.id,
          ns = groups.namespace;
      return d3_selection_each(groups, typeof value === "function" ? function (node, i, j) {
        node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
      } : (value = tween(value), function (node) {
        node[ns][id].tween.set(name, value);
      }));
    }

    d3_transitionPrototype.attr = function (nameNS, value) {
      if (arguments.length < 2) {
        for (value in nameNS) this.attr(value, nameNS[value]);

        return this;
      }

      var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate,
          name = d3.ns.qualify(nameNS);

      function attrNull() {
        this.removeAttribute(name);
      }

      function attrNullNS() {
        this.removeAttributeNS(name.space, name.local);
      }

      function attrTween(b) {
        return b == null ? attrNull : (b += "", function () {
          var a = this.getAttribute(name),
              i;
          return a !== b && (i = interpolate(a, b), function (t) {
            this.setAttribute(name, i(t));
          });
        });
      }

      function attrTweenNS(b) {
        return b == null ? attrNullNS : (b += "", function () {
          var a = this.getAttributeNS(name.space, name.local),
              i;
          return a !== b && (i = interpolate(a, b), function (t) {
            this.setAttributeNS(name.space, name.local, i(t));
          });
        });
      }

      return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
    };

    d3_transitionPrototype.attrTween = function (nameNS, tween) {
      var name = d3.ns.qualify(nameNS);

      function attrTween(d, i) {
        var f = tween.call(this, d, i, this.getAttribute(name));
        return f && function (t) {
          this.setAttribute(name, f(t));
        };
      }

      function attrTweenNS(d, i) {
        var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
        return f && function (t) {
          this.setAttributeNS(name.space, name.local, f(t));
        };
      }

      return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
    };

    d3_transitionPrototype.style = function (name, value, priority) {
      var n = arguments.length;

      if (n < 3) {
        if (typeof name !== "string") {
          if (n < 2) value = "";

          for (priority in name) this.style(priority, name[priority], value);

          return this;
        }

        priority = "";
      }

      function styleNull() {
        this.style.removeProperty(name);
      }

      function styleString(b) {
        return b == null ? styleNull : (b += "", function () {
          var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name),
              i;
          return a !== b && (i = d3_interpolate(a, b), function (t) {
            this.style.setProperty(name, i(t), priority);
          });
        });
      }

      return d3_transition_tween(this, "style." + name, value, styleString);
    };

    d3_transitionPrototype.styleTween = function (name, tween, priority) {
      if (arguments.length < 3) priority = "";

      function styleTween(d, i) {
        var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
        return f && function (t) {
          this.style.setProperty(name, f(t), priority);
        };
      }

      return this.tween("style." + name, styleTween);
    };

    d3_transitionPrototype.text = function (value) {
      return d3_transition_tween(this, "text", value, d3_transition_text);
    };

    function d3_transition_text(b) {
      if (b == null) b = "";
      return function () {
        this.textContent = b;
      };
    }

    d3_transitionPrototype.remove = function () {
      var ns = this.namespace;
      return this.each("end.transition", function () {
        var p;
        if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
      });
    };

    d3_transitionPrototype.ease = function (value) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 1) return this.node()[ns][id].ease;
      if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
      return d3_selection_each(this, function (node) {
        node[ns][id].ease = value;
      });
    };

    d3_transitionPrototype.delay = function (value) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 1) return this.node()[ns][id].delay;
      return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
        node[ns][id].delay = +value.call(node, node.__data__, i, j);
      } : (value = +value, function (node) {
        node[ns][id].delay = value;
      }));
    };

    d3_transitionPrototype.duration = function (value) {
      var id = this.id,
          ns = this.namespace;
      if (arguments.length < 1) return this.node()[ns][id].duration;
      return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
        node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
      } : (value = Math.max(1, value), function (node) {
        node[ns][id].duration = value;
      }));
    };

    d3_transitionPrototype.each = function (type, listener) {
      var id = this.id,
          ns = this.namespace;

      if (arguments.length < 2) {
        var inherit = d3_transitionInherit,
            inheritId = d3_transitionInheritId;

        try {
          d3_transitionInheritId = id;
          d3_selection_each(this, function (node, i, j) {
            d3_transitionInherit = node[ns][id];
            type.call(node, node.__data__, i, j);
          });
        } finally {
          d3_transitionInherit = inherit;
          d3_transitionInheritId = inheritId;
        }
      } else {
        d3_selection_each(this, function (node) {
          var transition = node[ns][id];
          (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
        });
      }

      return this;
    };

    d3_transitionPrototype.transition = function () {
      var id0 = this.id,
          id1 = ++d3_transitionId,
          ns = this.namespace,
          subgroups = [],
          subgroup,
          group,
          node,
          transition;

      for (var j = 0, m = this.length; j < m; j++) {
        subgroups.push(subgroup = []);

        for (var group = this[j], i = 0, n = group.length; i < n; i++) {
          if (node = group[i]) {
            transition = node[ns][id0];
            d3_transitionNode(node, i, ns, id1, {
              time: transition.time,
              ease: transition.ease,
              delay: transition.delay + transition.duration,
              duration: transition.duration
            });
          }

          subgroup.push(node);
        }
      }

      return d3_transition(subgroups, ns, id1);
    };

    function d3_transitionNamespace(name) {
      return name == null ? "__transition__" : "__transition_" + name + "__";
    }

    function d3_transitionNode(node, i, ns, id, inherit) {
      var lock = node[ns] || (node[ns] = {
        active: 0,
        count: 0
      }),
          transition = lock[id],
          time,
          timer,
          duration,
          ease,
          tweens;

      function schedule(elapsed) {
        var delay = transition.delay;
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;
      }

      function start(elapsed) {
        var activeId = lock.active,
            active = lock[activeId];

        if (active) {
          active.timer.c = null;
          active.timer.t = NaN;
          --lock.count;
          delete lock[activeId];
          active.event && active.event.interrupt.call(node, node.__data__, active.index);
        }

        for (var cancelId in lock) {
          if (+cancelId < id) {
            var cancel = lock[cancelId];
            cancel.timer.c = null;
            cancel.timer.t = NaN;
            --lock.count;
            delete lock[cancelId];
          }
        }

        timer.c = tick;
        d3_timer(function () {
          if (timer.c && tick(elapsed || 1)) {
            timer.c = null;
            timer.t = NaN;
          }

          return 1;
        }, 0, time);
        lock.active = id;
        transition.event && transition.event.start.call(node, node.__data__, i);
        tweens = [];
        transition.tween.forEach(function (key, value) {
          if (value = value.call(node, node.__data__, i)) {
            tweens.push(value);
          }
        });
        ease = transition.ease;
        duration = transition.duration;
      }

      function tick(elapsed) {
        var t = elapsed / duration,
            e = ease(t),
            n = tweens.length;

        while (n > 0) {
          tweens[--n].call(node, e);
        }

        if (t >= 1) {
          transition.event && transition.event.end.call(node, node.__data__, i);
          if (--lock.count) delete lock[id];else delete node[ns];
          return 1;
        }
      }

      if (!transition) {
        time = inherit.time;
        timer = d3_timer(schedule, 0, time);
        transition = lock[id] = {
          tween: new d3_Map(),
          time: time,
          timer: timer,
          delay: inherit.delay,
          duration: inherit.duration,
          ease: inherit.ease,
          index: i
        };
        inherit = null;
        ++lock.count;
      }
    }

    d3.svg.axis = function () {
      var scale = d3.scale.linear(),
          orient = d3_svg_axisDefaultOrient,
          innerTickSize = 6,
          outerTickSize = 6,
          tickPadding = 3,
          tickArguments_ = [10],
          tickValues = null,
          tickFormat_;

      function axis(g) {
        g.each(function () {
          var g = d3.select(this);
          var scale0 = this.__chart__ || scale,
              scale1 = this.__chart__ = scale.copy();
          var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues,
              tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_,
              tick = g.selectAll(".tick").data(ticks, scale1),
              tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", Îµ),
              tickExit = d3.transition(tick.exit()).style("opacity", Îµ).remove(),
              tickUpdate = d3.transition(tick.order()).style("opacity", 1),
              tickSpacing = Math.max(innerTickSize, 0) + tickPadding,
              tickTransform;
          var range = d3_scaleRange(scale1),
              path = g.selectAll(".domain").data([0]),
              pathUpdate = (path.enter().append("path").attr("class", "domain"), d3.transition(path));
          tickEnter.append("line");
          tickEnter.append("text");
          var lineEnter = tickEnter.select("line"),
              lineUpdate = tickUpdate.select("line"),
              text = tick.select("text").text(tickFormat),
              textEnter = tickEnter.select("text"),
              textUpdate = tickUpdate.select("text"),
              sign = orient === "top" || orient === "left" ? -1 : 1,
              x1,
              x2,
              y1,
              y2;

          if (orient === "bottom" || orient === "top") {
            tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
            text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
          } else {
            tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
            text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
            pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
          }

          lineEnter.attr(y2, sign * innerTickSize);
          textEnter.attr(y1, sign * tickSpacing);
          lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
          textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);

          if (scale1.rangeBand) {
            var x = scale1,
                dx = x.rangeBand() / 2;

            scale0 = scale1 = function (d) {
              return x(d) + dx;
            };
          } else if (scale0.rangeBand) {
            scale0 = scale1;
          } else {
            tickExit.call(tickTransform, scale1, scale0);
          }

          tickEnter.call(tickTransform, scale0, scale1);
          tickUpdate.call(tickTransform, scale1, scale1);
        });
      }

      axis.scale = function (x) {
        if (!arguments.length) return scale;
        scale = x;
        return axis;
      };

      axis.orient = function (x) {
        if (!arguments.length) return orient;
        orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
        return axis;
      };

      axis.ticks = function () {
        if (!arguments.length) return tickArguments_;
        tickArguments_ = d3_array(arguments);
        return axis;
      };

      axis.tickValues = function (x) {
        if (!arguments.length) return tickValues;
        tickValues = x;
        return axis;
      };

      axis.tickFormat = function (x) {
        if (!arguments.length) return tickFormat_;
        tickFormat_ = x;
        return axis;
      };

      axis.tickSize = function (x) {
        var n = arguments.length;
        if (!n) return innerTickSize;
        innerTickSize = +x;
        outerTickSize = +arguments[n - 1];
        return axis;
      };

      axis.innerTickSize = function (x) {
        if (!arguments.length) return innerTickSize;
        innerTickSize = +x;
        return axis;
      };

      axis.outerTickSize = function (x) {
        if (!arguments.length) return outerTickSize;
        outerTickSize = +x;
        return axis;
      };

      axis.tickPadding = function (x) {
        if (!arguments.length) return tickPadding;
        tickPadding = +x;
        return axis;
      };

      axis.tickSubdivide = function () {
        return arguments.length && axis;
      };

      return axis;
    };

    var d3_svg_axisDefaultOrient = "bottom",
        d3_svg_axisOrients = {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    };

    function d3_svg_axisX(selection, x0, x1) {
      selection.attr("transform", function (d) {
        var v0 = x0(d);
        return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
      });
    }

    function d3_svg_axisY(selection, y0, y1) {
      selection.attr("transform", function (d) {
        var v0 = y0(d);
        return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
      });
    }

    d3.svg.brush = function () {
      var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"),
          x = null,
          y = null,
          xExtent = [0, 0],
          yExtent = [0, 0],
          xExtentDomain,
          yExtentDomain,
          xClamp = true,
          yClamp = true,
          resizes = d3_svg_brushResizes[0];

      function brush(g) {
        g.each(function () {
          var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
          var background = g.selectAll(".background").data([0]);
          background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
          g.selectAll(".extent").data([0]).enter().append("rect").attr("class", "extent").style("cursor", "move");
          var resize = g.selectAll(".resize").data(resizes, d3_identity);
          resize.exit().remove();
          resize.enter().append("g").attr("class", function (d) {
            return "resize " + d;
          }).style("cursor", function (d) {
            return d3_svg_brushCursor[d];
          }).append("rect").attr("x", function (d) {
            return /[ew]$/.test(d) ? -3 : null;
          }).attr("y", function (d) {
            return /^[ns]/.test(d) ? -3 : null;
          }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
          resize.style("display", brush.empty() ? "none" : null);
          var gUpdate = d3.transition(g),
              backgroundUpdate = d3.transition(background),
              range;

          if (x) {
            range = d3_scaleRange(x);
            backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
            redrawX(gUpdate);
          }

          if (y) {
            range = d3_scaleRange(y);
            backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
            redrawY(gUpdate);
          }

          redraw(gUpdate);
        });
      }

      brush.event = function (g) {
        g.each(function () {
          var event_ = event.of(this, arguments),
              extent1 = {
            x: xExtent,
            y: yExtent,
            i: xExtentDomain,
            j: yExtentDomain
          },
              extent0 = this.__chart__ || extent1;
          this.__chart__ = extent1;

          if (d3_transitionInheritId) {
            d3.select(this).transition().each("start.brush", function () {
              xExtentDomain = extent0.i;
              yExtentDomain = extent0.j;
              xExtent = extent0.x;
              yExtent = extent0.y;
              event_({
                type: "brushstart"
              });
            }).tween("brush:brush", function () {
              var xi = d3_interpolateArray(xExtent, extent1.x),
                  yi = d3_interpolateArray(yExtent, extent1.y);
              xExtentDomain = yExtentDomain = null;
              return function (t) {
                xExtent = extent1.x = xi(t);
                yExtent = extent1.y = yi(t);
                event_({
                  type: "brush",
                  mode: "resize"
                });
              };
            }).each("end.brush", function () {
              xExtentDomain = extent1.i;
              yExtentDomain = extent1.j;
              event_({
                type: "brush",
                mode: "resize"
              });
              event_({
                type: "brushend"
              });
            });
          } else {
            event_({
              type: "brushstart"
            });
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          }
        });
      };

      function redraw(g) {
        g.selectAll(".resize").attr("transform", function (d) {
          return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
        });
      }

      function redrawX(g) {
        g.select(".extent").attr("x", xExtent[0]);
        g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
      }

      function redrawY(g) {
        g.select(".extent").attr("y", yExtent[0]);
        g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
      }

      function brushstart() {
        var target = this,
            eventTarget = d3.select(d3.event.target),
            event_ = event.of(target, arguments),
            g = d3.select(target),
            resizing = eventTarget.datum(),
            resizingX = !/^(n|s)$/.test(resizing) && x,
            resizingY = !/^(e|w)$/.test(resizing) && y,
            dragging = eventTarget.classed("extent"),
            dragRestore = d3_event_dragSuppress(target),
            center,
            origin = d3.mouse(target),
            offset;
        var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);

        if (d3.event.changedTouches) {
          w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
        } else {
          w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
        }

        g.interrupt().selectAll("*").interrupt();

        if (dragging) {
          origin[0] = xExtent[0] - origin[0];
          origin[1] = yExtent[0] - origin[1];
        } else if (resizing) {
          var ex = +/w$/.test(resizing),
              ey = +/^n/.test(resizing);
          offset = [xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1]];
          origin[0] = xExtent[ex];
          origin[1] = yExtent[ey];
        } else if (d3.event.altKey) center = origin.slice();

        g.style("pointer-events", "none").selectAll(".resize").style("display", null);
        d3.select("body").style("cursor", eventTarget.style("cursor"));
        event_({
          type: "brushstart"
        });
        brushmove();

        function keydown() {
          if (d3.event.keyCode == 32) {
            if (!dragging) {
              center = null;
              origin[0] -= xExtent[1];
              origin[1] -= yExtent[1];
              dragging = 2;
            }

            d3_eventPreventDefault();
          }
        }

        function keyup() {
          if (d3.event.keyCode == 32 && dragging == 2) {
            origin[0] += xExtent[1];
            origin[1] += yExtent[1];
            dragging = 0;
            d3_eventPreventDefault();
          }
        }

        function brushmove() {
          var point = d3.mouse(target),
              moved = false;

          if (offset) {
            point[0] += offset[0];
            point[1] += offset[1];
          }

          if (!dragging) {
            if (d3.event.altKey) {
              if (!center) center = [(xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2];
              origin[0] = xExtent[+(point[0] < center[0])];
              origin[1] = yExtent[+(point[1] < center[1])];
            } else center = null;
          }

          if (resizingX && move1(point, x, 0)) {
            redrawX(g);
            moved = true;
          }

          if (resizingY && move1(point, y, 1)) {
            redrawY(g);
            moved = true;
          }

          if (moved) {
            redraw(g);
            event_({
              type: "brush",
              mode: dragging ? "move" : "resize"
            });
          }
        }

        function move1(point, scale, i) {
          var range = d3_scaleRange(scale),
              r0 = range[0],
              r1 = range[1],
              position = origin[i],
              extent = i ? yExtent : xExtent,
              size = extent[1] - extent[0],
              min,
              max;

          if (dragging) {
            r0 -= position;
            r1 -= size + position;
          }

          min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];

          if (dragging) {
            max = (min += position) + size;
          } else {
            if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));

            if (position < min) {
              max = min;
              min = position;
            } else {
              max = position;
            }
          }

          if (extent[0] != min || extent[1] != max) {
            if (i) yExtentDomain = null;else xExtentDomain = null;
            extent[0] = min;
            extent[1] = max;
            return true;
          }
        }

        function brushend() {
          brushmove();
          g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
          d3.select("body").style("cursor", null);
          w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
          dragRestore();
          event_({
            type: "brushend"
          });
        }
      }

      brush.x = function (z) {
        if (!arguments.length) return x;
        x = z;
        resizes = d3_svg_brushResizes[!x << 1 | !y];
        return brush;
      };

      brush.y = function (z) {
        if (!arguments.length) return y;
        y = z;
        resizes = d3_svg_brushResizes[!x << 1 | !y];
        return brush;
      };

      brush.clamp = function (z) {
        if (!arguments.length) return x && y ? [xClamp, yClamp] : x ? xClamp : y ? yClamp : null;
        if (x && y) xClamp = !!z[0], yClamp = !!z[1];else if (x) xClamp = !!z;else if (y) yClamp = !!z;
        return brush;
      };

      brush.extent = function (z) {
        var x0, x1, y0, y1, t;

        if (!arguments.length) {
          if (x) {
            if (xExtentDomain) {
              x0 = xExtentDomain[0], x1 = xExtentDomain[1];
            } else {
              x0 = xExtent[0], x1 = xExtent[1];
              if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
              if (x1 < x0) t = x0, x0 = x1, x1 = t;
            }
          }

          if (y) {
            if (yExtentDomain) {
              y0 = yExtentDomain[0], y1 = yExtentDomain[1];
            } else {
              y0 = yExtent[0], y1 = yExtent[1];
              if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
              if (y1 < y0) t = y0, y0 = y1, y1 = t;
            }
          }

          return x && y ? [[x0, y0], [x1, y1]] : x ? [x0, x1] : y && [y0, y1];
        }

        if (x) {
          x0 = z[0], x1 = z[1];
          if (y) x0 = x0[0], x1 = x1[0];
          xExtentDomain = [x0, x1];
          if (x.invert) x0 = x(x0), x1 = x(x1);
          if (x1 < x0) t = x0, x0 = x1, x1 = t;
          if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [x0, x1];
        }

        if (y) {
          y0 = z[0], y1 = z[1];
          if (x) y0 = y0[1], y1 = y1[1];
          yExtentDomain = [y0, y1];
          if (y.invert) y0 = y(y0), y1 = y(y1);
          if (y1 < y0) t = y0, y0 = y1, y1 = t;
          if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [y0, y1];
        }

        return brush;
      };

      brush.clear = function () {
        if (!brush.empty()) {
          xExtent = [0, 0], yExtent = [0, 0];
          xExtentDomain = yExtentDomain = null;
        }

        return brush;
      };

      brush.empty = function () {
        return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
      };

      return d3.rebind(brush, event, "on");
    };

    var d3_svg_brushCursor = {
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };
    var d3_svg_brushResizes = [["n", "e", "s", "w", "nw", "ne", "se", "sw"], ["e", "w"], ["n", "s"], []];
    d3.text = d3_xhrType(function (request) {
      return request.responseText;
    });

    d3.json = function (url, callback) {
      return d3_xhr(url, "application/json", d3_json, callback);
    };

    function d3_json(request) {
      return JSON.parse(request.responseText);
    }

    d3.html = function (url, callback) {
      return d3_xhr(url, "text/html", d3_html, callback);
    };

    function d3_html(request) {
      var range = d3_document.createRange();
      range.selectNode(d3_document.body);
      return range.createContextualFragment(request.responseText);
    }

    d3.xml = d3_xhrType(function (request) {
      return request.responseXML;
    });
    if (module.exports) module.exports = d3;else this.d3 = d3;
  }.apply(self);
});

var t0 = new Date(),
    t1 = new Date();
function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }

  interval.floor = function (date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}

var millisecond = newInterval(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var millisecond$1 = millisecond;
var milliseconds = millisecond.range;

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * durationSecond);
}, function (start, end) {
  return (end - start) / durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var second$1 = second;
var seconds = second.range;

var minute = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function (date, step) {
  date.setTime(+date + step * durationMinute);
}, function (start, end) {
  return (end - start) / durationMinute;
}, function (date) {
  return date.getMinutes();
});
var minute$1 = minute;
var minutes = minute.range;

var hour = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function (date, step) {
  date.setTime(+date + step * durationHour);
}, function (start, end) {
  return (end - start) / durationHour;
}, function (date) {
  return date.getHours();
});
var hour$1 = hour;
var hours = hour.range;

var day = newInterval(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function (date) {
  return date.getDate() - 1;
});
var timeDay = day;
var days = day.range;

function weekday(i) {
  return newInterval(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

var month = newInterval(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var month$1 = month;
var months = month.range;

var year = newInterval(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var timeYear = year;
var years = year.range;

var utcMinute = newInterval(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * durationMinute);
}, function (start, end) {
  return (end - start) / durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var utcMinute$1 = utcMinute;
var utcMinutes = utcMinute.range;

var utcHour = newInterval(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * durationHour);
}, function (start, end) {
  return (end - start) / durationHour;
}, function (date) {
  return date.getUTCHours();
});
var utcHour$1 = utcHour;
var utcHours = utcHour.range;

var utcDay = newInterval(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var utcDay$1 = utcDay;
var utcDays = utcDay.range;

function utcWeekday(i) {
  return newInterval(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

var utcMonth = newInterval(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var utcMonth$1 = utcMonth;
var utcMonths = utcMonth.range;

var utcYear = newInterval(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var utcYear$1 = utcYear;
var utcYears = utcYear.range;

var src$2 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	timeInterval: newInterval,
	timeMillisecond: millisecond$1,
	timeMilliseconds: milliseconds,
	utcMillisecond: millisecond$1,
	utcMilliseconds: milliseconds,
	timeSecond: second$1,
	timeSeconds: seconds,
	utcSecond: second$1,
	utcSeconds: seconds,
	timeMinute: minute$1,
	timeMinutes: minutes,
	timeHour: hour$1,
	timeHours: hours,
	timeDay: timeDay,
	timeDays: days,
	timeWeek: sunday,
	timeWeeks: sundays,
	timeSunday: sunday,
	timeSundays: sundays,
	timeMonday: monday,
	timeMondays: mondays,
	timeTuesday: tuesday,
	timeTuesdays: tuesdays,
	timeWednesday: wednesday,
	timeWednesdays: wednesdays,
	timeThursday: thursday,
	timeThursdays: thursdays,
	timeFriday: friday,
	timeFridays: fridays,
	timeSaturday: saturday,
	timeSaturdays: saturdays,
	timeMonth: month$1,
	timeMonths: months,
	timeYear: timeYear,
	timeYears: years,
	utcMinute: utcMinute$1,
	utcMinutes: utcMinutes,
	utcHour: utcHour$1,
	utcHours: utcHours,
	utcDay: utcDay$1,
	utcDays: utcDays,
	utcWeek: utcSunday,
	utcWeeks: utcSundays,
	utcSunday: utcSunday,
	utcSundays: utcSundays,
	utcMonday: utcMonday,
	utcMondays: utcMondays,
	utcTuesday: utcTuesday,
	utcTuesdays: utcTuesdays,
	utcWednesday: utcWednesday,
	utcWednesdays: utcWednesdays,
	utcThursday: utcThursday,
	utcThursdays: utcThursdays,
	utcFriday: utcFriday,
	utcFridays: utcFridays,
	utcSaturday: utcSaturday,
	utcSaturdays: utcSaturdays,
	utcMonth: utcMonth$1,
	utcMonths: utcMonths,
	utcYear: utcYear$1,
	utcYears: utcYears
});

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {
    y: y,
    m: m,
    d: d,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale$1(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function (string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay$1.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? monday.ceil(week) : monday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", false);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier += "", true);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}
var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;

  while (++i < n) map[names[i].toLowerCase()] = i;

  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + timeDay.count(timeYear(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(timeYear(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(thursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(monday.count(timeYear(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay$1.count(utcYear$1(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear$1(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear$1(d), d) + (utcYear$1(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear$1(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale$1;
var timeFormat;
var timeParse;
var utcFormat$1;
var utcParse;
defaultLocale$1({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  timeFormat = locale$1.format;
  timeParse = locale$1.parse;
  utcFormat$1 = locale$1.utcFormat;
  utcParse = locale$1.utcParse;
  return locale$1;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat$1(isoSpecifier);
var formatIso$1 = formatIso;

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);
var parseIso$1 = parseIso;

var src$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	timeFormatDefaultLocale: defaultLocale$1,
	get timeFormat () { return timeFormat; },
	get timeParse () { return timeParse; },
	get utcFormat () { return utcFormat$1; },
	get utcParse () { return utcParse; },
	timeFormatLocale: formatLocale$1,
	isoFormat: formatIso$1,
	isoParse: parseIso$1
});

function formatDecimal (x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
} // Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].

function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, Â±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}

function exponent (x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup (grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals (numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim (s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;
function formatPrefixAuto (x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded (x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": formatDecimal,
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return formatRounded(x * 100, p);
  },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};

function identity$3 (x) {
  return x;
}

var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "Âµ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale (locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$3 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity$3 : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer âvalueâ part that can be
        // grouped, and fractional or exponential âsuffixâ part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;
var format$2;
var formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  format$2 = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed (step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix (step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound (step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

var src = /*#__PURE__*/Object.freeze({
	__proto__: null,
	formatDefaultLocale: defaultLocale,
	get format () { return format$2; },
	get formatPrefix () { return formatPrefix; },
	formatLocale: formatLocale,
	formatSpecifier: formatSpecifier,
	FormatSpecifier: FormatSpecifier,
	precisionFixed: precisionFixed,
	precisionPrefix: precisionPrefix,
	precisionRound: precisionRound
});

/**
 * Is this string all whitespace?
 * This solution kind of makes my brain hurt, but it's significantly faster
 * than !str.trim() or any other solution I could find.
 *
 * whitespace codes from: http://en.wikipedia.org/wiki/Whitespace_character
 * and verified with:
 *
 *  for(var i = 0; i < 65536; i++) {
 *      var s = String.fromCharCode(i);
 *      if(+s===0 && !s.trim()) console.log(i, s);
 *  }
 *
 * which counts a couple of these as *not* whitespace, but finds nothing else
 * that *is* whitespace. Note that charCodeAt stops at 16 bits, but it appears
 * that there are no whitespace characters above this, and code points above
 * this do not map onto white space characters.
 */

var isStringBlank = function (str) {
  var l = str.length,
      a;

  for (var i = 0; i < l; i++) {
    a = str.charCodeAt(i);

    if ((a < 9 || a > 13) && a !== 32 && a !== 133 && a !== 160 && a !== 5760 && a !== 6158 && (a < 8192 || a > 8205) && a !== 8232 && a !== 8233 && a !== 8239 && a !== 8287 && a !== 8288 && a !== 12288 && a !== 65279) {
      return false;
    }
  }

  return true;
};

/**
 * inspired by is-number <https://github.com/jonschlinkert/is-number>
 * but significantly simplified and sped up by ignoring number and string constructors
 * ie these return false:
 *   new Number(1)
 *   new String('1')
 */

var fastIsnumeric = function (n) {
  var type = typeof n;

  if (type === 'string') {
    var original = n;
    n = +n; // whitespace strings cast to zero - filter them out

    if (n === 0 && isStringBlank(original)) return false;
  } else if (type !== 'number') return false;

  return n - n < 1;
};

var numerical = {
  /**
   * Standardize all missing data in calcdata to use undefined
   * never null or NaN.
   * That way we can use !==undefined, or !== BADNUM,
   * to test for real data
   */
  BADNUM: undefined,

  /*
   * Limit certain operations to well below floating point max value
   * to avoid glitches: Make sure that even when you multiply it by the
   * number of pixels on a giant screen it still works
   */
  FP_SAFE: Number.MAX_VALUE * 1e-4,

  /*
   * conversion of date units to milliseconds
   * year and month constants are marked "AVG"
   * to remind us that not all years and months
   * have the same length
   */
  ONEMAXYEAR: 31622400000,
  // 366 * ONEDAY
  ONEAVGYEAR: 31557600000,
  // 365.25 days
  ONEMINYEAR: 31536000000,
  // 365 * ONEDAY
  ONEMAXQUARTER: 7948800000,
  // 92 * ONEDAY
  ONEAVGQUARTER: 7889400000,
  // 1/4 of ONEAVGYEAR
  ONEMINQUARTER: 7689600000,
  // 89 * ONEDAY
  ONEMAXMONTH: 2678400000,
  // 31 * ONEDAY
  ONEAVGMONTH: 2629800000,
  // 1/12 of ONEAVGYEAR
  ONEMINMONTH: 2419200000,
  // 28 * ONEDAY
  ONEWEEK: 604800000,
  // 7 * ONEDAY
  ONEDAY: 86400000,
  // 24 * ONEHOUR
  ONEHOUR: 3600000,
  ONEMIN: 60000,
  ONESEC: 1000,

  /*
   * For fast conversion btwn world calendars and epoch ms, the Julian Day Number
   * of the unix epoch. From calendars.instance().newDate(1970, 1, 1).toJD()
   */
  EPOCHJD: 2440587.5,

  /*
   * Are two values nearly equal? Compare to 1PPM
   */
  ALMOST_EQUAL: 1 - 1e-6,

  /*
   * If we're asked to clip a non-positive log value, how far off-screen
   * do we put it?
   */
  LOG_CLIP: 10,

  /*
   * not a number, but for displaying numbers: the "minus sign" symbol is
   * wider than the regular ascii dash "-"
   */
  MINUS_SIGN: '\u2212'
};

var isArray$2 = Array.isArray;
var ab = ArrayBuffer;
var dv = DataView;

function isTypedArray(a) {
  return ab.isView(a) && !(a instanceof dv);
}

var isTypedArray_1 = isTypedArray;

function isArrayOrTypedArray$8(a) {
  return isArray$2(a) || isTypedArray(a);
}

var isArrayOrTypedArray_1 = isArrayOrTypedArray$8;
/*
 * Test whether an input object is 1D.
 *
 * Assumes we already know the object is an array.
 *
 * Looks only at the first element, if the dimensionality is
 * not consistent we won't figure that out here.
 */

function isArray1D(a) {
  return !isArrayOrTypedArray$8(a[0]);
}

var isArray1D_1 = isArray1D;
/*
 * Ensures an array has the right amount of storage space. If it doesn't
 * exist, it creates an array. If it does exist, it returns it if too
 * short or truncates it in-place.
 *
 * The goal is to just reuse memory to avoid a bit of excessive garbage
 * collection.
 */

var ensureArray = function (out, n) {
  // TODO: typed array support here? This is only used in
  // traces/carpet/compute_control_points
  if (!isArray$2(out)) out = []; // If too long, truncate. (If too short, it will grow
  // automatically so we don't care about that case)

  out.length = n;
  return out;
};
/*
 * TypedArray-compatible concatenation of n arrays
 * if all arrays are the same type it will preserve that type,
 * otherwise it falls back on Array.
 * Also tries to avoid copying, in case one array has zero length
 * But never mutates an existing array
 */


var concat = function () {
  var args = [];
  var allArray = true;
  var totalLen = 0;

  var _constructor, arg0, i, argi, posi, leni, out, j;

  for (i = 0; i < arguments.length; i++) {
    argi = arguments[i];
    leni = argi.length;

    if (leni) {
      if (arg0) args.push(argi);else {
        arg0 = argi;
        posi = leni;
      }

      if (isArray$2(argi)) {
        _constructor = false;
      } else {
        allArray = false;

        if (!totalLen) {
          _constructor = argi.constructor;
        } else if (_constructor !== argi.constructor) {
          // TODO: in principle we could upgrade here,
          // ie keep typed array but convert all to Float64Array?
          _constructor = false;
        }
      }

      totalLen += leni;
    }
  }

  if (!totalLen) return [];
  if (!args.length) return arg0;
  if (allArray) return arg0.concat.apply(arg0, args);

  if (_constructor) {
    // matching typed arrays
    out = new _constructor(totalLen);
    out.set(arg0);

    for (i = 0; i < args.length; i++) {
      argi = args[i];
      out.set(argi, posi);
      posi += argi.length;
    }

    return out;
  } // mismatched types or Array + typed


  out = new Array(totalLen);

  for (j = 0; j < arg0.length; j++) out[j] = arg0[j];

  for (i = 0; i < args.length; i++) {
    argi = args[i];

    for (j = 0; j < argi.length; j++) out[posi + j] = argi[j];

    posi += j;
  }

  return out;
};

var maxRowLength = function (z) {
  return _rowLength(z, Math.max, 0);
};

var minRowLength = function (z) {
  return _rowLength(z, Math.min, Infinity);
};

function _rowLength(z, fn, len0) {
  if (isArrayOrTypedArray$8(z)) {
    if (isArrayOrTypedArray$8(z[0])) {
      var len = len0;

      for (var i = 0; i < z.length; i++) {
        len = fn(len, z[i].length);
      }

      return len;
    } else {
      return z.length;
    }
  }

  return 0;
}

var array = {
  isTypedArray: isTypedArray_1,
  isArrayOrTypedArray: isArrayOrTypedArray_1,
  isArray1D: isArray1D_1,
  ensureArray: ensureArray,
  concat: concat,
  maxRowLength: maxRowLength,
  minRowLength: minRowLength
};

var isArrayOrTypedArray$7 = array.isArrayOrTypedArray;
/**
 * convert a string s (such as 'xaxis.range[0]')
 * representing a property of nested object into set and get methods
 * also return the string and object so we don't have to keep track of them
 * allows [-1] for an array index, to set a property inside all elements
 * of an array
 * eg if obj = {arr: [{a: 1}, {a: 2}]}
 * you can do p = nestedProperty(obj, 'arr[-1].a')
 * but you cannot set the array itself this way, to do that
 * just set the whole array.
 * eg if obj = {arr: [1, 2, 3]}
 * you can't do nestedProperty(obj, 'arr[-1]').set(5)
 * but you can do nestedProperty(obj, 'arr').set([5, 5, 5])
 */

var nested_property = function nestedProperty(container, propStr) {
  if (fastIsnumeric(propStr)) propStr = String(propStr);else if (typeof propStr !== 'string' || propStr.substr(propStr.length - 4) === '[-1]') {
    throw 'bad property string';
  }
  var j = 0;
  var propParts = propStr.split('.');
  var indexed;
  var indices;
  var i; // check for parts of the nesting hierarchy that are numbers (ie array elements)

  while (j < propParts.length) {
    // look for non-bracket chars, then any number of [##] blocks
    indexed = String(propParts[j]).match(/^([^\[\]]*)((\[\-?[0-9]*\])+)$/);

    if (indexed) {
      if (indexed[1]) propParts[j] = indexed[1]; // allow propStr to start with bracketed array indices
      else if (j === 0) propParts.splice(0, 1);else throw 'bad property string';
      indices = indexed[2].substr(1, indexed[2].length - 2).split('][');

      for (i = 0; i < indices.length; i++) {
        j++;
        propParts.splice(j, 0, Number(indices[i]));
      }
    }

    j++;
  }

  if (typeof container !== 'object') {
    return badContainer(container, propStr, propParts);
  }

  return {
    set: npSet(container, propParts, propStr),
    get: npGet(container, propParts),
    astr: propStr,
    parts: propParts,
    obj: container
  };
};

function npGet(cont, parts) {
  return function () {
    var curCont = cont;
    var curPart;
    var allSame;
    var out;
    var i;
    var j;

    for (i = 0; i < parts.length - 1; i++) {
      curPart = parts[i];

      if (curPart === -1) {
        allSame = true;
        out = [];

        for (j = 0; j < curCont.length; j++) {
          out[j] = npGet(curCont[j], parts.slice(i + 1))();
          if (out[j] !== out[0]) allSame = false;
        }

        return allSame ? out[0] : out;
      }

      if (typeof curPart === 'number' && !isArrayOrTypedArray$7(curCont)) {
        return undefined;
      }

      curCont = curCont[curPart];

      if (typeof curCont !== 'object' || curCont === null) {
        return undefined;
      }
    } // only hit this if parts.length === 1


    if (typeof curCont !== 'object' || curCont === null) return undefined;
    out = curCont[parts[i]];
    if (out === null) return undefined;
    return out;
  };
}
/*
 * Can this value be deleted? We can delete `undefined`, and `null` except INSIDE an
 * *args* array.
 *
 * Previously we also deleted some `{}` and `[]`, in order to try and make set/unset
 * a net noop; but this causes far more complication than it's worth, and still had
 * lots of exceptions. See https://github.com/plotly/plotly.js/issues/1410
 *
 * *args* arrays get passed directly to API methods and we should respect null if
 * the user put it there, but otherwise null is deleted as we use it as code
 * in restyle/relayout/update for "delete this value" whereas undefined means
 * "ignore this edit"
 */


var ARGS_PATTERN = /(^|\.)args\[/;

function isDeletable(val, propStr) {
  return val === undefined || val === null && !propStr.match(ARGS_PATTERN);
}

function npSet(cont, parts, propStr) {
  return function (val) {
    var curCont = cont;
    var propPart = '';
    var toDelete = isDeletable(val, propStr);
    var curPart;
    var i;

    for (i = 0; i < parts.length - 1; i++) {
      curPart = parts[i];

      if (typeof curPart === 'number' && !isArrayOrTypedArray$7(curCont)) {
        throw 'array index but container is not an array';
      } // handle special -1 array index


      if (curPart === -1) {
        toDelete = !setArrayAll(curCont, parts.slice(i + 1), val, propStr);
        if (toDelete) break;else return;
      }

      if (!checkNewContainer(curCont, curPart, parts[i + 1], toDelete)) {
        break;
      }

      curCont = curCont[curPart];

      if (typeof curCont !== 'object' || curCont === null) {
        throw 'container is not an object';
      }

      propPart = joinPropStr(propPart, curPart);
    }

    if (toDelete) {
      if (i === parts.length - 1) {
        delete curCont[parts[i]]; // The one bit of pruning we still do: drop `undefined` from the end of arrays.
        // In case someone has already unset previous items, continue until we hit a
        // non-undefined value.

        if (Array.isArray(curCont) && +parts[i] === curCont.length - 1) {
          while (curCont.length && curCont[curCont.length - 1] === undefined) {
            curCont.pop();
          }
        }
      }
    } else curCont[parts[i]] = val;
  };
}

function joinPropStr(propStr, newPart) {
  var toAdd = newPart;
  if (fastIsnumeric(newPart)) toAdd = '[' + newPart + ']';else if (propStr) toAdd = '.' + newPart;
  return propStr + toAdd;
} // handle special -1 array index


function setArrayAll(containerArray, innerParts, val, propStr) {
  var arrayVal = isArrayOrTypedArray$7(val);
  var allSet = true;
  var thisVal = val;
  var thisPropStr = propStr.replace('-1', 0);
  var deleteThis = arrayVal ? false : isDeletable(val, thisPropStr);
  var firstPart = innerParts[0];
  var i;

  for (i = 0; i < containerArray.length; i++) {
    thisPropStr = propStr.replace('-1', i);

    if (arrayVal) {
      thisVal = val[i % val.length];
      deleteThis = isDeletable(thisVal, thisPropStr);
    }

    if (deleteThis) allSet = false;

    if (!checkNewContainer(containerArray, i, firstPart, deleteThis)) {
      continue;
    }

    npSet(containerArray[i], innerParts, propStr.replace('-1', i))(thisVal);
  }

  return allSet;
}
/**
 * make new sub-container as needed.
 * returns false if there's no container and none is needed
 * because we're only deleting an attribute
 */


function checkNewContainer(container, part, nextPart, toDelete) {
  if (container[part] === undefined) {
    if (toDelete) return false;
    if (typeof nextPart === 'number') container[part] = [];else container[part] = {};
  }

  return true;
}

function badContainer(container, propStr, propParts) {
  return {
    set: function () {
      throw 'bad container';
    },
    get: function () {},
    astr: propStr,
    parts: propParts,
    obj: container
  };
}

var SIMPLE_PROPERTY_REGEX = /^\w*$/; // bitmask for deciding what's updated. Sometimes the name needs to be updated,
// sometimes the value needs to be updated, and sometimes both do. This is just
// a simple way to track what's updated such that it's a simple OR operation to
// assimilate new updates.
//
// The only exception is the UNSET bit that tracks when we need to explicitly
// unset and remove the property. This concrn arises because of the special
// way in which nestedProperty handles null/undefined. When you specify `null`,
// it prunes any unused items in the tree. I ran into some issues with it getting
// null vs undefined confused, so UNSET is just a bit that forces the property
// update to send `null`, removing the property explicitly rather than setting
// it to undefined.

var NONE = 0;
var NAME = 1;
var VALUE = 2;
var BOTH = 3;
var UNSET = 4;

var keyed_container = function keyedContainer(baseObj, path, keyName, valueName) {
  keyName = keyName || 'name';
  valueName = valueName || 'value';
  var i, arr, baseProp;
  var changeTypes = {};

  if (path && path.length) {
    baseProp = nested_property(baseObj, path);
    arr = baseProp.get();
  } else {
    arr = baseObj;
  }

  path = path || ''; // Construct an index:

  var indexLookup = {};

  if (arr) {
    for (i = 0; i < arr.length; i++) {
      indexLookup[arr[i][keyName]] = i;
    }
  }

  var isSimpleValueProp = SIMPLE_PROPERTY_REGEX.test(valueName);
  var obj = {
    set: function (name, value) {
      var changeType = value === null ? UNSET : NONE; // create the base array if necessary

      if (!arr) {
        if (!baseProp || changeType === UNSET) return;
        arr = [];
        baseProp.set(arr);
      }

      var idx = indexLookup[name];

      if (idx === undefined) {
        if (changeType === UNSET) return;
        changeType = changeType | BOTH;
        idx = arr.length;
        indexLookup[name] = idx;
      } else if (value !== (isSimpleValueProp ? arr[idx][valueName] : nested_property(arr[idx], valueName).get())) {
        changeType = changeType | VALUE;
      }

      var newValue = arr[idx] = arr[idx] || {};
      newValue[keyName] = name;

      if (isSimpleValueProp) {
        newValue[valueName] = value;
      } else {
        nested_property(newValue, valueName).set(value);
      } // If it's not an unset, force that bit to be unset. This is all related to the fact
      // that undefined and null are a bit specially implemented in nestedProperties.


      if (value !== null) {
        changeType = changeType & ~UNSET;
      }

      changeTypes[idx] = changeTypes[idx] | changeType;
      return obj;
    },
    get: function (name) {
      if (!arr) return;
      var idx = indexLookup[name];

      if (idx === undefined) {
        return undefined;
      } else if (isSimpleValueProp) {
        return arr[idx][valueName];
      } else {
        return nested_property(arr[idx], valueName).get();
      }
    },
    rename: function (name, newName) {
      var idx = indexLookup[name];
      if (idx === undefined) return obj;
      changeTypes[idx] = changeTypes[idx] | NAME;
      indexLookup[newName] = idx;
      delete indexLookup[name];
      arr[idx][keyName] = newName;
      return obj;
    },
    remove: function (name) {
      var idx = indexLookup[name];
      if (idx === undefined) return obj;
      var object = arr[idx];

      if (Object.keys(object).length > 2) {
        // This object contains more than just the key/value, so unset
        // the value without modifying the entry otherwise:
        changeTypes[idx] = changeTypes[idx] | VALUE;
        return obj.set(name, null);
      }

      if (isSimpleValueProp) {
        for (i = idx; i < arr.length; i++) {
          changeTypes[i] = changeTypes[i] | BOTH;
        }

        for (i = idx; i < arr.length; i++) {
          indexLookup[arr[i][keyName]]--;
        }

        arr.splice(idx, 1);
        delete indexLookup[name];
      } else {
        // Perform this update *strictly* so we can check whether the result's
        // been pruned. If so, it's a removal. If not, it's a value unset only.
        nested_property(object, valueName).set(null); // Now check if the top level nested property has any keys left. If so,
        // the object still has values so we only want to unset the key. If not,
        // the entire object can be removed since there's no other data.
        // var topLevelKeys = Object.keys(object[valueName.split('.')[0]] || []);

        changeTypes[idx] = changeTypes[idx] | VALUE | UNSET;
      }

      return obj;
    },
    constructUpdate: function () {
      var astr, idx;
      var update = {};
      var changed = Object.keys(changeTypes);

      for (var i = 0; i < changed.length; i++) {
        idx = changed[i];
        astr = path + '[' + idx + ']';

        if (arr[idx]) {
          if (changeTypes[idx] & NAME) {
            update[astr + '.' + keyName] = arr[idx][keyName];
          }

          if (changeTypes[idx] & VALUE) {
            if (isSimpleValueProp) {
              update[astr + '.' + valueName] = changeTypes[idx] & UNSET ? null : arr[idx][valueName];
            } else {
              update[astr + '.' + valueName] = changeTypes[idx] & UNSET ? null : nested_property(arr[idx], valueName).get();
            }
          }
        } else {
          update[astr] = null;
        }
      }

      return update;
    }
  };
  return obj;
};

// the attribute tree. the remaining attrString is in match[1]

var ASCEND = /^(.*)(\.[^\.\[\]]+|\[\d\])$/; // SIMPLEATTR: is this an un-nested attribute? (no dots or brackets)

var SIMPLEATTR = /^[^\.\[\]]+$/;
/*
 * calculate a relative attribute string, similar to a relative path
 *
 * @param {string} baseAttr:
 *   an attribute string, such as 'annotations[3].x'. The "current location"
 *   is the attribute string minus the last component ('annotations[3]')
 * @param {string} relativeAttr:
 *   a route to the desired attribute string, using '^' to ascend
 *
 * @return {string} attrString:
 *   for example:
 *     relativeAttr('annotations[3].x', 'y') = 'annotations[3].y'
 *     relativeAttr('annotations[3].x', '^[2].z') = 'annotations[2].z'
 *     relativeAttr('annotations[3].x', '^^margin') = 'margin'
 *     relativeAttr('annotations[3].x', '^^margin.r') = 'margin.r'
 */

var relative_attr = function (baseAttr, relativeAttr) {
  while (relativeAttr) {
    var match = baseAttr.match(ASCEND);
    if (match) baseAttr = match[1];else if (baseAttr.match(SIMPLEATTR)) baseAttr = '';else throw new Error('bad relativeAttr call:' + [baseAttr, relativeAttr]);
    if (relativeAttr.charAt(0) === '^') relativeAttr = relativeAttr.slice(1);else break;
  }

  if (baseAttr && relativeAttr.charAt(0) !== '[') {
    return baseAttr + '.' + relativeAttr;
  }

  return baseAttr + relativeAttr;
};

var is_plain_object = function isPlainObject(obj) {
  // We need to be a little less strict in the `imagetest` container because
  // of how async image requests are handled.
  //
  // N.B. isPlainObject(new Constructor()) will return true in `imagetest`
  if (window && window.process && window.process.versions) {
    return Object.prototype.toString.call(obj) === '[object Object]';
  }

  return Object.prototype.toString.call(obj) === '[object Object]' && Object.getPrototypeOf(obj).hasOwnProperty('hasOwnProperty');
};

/**
 * convert a linear value into a logged value, folding negative numbers into
 * the given range
 */


var to_log_range = function toLogRange(val, range) {
  if (val > 0) return Math.log(val) / Math.LN10; // move a negative value reference to a log axis - just put the
  // result at the lowest range value on the plot (or if the range also went negative,
  // one millionth of the top of the range)

  var newVal = Math.log(Math.min(range[0], range[1])) / Math.LN10;
  if (!fastIsnumeric(newVal)) newVal = Math.log(Math.max(range[0], range[1])) / Math.LN10 - 6;
  return newVal;
};

var isArrayOrTypedArray$6 = array.isArrayOrTypedArray;
/**
 * Relink private _keys and keys with a function value from one container
 * to the new container.
 * Relink means copying if object is pass-by-value and adding a reference
 * if object is pass-by-ref.
 * This prevents deepCopying massive structures like a webgl context.
 */

var relink_private = function relinkPrivateKeys(toContainer, fromContainer) {
  for (var k in fromContainer) {
    var fromVal = fromContainer[k];
    var toVal = toContainer[k];
    if (toVal === fromVal) continue;

    if (k.charAt(0) === '_' || typeof fromVal === 'function') {
      // if it already exists at this point, it's something
      // that we recreate each time around, so ignore it
      if (k in toContainer) continue;
      toContainer[k] = fromVal;
    } else if (isArrayOrTypedArray$6(fromVal) && isArrayOrTypedArray$6(toVal) && is_plain_object(fromVal[0])) {
      // filter out data_array items that can contain user objects
      // most of the time the toVal === fromVal check will catch these early
      // but if the user makes new ones we also don't want to recurse in.
      if (k === 'customdata' || k === 'ids') continue; // recurse into arrays containers

      var minLen = Math.min(fromVal.length, toVal.length);

      for (var j = 0; j < minLen; j++) {
        if (toVal[j] !== fromVal[j] && is_plain_object(fromVal[j]) && is_plain_object(toVal[j])) {
          relinkPrivateKeys(toVal[j], fromVal[j]);
        }
      }
    } else if (is_plain_object(fromVal) && is_plain_object(toVal)) {
      // recurse into objects, but only if they still exist
      relinkPrivateKeys(toVal, fromVal);
      if (!Object.keys(toVal).length) delete toContainer[k];
    }
  }
};

/**
 * sanitized modulus function that always returns in the range [0, d)
 * rather than (-d, 0] if v is negative
 */

function mod$2(v, d) {
  var out = v % d;
  return out < 0 ? out + d : out;
}
/**
 * sanitized modulus function that always returns in the range [-d/2, d/2]
 * rather than (-d, 0] if v is negative
 */


function modHalf$1(v, d) {
  return Math.abs(v) > d / 2 ? v - Math.round(v / d) * d : v;
}

var mod_1 = {
  mod: mod$2,
  modHalf: modHalf$1
};

var tinycolor = createCommonjsModule(function (module) {
  // TinyColor v1.4.2
  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License
  (function (Math) {
    var trimLeft = /^\s+/,
        trimRight = /\s+$/,
        tinyCounter = 0,
        mathRound = Math.round,
        mathMin = Math.min,
        mathMax = Math.max,
        mathRandom = Math.random;

    function tinycolor(color, opts) {
      color = color ? color : '';
      opts = opts || {}; // If input is already a tinycolor, return itself

      if (color instanceof tinycolor) {
        return color;
      } // If we are called as a function, call using new instead


      if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
      }

      var rgb = inputToRGB(color);
      this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
      this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
      // Potentially lose a little bit of precision here, but will fix issues where
      // .5 gets interpreted as half of the total, instead of half of 1
      // If it was supposed to be 128, this was already taken care of by `inputToRgb`

      if (this._r < 1) {
        this._r = mathRound(this._r);
      }

      if (this._g < 1) {
        this._g = mathRound(this._g);
      }

      if (this._b < 1) {
        this._b = mathRound(this._b);
      }

      this._ok = rgb.ok;
      this._tc_id = tinyCounter++;
    }

    tinycolor.prototype = {
      isDark: function () {
        return this.getBrightness() < 128;
      },
      isLight: function () {
        return !this.isDark();
      },
      isValid: function () {
        return this._ok;
      },
      getOriginalInput: function () {
        return this._originalInput;
      },
      getFormat: function () {
        return this._format;
      },
      getAlpha: function () {
        return this._a;
      },
      getBrightness: function () {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
      },
      getLuminance: function () {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r / 255;
        GsRGB = rgb.g / 255;
        BsRGB = rgb.b / 255;

        if (RsRGB <= 0.03928) {
          R = RsRGB / 12.92;
        } else {
          R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        }

        if (GsRGB <= 0.03928) {
          G = GsRGB / 12.92;
        } else {
          G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        }

        if (BsRGB <= 0.03928) {
          B = BsRGB / 12.92;
        } else {
          B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        }

        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
      },
      setAlpha: function (value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100 * this._a) / 100;
        return this;
      },
      toHsv: function () {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return {
          h: hsv.h * 360,
          s: hsv.s,
          v: hsv.v,
          a: this._a
        };
      },
      toHsvString: function () {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360),
            s = mathRound(hsv.s * 100),
            v = mathRound(hsv.v * 100);
        return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
      },
      toHsl: function () {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return {
          h: hsl.h * 360,
          s: hsl.s,
          l: hsl.l,
          a: this._a
        };
      },
      toHslString: function () {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360),
            s = mathRound(hsl.s * 100),
            l = mathRound(hsl.l * 100);
        return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
      },
      toHex: function (allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
      },
      toHexString: function (allow3Char) {
        return '#' + this.toHex(allow3Char);
      },
      toHex8: function (allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
      },
      toHex8String: function (allow4Char) {
        return '#' + this.toHex8(allow4Char);
      },
      toRgb: function () {
        return {
          r: mathRound(this._r),
          g: mathRound(this._g),
          b: mathRound(this._b),
          a: this._a
        };
      },
      toRgbString: function () {
        return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
      },
      toPercentageRgb: function () {
        return {
          r: mathRound(bound01(this._r, 255) * 100) + "%",
          g: mathRound(bound01(this._g, 255) * 100) + "%",
          b: mathRound(bound01(this._b, 255) * 100) + "%",
          a: this._a
        };
      },
      toPercentageRgbString: function () {
        return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
      },
      toName: function () {
        if (this._a === 0) {
          return "transparent";
        }

        if (this._a < 1) {
          return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
      },
      toFilter: function (secondColor) {
        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
          var s = tinycolor(secondColor);
          secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }

        return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
      },
      toString: function (format) {
        var formatSet = !!format;
        format = format || this._format;
        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

        if (needsAlphaFormat) {
          // Special case for "transparent", all other non-alpha formats
          // will return rgba when there is transparency.
          if (format === "name" && this._a === 0) {
            return this.toName();
          }

          return this.toRgbString();
        }

        if (format === "rgb") {
          formattedString = this.toRgbString();
        }

        if (format === "prgb") {
          formattedString = this.toPercentageRgbString();
        }

        if (format === "hex" || format === "hex6") {
          formattedString = this.toHexString();
        }

        if (format === "hex3") {
          formattedString = this.toHexString(true);
        }

        if (format === "hex4") {
          formattedString = this.toHex8String(true);
        }

        if (format === "hex8") {
          formattedString = this.toHex8String();
        }

        if (format === "name") {
          formattedString = this.toName();
        }

        if (format === "hsl") {
          formattedString = this.toHslString();
        }

        if (format === "hsv") {
          formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
      },
      clone: function () {
        return tinycolor(this.toString());
      },
      _applyModification: function (fn, args) {
        var color = fn.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
      },
      lighten: function () {
        return this._applyModification(lighten, arguments);
      },
      brighten: function () {
        return this._applyModification(brighten, arguments);
      },
      darken: function () {
        return this._applyModification(darken, arguments);
      },
      desaturate: function () {
        return this._applyModification(desaturate, arguments);
      },
      saturate: function () {
        return this._applyModification(saturate, arguments);
      },
      greyscale: function () {
        return this._applyModification(greyscale, arguments);
      },
      spin: function () {
        return this._applyModification(spin, arguments);
      },
      _applyCombination: function (fn, args) {
        return fn.apply(null, [this].concat([].slice.call(args)));
      },
      analogous: function () {
        return this._applyCombination(analogous, arguments);
      },
      complement: function () {
        return this._applyCombination(complement, arguments);
      },
      monochromatic: function () {
        return this._applyCombination(monochromatic, arguments);
      },
      splitcomplement: function () {
        return this._applyCombination(splitcomplement, arguments);
      },
      triad: function () {
        return this._applyCombination(triad, arguments);
      },
      tetrad: function () {
        return this._applyCombination(tetrad, arguments);
      }
    }; // If input is an object, force 1 into "1.0" to handle ratios properly
    // String input requires "1.0" as input, so 1 will be treated as 1

    tinycolor.fromRatio = function (color, opts) {
      if (typeof color == "object") {
        var newColor = {};

        for (var i in color) {
          if (color.hasOwnProperty(i)) {
            if (i === "a") {
              newColor[i] = color[i];
            } else {
              newColor[i] = convertToPercentage(color[i]);
            }
          }
        }

        color = newColor;
      }

      return tinycolor(color, opts);
    }; // Given a string or object, convert that input to RGB
    // Possible string inputs:
    //
    //     "red"
    //     "#f00" or "f00"
    //     "#ff0000" or "ff0000"
    //     "#ff000000" or "ff000000"
    //     "rgb 255 0 0" or "rgb (255, 0, 0)"
    //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
    //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
    //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
    //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
    //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
    //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
    //


    function inputToRGB(color) {
      var rgb = {
        r: 0,
        g: 0,
        b: 0
      };
      var a = 1;
      var s = null;
      var v = null;
      var l = null;
      var ok = false;
      var format = false;

      if (typeof color == "string") {
        color = stringInputToObject(color);
      }

      if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
          rgb = rgbToRgb(color.r, color.g, color.b);
          ok = true;
          format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
          s = convertToPercentage(color.s);
          v = convertToPercentage(color.v);
          rgb = hsvToRgb(color.h, s, v);
          ok = true;
          format = "hsv";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
          s = convertToPercentage(color.s);
          l = convertToPercentage(color.l);
          rgb = hslToRgb(color.h, s, l);
          ok = true;
          format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
          a = color.a;
        }
      }

      a = boundAlpha(a);
      return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
      };
    } // Conversion Functions
    // --------------------
    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
    // `rgbToRgb`
    // Handle bounds / percentage checking to conform to CSS color spec
    // <http://www.w3.org/TR/css3-color/>
    // *Assumes:* r, g, b in [0, 255] or [0, 1]
    // *Returns:* { r, g, b } in [0, 255]


    function rgbToRgb(r, g, b) {
      return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
      };
    } // `rgbToHsl`
    // Converts an RGB color value to HSL.
    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
    // *Returns:* { h, s, l } in [0,1]


    function rgbToHsl(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max = mathMax(r, g, b),
          min = mathMin(r, g, b);
      var h,
          s,
          l = (max + min) / 2;

      if (max == min) {
        h = s = 0; // achromatic
      } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;

          case g:
            h = (b - r) / d + 2;
            break;

          case b:
            h = (r - g) / d + 4;
            break;
        }

        h /= 6;
      }

      return {
        h: h,
        s: s,
        l: l
      };
    } // `hslToRgb`
    // Converts an HSL color value to RGB.
    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
    // *Returns:* { r, g, b } in the set [0, 255]


    function hslToRgb(h, s, l) {
      var r, g, b;
      h = bound01(h, 360);
      s = bound01(s, 100);
      l = bound01(l, 100);

      function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      }

      if (s === 0) {
        r = g = b = l; // achromatic
      } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }

      return {
        r: r * 255,
        g: g * 255,
        b: b * 255
      };
    } // `rgbToHsv`
    // Converts an RGB color value to HSV
    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
    // *Returns:* { h, s, v } in [0,1]


    function rgbToHsv(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max = mathMax(r, g, b),
          min = mathMin(r, g, b);
      var h,
          s,
          v = max;
      var d = max - min;
      s = max === 0 ? 0 : d / max;

      if (max == min) {
        h = 0; // achromatic
      } else {
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;

          case g:
            h = (b - r) / d + 2;
            break;

          case b:
            h = (r - g) / d + 4;
            break;
        }

        h /= 6;
      }

      return {
        h: h,
        s: s,
        v: v
      };
    } // `hsvToRgb`
    // Converts an HSV color value to RGB.
    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
    // *Returns:* { r, g, b } in the set [0, 255]


    function hsvToRgb(h, s, v) {
      h = bound01(h, 360) * 6;
      s = bound01(s, 100);
      v = bound01(v, 100);
      var i = Math.floor(h),
          f = h - i,
          p = v * (1 - s),
          q = v * (1 - f * s),
          t = v * (1 - (1 - f) * s),
          mod = i % 6,
          r = [v, q, p, p, t, v][mod],
          g = [t, v, v, q, p, p][mod],
          b = [p, p, t, v, v, q][mod];
      return {
        r: r * 255,
        g: g * 255,
        b: b * 255
      };
    } // `rgbToHex`
    // Converts an RGB color to hex
    // Assumes r, g, and b are contained in the set [0, 255]
    // Returns a 3 or 6 character hex


    function rgbToHex(r, g, b, allow3Char) {
      var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible

      if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }

      return hex.join("");
    } // `rgbaToHex`
    // Converts an RGBA color plus alpha transparency to hex
    // Assumes r, g, b are contained in the set [0, 255] and
    // a in [0, 1]. Returns a 4 or 8 character rgba hex


    function rgbaToHex(r, g, b, a, allow4Char) {
      var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible

      if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }

      return hex.join("");
    } // `rgbaToArgbHex`
    // Converts an RGBA color to an ARGB Hex8 string
    // Rarely used, but required for "toFilter()"


    function rgbaToArgbHex(r, g, b, a) {
      var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
      return hex.join("");
    } // `equals`
    // Can be called with any tinycolor input


    tinycolor.equals = function (color1, color2) {
      if (!color1 || !color2) {
        return false;
      }

      return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
    };

    tinycolor.random = function () {
      return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
      });
    }; // Modification Functions
    // ----------------------
    // Thanks to less.js for some of the basics here
    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>


    function desaturate(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor(color).toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
    }

    function saturate(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor(color).toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
    }

    function greyscale(color) {
      return tinycolor(color).desaturate(100);
    }

    function lighten(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor(color).toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
    }

    function brighten(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var rgb = tinycolor(color).toRgb();
      rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
      rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
      rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
      return tinycolor(rgb);
    }

    function darken(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor(color).toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
    } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
    // Values outside of this range will be wrapped into this range.


    function spin(color, amount) {
      var hsl = tinycolor(color).toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return tinycolor(hsl);
    } // Combination Functions
    // ---------------------
    // Thanks to jQuery xColor for some of the ideas behind these
    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>


    function complement(color) {
      var hsl = tinycolor(color).toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return tinycolor(hsl);
    }

    function triad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [tinycolor(color), tinycolor({
        h: (h + 120) % 360,
        s: hsl.s,
        l: hsl.l
      }), tinycolor({
        h: (h + 240) % 360,
        s: hsl.s,
        l: hsl.l
      })];
    }

    function tetrad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [tinycolor(color), tinycolor({
        h: (h + 90) % 360,
        s: hsl.s,
        l: hsl.l
      }), tinycolor({
        h: (h + 180) % 360,
        s: hsl.s,
        l: hsl.l
      }), tinycolor({
        h: (h + 270) % 360,
        s: hsl.s,
        l: hsl.l
      })];
    }

    function splitcomplement(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [tinycolor(color), tinycolor({
        h: (h + 72) % 360,
        s: hsl.s,
        l: hsl.l
      }), tinycolor({
        h: (h + 216) % 360,
        s: hsl.s,
        l: hsl.l
      })];
    }

    function analogous(color, results, slices) {
      results = results || 6;
      slices = slices || 30;
      var hsl = tinycolor(color).toHsl();
      var part = 360 / slices;
      var ret = [tinycolor(color)];

      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
      }

      return ret;
    }

    function monochromatic(color, results) {
      results = results || 6;
      var hsv = tinycolor(color).toHsv();
      var h = hsv.h,
          s = hsv.s,
          v = hsv.v;
      var ret = [];
      var modification = 1 / results;

      while (results--) {
        ret.push(tinycolor({
          h: h,
          s: s,
          v: v
        }));
        v = (v + modification) % 1;
      }

      return ret;
    } // Utility Functions
    // ---------------------


    tinycolor.mix = function (color1, color2, amount) {
      amount = amount === 0 ? 0 : amount || 50;
      var rgb1 = tinycolor(color1).toRgb();
      var rgb2 = tinycolor(color2).toRgb();
      var p = amount / 100;
      var rgba = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
      };
      return tinycolor(rgba);
    }; // Readability Functions
    // ---------------------
    // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
    // `contrast`
    // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)


    tinycolor.readability = function (color1, color2) {
      var c1 = tinycolor(color1);
      var c2 = tinycolor(color2);
      return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
    }; // `isReadable`
    // Ensure that foreground and background color combinations meet WCAG2 guidelines.
    // The third argument is an optional Object.
    //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
    //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
    // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
    // *Example*
    //    tinycolor.isReadable("#000", "#111") => false
    //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false


    tinycolor.isReadable = function (color1, color2, wcag2) {
      var readability = tinycolor.readability(color1, color2);
      var wcag2Parms, out;
      out = false;
      wcag2Parms = validateWCAG2Parms(wcag2);

      switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
          out = readability >= 4.5;
          break;

        case "AAlarge":
          out = readability >= 3;
          break;

        case "AAAsmall":
          out = readability >= 7;
          break;
      }

      return out;
    }; // `mostReadable`
    // Given a base color and a list of possible foreground or background
    // colors for that base, returns the most readable color.
    // Optionally returns Black or White if the most readable color is unreadable.
    // *Example*
    //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
    //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
    //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
    //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"


    tinycolor.mostReadable = function (baseColor, colorList, args) {
      var bestColor = null;
      var bestScore = 0;
      var readability;
      var includeFallbackColors, level, size;
      args = args || {};
      includeFallbackColors = args.includeFallbackColors;
      level = args.level;
      size = args.size;

      for (var i = 0; i < colorList.length; i++) {
        readability = tinycolor.readability(baseColor, colorList[i]);

        if (readability > bestScore) {
          bestScore = readability;
          bestColor = tinycolor(colorList[i]);
        }
      }

      if (tinycolor.isReadable(baseColor, bestColor, {
        "level": level,
        "size": size
      }) || !includeFallbackColors) {
        return bestColor;
      } else {
        args.includeFallbackColors = false;
        return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
      }
    }; // Big List of Colors
    // ------------------
    // <http://www.w3.org/TR/css3-color/#svg-color>


    var names = tinycolor.names = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "0ff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000",
      blanchedalmond: "ffebcd",
      blue: "00f",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      burntsienna: "ea7e5d",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "0ff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkgrey: "a9a9a9",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkslategrey: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dimgrey: "696969",
      dodgerblue: "1e90ff",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "f0f",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      grey: "808080",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgray: "d3d3d3",
      lightgreen: "90ee90",
      lightgrey: "d3d3d3",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslategray: "789",
      lightslategrey: "789",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "0f0",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "f0f",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370db",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "db7093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      rebeccapurple: "663399",
      red: "f00",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      slategrey: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      wheat: "f5deb3",
      white: "fff",
      whitesmoke: "f5f5f5",
      yellow: "ff0",
      yellowgreen: "9acd32"
    }; // Make it easy to access colors via `hexNames[hex]`

    var hexNames = tinycolor.hexNames = flip(names); // Utilities
    // ---------
    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

    function flip(o) {
      var flipped = {};

      for (var i in o) {
        if (o.hasOwnProperty(i)) {
          flipped[o[i]] = i;
        }
      }

      return flipped;
    } // Return a valid alpha value [0,1] with all invalid values being set to 1


    function boundAlpha(a) {
      a = parseFloat(a);

      if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
      }

      return a;
    } // Take input from [0, n] and return it as [0, 1]


    function bound01(n, max) {
      if (isOnePointZero(n)) {
        n = "100%";
      }

      var processPercent = isPercentage(n);
      n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number

      if (processPercent) {
        n = parseInt(n * max, 10) / 100;
      } // Handle floating point rounding errors


      if (Math.abs(n - max) < 0.000001) {
        return 1;
      } // Convert into [0, 1] range if it isn't already


      return n % max / parseFloat(max);
    } // Force a number between 0 and 1


    function clamp01(val) {
      return mathMin(1, mathMax(0, val));
    } // Parse a base-16 hex value into a base-10 integer


    function parseIntFromHex(val) {
      return parseInt(val, 16);
    } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>


    function isOnePointZero(n) {
      return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
    } // Check to see if string passed in is a percentage


    function isPercentage(n) {
      return typeof n === "string" && n.indexOf('%') != -1;
    } // Force a hex value to have 2 characters


    function pad2(c) {
      return c.length == 1 ? '0' + c : '' + c;
    } // Replace a decimal with it's percentage value


    function convertToPercentage(n) {
      if (n <= 1) {
        n = n * 100 + "%";
      }

      return n;
    } // Converts a decimal to a hex value


    function convertDecimalToHex(d) {
      return Math.round(parseFloat(d) * 255).toString(16);
    } // Converts a hex value to a decimal


    function convertHexToDecimal(h) {
      return parseIntFromHex(h) / 255;
    }

    var matchers = function () {
      // <http://www.w3.org/TR/css3-values/#integers>
      var CSS_INTEGER = "[-\\+]?\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>

      var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.

      var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.
      // Parentheses and commas are optional, but not required.
      // Whitespace can take the place of commas or opening paren

      var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
      var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
      return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
      };
    }(); // `isValidCSSUnit`
    // Take in a single string / number and check to see if it looks like a CSS unit
    // (see `matchers` above for definition).


    function isValidCSSUnit(color) {
      return !!matchers.CSS_UNIT.exec(color);
    } // `stringInputToObject`
    // Permissive string parsing.  Take in a number of formats, and output an object
    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`


    function stringInputToObject(color) {
      color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
      var named = false;

      if (names[color]) {
        color = names[color];
        named = true;
      } else if (color == 'transparent') {
        return {
          r: 0,
          g: 0,
          b: 0,
          a: 0,
          format: "name"
        };
      } // Try to match string input using regular expressions.
      // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
      // Just return an object and let the conversion functions handle that.
      // This way the result will be the same whether the tinycolor is initialized with string or object.


      var match;

      if (match = matchers.rgb.exec(color)) {
        return {
          r: match[1],
          g: match[2],
          b: match[3]
        };
      }

      if (match = matchers.rgba.exec(color)) {
        return {
          r: match[1],
          g: match[2],
          b: match[3],
          a: match[4]
        };
      }

      if (match = matchers.hsl.exec(color)) {
        return {
          h: match[1],
          s: match[2],
          l: match[3]
        };
      }

      if (match = matchers.hsla.exec(color)) {
        return {
          h: match[1],
          s: match[2],
          l: match[3],
          a: match[4]
        };
      }

      if (match = matchers.hsv.exec(color)) {
        return {
          h: match[1],
          s: match[2],
          v: match[3]
        };
      }

      if (match = matchers.hsva.exec(color)) {
        return {
          h: match[1],
          s: match[2],
          v: match[3],
          a: match[4]
        };
      }

      if (match = matchers.hex8.exec(color)) {
        return {
          r: parseIntFromHex(match[1]),
          g: parseIntFromHex(match[2]),
          b: parseIntFromHex(match[3]),
          a: convertHexToDecimal(match[4]),
          format: named ? "name" : "hex8"
        };
      }

      if (match = matchers.hex6.exec(color)) {
        return {
          r: parseIntFromHex(match[1]),
          g: parseIntFromHex(match[2]),
          b: parseIntFromHex(match[3]),
          format: named ? "name" : "hex"
        };
      }

      if (match = matchers.hex4.exec(color)) {
        return {
          r: parseIntFromHex(match[1] + '' + match[1]),
          g: parseIntFromHex(match[2] + '' + match[2]),
          b: parseIntFromHex(match[3] + '' + match[3]),
          a: convertHexToDecimal(match[4] + '' + match[4]),
          format: named ? "name" : "hex8"
        };
      }

      if (match = matchers.hex3.exec(color)) {
        return {
          r: parseIntFromHex(match[1] + '' + match[1]),
          g: parseIntFromHex(match[2] + '' + match[2]),
          b: parseIntFromHex(match[3] + '' + match[3]),
          format: named ? "name" : "hex"
        };
      }

      return false;
    }

    function validateWCAG2Parms(parms) {
      // return valid WCAG2 parms for isReadable.
      // If input parms are invalid, return {"level":"AA", "size":"small"}
      var level, size;
      parms = parms || {
        "level": "AA",
        "size": "small"
      };
      level = (parms.level || "AA").toUpperCase();
      size = (parms.size || "small").toLowerCase();

      if (level !== "AA" && level !== "AAA") {
        level = "AA";
      }

      if (size !== "small" && size !== "large") {
        size = "small";
      }

      return {
        "level": level,
        "size": size
      };
    } // Node: Export function


    if (module.exports) {
      module.exports = tinycolor;
    } // AMD/requirejs: Define the module
    else {
      window.tinycolor = tinycolor;
    }
  })(Math);
});

/*
 * make a font attribute group
 *
 * @param {object} opts
 *   @param {string}
 *     opts.description: where & how this font is used
 *   @param {optional bool} arrayOk:
 *     should each part (family, size, color) be arrayOk? default false.
 *   @param {string} editType:
 *     the editType for all pieces of this font
 *   @param {optional string} colorEditType:
 *     a separate editType just for color
 *
 * @return {object} attributes object containing {family, size, color} as specified
 */

var font_attributes = function (opts) {
  var editType = opts.editType;
  var colorEditType = opts.colorEditType;
  if (colorEditType === undefined) colorEditType = editType;
  var attrs = {
    family: {
      valType: 'string',
      noBlank: true,
      strict: true,
      editType: editType,
      description: ['HTML font family - the typeface that will be applied by the web browser.', 'The web browser will only be able to apply a font if it is available on the system', 'which it operates. Provide multiple font families, separated by commas, to indicate', 'the preference in which to apply fonts if they aren\'t available on the system.', 'The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server,', 'where only a select number of', 'fonts are installed and supported.', 'These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*,', '*Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*,', '*PT Sans Narrow*, *Raleway*, *Times New Roman*.'].join(' ')
    },
    size: {
      valType: 'number',
      min: 1,
      editType: editType
    },
    color: {
      valType: 'color',
      editType: colorEditType
    },
    editType: editType,
    // blank strings so compress_attributes can remove
    // TODO - that's uber hacky... better solution?
    description: '' + (opts.description || '') + ''
  };
  if (opts.autoSize) attrs.size.dflt = 'auto';
  if (opts.autoColor) attrs.color.dflt = 'auto';

  if (opts.arrayOk) {
    attrs.family.arrayOk = true;
    attrs.size.arrayOk = true;
    attrs.color.arrayOk = true;
  }

  return attrs;
};

var constants$b = {
  // hover labels for multiple horizontal bars get tilted by this angle
  YANGLE: 60,
  // size and display constants for hover text
  // pixel size of hover arrows
  HOVERARROWSIZE: 6,
  // pixels padding around text
  HOVERTEXTPAD: 3,
  // hover font
  HOVERFONTSIZE: 13,
  HOVERFONT: 'Arial, sans-serif',
  // minimum time (msec) between hover calls
  HOVERMINTIME: 50,
  // ID suffix (with fullLayout._uid) for hover events in the throttle cache
  HOVERID: '-hover'
};

var font = font_attributes({
  editType: 'none',
  description: 'Sets the default hover label font used by all traces on the graph.'
});
font.family.dflt = constants$b.HOVERFONT;
font.size.dflt = constants$b.HOVERFONTSIZE;
var layout_attributes$3 = {
  clickmode: {
    valType: 'flaglist',
    flags: ['event', 'select'],
    dflt: 'event',
    editType: 'plot',
    extras: ['none'],
    description: ['Determines the mode of single click interactions.', '*event* is the default value and emits the `plotly_click`', 'event. In addition this mode emits the `plotly_selected` event', 'in drag modes *lasso* and *select*, but with no event data attached', '(kept for compatibility reasons).', 'The *select* flag enables selecting single', 'data points via click. This mode also supports persistent selections,', 'meaning that pressing Shift while clicking, adds to / subtracts from an', 'existing selection. *select* with `hovermode`: *x* can be confusing, consider', 'explicitly setting `hovermode`: *closest* when using this feature.', 'Selection events are sent accordingly as long as *event* flag is set as well.', 'When the *event* flag is missing, `plotly_click` and `plotly_selected`', 'events are not fired.'].join(' ')
  },
  dragmode: {
    valType: 'enumerated',
    values: ['zoom', 'pan', 'select', 'lasso', 'drawclosedpath', 'drawopenpath', 'drawline', 'drawrect', 'drawcircle', 'orbit', 'turntable', false],
    dflt: 'zoom',
    editType: 'modebar',
    description: ['Determines the mode of drag interactions.', '*select* and *lasso* apply only to scatter traces with', 'markers or text. *orbit* and *turntable* apply only to', '3D scenes.'].join(' ')
  },
  hovermode: {
    valType: 'enumerated',
    values: ['x', 'y', 'closest', false, 'x unified', 'y unified'],
    dflt: 'closest',
    editType: 'modebar',
    description: ['Determines the mode of hover interactions.', 'If *closest*, a single hoverlabel will appear', 'for the *closest* point within the `hoverdistance`.', 'If *x* (or *y*), multiple hoverlabels will appear for multiple points', 'at the *closest* x- (or y-) coordinate within the `hoverdistance`,', 'with the caveat that no more than one hoverlabel will appear per trace.', 'If *x unified* (or *y unified*), a single hoverlabel will appear', 'multiple points at the closest x- (or y-) coordinate within the `hoverdistance`', 'with the caveat that no more than one hoverlabel will appear per trace.', 'In this mode, spikelines are enabled by default perpendicular to the specified axis.', 'If false, hover interactions are disabled.'].join(' ')
  },
  hoverdistance: {
    valType: 'integer',
    min: -1,
    dflt: 20,
    editType: 'none',
    description: ['Sets the default distance (in pixels) to look for data', 'to add hover labels (-1 means no cutoff, 0 means no looking for data).', 'This is only a real distance for hovering on point-like objects,', 'like scatter points. For area-like objects (bars, scatter fills, etc)', 'hovering is on inside the area and off outside, but these objects', 'will not supersede hover on point-like objects in case of conflict.'].join(' ')
  },
  spikedistance: {
    valType: 'integer',
    min: -1,
    dflt: -1,
    editType: 'none',
    description: ['Sets the default distance (in pixels) to look for data to draw', 'spikelines to (-1 means no cutoff, 0 means no looking for data).', 'As with hoverdistance, distance does not apply to area-like objects.', 'In addition, some objects can be hovered on but will not generate', 'spikelines, such as scatter fills.'].join(' ')
  },
  hoverlabel: {
    bgcolor: {
      valType: 'color',
      editType: 'none',
      description: ['Sets the background color of all hover labels on graph'].join(' ')
    },
    bordercolor: {
      valType: 'color',
      editType: 'none',
      description: ['Sets the border color of all hover labels on graph.'].join(' ')
    },
    font: font,
    grouptitlefont: font_attributes({
      editType: 'none',
      description: ['Sets the font for group titles in hover (unified modes).', 'Defaults to `hoverlabel.font`.'].join(' ')
    }),
    align: {
      valType: 'enumerated',
      values: ['left', 'right', 'auto'],
      dflt: 'auto',
      editType: 'none',
      description: ['Sets the horizontal alignment of the text content within hover label box.', 'Has an effect only if the hover label text spans more two or more lines'].join(' ')
    },
    namelength: {
      valType: 'integer',
      min: -1,
      dflt: 15,
      editType: 'none',
      description: ['Sets the default length (in number of characters) of the trace name in', 'the hover labels for all traces. -1 shows the whole name', 'regardless of length. 0-3 shows the first 0-3 characters, and', 'an integer >3 will show the whole name if it is less than that', 'many characters, but if it is longer, will truncate to', '`namelength - 3` characters and add an ellipsis.'].join(' ')
    },
    editType: 'none'
  },
  selectdirection: {
    valType: 'enumerated',
    values: ['h', 'v', 'd', 'any'],
    dflt: 'any',
    description: ['When `dragmode` is set to *select*, this limits the selection of the drag to', 'horizontal, vertical or diagonal. *h* only allows horizontal selection,', '*v* only vertical, *d* only diagonal and *any* sets no limit.'].join(' '),
    editType: 'none'
  }
};

var isArray$1 = Array.isArray;

function primitivesLoopSplice(source, target) {
  var i, value;

  for (i = 0; i < source.length; i++) {
    value = source[i];

    if (value !== null && typeof value === 'object') {
      return false;
    }

    if (value !== void 0) {
      target[i] = value;
    }
  }

  return true;
}

var extendFlat$d = function () {
  return _extend(arguments, false, false, false);
};

var extendDeep$1 = function () {
  return _extend(arguments, true, false, false);
};

var extendDeepAll$1 = function () {
  return _extend(arguments, true, true, false);
};

var extendDeepNoArrays = function () {
  return _extend(arguments, true, false, true);
};
/*
 * Inspired by https://github.com/justmoon/node-extend/blob/master/index.js
 * All credit to the jQuery authors for perfecting this amazing utility.
 *
 * API difference with jQuery version:
 * - No optional boolean (true -> deep extend) first argument,
 *   use `extendFlat` for first-level only extend and
 *   use `extendDeep` for a deep extend.
 *
 * Other differences with jQuery version:
 * - Uses a modern (and faster) isPlainObject routine.
 * - Expected to work with object {} and array [] arguments only.
 * - Does not check for circular structure.
 *   FYI: jQuery only does a check across one level.
 *   Warning: this might result in infinite loops.
 *
 */


function _extend(inputs, isDeep, keepAllKeys, noArrayCopies) {
  var target = inputs[0];
  var length = inputs.length;
  var input, key, src, copy, copyIsArray, clone, allPrimitives; // TODO does this do the right thing for typed arrays?

  if (length === 2 && isArray$1(target) && isArray$1(inputs[1]) && target.length === 0) {
    allPrimitives = primitivesLoopSplice(inputs[1], target);

    if (allPrimitives) {
      return target;
    } else {
      target.splice(0, target.length); // reset target and continue to next block
    }
  }

  for (var i = 1; i < length; i++) {
    input = inputs[i];

    for (key in input) {
      src = target[key];
      copy = input[key];

      if (noArrayCopies && isArray$1(copy)) {
        // Stop early and just transfer the array if array copies are disallowed:
        target[key] = copy;
      } else if (isDeep && copy && (is_plain_object(copy) || (copyIsArray = isArray$1(copy)))) {
        // recurse if we're merging plain objects or arrays
        if (copyIsArray) {
          copyIsArray = false;
          clone = src && isArray$1(src) ? src : [];
        } else {
          clone = src && is_plain_object(src) ? src : {};
        } // never move original objects, clone them


        target[key] = _extend([clone, copy], isDeep, keepAllKeys, noArrayCopies);
      } else if (typeof copy !== 'undefined' || keepAllKeys) {
        // don't bring in undefined values, except for extendDeepAll
        target[key] = copy;
      }
    }
  }

  return target;
}

var extend = {
  extendFlat: extendFlat$d,
  extendDeep: extendDeep$1,
  extendDeepAll: extendDeepAll$1,
  extendDeepNoArrays: extendDeepNoArrays
};

var hoverLabelAttrs = layout_attributes$3.hoverlabel;
var extendFlat$c = extend.extendFlat;
var attributes$l = {
  hoverlabel: {
    bgcolor: extendFlat$c({}, hoverLabelAttrs.bgcolor, {
      arrayOk: true,
      description: 'Sets the background color of the hover labels for this trace'
    }),
    bordercolor: extendFlat$c({}, hoverLabelAttrs.bordercolor, {
      arrayOk: true,
      description: 'Sets the border color of the hover labels for this trace.'
    }),
    font: font_attributes({
      arrayOk: true,
      editType: 'none',
      description: 'Sets the font used in hover labels.'
    }),
    align: extendFlat$c({}, hoverLabelAttrs.align, {
      arrayOk: true
    }),
    namelength: extendFlat$c({}, hoverLabelAttrs.namelength, {
      arrayOk: true
    }),
    editType: 'none'
  }
};

var attributes$k = {
  type: {
    valType: 'enumerated',
    values: [],
    // listed dynamically
    dflt: 'scatter',
    editType: 'calc+clearAxisTypes',
    _noTemplating: true // we handle this at a higher level

  },
  visible: {
    valType: 'enumerated',
    values: [true, false, 'legendonly'],
    dflt: true,
    editType: 'calc',
    description: ['Determines whether or not this trace is visible.', 'If *legendonly*, the trace is not drawn,', 'but can appear as a legend item', '(provided that the legend itself is visible).'].join(' ')
  },
  showlegend: {
    valType: 'boolean',
    dflt: true,
    editType: 'style',
    description: ['Determines whether or not an item corresponding to this', 'trace is shown in the legend.'].join(' ')
  },
  legendgroup: {
    valType: 'string',
    dflt: '',
    editType: 'style',
    description: ['Sets the legend group for this trace.', 'Traces part of the same legend group hide/show at the same time', 'when toggling legend items.'].join(' ')
  },
  legendgrouptitle: {
    text: {
      valType: 'string',
      dflt: '',
      editType: 'style',
      description: ['Sets the title of the legend group.'].join(' ')
    },
    font: font_attributes({
      editType: 'style',
      description: ['Sets this legend group\'s title font.'].join(' ')
    }),
    editType: 'style'
  },
  legendrank: {
    valType: 'number',
    dflt: 1000,
    editType: 'style',
    description: ['Sets the legend rank for this trace.', 'Items and groups with smaller ranks are presented on top/left side while', 'with `*reversed* `legend.traceorder` they are on bottom/right side.', 'The default legendrank is 1000,', 'so that you can use ranks less than 1000 to place certain items before all unranked items,', 'and ranks greater than 1000 to go after all unranked items.'].join(' ')
  },
  opacity: {
    valType: 'number',
    min: 0,
    max: 1,
    dflt: 1,
    editType: 'style',
    description: 'Sets the opacity of the trace.'
  },
  name: {
    valType: 'string',
    editType: 'style',
    description: ['Sets the trace name.', 'The trace name appear as the legend item and on hover.'].join(' ')
  },
  uid: {
    valType: 'string',
    editType: 'plot',
    anim: true,
    description: ['Assign an id to this trace,', 'Use this to provide object constancy between traces during animations', 'and transitions.'].join(' ')
  },
  ids: {
    valType: 'data_array',
    editType: 'calc',
    anim: true,
    description: ['Assigns id labels to each datum.', 'These ids for object constancy of data points during animation.', 'Should be an array of strings, not numbers or any other type.'].join(' ')
  },
  customdata: {
    valType: 'data_array',
    editType: 'calc',
    description: ['Assigns extra data each datum.', 'This may be useful when listening to hover, click and selection events.', 'Note that, *scatter* traces also appends customdata items in the markers', 'DOM elements'].join(' ')
  },
  meta: {
    valType: 'any',
    arrayOk: true,
    editType: 'plot',
    description: ['Assigns extra meta information associated with this trace', 'that can be used in various text attributes.', 'Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text`', '`rangeselector`, `updatemenues` and `sliders` `label` text', 'all support `meta`.', 'To access the trace `meta` values in an attribute in the same trace, simply use', '`%{meta[i]}` where `i` is the index or key of the `meta`', 'item in question.', 'To access trace `meta` in layout attributes, use', '`%{data[n[.meta[i]}` where `i` is the index or key of the `meta`', 'and `n` is the trace index.'].join(' ')
  },
  // N.B. these cannot be 'data_array' as they do not have the same length as
  // other data arrays and arrayOk attributes in general
  //
  // Maybe add another valType:
  // https://github.com/plotly/plotly.js/issues/1894
  selectedpoints: {
    valType: 'any',
    editType: 'calc',
    description: ['Array containing integer indices of selected points.', 'Has an effect only for traces that support selections.', 'Note that an empty array means an empty selection where the `unselected`', 'are turned on for all points, whereas, any other non-array values means no', 'selection all where the `selected` and `unselected` styles have no effect.'].join(' ')
  },
  hoverinfo: {
    valType: 'flaglist',
    flags: ['x', 'y', 'z', 'text', 'name'],
    extras: ['all', 'none', 'skip'],
    arrayOk: true,
    dflt: 'all',
    editType: 'none',
    description: ['Determines which trace information appear on hover.', 'If `none` or `skip` are set, no information is displayed upon hovering.', 'But, if `none` is set, click and hover events are still fired.'].join(' ')
  },
  hoverlabel: attributes$l.hoverlabel,
  stream: {
    token: {
      valType: 'string',
      noBlank: true,
      strict: true,
      editType: 'calc',
      description: ['The stream id number links a data trace on a plot with a stream.', 'See https://chart-studio.plotly.com/settings for more details.'].join(' ')
    },
    maxpoints: {
      valType: 'number',
      min: 0,
      max: 10000,
      dflt: 500,
      editType: 'calc',
      description: ['Sets the maximum number of points to keep on the plots from an', 'incoming stream.', 'If `maxpoints` is set to *50*, only the newest 50 points will', 'be displayed on the plot.'].join(' ')
    },
    editType: 'calc'
  },
  transforms: {
    _isLinkedToArray: 'transform',
    editType: 'calc',
    description: ['WARNING: All transforms are deprecated and may be removed from the API in next major version.', 'An array of operations that manipulate the trace data,', 'for example filtering or sorting the data arrays.'].join(' ')
  },
  uirevision: {
    valType: 'any',
    editType: 'none',
    description: ['Controls persistence of some user-driven changes to the trace:', '`constraintrange` in `parcoords` traces, as well as some', '`editable: true` modifications such as `name` and `colorbar.title`.', 'Defaults to `layout.uirevision`.', 'Note that other user-driven trace attribute changes are controlled', 'by `layout` attributes:', '`trace.visible` is controlled by `layout.legend.uirevision`,', '`selectedpoints` is controlled by `layout.selectionrevision`,', 'and `colorbar.(x|y)` (accessible with `config: {editable: true}`)', 'is controlled by `layout.editrevision`.', 'Trace changes are tracked by `uid`, which only falls back on trace', 'index if no `uid` is provided. So if your app can add/remove traces', 'before the end of the `data` array, such that the same trace has a', 'different index, you can still preserve user-driven changes if you', 'give each trace a `uid` that stays with it as it moves.'].join(' ')
  }
};

var scales$1 = {
  'Greys': [[0, 'rgb(0,0,0)'], [1, 'rgb(255,255,255)']],
  'YlGnBu': [[0, 'rgb(8,29,88)'], [0.125, 'rgb(37,52,148)'], [0.25, 'rgb(34,94,168)'], [0.375, 'rgb(29,145,192)'], [0.5, 'rgb(65,182,196)'], [0.625, 'rgb(127,205,187)'], [0.75, 'rgb(199,233,180)'], [0.875, 'rgb(237,248,217)'], [1, 'rgb(255,255,217)']],
  'Greens': [[0, 'rgb(0,68,27)'], [0.125, 'rgb(0,109,44)'], [0.25, 'rgb(35,139,69)'], [0.375, 'rgb(65,171,93)'], [0.5, 'rgb(116,196,118)'], [0.625, 'rgb(161,217,155)'], [0.75, 'rgb(199,233,192)'], [0.875, 'rgb(229,245,224)'], [1, 'rgb(247,252,245)']],
  'YlOrRd': [[0, 'rgb(128,0,38)'], [0.125, 'rgb(189,0,38)'], [0.25, 'rgb(227,26,28)'], [0.375, 'rgb(252,78,42)'], [0.5, 'rgb(253,141,60)'], [0.625, 'rgb(254,178,76)'], [0.75, 'rgb(254,217,118)'], [0.875, 'rgb(255,237,160)'], [1, 'rgb(255,255,204)']],
  'Bluered': [[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']],
  // modified RdBu based on
  // http://www.kennethmoreland.com/color-maps/
  'RdBu': [[0, 'rgb(5,10,172)'], [0.35, 'rgb(106,137,247)'], [0.5, 'rgb(190,190,190)'], [0.6, 'rgb(220,170,132)'], [0.7, 'rgb(230,145,90)'], [1, 'rgb(178,10,28)']],
  // Scale for non-negative numeric values
  'Reds': [[0, 'rgb(220,220,220)'], [0.2, 'rgb(245,195,157)'], [0.4, 'rgb(245,160,105)'], [1, 'rgb(178,10,28)']],
  // Scale for non-positive numeric values
  'Blues': [[0, 'rgb(5,10,172)'], [0.35, 'rgb(40,60,190)'], [0.5, 'rgb(70,100,245)'], [0.6, 'rgb(90,120,245)'], [0.7, 'rgb(106,137,247)'], [1, 'rgb(220,220,220)']],
  'Picnic': [[0, 'rgb(0,0,255)'], [0.1, 'rgb(51,153,255)'], [0.2, 'rgb(102,204,255)'], [0.3, 'rgb(153,204,255)'], [0.4, 'rgb(204,204,255)'], [0.5, 'rgb(255,255,255)'], [0.6, 'rgb(255,204,255)'], [0.7, 'rgb(255,153,255)'], [0.8, 'rgb(255,102,204)'], [0.9, 'rgb(255,102,102)'], [1, 'rgb(255,0,0)']],
  'Rainbow': [[0, 'rgb(150,0,90)'], [0.125, 'rgb(0,0,200)'], [0.25, 'rgb(0,25,255)'], [0.375, 'rgb(0,152,255)'], [0.5, 'rgb(44,255,150)'], [0.625, 'rgb(151,255,0)'], [0.75, 'rgb(255,234,0)'], [0.875, 'rgb(255,111,0)'], [1, 'rgb(255,0,0)']],
  'Portland': [[0, 'rgb(12,51,131)'], [0.25, 'rgb(10,136,186)'], [0.5, 'rgb(242,211,56)'], [0.75, 'rgb(242,143,56)'], [1, 'rgb(217,30,30)']],
  'Jet': [[0, 'rgb(0,0,131)'], [0.125, 'rgb(0,60,170)'], [0.375, 'rgb(5,255,255)'], [0.625, 'rgb(255,255,0)'], [0.875, 'rgb(250,0,0)'], [1, 'rgb(128,0,0)']],
  'Hot': [[0, 'rgb(0,0,0)'], [0.3, 'rgb(230,0,0)'], [0.6, 'rgb(255,210,0)'], [1, 'rgb(255,255,255)']],
  'Blackbody': [[0, 'rgb(0,0,0)'], [0.2, 'rgb(230,0,0)'], [0.4, 'rgb(230,210,0)'], [0.7, 'rgb(255,255,255)'], [1, 'rgb(160,200,255)']],
  'Earth': [[0, 'rgb(0,0,130)'], [0.1, 'rgb(0,180,180)'], [0.2, 'rgb(40,210,40)'], [0.4, 'rgb(230,230,50)'], [0.6, 'rgb(120,70,20)'], [1, 'rgb(255,255,255)']],
  'Electric': [[0, 'rgb(0,0,0)'], [0.15, 'rgb(30,0,100)'], [0.4, 'rgb(120,0,100)'], [0.6, 'rgb(160,90,0)'], [0.8, 'rgb(230,200,0)'], [1, 'rgb(255,250,220)']],
  'Viridis': [[0, '#440154'], [0.06274509803921569, '#48186a'], [0.12549019607843137, '#472d7b'], [0.18823529411764706, '#424086'], [0.25098039215686274, '#3b528b'], [0.3137254901960784, '#33638d'], [0.3764705882352941, '#2c728e'], [0.4392156862745098, '#26828e'], [0.5019607843137255, '#21918c'], [0.5647058823529412, '#1fa088'], [0.6274509803921569, '#28ae80'], [0.6901960784313725, '#3fbc73'], [0.7529411764705882, '#5ec962'], [0.8156862745098039, '#84d44b'], [0.8784313725490196, '#addc30'], [0.9411764705882353, '#d8e219'], [1, '#fde725']],
  'Cividis': [[0.000000, 'rgb(0,32,76)'], [0.058824, 'rgb(0,42,102)'], [0.117647, 'rgb(0,52,110)'], [0.176471, 'rgb(39,63,108)'], [0.235294, 'rgb(60,74,107)'], [0.294118, 'rgb(76,85,107)'], [0.352941, 'rgb(91,95,109)'], [0.411765, 'rgb(104,106,112)'], [0.470588, 'rgb(117,117,117)'], [0.529412, 'rgb(131,129,120)'], [0.588235, 'rgb(146,140,120)'], [0.647059, 'rgb(161,152,118)'], [0.705882, 'rgb(176,165,114)'], [0.764706, 'rgb(192,177,109)'], [0.823529, 'rgb(209,191,102)'], [0.882353, 'rgb(225,204,92)'], [0.941176, 'rgb(243,219,79)'], [1.000000, 'rgb(255,233,69)']]
};
var defaultScale = scales$1.RdBu;

function getScale(scl, dflt) {
  if (!dflt) dflt = defaultScale;
  if (!scl) return dflt;

  function parseScale() {
    try {
      scl = scales$1[scl] || JSON.parse(scl);
    } catch (e) {
      scl = dflt;
    }
  }

  if (typeof scl === 'string') {
    parseScale(); // occasionally scl is double-JSON encoded...

    if (typeof scl === 'string') parseScale();
  }

  if (!isValidScaleArray(scl)) return dflt;
  return scl;
}

function isValidScaleArray(scl) {
  var highestVal = 0;
  if (!Array.isArray(scl) || scl.length < 2) return false;
  if (!scl[0] || !scl[scl.length - 1]) return false;
  if (+scl[0][0] !== 0 || +scl[scl.length - 1][0] !== 1) return false;

  for (var i = 0; i < scl.length; i++) {
    var si = scl[i];

    if (si.length !== 2 || +si[0] < highestVal || !tinycolor(si[1]).isValid()) {
      return false;
    }

    highestVal = +si[0];
  }

  return true;
}

function isValidScale$2(scl) {
  if (scales$1[scl] !== undefined) return true;else return isValidScaleArray(scl);
}

var scales_1 = {
  scales: scales$1,
  defaultScale: defaultScale,
  get: getScale,
  isValid: isValidScale$2
};

var defaults$h = ['#1f77b4', // muted blue
'#ff7f0e', // safety orange
'#2ca02c', // cooked asparagus green
'#d62728', // brick red
'#9467bd', // muted purple
'#8c564b', // chestnut brown
'#e377c2', // raspberry yogurt pink
'#7f7f7f', // middle gray
'#bcbd22', // curry yellow-green
'#17becf' // blue-teal
];
var defaultLine = '#444';
var lightLine = '#eee';
var background = '#fff';
var borderLine = '#BEC8D9'; // with axis.color and Color.interp we aren't using lightLine
// itself anymore, instead interpolating between axis.color
// and the background color using tinycolor.mix. lightFraction
// gives back exactly lightLine if the other colors are defaults.

var lightFraction$1 = 100 * (0xe - 0x4) / (0xf - 0x4);
var attributes$j = {
  defaults: defaults$h,
  defaultLine: defaultLine,
  lightLine: lightLine,
  background: background,
  borderLine: borderLine,
  lightFraction: lightFraction$1
};

var color_1 = createCommonjsModule(function (module) {

  var isTypedArray = array.isTypedArray;
  var color = module.exports = {};
  color.defaults = attributes$j.defaults;
  var defaultLine = color.defaultLine = attributes$j.defaultLine;
  color.lightLine = attributes$j.lightLine;
  var background = color.background = attributes$j.background;
  /*
   * tinyRGB: turn a tinycolor into an rgb string, but
   * unlike the built-in tinycolor.toRgbString this never includes alpha
   */

  color.tinyRGB = function (tc) {
    var c = tc.toRgb();
    return 'rgb(' + Math.round(c.r) + ', ' + Math.round(c.g) + ', ' + Math.round(c.b) + ')';
  };

  color.rgb = function (cstr) {
    return color.tinyRGB(tinycolor(cstr));
  };

  color.opacity = function (cstr) {
    return cstr ? tinycolor(cstr).getAlpha() : 0;
  };

  color.addOpacity = function (cstr, op) {
    var c = tinycolor(cstr).toRgb();
    return 'rgba(' + Math.round(c.r) + ', ' + Math.round(c.g) + ', ' + Math.round(c.b) + ', ' + op + ')';
  }; // combine two colors into one apparent color
  // if back has transparency or is missing,
  // color.background is assumed behind it


  color.combine = function (front, back) {
    var fc = tinycolor(front).toRgb();
    if (fc.a === 1) return tinycolor(front).toRgbString();
    var bc = tinycolor(back || background).toRgb();
    var bcflat = bc.a === 1 ? bc : {
      r: 255 * (1 - bc.a) + bc.r * bc.a,
      g: 255 * (1 - bc.a) + bc.g * bc.a,
      b: 255 * (1 - bc.a) + bc.b * bc.a
    };
    var fcflat = {
      r: bcflat.r * (1 - fc.a) + fc.r * fc.a,
      g: bcflat.g * (1 - fc.a) + fc.g * fc.a,
      b: bcflat.b * (1 - fc.a) + fc.b * fc.a
    };
    return tinycolor(fcflat).toRgbString();
  };
  /*
   * Create a color that contrasts with cstr.
   *
   * If cstr is a dark color, we lighten it; if it's light, we darken.
   *
   * If lightAmount / darkAmount are used, we adjust by these percentages,
   * otherwise we go all the way to white or black.
   */


  color.contrast = function (cstr, lightAmount, darkAmount) {
    var tc = tinycolor(cstr);
    if (tc.getAlpha() !== 1) tc = tinycolor(color.combine(cstr, background));
    var newColor = tc.isDark() ? lightAmount ? tc.lighten(lightAmount) : background : darkAmount ? tc.darken(darkAmount) : defaultLine;
    return newColor.toString();
  };

  color.stroke = function (s, c) {
    var tc = tinycolor(c);
    s.style({
      'stroke': color.tinyRGB(tc),
      'stroke-opacity': tc.getAlpha()
    });
  };

  color.fill = function (s, c) {
    var tc = tinycolor(c);
    s.style({
      'fill': color.tinyRGB(tc),
      'fill-opacity': tc.getAlpha()
    });
  }; // search container for colors with the deprecated rgb(fractions) format
  // and convert them to rgb(0-255 values)


  color.clean = function (container) {
    if (!container || typeof container !== 'object') return;
    var keys = Object.keys(container);
    var i, j, key, val;

    for (i = 0; i < keys.length; i++) {
      key = keys[i];
      val = container[key];

      if (key.substr(key.length - 5) === 'color') {
        // only sanitize keys that end in "color" or "colorscale"
        if (Array.isArray(val)) {
          for (j = 0; j < val.length; j++) val[j] = cleanOne(val[j]);
        } else container[key] = cleanOne(val);
      } else if (key.substr(key.length - 10) === 'colorscale' && Array.isArray(val)) {
        // colorscales have the format [[0, color1], [frac, color2], ... [1, colorN]]
        for (j = 0; j < val.length; j++) {
          if (Array.isArray(val[j])) val[j][1] = cleanOne(val[j][1]);
        }
      } else if (Array.isArray(val)) {
        // recurse into arrays of objects, and plain objects
        var el0 = val[0];

        if (!Array.isArray(el0) && el0 && typeof el0 === 'object') {
          for (j = 0; j < val.length; j++) color.clean(val[j]);
        }
      } else if (val && typeof val === 'object' && !isTypedArray(val)) color.clean(val);
    }
  };

  function cleanOne(val) {
    if (fastIsnumeric(val) || typeof val !== 'string') return val;
    var valTrim = val.trim();
    if (valTrim.substr(0, 3) !== 'rgb') return val;
    var match = valTrim.match(/^rgba?\s*\(([^()]*)\)$/);
    if (!match) return val;
    var parts = match[1].trim().split(/\s*[\s,]\s*/);
    var rgba = valTrim.charAt(3) === 'a' && parts.length === 4;
    if (!rgba && parts.length !== 3) return val;

    for (var i = 0; i < parts.length; i++) {
      if (!parts[i].length) return val;
      parts[i] = Number(parts[i]);

      if (!(parts[i] >= 0)) {
        // all parts must be non-negative numbers
        return val;
      }

      if (i === 3) {
        // alpha>1 gets clipped to 1
        if (parts[i] > 1) parts[i] = 1;
      } else if (parts[i] >= 1) {
        // r, g, b must be < 1 (ie 1 itself is not allowed)
        return val;
      }
    }

    var rgbStr = Math.round(parts[0] * 255) + ', ' + Math.round(parts[1] * 255) + ', ' + Math.round(parts[2] * 255);
    if (rgba) return 'rgba(' + rgbStr + ', ' + parts[3] + ')';
    return 'rgb(' + rgbStr + ')';
  }
});

var interactions = {
  /**
   * Timing information for interactive elements
   */
  SHOW_PLACEHOLDER: 100,
  HIDE_PLACEHOLDER: 1000,
  // opacity dimming fraction for points that are not in selection
  DESELECTDIM: 0.2
};

/*
 * make a regex for matching counter ids/names ie xaxis, xaxis2, xaxis10...
 *
 * @param {string} head: the head of the pattern, eg 'x' matches 'x', 'x2', 'x10' etc.
 *      'xy' is a special case for cartesian subplots: it matches 'x2y3' etc
 * @param {Optional(string)} tail: a fixed piece after the id
 *      eg counterRegex('scene', '.annotations') for scene2.annotations etc.
 * @param {boolean} openEnded: if true, the string may continue past the match.
 * @param {boolean} matchBeginning: if false, the string may start before the match.
 */

var counter = function (head, tail, openEnded, matchBeginning) {
  var fullTail = (tail || '') + (openEnded ? '' : '$');
  var startWithPrefix = matchBeginning === false ? '' : '^';

  if (head === 'xy') {
    return new RegExp(startWithPrefix + 'x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?' + fullTail);
  }

  return new RegExp(startWithPrefix + head + '([2-9]|[1-9][0-9]+)?' + fullTail);
};

var regex = {
  counter: counter
};

var coerce = createCommonjsModule(function (module, exports) {

  var DESELECTDIM = interactions.DESELECTDIM;
  var counterRegex = regex.counter;
  var modHalf = mod_1.modHalf;
  var isArrayOrTypedArray = array.isArrayOrTypedArray;
  exports.valObjectMeta = {
    data_array: {
      // You can use *dflt=[] to force said array to exist though.
      description: ['An {array} of data.', 'The value MUST be an {array}, or we ignore it.', 'Note that typed arrays (e.g. Float32Array) are supported.'].join(' '),
      requiredOpts: [],
      otherOpts: ['dflt'],
      coerceFunction: function (v, propOut, dflt) {
        // TODO maybe `v: {type: 'float32', vals: [/* ... */]}` also
        if (isArrayOrTypedArray(v)) propOut.set(v);else if (dflt !== undefined) propOut.set(dflt);
      }
    },
    enumerated: {
      description: ['Enumerated value type. The available values are listed', 'in `values`.'].join(' '),
      requiredOpts: ['values'],
      otherOpts: ['dflt', 'coerceNumber', 'arrayOk'],
      coerceFunction: function (v, propOut, dflt, opts) {
        if (opts.coerceNumber) v = +v;
        if (opts.values.indexOf(v) === -1) propOut.set(dflt);else propOut.set(v);
      },
      validateFunction: function (v, opts) {
        if (opts.coerceNumber) v = +v;
        var values = opts.values;

        for (var i = 0; i < values.length; i++) {
          var k = String(values[i]);

          if (k.charAt(0) === '/' && k.charAt(k.length - 1) === '/') {
            var regex = new RegExp(k.substr(1, k.length - 2));
            if (regex.test(v)) return true;
          } else if (v === values[i]) return true;
        }

        return false;
      }
    },
    'boolean': {
      description: 'A boolean (true/false) value.',
      requiredOpts: [],
      otherOpts: ['dflt'],
      coerceFunction: function (v, propOut, dflt) {
        if (v === true || v === false) propOut.set(v);else propOut.set(dflt);
      }
    },
    number: {
      description: ['A number or a numeric value', '(e.g. a number inside a string).', 'When applicable, values greater (less) than `max` (`min`)', 'are coerced to the `dflt`.'].join(' '),
      requiredOpts: [],
      otherOpts: ['dflt', 'min', 'max', 'arrayOk'],
      coerceFunction: function (v, propOut, dflt, opts) {
        if (!fastIsnumeric(v) || opts.min !== undefined && v < opts.min || opts.max !== undefined && v > opts.max) {
          propOut.set(dflt);
        } else propOut.set(+v);
      }
    },
    integer: {
      description: ['An integer or an integer inside a string.', 'When applicable, values greater (less) than `max` (`min`)', 'are coerced to the `dflt`.'].join(' '),
      requiredOpts: [],
      otherOpts: ['dflt', 'min', 'max', 'arrayOk'],
      coerceFunction: function (v, propOut, dflt, opts) {
        if (v % 1 || !fastIsnumeric(v) || opts.min !== undefined && v < opts.min || opts.max !== undefined && v > opts.max) {
          propOut.set(dflt);
        } else propOut.set(+v);
      }
    },
    string: {
      description: ['A string value.', 'Numbers are converted to strings except for attributes with', '`strict` set to true.'].join(' '),
      requiredOpts: [],
      // TODO 'values shouldn't be in there (edge case: 'dash' in Scatter)
      otherOpts: ['dflt', 'noBlank', 'strict', 'arrayOk', 'values'],
      coerceFunction: function (v, propOut, dflt, opts) {
        if (typeof v !== 'string') {
          var okToCoerce = typeof v === 'number';
          if (opts.strict === true || !okToCoerce) propOut.set(dflt);else propOut.set(String(v));
        } else if (opts.noBlank && !v) propOut.set(dflt);else propOut.set(v);
      }
    },
    color: {
      description: ['A string describing color.', 'Supported formats:', '- hex (e.g. \'#d3d3d3\')', '- rgb (e.g. \'rgb(255, 0, 0)\')', '- rgba (e.g. \'rgb(255, 0, 0, 0.5)\')', '- hsl (e.g. \'hsl(0, 100%, 50%)\')', '- hsv (e.g. \'hsv(0, 100%, 100%)\')', '- named colors (full list: http://www.w3.org/TR/css3-color/#svg-color)'].join(' '),
      requiredOpts: [],
      otherOpts: ['dflt', 'arrayOk'],
      coerceFunction: function (v, propOut, dflt) {
        if (tinycolor(v).isValid()) propOut.set(v);else propOut.set(dflt);
      }
    },
    colorlist: {
      description: ['A list of colors.', 'Must be an {array} containing valid colors.'].join(' '),
      requiredOpts: [],
      otherOpts: ['dflt'],
      coerceFunction: function (v, propOut, dflt) {
        function isColor(color) {
          return tinycolor(color).isValid();
        }

        if (!Array.isArray(v) || !v.length) propOut.set(dflt);else if (v.every(isColor)) propOut.set(v);else propOut.set(dflt);
      }
    },
    colorscale: {
      description: ['A Plotly colorscale either picked by a name:', '(any of', Object.keys(scales_1.scales).join(', '), ')', 'customized as an {array} of 2-element {arrays} where', 'the first element is the normalized color level value', '(starting at *0* and ending at *1*),', 'and the second item is a valid color string.'].join(' '),
      requiredOpts: [],
      otherOpts: ['dflt'],
      coerceFunction: function (v, propOut, dflt) {
        propOut.set(scales_1.get(v, dflt));
      }
    },
    angle: {
      description: ['A number (in degree) between -180 and 180.'].join(' '),
      requiredOpts: [],
      otherOpts: ['dflt'],
      coerceFunction: function (v, propOut, dflt) {
        if (v === 'auto') propOut.set('auto');else if (!fastIsnumeric(v)) propOut.set(dflt);else propOut.set(modHalf(+v, 360));
      }
    },
    subplotid: {
      description: ['An id string of a subplot type (given by dflt), optionally', 'followed by an integer >1. e.g. if dflt=\'geo\', we can have', '\'geo\', \'geo2\', \'geo3\', ...'].join(' '),
      requiredOpts: ['dflt'],
      otherOpts: ['regex'],
      coerceFunction: function (v, propOut, dflt, opts) {
        var regex = opts.regex || counterRegex(dflt);

        if (typeof v === 'string' && regex.test(v)) {
          propOut.set(v);
          return;
        }

        propOut.set(dflt);
      },
      validateFunction: function (v, opts) {
        var dflt = opts.dflt;
        if (v === dflt) return true;
        if (typeof v !== 'string') return false;
        if (counterRegex(dflt).test(v)) return true;
        return false;
      }
    },
    flaglist: {
      description: ['A string representing a combination of flags', '(order does not matter here).', 'Combine any of the available `flags` with *+*.', '(e.g. (\'lines+markers\')).', 'Values in `extras` cannot be combined.'].join(' '),
      requiredOpts: ['flags'],
      otherOpts: ['dflt', 'extras', 'arrayOk'],
      coerceFunction: function (v, propOut, dflt, opts) {
        if (typeof v !== 'string') {
          propOut.set(dflt);
          return;
        }

        if ((opts.extras || []).indexOf(v) !== -1) {
          propOut.set(v);
          return;
        }

        var vParts = v.split('+');
        var i = 0;

        while (i < vParts.length) {
          var vi = vParts[i];

          if (opts.flags.indexOf(vi) === -1 || vParts.indexOf(vi) < i) {
            vParts.splice(i, 1);
          } else i++;
        }

        if (!vParts.length) propOut.set(dflt);else propOut.set(vParts.join('+'));
      }
    },
    any: {
      description: 'Any type.',
      requiredOpts: [],
      otherOpts: ['dflt', 'values', 'arrayOk'],
      coerceFunction: function (v, propOut, dflt) {
        if (v === undefined) propOut.set(dflt);else propOut.set(v);
      }
    },
    info_array: {
      description: ['An {array} of plot information.'].join(' '),
      requiredOpts: ['items'],
      // set `dimensions=2` for a 2D array or '1-2' for either
      // `items` may be a single object instead of an array, in which case
      // `freeLength` must be true.
      // if `dimensions='1-2'` and items is a 1D array, then the value can
      // either be a matching 1D array or an array of such matching 1D arrays
      otherOpts: ['dflt', 'freeLength', 'dimensions'],
      coerceFunction: function (v, propOut, dflt, opts) {
        // simplified coerce function just for array items
        function coercePart(v, opts, dflt) {
          var out;
          var propPart = {
            set: function (v) {
              out = v;
            }
          };
          if (dflt === undefined) dflt = opts.dflt;
          exports.valObjectMeta[opts.valType].coerceFunction(v, propPart, dflt, opts);
          return out;
        }

        var twoD = opts.dimensions === 2 || opts.dimensions === '1-2' && Array.isArray(v) && Array.isArray(v[0]);

        if (!Array.isArray(v)) {
          propOut.set(dflt);
          return;
        }

        var items = opts.items;
        var vOut = [];
        var arrayItems = Array.isArray(items);
        var arrayItems2D = arrayItems && twoD && Array.isArray(items[0]);
        var innerItemsOnly = twoD && arrayItems && !arrayItems2D;
        var len = arrayItems && !innerItemsOnly ? items.length : v.length;
        var i, j, row, item, len2, vNew;
        dflt = Array.isArray(dflt) ? dflt : [];

        if (twoD) {
          for (i = 0; i < len; i++) {
            vOut[i] = [];
            row = Array.isArray(v[i]) ? v[i] : [];
            if (innerItemsOnly) len2 = items.length;else if (arrayItems) len2 = items[i].length;else len2 = row.length;

            for (j = 0; j < len2; j++) {
              if (innerItemsOnly) item = items[j];else if (arrayItems) item = items[i][j];else item = items;
              vNew = coercePart(row[j], item, (dflt[i] || [])[j]);
              if (vNew !== undefined) vOut[i][j] = vNew;
            }
          }
        } else {
          for (i = 0; i < len; i++) {
            vNew = coercePart(v[i], arrayItems ? items[i] : items, dflt[i]);
            if (vNew !== undefined) vOut[i] = vNew;
          }
        }

        propOut.set(vOut);
      },
      validateFunction: function (v, opts) {
        if (!Array.isArray(v)) return false;
        var items = opts.items;
        var arrayItems = Array.isArray(items);
        var twoD = opts.dimensions === 2; // when free length is off, input and declared lengths must match

        if (!opts.freeLength && v.length !== items.length) return false; // valid when all input items are valid

        for (var i = 0; i < v.length; i++) {
          if (twoD) {
            if (!Array.isArray(v[i]) || !opts.freeLength && v[i].length !== items[i].length) {
              return false;
            }

            for (var j = 0; j < v[i].length; j++) {
              if (!validate(v[i][j], arrayItems ? items[i][j] : items)) {
                return false;
              }
            }
          } else if (!validate(v[i], arrayItems ? items[i] : items)) return false;
        }

        return true;
      }
    }
  };
  /**
   * Ensures that container[attribute] has a valid value.
   *
   * attributes[attribute] is an object with possible keys:
   * - valType: data_array, enumerated, boolean, ... as in valObjectMeta
   * - values: (enumerated only) array of allowed vals
   * - min, max: (number, integer only) inclusive bounds on allowed vals
   *      either or both may be omitted
   * - dflt: if attribute is invalid or missing, use this default
   *      if dflt is provided as an argument to lib.coerce it takes precedence
   *      as a convenience, returns the value it finally set
   */

  exports.coerce = function (containerIn, containerOut, attributes, attribute, dflt) {
    var opts = nested_property(attributes, attribute).get();
    var propIn = nested_property(containerIn, attribute);
    var propOut = nested_property(containerOut, attribute);
    var v = propIn.get();
    var template = containerOut._template;

    if (v === undefined && template) {
      v = nested_property(template, attribute).get(); // already used the template value, so short-circuit the second check

      template = 0;
    }

    if (dflt === undefined) dflt = opts.dflt;
    /**
     * arrayOk: value MAY be an array, then we do no value checking
     * at this point, because it can be more complicated than the
     * individual form (eg. some array vals can be numbers, even if the
     * single values must be color strings)
     */

    if (opts.arrayOk && isArrayOrTypedArray(v)) {
      propOut.set(v);
      return v;
    }

    var coerceFunction = exports.valObjectMeta[opts.valType].coerceFunction;
    coerceFunction(v, propOut, dflt, opts);
    var out = propOut.get(); // in case v was provided but invalid, try the template again so it still
    // overrides the regular default

    if (template && out === dflt && !validate(v, opts)) {
      v = nested_property(template, attribute).get();
      coerceFunction(v, propOut, dflt, opts);
      out = propOut.get();
    }

    return out;
  };
  /**
   * Variation on coerce
   *
   * Uses coerce to get attribute value if user input is valid,
   * returns attribute default if user input it not valid or
   * returns false if there is no user input.
   */


  exports.coerce2 = function (containerIn, containerOut, attributes, attribute, dflt) {
    var propIn = nested_property(containerIn, attribute);
    var propOut = exports.coerce(containerIn, containerOut, attributes, attribute, dflt);
    var valIn = propIn.get();
    return valIn !== undefined && valIn !== null ? propOut : false;
  };
  /*
   * Shortcut to coerce the three font attributes
   *
   * 'coerce' is a lib.coerce wrapper with implied first three arguments
   */


  exports.coerceFont = function (coerce, attr, dfltObj) {
    var out = {};
    dfltObj = dfltObj || {};
    out.family = coerce(attr + '.family', dfltObj.family);
    out.size = coerce(attr + '.size', dfltObj.size);
    out.color = coerce(attr + '.color', dfltObj.color);
    return out;
  };
  /*
   * Shortcut to coerce the pattern attributes
   */


  exports.coercePattern = function (coerce, attr, markerColor, hasMarkerColorscale) {
    var shape = coerce(attr + '.shape');

    if (shape) {
      coerce(attr + '.solidity');
      coerce(attr + '.size');
      var fillmode = coerce(attr + '.fillmode');
      var isOverlay = fillmode === 'overlay';

      if (!hasMarkerColorscale) {
        var bgcolor = coerce(attr + '.bgcolor', isOverlay ? markerColor : undefined);
        coerce(attr + '.fgcolor', isOverlay ? color_1.contrast(bgcolor) : markerColor);
      }

      coerce(attr + '.fgopacity', isOverlay ? 0.5 : 1);
    }
  };
  /** Coerce shortcut for 'hoverinfo'
   * handling 1-vs-multi-trace dflt logic
   *
   * @param {object} traceIn : user trace object
   * @param {object} traceOut : full trace object (requires _module ref)
   * @param {object} layoutOut : full layout object (require _dataLength ref)
   * @return {any} : the coerced value
   */


  exports.coerceHoverinfo = function (traceIn, traceOut, layoutOut) {
    var moduleAttrs = traceOut._module.attributes;
    var attrs = moduleAttrs.hoverinfo ? moduleAttrs : attributes$k;
    var valObj = attrs.hoverinfo;
    var dflt;

    if (layoutOut._dataLength === 1) {
      var flags = valObj.dflt === 'all' ? valObj.flags.slice() : valObj.dflt.split('+');
      flags.splice(flags.indexOf('name'), 1);
      dflt = flags.join('+');
    }

    return exports.coerce(traceIn, traceOut, attrs, 'hoverinfo', dflt);
  };
  /** Coerce shortcut for [un]selected.marker.opacity,
   *  which has special default logic, to ensure that it corresponds to the
   *  default selection behavior while allowing to be overtaken by any other
   *  [un]selected attribute.
   *
   *  N.B. This must be called *after* coercing all the other [un]selected attrs,
   *  to give the intended result.
   *
   * @param {object} traceOut : fullData item
   * @param {function} coerce : lib.coerce wrapper with implied first three arguments
   */


  exports.coerceSelectionMarkerOpacity = function (traceOut, coerce) {
    if (!traceOut.marker) return;
    var mo = traceOut.marker.opacity; // you can still have a `marker` container with no markers if there's text

    if (mo === undefined) return;
    var smoDflt;
    var usmoDflt; // Don't give [un]selected.marker.opacity a default value if
    // marker.opacity is an array: handle this during style step.
    //
    // Only give [un]selected.marker.opacity a default value if you don't
    // set any other [un]selected attributes.

    if (!isArrayOrTypedArray(mo) && !traceOut.selected && !traceOut.unselected) {
      smoDflt = mo;
      usmoDflt = DESELECTDIM * mo;
    }

    coerce('selected.marker.opacity', smoDflt);
    coerce('unselected.marker.opacity', usmoDflt);
  };

  function validate(value, opts) {
    var valObjectDef = exports.valObjectMeta[opts.valType];
    if (opts.arrayOk && isArrayOrTypedArray(value)) return true;

    if (valObjectDef.validateFunction) {
      return valObjectDef.validateFunction(value, opts);
    }

    var failed = {};
    var out = failed;
    var propMock = {
      set: function (v) {
        out = v;
      }
    }; // 'failed' just something mutable that won't be === anything else

    valObjectDef.coerceFunction(value, propMock, failed, opts);
    return out !== failed;
  }

  exports.validate = validate;
});

/**
 * This will be transferred over to gd and overridden by
 * config args to Plotly.newPlot.
 *
 * The defaults are the appropriate settings for plotly.js,
 * so we get the right experience without any config argument.
 *
 * N.B. the config options are not coerced using Lib.coerce so keys
 * like `valType` and `values` are only set for documentation purposes
 * at the moment.
 */

var configAttributes = {
  staticPlot: {
    valType: 'boolean',
    dflt: false,
    description: ['Determines whether the graphs are interactive or not.', 'If *false*, no interactivity, for export or image generation.'].join(' ')
  },
  typesetMath: {
    valType: 'boolean',
    dflt: true,
    description: ['Determines whether math should be typeset or not,', 'when MathJax (either v2 or v3) is present on the page.'].join(' ')
  },
  plotlyServerURL: {
    valType: 'string',
    dflt: '',
    description: ['When set it determines base URL for', 'the \'Edit in Chart Studio\' `showEditInChartStudio`/`showSendToCloud` mode bar button', 'and the showLink/sendData on-graph link.', 'To enable sending your data to Chart Studio Cloud, you need to', 'set both `plotlyServerURL` to \'https://chart-studio.plotly.com\' and', 'also set `showSendToCloud` to true.'].join(' ')
  },
  editable: {
    valType: 'boolean',
    dflt: false,
    description: ['Determines whether the graph is editable or not.', 'Sets all pieces of `edits`', 'unless a separate `edits` config item overrides individual parts.'].join(' ')
  },
  edits: {
    annotationPosition: {
      valType: 'boolean',
      dflt: false,
      description: ['Determines if the main anchor of the annotation is editable.', 'The main anchor corresponds to the', 'text (if no arrow) or the arrow (which drags the whole thing leaving', 'the arrow length & direction unchanged).'].join(' ')
    },
    annotationTail: {
      valType: 'boolean',
      dflt: false,
      description: ['Has only an effect for annotations with arrows.', 'Enables changing the length and direction of the arrow.'].join(' ')
    },
    annotationText: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables editing annotation text.'
    },
    axisTitleText: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables editing axis title text.'
    },
    colorbarPosition: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables moving colorbars.'
    },
    colorbarTitleText: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables editing colorbar title text.'
    },
    legendPosition: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables moving the legend.'
    },
    legendText: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables editing the trace name fields from the legend'
    },
    shapePosition: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables moving shapes.'
    },
    titleText: {
      valType: 'boolean',
      dflt: false,
      description: 'Enables editing the global layout title.'
    }
  },
  autosizable: {
    valType: 'boolean',
    dflt: false,
    description: ['Determines whether the graphs are plotted with respect to', 'layout.autosize:true and infer its container size.'].join(' ')
  },
  responsive: {
    valType: 'boolean',
    dflt: false,
    description: ['Determines whether to change the layout size when window is resized.', 'In v3, this option will be removed and will always be true.'].join(' ')
  },
  fillFrame: {
    valType: 'boolean',
    dflt: false,
    description: ['When `layout.autosize` is turned on, determines whether the graph', 'fills the container (the default) or the screen (if set to *true*).'].join(' ')
  },
  frameMargins: {
    valType: 'number',
    dflt: 0,
    min: 0,
    max: 0.5,
    description: ['When `layout.autosize` is turned on, set the frame margins', 'in fraction of the graph size.'].join(' ')
  },
  scrollZoom: {
    valType: 'flaglist',
    flags: ['cartesian', 'gl3d', 'geo', 'mapbox'],
    extras: [true, false],
    dflt: 'gl3d+geo+mapbox',
    description: ['Determines whether mouse wheel or two-finger scroll zooms is enable.', 'Turned on by default for gl3d, geo and mapbox subplots', '(as these subplot types do not have zoombox via pan),', 'but turned off by default for cartesian subplots.', 'Set `scrollZoom` to *false* to disable scrolling for all subplots.'].join(' ')
  },
  doubleClick: {
    valType: 'enumerated',
    values: [false, 'reset', 'autosize', 'reset+autosize'],
    dflt: 'reset+autosize',
    description: ['Sets the double click interaction mode.', 'Has an effect only in cartesian plots.', 'If *false*, double click is disable.', 'If *reset*, double click resets the axis ranges to their initial values.', 'If *autosize*, double click set the axis ranges to their autorange values.', 'If *reset+autosize*, the odd double clicks resets the axis ranges', 'to their initial values and even double clicks set the axis ranges', 'to their autorange values.'].join(' ')
  },
  doubleClickDelay: {
    valType: 'number',
    dflt: 300,
    min: 0,
    description: ['Sets the delay for registering a double-click in ms.', 'This is the time interval (in ms) between first mousedown and', '2nd mouseup to constitute a double-click.', 'This setting propagates to all on-subplot double clicks', '(except for geo and mapbox) and on-legend double clicks.'].join(' ')
  },
  showAxisDragHandles: {
    valType: 'boolean',
    dflt: true,
    description: ['Set to *false* to omit cartesian axis pan/zoom drag handles.'].join(' ')
  },
  showAxisRangeEntryBoxes: {
    valType: 'boolean',
    dflt: true,
    description: ['Set to *false* to omit direct range entry at the pan/zoom drag points,', 'note that `showAxisDragHandles` must be enabled to have an effect.'].join(' ')
  },
  showTips: {
    valType: 'boolean',
    dflt: true,
    description: ['Determines whether or not tips are shown while interacting', 'with the resulting graphs.'].join(' ')
  },
  showLink: {
    valType: 'boolean',
    dflt: false,
    description: ['Determines whether a link to Chart Studio Cloud is displayed', 'at the bottom right corner of resulting graphs.', 'Use with `sendData` and `linkText`.'].join(' ')
  },
  linkText: {
    valType: 'string',
    dflt: 'Edit chart',
    noBlank: true,
    description: ['Sets the text appearing in the `showLink` link.'].join(' ')
  },
  sendData: {
    valType: 'boolean',
    dflt: true,
    description: ['If *showLink* is true, does it contain data', 'just link to a Chart Studio Cloud file?'].join(' ')
  },
  showSources: {
    valType: 'any',
    dflt: false,
    description: ['Adds a source-displaying function to show sources on', 'the resulting graphs.'].join(' ')
  },
  displayModeBar: {
    valType: 'enumerated',
    values: ['hover', true, false],
    dflt: 'hover',
    description: ['Determines the mode bar display mode.', 'If *true*, the mode bar is always visible.', 'If *false*, the mode bar is always hidden.', 'If *hover*, the mode bar is visible while the mouse cursor', 'is on the graph container.'].join(' ')
  },
  showSendToCloud: {
    valType: 'boolean',
    dflt: false,
    description: ['Should we include a ModeBar button, labeled "Edit in Chart Studio",', 'that sends this chart to chart-studio.plotly.com (formerly plot.ly) or another plotly server', 'as specified by `plotlyServerURL` for editing, export, etc? Prior to version 1.43.0', 'this button was included by default, now it is opt-in using this flag.', 'Note that this button can (depending on `plotlyServerURL` being set) send your data', 'to an external server. However that server does not persist your data', 'until you arrive at the Chart Studio and explicitly click "Save".'].join(' ')
  },
  showEditInChartStudio: {
    valType: 'boolean',
    dflt: false,
    description: ['Same as `showSendToCloud`, but use a pencil icon instead of a floppy-disk.', 'Note that if both `showSendToCloud` and `showEditInChartStudio` are turned,', 'only `showEditInChartStudio` will be honored.'].join(' ')
  },
  modeBarButtonsToRemove: {
    valType: 'any',
    dflt: [],
    description: ['Remove mode bar buttons by name.', 'See ./components/modebar/buttons.js for the list of names.'].join(' ')
  },
  modeBarButtonsToAdd: {
    valType: 'any',
    dflt: [],
    description: ['Add mode bar button using config objects', 'See ./components/modebar/buttons.js for list of arguments.', 'To enable predefined modebar buttons e.g. shape drawing, hover and spikelines,', 'simply provide their string name(s). This could include:', '*v1hovermode*, *hoverclosest*, *hovercompare*, *togglehover*, *togglespikelines*,', '*drawline*, *drawopenpath*, *drawclosedpath*, *drawcircle*, *drawrect* and *eraseshape*.', 'Please note that these predefined buttons will only be shown if they are compatible', 'with all trace types used in a graph.'].join(' ')
  },
  modeBarButtons: {
    valType: 'any',
    dflt: false,
    description: ['Define fully custom mode bar buttons as nested array,', 'where the outer arrays represents button groups, and', 'the inner arrays have buttons config objects or names of default buttons', 'See ./components/modebar/buttons.js for more info.'].join(' ')
  },
  toImageButtonOptions: {
    valType: 'any',
    dflt: {},
    description: ['Statically override options for toImage modebar button', 'allowed keys are format, filename, width, height, scale', 'see ../components/modebar/buttons.js'].join(' ')
  },
  displaylogo: {
    valType: 'boolean',
    dflt: true,
    description: ['Determines whether or not the plotly logo is displayed', 'on the end of the mode bar.'].join(' ')
  },
  watermark: {
    valType: 'boolean',
    dflt: false,
    description: 'watermark the images with the company\'s logo'
  },
  plotGlPixelRatio: {
    valType: 'number',
    dflt: 2,
    min: 1,
    max: 4,
    description: ['Set the pixel ratio during WebGL image export.', 'This config option was formerly named `plot3dPixelRatio`', 'which is now deprecated.'].join(' ')
  },
  setBackground: {
    valType: 'any',
    dflt: 'transparent',
    description: ['Set function to add the background color (i.e. `layout.paper_color`)', 'to a different container.', 'This function take the graph div as first argument and the current background', 'color as second argument.', 'Alternatively, set to string *opaque* to ensure there is white behind it.'].join(' ')
  },
  topojsonURL: {
    valType: 'string',
    noBlank: true,
    dflt: 'https://cdn.plot.ly/',
    description: ['Set the URL to topojson used in geo charts.', 'By default, the topojson files are fetched from cdn.plot.ly.', 'For example, set this option to:', '<path-to-plotly.js>/dist/topojson/', 'to render geographical feature using the topojson files', 'that ship with the plotly.js module.'].join(' ')
  },
  mapboxAccessToken: {
    valType: 'string',
    dflt: null,
    description: ['Mapbox access token (required to plot mapbox trace types)', 'If using an Mapbox Atlas server, set this option to \'\'', 'so that plotly.js won\'t attempt to authenticate to the public Mapbox server.'].join(' ')
  },
  logging: {
    valType: 'integer',
    min: 0,
    max: 2,
    dflt: 1,
    description: ['Turn all console logging on or off (errors will be thrown)', 'This should ONLY be set via Plotly.setPlotConfig', 'Available levels:', '0: no logs', '1: warnings and errors, but not informational messages', '2: verbose logs'].join(' ')
  },
  notifyOnLogging: {
    valType: 'integer',
    min: 0,
    max: 2,
    dflt: 0,
    description: ['Set on-graph logging (notifier) level', 'This should ONLY be set via Plotly.setPlotConfig', 'Available levels:', '0: no on-graph logs', '1: warnings and errors, but not informational messages', '2: verbose logs'].join(' ')
  },
  queueLength: {
    valType: 'integer',
    min: 0,
    dflt: 0,
    description: 'Sets the length of the undo/redo queue.'
  },
  globalTransforms: {
    valType: 'any',
    dflt: [],
    description: ['Set global transform to be applied to all traces with no', 'specification needed'].join(' ')
  },
  locale: {
    valType: 'string',
    dflt: 'en-US',
    description: ['Which localization should we use?', 'Should be a string like \'en\' or \'en-US\'.'].join(' ')
  },
  locales: {
    valType: 'any',
    dflt: {},
    description: ['Localization definitions', 'Locales can be provided either here (specific to one chart) or globally', 'by registering them as modules.', 'Should be an object of objects {locale: {dictionary: {...}, format: {...}}}', '{', '  da: {', '      dictionary: {\'Reset axes\': \'Nulstil aksler\', ...},', '      format: {months: [...], shortMonths: [...]}', '  },', '  ...', '}', 'All parts are optional. When looking for translation or format fields, we', 'look first for an exact match in a config locale, then in a registered', 'module. If those fail, we strip off any regionalization (\'en-US\' -> \'en\')', 'and try each (config, registry) again. The final fallback for translation', 'is untranslated (which is US English) and for formats is the base English', '(the only consequence being the last fallback date format %x is DD/MM/YYYY', 'instead of MM/DD/YYYY). Currently `grouping` and `currency` are ignored', 'for our automatic number formatting, but can be used in custom formats.'].join(' ')
  }
};
var dfltConfig$3 = {};

function crawl$1(src, target) {
  for (var k in src) {
    var obj = src[k];

    if (obj.valType) {
      target[k] = obj.dflt;
    } else {
      if (!target[k]) {
        target[k] = {};
      }

      crawl$1(obj, target[k]);
    }
  }
}

crawl$1(configAttributes, dfltConfig$3);
var plot_config = {
  configAttributes: configAttributes,
  dfltConfig: dfltConfig$3
};

var NOTEDATA = [];
/**
 * notifier
 * @param {String} text The person's user name
 * @param {Number} [delay=1000] The delay time in milliseconds
 *          or 'long' which provides 2000 ms delay time.
 * @return {undefined} this function does not return a value
 */

var notifier = function (text, displayLength) {
  if (NOTEDATA.indexOf(text) !== -1) return;
  NOTEDATA.push(text);
  var ts = 1000;
  if (fastIsnumeric(displayLength)) ts = displayLength;else if (displayLength === 'long') ts = 3000;
  var notifierContainer = d3.select('body').selectAll('.plotly-notifier').data([0]);
  notifierContainer.enter().append('div').classed('plotly-notifier', true);
  var notes = notifierContainer.selectAll('.notifier-note').data(NOTEDATA);

  function killNote(transition) {
    transition.duration(700).style('opacity', 0).each('end', function (thisText) {
      var thisIndex = NOTEDATA.indexOf(thisText);
      if (thisIndex !== -1) NOTEDATA.splice(thisIndex, 1);
      d3.select(this).remove();
    });
  }

  notes.enter().append('div').classed('notifier-note', true).style('opacity', 0).each(function (thisText) {
    var note = d3.select(this);
    note.append('button').classed('notifier-close', true).html('&times;').on('click', function () {
      note.transition().call(killNote);
    });
    var p = note.append('p');
    var lines = thisText.split(/<br\s*\/?>/g);

    for (var i = 0; i < lines.length; i++) {
      if (i) p.append('br');
      p.append('span').text(lines[i]);
    }

    if (displayLength === 'stick') {
      note.transition().duration(350).style('opacity', 1);
    } else {
      note.transition().duration(700).style('opacity', 1).transition().delay(ts).call(killNote);
    }
  });
};

var loggers_1 = createCommonjsModule(function (module) {
  /* eslint-disable no-console */

  var dfltConfig = plot_config.dfltConfig;
  var loggers = module.exports = {};
  /**
   * ------------------------------------------
   * debugging tools
   * ------------------------------------------
   */

  loggers.log = function () {
    var i;

    if (dfltConfig.logging > 1) {
      var messages = ['LOG:'];

      for (i = 0; i < arguments.length; i++) {
        messages.push(arguments[i]);
      }

      console.trace.apply(console, messages);
    }

    if (dfltConfig.notifyOnLogging > 1) {
      var lines = [];

      for (i = 0; i < arguments.length; i++) {
        lines.push(arguments[i]);
      }

      notifier(lines.join('<br>'), 'long');
    }
  };

  loggers.warn = function () {
    var i;

    if (dfltConfig.logging > 0) {
      var messages = ['WARN:'];

      for (i = 0; i < arguments.length; i++) {
        messages.push(arguments[i]);
      }

      console.trace.apply(console, messages);
    }

    if (dfltConfig.notifyOnLogging > 0) {
      var lines = [];

      for (i = 0; i < arguments.length; i++) {
        lines.push(arguments[i]);
      }

      notifier(lines.join('<br>'), 'stick');
    }
  };

  loggers.error = function () {
    var i;

    if (dfltConfig.logging > 0) {
      var messages = ['ERROR:'];

      for (i = 0; i < arguments.length; i++) {
        messages.push(arguments[i]);
      }

      console.error.apply(console, messages);
    }

    if (dfltConfig.notifyOnLogging > 0) {
      var lines = [];

      for (i = 0; i < arguments.length; i++) {
        lines.push(arguments[i]);
      }

      notifier(lines.join('<br>'), 'stick');
    }
  };
});

// none of these need any external deps

var noop = function noop() {};

/**
 * Push array with unique items
 *
 * Ignores falsy items, except 0 so we can use it to construct arrays of indices.
 *
 * @param {array} array
 *  array to be filled
 * @param {any} item
 *  item to be or not to be inserted
 * @return {array}
 *  ref to array (now possibly containing one more item)
 *
 */

var push_unique = function pushUnique(array, item) {
  if (item instanceof RegExp) {
    var itemStr = item.toString();

    for (var i = 0; i < array.length; i++) {
      if (array[i] instanceof RegExp && array[i].toString() === itemStr) {
        return array;
      }
    }

    array.push(item);
  } else if ((item || item === 0) && array.indexOf(item) === -1) array.push(item);

  return array;
};

var create_1 = create;
/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create() {
  var out = new Float32Array(16);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var clone_1 = clone;
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone(a) {
  var out = new Float32Array(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

var copy_1 = copy;
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

var identity_1 = identity$2;
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity$2(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var transpose_1 = transpose;
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a12 = a[6],
        a13 = a[7],
        a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}

var invert_1 = invert;
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3],
      a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7],
      a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11],
      a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15],
      b00 = a00 * a11 - a01 * a10,
      b01 = a00 * a12 - a02 * a10,
      b02 = a00 * a13 - a03 * a10,
      b03 = a01 * a12 - a02 * a11,
      b04 = a01 * a13 - a03 * a11,
      b05 = a02 * a13 - a03 * a12,
      b06 = a20 * a31 - a21 * a30,
      b07 = a20 * a32 - a22 * a30,
      b08 = a20 * a33 - a23 * a30,
      b09 = a21 * a32 - a22 * a31,
      b10 = a21 * a33 - a23 * a31,
      b11 = a22 * a33 - a23 * a32,
      // Calculate the determinant
  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}

var adjoint_1 = adjoint;
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3],
      a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7],
      a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11],
      a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}

var determinant_1 = determinant;
/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3],
      a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7],
      a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11],
      a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15],
      b00 = a00 * a11 - a01 * a10,
      b01 = a00 * a12 - a02 * a10,
      b02 = a00 * a13 - a03 * a10,
      b03 = a01 * a12 - a02 * a11,
      b04 = a01 * a13 - a03 * a11,
      b05 = a02 * a13 - a03 * a12,
      b06 = a20 * a31 - a21 * a30,
      b07 = a20 * a32 - a22 * a30,
      b08 = a20 * a33 - a23 * a30,
      b09 = a21 * a32 - a22 * a31,
      b10 = a21 * a33 - a23 * a31,
      b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}

var multiply_1 = multiply;
/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3],
      a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7],
      a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11],
      a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}

var translate_1 = translate;
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2],
      a00,
      a01,
      a02,
      a03,
      a10,
      a11,
      a12,
      a13,
      a20,
      a21,
      a22,
      a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}

var scale_1 = scale;
/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

var rotate_1 = rotate;
/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2],
      len = Math.sqrt(x * x + y * y + z * z),
      s,
      c,
      t,
      a00,
      a01,
      a02,
      a03,
      a10,
      a11,
      a12,
      a13,
      a20,
      a21,
      a22,
      a23,
      b00,
      b01,
      b02,
      b10,
      b11,
      b12,
      b20,
      b21,
      b22;

  if (Math.abs(len) < 0.000001) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}

var rotateX_1 = rotateX;
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad),
      a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7],
      a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}

var rotateY_1 = rotateY;
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad),
      a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3],
      a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}

var rotateZ_1 = rotateZ;
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad),
      a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3],
      a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}

var fromRotation_1 = fromRotation;
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotate(dest, dest, rad, axis)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var s, c, t;
  var x = axis[0];
  var y = axis[1];
  var z = axis[2];
  var len = Math.sqrt(x * x + y * y + z * z);

  if (Math.abs(len) < 0.000001) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var fromRotationTranslation_1 = fromRotationTranslation;
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,
      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}

var fromScaling_1 = fromScaling;
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.scale(dest, dest, vec)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var fromTranslation_1 = fromTranslation;
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.translate(dest, dest, vec)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}

var fromXRotation_1 = fromXRotation;
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateX(dest, dest, rad)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var fromYRotation_1 = fromYRotation;
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateY(dest, dest, rad)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var fromZRotation_1 = fromZRotation;
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateZ(dest, dest, rad)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var fromQuat_1 = fromQuat;
/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,
      xx = x * x2,
      yx = y * x2,
      yy = y * y2,
      zx = z * x2,
      zy = z * y2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

var frustum_1 = frustum;
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left),
      tb = 1 / (top - bottom),
      nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}

var perspective_1 = perspective;
/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf = 1 / (near - far);
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = 2 * far * near * nf;
  out[15] = 0;
  return out;
}

var perspectiveFromFieldOfView_1 = perspectiveFromFieldOfView;
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0),
      downTan = Math.tan(fov.downDegrees * Math.PI / 180.0),
      leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0),
      rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0),
      xScale = 2.0 / (leftTan + rightTan),
      yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}

var ortho_1 = ortho;
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right),
      bt = 1 / (bottom - top),
      nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}

var lookAt_1 = lookAt;
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0,
      x1,
      x2,
      y0,
      y1,
      y2,
      z0,
      z1,
      z2,
      len,
      eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2],
      centerx = center[0],
      centery = center[1],
      centerz = center[2];

  if (Math.abs(eyex - centerx) < 0.000001 && Math.abs(eyey - centery) < 0.000001 && Math.abs(eyez - centerz) < 0.000001) {
    return identity_1(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}

var str_1 = str;
/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}

var glMat4 = {
  create: create_1,
  clone: clone_1,
  copy: copy_1,
  identity: identity_1,
  transpose: transpose_1,
  invert: invert_1,
  adjoint: adjoint_1,
  determinant: determinant_1,
  multiply: multiply_1,
  translate: translate_1,
  scale: scale_1,
  rotate: rotate_1,
  rotateX: rotateX_1,
  rotateY: rotateY_1,
  rotateZ: rotateZ_1,
  fromRotation: fromRotation_1,
  fromRotationTranslation: fromRotationTranslation_1,
  fromScaling: fromScaling_1,
  fromTranslation: fromTranslation_1,
  fromXRotation: fromXRotation_1,
  fromYRotation: fromYRotation_1,
  fromZRotation: fromZRotation_1,
  fromQuat: fromQuat_1,
  frustum: frustum_1,
  perspective: perspective_1,
  perspectiveFromFieldOfView: perspectiveFromFieldOfView_1,
  ortho: ortho_1,
  lookAt: lookAt_1,
  str: str_1
};

var matrix = createCommonjsModule(function (module, exports) {

  exports.init2dArray = function (rowLength, colLength) {
    var array = new Array(rowLength);

    for (var i = 0; i < rowLength; i++) array[i] = new Array(colLength);

    return array;
  };
  /**
   * transpose a (possibly ragged) 2d array z. inspired by
   * http://stackoverflow.com/questions/17428587/
   * transposing-a-2d-array-in-javascript
   */


  exports.transposeRagged = function (z) {
    var maxlen = 0;
    var zlen = z.length;
    var i, j; // Maximum row length:

    for (i = 0; i < zlen; i++) maxlen = Math.max(maxlen, z[i].length);

    var t = new Array(maxlen);

    for (i = 0; i < maxlen; i++) {
      t[i] = new Array(zlen);

      for (j = 0; j < zlen; j++) t[i][j] = z[j][i];
    }

    return t;
  }; // our own dot function so that we don't need to include numeric


  exports.dot = function (x, y) {
    if (!(x.length && y.length) || x.length !== y.length) return null;
    var len = x.length;
    var out;
    var i;

    if (x[0].length) {
      // mat-vec or mat-mat
      out = new Array(len);

      for (i = 0; i < len; i++) out[i] = exports.dot(x[i], y);
    } else if (y[0].length) {
      // vec-mat
      var yTranspose = exports.transposeRagged(y);
      out = new Array(yTranspose.length);

      for (i = 0; i < yTranspose.length; i++) out[i] = exports.dot(x, yTranspose[i]);
    } else {
      // vec-vec
      out = 0;

      for (i = 0; i < len; i++) out += x[i] * y[i];
    }

    return out;
  }; // translate by (x,y)


  exports.translationMatrix = function (x, y) {
    return [[1, 0, x], [0, 1, y], [0, 0, 1]];
  }; // rotate by alpha around (0,0)


  exports.rotationMatrix = function (alpha) {
    var a = alpha * Math.PI / 180;
    return [[Math.cos(a), -Math.sin(a), 0], [Math.sin(a), Math.cos(a), 0], [0, 0, 1]];
  }; // rotate by alpha around (x,y)


  exports.rotationXYMatrix = function (a, x, y) {
    return exports.dot(exports.dot(exports.translationMatrix(x, y), exports.rotationMatrix(a)), exports.translationMatrix(-x, -y));
  }; // applies a 3D transformation matrix to either x, y and z params
  // Note: z is optional


  exports.apply3DTransform = function (transform) {
    return function () {
      var args = arguments;
      var xyz = arguments.length === 1 ? args[0] : [args[0], args[1], args[2] || 0];
      return exports.dot(transform, [xyz[0], xyz[1], xyz[2], 1]).slice(0, 3);
    };
  }; // applies a 2D transformation matrix to either x and y params or an [x,y] array


  exports.apply2DTransform = function (transform) {
    return function () {
      var args = arguments;

      if (args.length === 3) {
        args = args[0];
      } // from map


      var xy = arguments.length === 1 ? args[0] : [args[0], args[1]];
      return exports.dot(transform, [xy[0], xy[1], 1]).slice(0, 2);
    };
  }; // applies a 2D transformation matrix to an [x1,y1,x2,y2] array (to transform a segment)


  exports.apply2DTransform2 = function (transform) {
    var at = exports.apply2DTransform(transform);
    return function (xys) {
      return at(xys.slice(0, 2)).concat(at(xys.slice(2, 4)));
    };
  };

  exports.convertCssMatrix = function (m) {
    if (m) {
      var len = m.length;
      if (len === 16) return m;

      if (len === 6) {
        // converts a 2x3 css transform matrix to a 4x4 matrix see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix
        return [m[0], m[1], 0, 0, m[2], m[3], 0, 0, 0, 0, 1, 0, m[4], m[5], 0, 1];
      }
    }

    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }; // find the inverse for a 4x4 affine transform matrix


  exports.inverseTransformMatrix = function (m) {
    var out = [];
    glMat4.invert(out, m);
    return [[out[0], out[1], out[2], out[3]], [out[4], out[5], out[6], out[7]], [out[8], out[9], out[10], out[11]], [out[12], out[13], out[14], out[15]]];
  };
});

/**
 * Allow referencing a graph DOM element either directly
 * or by its id string
 *
 * @param {HTMLDivElement|string} gd: a graph element or its id
 *
 * @returns {HTMLDivElement} the DOM element of the graph
 */


function getGraphDiv(gd) {
  var gdElement;

  if (typeof gd === 'string') {
    gdElement = document.getElementById(gd);

    if (gdElement === null) {
      throw new Error('No DOM element with id \'' + gd + '\' exists on the page.');
    }

    return gdElement;
  } else if (gd === null || gd === undefined) {
    throw new Error('DOM element provided is null or undefined');
  } // otherwise assume that gd is a DOM element


  return gd;
}

function isPlotDiv(el) {
  var el3 = d3.select(el);
  return el3.node() instanceof HTMLElement && el3.size() && el3.classed('js-plotly-plot');
}

function removeElement(el) {
  var elParent = el && el.parentNode;
  if (elParent) elParent.removeChild(el);
}
/**
 * for dynamically adding style rules
 * makes one stylesheet that contains all rules added
 * by all calls to this function
 */


function addStyleRule(selector, styleString) {
  addRelatedStyleRule('global', selector, styleString);
}
/**
 * for dynamically adding style rules
 * to a stylesheet uniquely identified by a uid
 */


function addRelatedStyleRule(uid, selector, styleString) {
  var id = 'plotly.js-style-' + uid;
  var style = document.getElementById(id);

  if (!style) {
    style = document.createElement('style');
    style.setAttribute('id', id); // WebKit hack :(

    style.appendChild(document.createTextNode(''));
    document.head.appendChild(style);
  }

  var styleSheet = style.sheet;

  if (styleSheet.insertRule) {
    styleSheet.insertRule(selector + '{' + styleString + '}', 0);
  } else if (styleSheet.addRule) {
    styleSheet.addRule(selector, styleString, 0);
  } else loggers_1.warn('addStyleRule failed');
}
/**
 * to remove from the page a stylesheet identified by a given uid
 */


function deleteRelatedStyleRule(uid) {
  var id = 'plotly.js-style-' + uid;
  var style = document.getElementById(id);
  if (style) removeElement(style);
}

function getFullTransformMatrix(element) {
  var allElements = getElementAndAncestors(element); // the identity matrix

  var out = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  allElements.forEach(function (e) {
    var t = getElementTransformMatrix(e);

    if (t) {
      var m = matrix.convertCssMatrix(t);
      out = glMat4.multiply(out, out, m);
    }
  });
  return out;
}
/**
 * extracts and parses the 2d css style transform matrix from some element
 */


function getElementTransformMatrix(element) {
  var style = window.getComputedStyle(element, null);
  var transform = style.getPropertyValue('-webkit-transform') || style.getPropertyValue('-moz-transform') || style.getPropertyValue('-ms-transform') || style.getPropertyValue('-o-transform') || style.getPropertyValue('transform');
  if (transform === 'none') return null; // the transform is a string in the form of matrix(a, b, ...) or matrix3d(...)

  return transform.replace('matrix', '').replace('3d', '').slice(1, -1).split(',').map(function (n) {
    return +n;
  });
}
/**
 * retrieve all DOM elements that are ancestors of the specified one (including itself)
 */


function getElementAndAncestors(element) {
  var allElements = [];

  while (isTransformableElement(element)) {
    allElements.push(element);
    element = element.parentNode;
  }

  return allElements;
}

function isTransformableElement(element) {
  return element && (element instanceof Element || element instanceof HTMLElement);
}

function equalDomRects(a, b) {
  return a && b && a.x === b.x && a.y === b.y && a.top === b.top && a.left === b.left && a.right === b.right && a.bottom === b.bottom;
}

var dom = {
  getGraphDiv: getGraphDiv,
  isPlotDiv: isPlotDiv,
  removeElement: removeElement,
  addStyleRule: addStyleRule,
  addRelatedStyleRule: addRelatedStyleRule,
  deleteRelatedStyleRule: deleteRelatedStyleRule,
  getFullTransformMatrix: getFullTransformMatrix,
  getElementTransformMatrix: getElementTransformMatrix,
  getElementAndAncestors: getElementAndAncestors,
  equalDomRects: equalDomRects
};

var animation_attributes = {
  mode: {
    valType: 'enumerated',
    dflt: 'afterall',
    values: ['immediate', 'next', 'afterall'],
    description: ['Describes how a new animate call interacts with currently-running', 'animations. If `immediate`, current animations are interrupted and', 'the new animation is started. If `next`, the current frame is allowed', 'to complete, after which the new animation is started. If `afterall`', 'all existing frames are animated to completion before the new animation', 'is started.'].join(' ')
  },
  direction: {
    valType: 'enumerated',
    values: ['forward', 'reverse'],
    dflt: 'forward',
    description: ['The direction in which to play the frames triggered by the animation call'].join(' ')
  },
  fromcurrent: {
    valType: 'boolean',
    dflt: false,
    description: ['Play frames starting at the current frame instead of the beginning.'].join(' ')
  },
  frame: {
    duration: {
      valType: 'number',
      min: 0,
      dflt: 500,
      description: ['The duration in milliseconds of each frame. If greater than the frame', 'duration, it will be limited to the frame duration.'].join(' ')
    },
    redraw: {
      valType: 'boolean',
      dflt: true,
      description: ['Redraw the plot at completion of the transition. This is desirable', 'for transitions that include properties that cannot be transitioned,', 'but may significantly slow down updates that do not require a full', 'redraw of the plot'].join(' ')
    }
  },
  transition: {
    duration: {
      valType: 'number',
      min: 0,
      dflt: 500,
      editType: 'none',
      description: ['The duration of the transition, in milliseconds. If equal to zero,', 'updates are synchronous.'].join(' ')
    },
    easing: {
      valType: 'enumerated',
      dflt: 'cubic-in-out',
      values: ['linear', 'quad', 'cubic', 'sin', 'exp', 'circle', 'elastic', 'back', 'bounce', 'linear-in', 'quad-in', 'cubic-in', 'sin-in', 'exp-in', 'circle-in', 'elastic-in', 'back-in', 'bounce-in', 'linear-out', 'quad-out', 'cubic-out', 'sin-out', 'exp-out', 'circle-out', 'elastic-out', 'back-out', 'bounce-out', 'linear-in-out', 'quad-in-out', 'cubic-in-out', 'sin-in-out', 'exp-in-out', 'circle-in-out', 'elastic-in-out', 'back-in-out', 'bounce-in-out'],
      editType: 'none',
      description: 'The easing function used for the transition'
    },
    ordering: {
      valType: 'enumerated',
      values: ['layout first', 'traces first'],
      dflt: 'layout first',
      editType: 'none',
      description: ['Determines whether the figure\'s layout or traces smoothly transitions', 'during updates that make both traces and layout change.'].join(' ')
    }
  }
};

var dash$4 = {
  valType: 'string',
  // string type usually doesn't take values... this one should really be
  // a special type or at least a special coercion function, from the GUI
  // you only get these values but elsewhere the user can supply a list of
  // dash lengths in px, and it will be honored
  values: ['solid', 'dot', 'dash', 'longdash', 'dashdot', 'longdashdot'],
  dflt: 'solid',
  editType: 'style',
  description: ['Sets the dash style of lines. Set to a dash type string', '(*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*)', 'or a dash length list in px (eg *5px,10px,2px,2px*).'].join(' ')
};
var pattern$1 = {
  shape: {
    valType: 'enumerated',
    values: ['', '/', '\\', 'x', '-', '|', '+', '.'],
    dflt: '',
    arrayOk: true,
    editType: 'style',
    description: ['Sets the shape of the pattern fill.', 'By default, no pattern is used for filling the area.'].join(' ')
  },
  fillmode: {
    valType: 'enumerated',
    values: ['replace', 'overlay'],
    dflt: 'replace',
    editType: 'style',
    description: ['Determines whether `marker.color` should be used', 'as a default to `bgcolor` or a `fgcolor`.'].join(' ')
  },
  bgcolor: {
    valType: 'color',
    arrayOk: true,
    editType: 'style',
    description: ['When there is no colorscale sets the color of background pattern fill.', 'Defaults to a `marker.color` background when `fillmode` is *overlay*.', 'Otherwise, defaults to a transparent background.'].join(' ')
  },
  fgcolor: {
    valType: 'color',
    arrayOk: true,
    editType: 'style',
    description: ['When there is no colorscale sets the color of foreground pattern fill.', 'Defaults to a `marker.color` background when `fillmode` is *replace*.', 'Otherwise, defaults to dark grey or white', 'to increase contrast with the `bgcolor`.'].join(' ')
  },
  fgopacity: {
    valType: 'number',
    editType: 'style',
    min: 0,
    max: 1,
    description: ['Sets the opacity of the foreground pattern fill.', 'Defaults to a 0.5 when `fillmode` is *overlay*.', 'Otherwise, defaults to 1.'].join(' ')
  },
  size: {
    valType: 'number',
    min: 0,
    dflt: 8,
    arrayOk: true,
    editType: 'style',
    description: ['Sets the size of unit squares of the pattern fill in pixels,', 'which corresponds to the interval of repetition of the pattern.'].join(' ')
  },
  solidity: {
    valType: 'number',
    min: 0,
    max: 1,
    dflt: 0.3,
    arrayOk: true,
    editType: 'style',
    description: ['Sets the solidity of the pattern fill.', 'Solidity is roughly the fraction of the area filled by the pattern.', 'Solidity of 0 shows only the background color without pattern', 'and solidty of 1 shows only the foreground color without pattern.'].join(' ')
  },
  editType: 'style',
  description: ['Sets the pattern within the marker.'].join(' ')
};
var attributes$i = {
  dash: dash$4,
  pattern: pattern$1
};

var dash$3 = attributes$i.dash;
var extendFlat$b = extend.extendFlat;
var attributes$h = {
  newshape: {
    line: {
      color: {
        valType: 'color',
        editType: 'none',
        description: ['Sets the line color.', 'By default uses either dark grey or white', 'to increase contrast with background color.'].join(' ')
      },
      width: {
        valType: 'number',
        min: 0,
        dflt: 4,
        editType: 'none',
        description: 'Sets the line width (in px).'
      },
      dash: extendFlat$b({}, dash$3, {
        dflt: 'solid',
        editType: 'none'
      }),
      editType: 'none'
    },
    fillcolor: {
      valType: 'color',
      dflt: 'rgba(0,0,0,0)',
      editType: 'none',
      description: ['Sets the color filling new shapes\' interior.', 'Please note that if using a fillcolor with alpha greater than half,', 'drag inside the active shape starts moving the shape underneath,', 'otherwise a new shape could be started over.'].join(' ')
    },
    fillrule: {
      valType: 'enumerated',
      values: ['evenodd', 'nonzero'],
      dflt: 'evenodd',
      editType: 'none',
      description: ['Determines the path\'s interior.', 'For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule'].join(' ')
    },
    opacity: {
      valType: 'number',
      min: 0,
      max: 1,
      dflt: 1,
      editType: 'none',
      description: 'Sets the opacity of new shapes.'
    },
    layer: {
      valType: 'enumerated',
      values: ['below', 'above'],
      dflt: 'above',
      editType: 'none',
      description: 'Specifies whether new shapes are drawn below or above traces.'
    },
    drawdirection: {
      valType: 'enumerated',
      values: ['ortho', 'horizontal', 'vertical', 'diagonal'],
      dflt: 'diagonal',
      editType: 'none',
      description: ['When `dragmode` is set to *drawrect*, *drawline* or *drawcircle*', 'this limits the drag to be horizontal, vertical or diagonal.', 'Using *diagonal* there is no limit e.g. in drawing lines in any direction.', '*ortho* limits the draw to be either horizontal or vertical.', '*horizontal* allows horizontal extend.', '*vertical* allows vertical extend.'].join(' ')
    },
    editType: 'none'
  },
  activeshape: {
    fillcolor: {
      valType: 'color',
      dflt: 'rgb(255,0,255)',
      editType: 'none',
      description: 'Sets the color filling the active shape\' interior.'
    },
    opacity: {
      valType: 'number',
      min: 0,
      max: 1,
      dflt: 0.5,
      editType: 'none',
      description: 'Sets the opacity of the active shape.'
    },
    editType: 'none'
  }
};

/**
 * Creates a set of padding attributes.
 *
 * @param {object} opts
 *   @param {string} editType:
 *     the editType for all pieces of this padding definition
 *
 * @return {object} attributes object containing {t, r, b, l} as specified
 */

var pad_attributes = function (opts) {
  var editType = opts.editType;
  return {
    t: {
      valType: 'number',
      dflt: 0,
      editType: editType,
      description: 'The amount of padding (in px) along the top of the component.'
    },
    r: {
      valType: 'number',
      dflt: 0,
      editType: editType,
      description: 'The amount of padding (in px) on the right side of the component.'
    },
    b: {
      valType: 'number',
      dflt: 0,
      editType: editType,
      description: 'The amount of padding (in px) along the bottom of the component.'
    },
    l: {
      valType: 'number',
      dflt: 0,
      editType: editType,
      description: 'The amount of padding (in px) on the left side of the component.'
    },
    editType: editType
  };
};

var extendFlat$a = extend.extendFlat;
var globalFont = font_attributes({
  editType: 'calc',
  description: ['Sets the global font.', 'Note that fonts used in traces and other', 'layout components inherit from the global font.'].join(' ')
});
globalFont.family.dflt = '"Open Sans", verdana, arial, sans-serif';
globalFont.size.dflt = 12;
globalFont.color.dflt = attributes$j.defaultLine;
var layout_attributes$2 = {
  font: globalFont,
  title: {
    text: {
      valType: 'string',
      editType: 'layoutstyle',
      description: ['Sets the plot\'s title.', 'Note that before the existence of `title.text`, the title\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')
    },
    font: font_attributes({
      editType: 'layoutstyle',
      description: ['Sets the title font.', 'Note that the title\'s font used to be customized', 'by the now deprecated `titlefont` attribute.'].join(' ')
    }),
    xref: {
      valType: 'enumerated',
      dflt: 'container',
      values: ['container', 'paper'],
      editType: 'layoutstyle',
      description: ['Sets the container `x` refers to.', '*container* spans the entire `width` of the plot.', '*paper* refers to the width of the plotting area only.'].join(' ')
    },
    yref: {
      valType: 'enumerated',
      dflt: 'container',
      values: ['container', 'paper'],
      editType: 'layoutstyle',
      description: ['Sets the container `y` refers to.', '*container* spans the entire `height` of the plot.', '*paper* refers to the height of the plotting area only.'].join(' ')
    },
    x: {
      valType: 'number',
      min: 0,
      max: 1,
      dflt: 0.5,
      editType: 'layoutstyle',
      description: ['Sets the x position with respect to `xref` in normalized', 'coordinates from *0* (left) to *1* (right).'].join(' ')
    },
    y: {
      valType: 'number',
      min: 0,
      max: 1,
      dflt: 'auto',
      editType: 'layoutstyle',
      description: ['Sets the y position with respect to `yref` in normalized', 'coordinates from *0* (bottom) to *1* (top).', '*auto* places the baseline of the title onto the', 'vertical center of the top margin.'].join(' ')
    },
    xanchor: {
      valType: 'enumerated',
      dflt: 'auto',
      values: ['auto', 'left', 'center', 'right'],
      editType: 'layoutstyle',
      description: ['Sets the title\'s horizontal alignment with respect to its x position.', '*left* means that the title starts at x,', '*right* means that the title ends at x', 'and *center* means that the title\'s center is at x.', '*auto* divides `xref` by three and calculates the `xanchor`', 'value automatically based on the value of `x`.'].join(' ')
    },
    yanchor: {
      valType: 'enumerated',
      dflt: 'auto',
      values: ['auto', 'top', 'middle', 'bottom'],
      editType: 'layoutstyle',
      description: ['Sets the title\'s vertical alignment with respect to its y position.', '*top* means that the title\'s cap line is at y,', '*bottom* means that the title\'s baseline is at y', 'and *middle* means that the title\'s midline is at y.', '*auto* divides `yref` by three and calculates the `yanchor`', 'value automatically based on the value of `y`.'].join(' ')
    },
    pad: extendFlat$a(pad_attributes({
      editType: 'layoutstyle'
    }), {
      description: ['Sets the padding of the title.', 'Each padding value only applies when the corresponding', '`xanchor`/`yanchor` value is set accordingly. E.g. for left', 'padding to take effect, `xanchor` must be set to *left*.', 'The same rule applies if `xanchor`/`yanchor` is determined automatically.', 'Padding is muted if the respective anchor value is *middle*/*center*.'].join(' ')
    }),
    editType: 'layoutstyle'
  },
  uniformtext: {
    mode: {
      valType: 'enumerated',
      values: [false, 'hide', 'show'],
      dflt: false,
      editType: 'plot',
      description: ['Determines how the font size for various text', 'elements are uniformed between each trace type.', 'If the computed text sizes were smaller than', 'the minimum size defined by `uniformtext.minsize`', 'using *hide* option hides the text; and', 'using *show* option shows the text without further downscaling.', 'Please note that if the size defined by `minsize` is greater than', 'the font size defined by trace, then the `minsize` is used.'].join(' ')
    },
    minsize: {
      valType: 'number',
      min: 0,
      dflt: 0,
      editType: 'plot',
      description: ['Sets the minimum text size between traces of the same type.'].join(' ')
    },
    editType: 'plot'
  },
  autosize: {
    valType: 'boolean',
    dflt: false,
    // autosize, width, and height get special editType treatment in _relayout
    // so we can handle noop resizes more efficiently
    editType: 'none',
    description: ['Determines whether or not a layout width or height', 'that has been left undefined by the user', 'is initialized on each relayout.', 'Note that, regardless of this attribute,', 'an undefined layout width or height', 'is always initialized on the first call to plot.'].join(' ')
  },
  width: {
    valType: 'number',
    min: 10,
    dflt: 700,
    editType: 'plot',
    description: ['Sets the plot\'s width (in px).'].join(' ')
  },
  height: {
    valType: 'number',
    min: 10,
    dflt: 450,
    editType: 'plot',
    description: ['Sets the plot\'s height (in px).'].join(' ')
  },
  margin: {
    l: {
      valType: 'number',
      min: 0,
      dflt: 80,
      editType: 'plot',
      description: 'Sets the left margin (in px).'
    },
    r: {
      valType: 'number',
      min: 0,
      dflt: 80,
      editType: 'plot',
      description: 'Sets the right margin (in px).'
    },
    t: {
      valType: 'number',
      min: 0,
      dflt: 100,
      editType: 'plot',
      description: 'Sets the top margin (in px).'
    },
    b: {
      valType: 'number',
      min: 0,
      dflt: 80,
      editType: 'plot',
      description: 'Sets the bottom margin (in px).'
    },
    pad: {
      valType: 'number',
      min: 0,
      dflt: 0,
      editType: 'plot',
      description: ['Sets the amount of padding (in px)', 'between the plotting area and the axis lines'].join(' ')
    },
    autoexpand: {
      valType: 'boolean',
      dflt: true,
      editType: 'plot',
      description: ['Turns on/off margin expansion computations.', 'Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider', 'are allowed to push the margins by defaults.'].join(' ')
    },
    editType: 'plot'
  },
  computed: {
    valType: 'any',
    editType: 'none',
    description: ['Placeholder for exporting automargin-impacting values namely', '`margin.t`, `margin.b`, `margin.l` and `margin.r` in *full-json* mode.'].join(' ')
  },
  paper_bgcolor: {
    valType: 'color',
    dflt: attributes$j.background,
    editType: 'plot',
    description: 'Sets the background color of the paper where the graph is drawn.'
  },
  plot_bgcolor: {
    // defined here, but set in cartesian.supplyLayoutDefaults
    // because it needs to know if there are (2D) axes or not
    valType: 'color',
    dflt: attributes$j.background,
    editType: 'layoutstyle',
    description: ['Sets the background color of the plotting area in-between x and y axes.'].join(' ')
  },
  autotypenumbers: {
    valType: 'enumerated',
    values: ['convert types', 'strict'],
    dflt: 'convert types',
    editType: 'calc',
    description: ['Using *strict* a numeric string in trace data is not converted to a number.', 'Using *convert types* a numeric string in trace data may be', 'treated as a number during automatic axis `type` detection.', 'This is the default value; however it could be overridden for individual axes.'].join(' ')
  },
  separators: {
    valType: 'string',
    editType: 'plot',
    description: ['Sets the decimal and thousand separators.', 'For example, *. * puts a \'.\' before decimals and a space', 'between thousands. In English locales, dflt is *.,* but', 'other locales may alter this default.'].join(' ')
  },
  hidesources: {
    valType: 'boolean',
    dflt: false,
    editType: 'plot',
    description: ['Determines whether or not a text link citing the data source is', 'placed at the bottom-right cored of the figure.', 'Has only an effect only on graphs that have been generated via', 'forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).'].join(' ')
  },
  showlegend: {
    // handled in legend.supplyLayoutDefaults
    // but included here because it's not in the legend object
    valType: 'boolean',
    editType: 'legend',
    description: ['Determines whether or not a legend is drawn.', 'Default is `true` if there is a trace to show and any of these:', 'a) Two or more traces would by default be shown in the legend.', 'b) One pie trace is shown in the legend.', 'c) One trace is explicitly given with `showlegend: true`.'].join(' ')
  },
  colorway: {
    valType: 'colorlist',
    dflt: attributes$j.defaults,
    editType: 'calc',
    description: 'Sets the default trace colors.'
  },
  datarevision: {
    valType: 'any',
    editType: 'calc',
    description: ['If provided, a changed value tells `Plotly.react` that', 'one or more data arrays has changed. This way you can modify', 'arrays in-place rather than making a complete new copy for an', 'incremental change.', 'If NOT provided, `Plotly.react` assumes that data arrays are', 'being treated as immutable, thus any data array with a', 'different identity from its predecessor contains new data.'].join(' ')
  },
  uirevision: {
    valType: 'any',
    editType: 'none',
    description: ['Used to allow user interactions with the plot to persist after', '`Plotly.react` calls that are unaware of these interactions.', 'If `uirevision` is omitted, or if it is given and it changed from', 'the previous `Plotly.react` call, the exact new figure is used.', 'If `uirevision` is truthy and did NOT change, any attribute', 'that has been affected by user interactions and did not receive a', 'different value in the new figure will keep the interaction value.', '`layout.uirevision` attribute serves as the default for', '`uirevision` attributes in various sub-containers. For finer', 'control you can set these sub-attributes directly. For example,', 'if your app separately controls the data on the x and y axes you', 'might set `xaxis.uirevision=*time*` and `yaxis.uirevision=*cost*`.', 'Then if only the y data is changed, you can update', '`yaxis.uirevision=*quantity*` and the y axis range will reset but', 'the x axis range will retain any user-driven zoom.'].join(' ')
  },
  editrevision: {
    valType: 'any',
    editType: 'none',
    description: ['Controls persistence of user-driven changes in `editable: true`', 'configuration, other than trace names and axis titles.', 'Defaults to `layout.uirevision`.'].join(' ')
  },
  selectionrevision: {
    valType: 'any',
    editType: 'none',
    description: ['Controls persistence of user-driven changes in selected points', 'from all traces.'].join(' ')
  },
  template: {
    valType: 'any',
    editType: 'calc',
    description: ['Default attributes to be applied to the plot. Templates can be', 'created from existing plots using `Plotly.makeTemplate`, or', 'created manually. They should be objects with format:', '`{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}`', '`layoutTemplate` and `traceTemplate` are objects matching the', 'attribute structure of `layout` and a data trace. ', 'Trace templates are applied cyclically to traces of each type.', 'Container arrays (eg `annotations`) have special handling:', 'An object ending in `defaults` (eg `annotationdefaults`) is applied', 'to each array item. But if an item has a `templateitemname` key', 'we look in the template array for an item with matching `name` and', 'apply that instead. If no matching `name` is found we mark the item', 'invisible. Any named template item not referenced is appended to', 'the end of the array, so you can use this for a watermark annotation', 'or a logo image, for example. To omit one of these items on the plot,', 'make an item with matching `templateitemname` and `visible: false`.'].join(' ')
  },
  newshape: attributes$h.newshape,
  activeshape: attributes$h.activeshape,
  meta: {
    valType: 'any',
    arrayOk: true,
    editType: 'plot',
    description: ['Assigns extra meta information that can be used in various `text` attributes.', 'Attributes such as the graph, axis and colorbar `title.text`, annotation `text`', '`trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text', 'all support `meta`. One can access `meta` fields using template strings:', '`%{meta[i]}` where `i` is the index of the `meta`', 'item in question.', '`meta` can also be an object for example `{key: value}` which can be accessed', '%{meta[key]}.'].join(' ')
  },
  transition: extendFlat$a({}, animation_attributes.transition, {
    description: ['Sets transition options used during Plotly.react updates.'].join(' '),
    editType: 'none'
  }),
  _deprecated: {
    title: {
      valType: 'string',
      editType: 'layoutstyle',
      description: ['Value of `title` is no longer a simple *string* but a set of sub-attributes.', 'To set the contents of the title, please use `title.text` now.'].join(' ')
    },
    titlefont: font_attributes({
      editType: 'layoutstyle',
      description: ['Former `titlefont` is now the sub-attribute `font` of `title`.', 'To customize title font properties, please use `title.font` now.'].join(' ')
    })
  }
};

var registry = createCommonjsModule(function (module, exports) {

  var addStyleRule = dom.addStyleRule;
  var extendFlat = extend.extendFlat;
  var extendDeepAll = extend.extendDeepAll;
  exports.modules = {};
  exports.allCategories = {};
  exports.allTypes = [];
  exports.subplotsRegistry = {};
  exports.transformsRegistry = {};
  exports.componentsRegistry = {};
  exports.layoutArrayContainers = [];
  exports.layoutArrayRegexes = [];
  exports.traceLayoutAttributes = {};
  exports.localeRegistry = {};
  exports.apiMethodRegistry = {};
  exports.collectableSubplotTypes = null;
  /**
   * Top-level register routine, exported as Plotly.register
   *
   * @param {object array or array of objects} _modules :
   *  module object or list of module object to register.
   *
   *  A valid `moduleType: 'trace'` module has fields:
   *  - name {string} : the trace type
   *  - categories {array} : categories associated with this trace type,
   *                         tested with Register.traceIs()
   *  - meta {object} : meta info (mostly for plot-schema)
   *
   *  A valid `moduleType: 'locale'` module has fields:
   *  - name {string} : the locale name. Should be a 2-digit language string ('en', 'de')
   *                    optionally with a country/region code ('en-GB', 'de-CH'). If a country
   *                    code is used but the base language locale has not yet been supplied,
   *                    we will use this locale for the base as well.
   *  - dictionary {object} : the dictionary mapping input strings to localized strings
   *                          generally the keys should be the literal input strings, but
   *                          if default translations are provided you can use any string as a key.
   *  - format {object} : a `d3.locale` format specifier for this locale
   *                      any omitted keys we'll fall back on en-US.
   *
   *  A valid `moduleType: 'transform'` module has fields:
   *  - name {string} : transform name
   *  - transform {function} : default-level transform function
   *  - calcTransform {function} : calc-level transform function
   *  - attributes {object} : transform attributes declarations
   *  - supplyDefaults {function} : attributes default-supply function
   *
   *  A valid `moduleType: 'component'` module has fields:
   *  - name {string} : the component name, used it with Register.getComponentMethod()
   *                    to employ component method.
   *
   *  A valid `moduleType: 'apiMethod'` module has fields:
   *  - name {string} : the api method name.
   *  - fn {function} : the api method called with Register.call();
   *
   */

  exports.register = function register(_modules) {
    exports.collectableSubplotTypes = null;

    if (!_modules) {
      throw new Error('No argument passed to Plotly.register.');
    } else if (_modules && !Array.isArray(_modules)) {
      _modules = [_modules];
    }

    for (var i = 0; i < _modules.length; i++) {
      var newModule = _modules[i];

      if (!newModule) {
        throw new Error('Invalid module was attempted to be registered!');
      }

      switch (newModule.moduleType) {
        case 'trace':
          registerTraceModule(newModule);
          break;

        case 'transform':
          registerTransformModule(newModule);
          break;

        case 'component':
          registerComponentModule(newModule);
          break;

        case 'locale':
          registerLocale(newModule);
          break;

        case 'apiMethod':
          var name = newModule.name;
          exports.apiMethodRegistry[name] = newModule.fn;
          break;

        default:
          throw new Error('Invalid module was attempted to be registered!');
      }
    }
  };
  /**
   * Get registered module using trace object or trace type
   *
   * @param {object||string} trace
   *  trace object with prop 'type' or trace type as a string
   * @return {object}
   *  module object corresponding to trace type
   */


  exports.getModule = function (trace) {
    var _module = exports.modules[getTraceType(trace)];
    if (!_module) return false;
    return _module._module;
  };
  /**
   * Determine if this trace type is in a given category
   *
   * @param {object||string} traceType
   *  a trace (object) or trace type (string)
   * @param {string} category
   *  category in question
   * @return {boolean}
   */


  exports.traceIs = function (traceType, category) {
    traceType = getTraceType(traceType); // old Chart Studio Cloud workspace hack, nothing to see here

    if (traceType === 'various') return false;
    var _module = exports.modules[traceType];

    if (!_module) {
      if (traceType) {
        loggers_1.log('Unrecognized trace type ' + traceType + '.');
      }

      _module = exports.modules[attributes$k.type.dflt];
    }

    return !!_module.categories[category];
  };
  /**
   * Determine if this trace has a transform of the given type and return
   * array of matching indices.
   *
   * @param {object} data
   *  a trace object (member of data or fullData)
   * @param {string} type
   *  type of trace to test
   * @return {array}
   *  array of matching indices. If none found, returns []
   */


  exports.getTransformIndices = function (data, type) {
    var indices = [];
    var transforms = data.transforms || [];

    for (var i = 0; i < transforms.length; i++) {
      if (transforms[i].type === type) {
        indices.push(i);
      }
    }

    return indices;
  };
  /**
   * Determine if this trace has a transform of the given type
   *
   * @param {object} data
   *  a trace object (member of data or fullData)
   * @param {string} type
   *  type of trace to test
   * @return {boolean}
   */


  exports.hasTransform = function (data, type) {
    var transforms = data.transforms || [];

    for (var i = 0; i < transforms.length; i++) {
      if (transforms[i].type === type) {
        return true;
      }
    }

    return false;
  };
  /**
   * Retrieve component module method. Falls back on noop if either the
   * module or the method is missing, so the result can always be safely called
   *
   * @param {string} name
   *  name of component (as declared in component module)
   * @param {string} method
   *  name of component module method
   * @return {function}
   */


  exports.getComponentMethod = function (name, method) {
    var _module = exports.componentsRegistry[name];
    if (!_module) return noop;
    return _module[method] || noop;
  };
  /**
   * Call registered api method.
   *
   * @param {string} name : api method name
   * @param {...array} args : arguments passed to api method
   * @return {any} : returns api method output
   */


  exports.call = function () {
    var name = arguments[0];
    var args = [].slice.call(arguments, 1);
    return exports.apiMethodRegistry[name].apply(null, args);
  };

  function registerTraceModule(_module) {
    var thisType = _module.name;
    var categoriesIn = _module.categories;
    var meta = _module.meta;

    if (exports.modules[thisType]) {
      loggers_1.log('Type ' + thisType + ' already registered');
      return;
    }

    if (!exports.subplotsRegistry[_module.basePlotModule.name]) {
      registerSubplot(_module.basePlotModule);
    }

    var categoryObj = {};

    for (var i = 0; i < categoriesIn.length; i++) {
      categoryObj[categoriesIn[i]] = true;
      exports.allCategories[categoriesIn[i]] = true;
    }

    exports.modules[thisType] = {
      _module: _module,
      categories: categoryObj
    };

    if (meta && Object.keys(meta).length) {
      exports.modules[thisType].meta = meta;
    }

    exports.allTypes.push(thisType);

    for (var componentName in exports.componentsRegistry) {
      mergeComponentAttrsToTrace(componentName, thisType);
    }
    /*
     * Collect all trace layout attributes in one place for easier lookup later
     * but don't merge them into the base schema as it would confuse the docs
     * (at least after https://github.com/plotly/documentation/issues/202 gets done!)
     */


    if (_module.layoutAttributes) {
      extendFlat(exports.traceLayoutAttributes, _module.layoutAttributes);
    }

    var basePlotModule = _module.basePlotModule;
    var bpmName = basePlotModule.name; // add mapbox-gl CSS here to avoid console warning on instantiation

    if (bpmName === 'mapbox') {
      var styleRules = basePlotModule.constants.styleRules;

      for (var k in styleRules) {
        addStyleRule('.js-plotly-plot .plotly .mapboxgl-' + k, styleRules[k]);
      }
    } // if `plotly-geo-assets.js` is not included,
    // add `PlotlyGeoAssets` global to stash references to all fetched
    // topojson / geojson data


    if ((bpmName === 'geo' || bpmName === 'mapbox') && typeof window !== undefined && window.PlotlyGeoAssets === undefined) {
      window.PlotlyGeoAssets = {
        topojson: {}
      };
    }
  }

  function registerSubplot(_module) {
    var plotType = _module.name;

    if (exports.subplotsRegistry[plotType]) {
      loggers_1.log('Plot type ' + plotType + ' already registered.');
      return;
    } // relayout array handling will look for component module methods with this
    // name and won't find them because this is a subplot module... but that
    // should be fine, it will just fall back on redrawing the plot.


    findArrayRegexps(_module); // not sure what's best for the 'cartesian' type at this point

    exports.subplotsRegistry[plotType] = _module;

    for (var componentName in exports.componentsRegistry) {
      mergeComponentAttrsToSubplot(componentName, _module.name);
    }
  }

  function registerComponentModule(_module) {
    if (typeof _module.name !== 'string') {
      throw new Error('Component module *name* must be a string.');
    }

    var name = _module.name;
    exports.componentsRegistry[name] = _module;

    if (_module.layoutAttributes) {
      if (_module.layoutAttributes._isLinkedToArray) {
        push_unique(exports.layoutArrayContainers, name);
      }

      findArrayRegexps(_module);
    }

    for (var traceType in exports.modules) {
      mergeComponentAttrsToTrace(name, traceType);
    }

    for (var subplotName in exports.subplotsRegistry) {
      mergeComponentAttrsToSubplot(name, subplotName);
    }

    for (var transformType in exports.transformsRegistry) {
      mergeComponentAttrsToTransform(name, transformType);
    }

    if (_module.schema && _module.schema.layout) {
      extendDeepAll(layout_attributes$2, _module.schema.layout);
    }
  }

  function registerTransformModule(_module) {
    if (typeof _module.name !== 'string') {
      throw new Error('Transform module *name* must be a string.');
    }

    var prefix = 'Transform module ' + _module.name;
    var hasTransform = typeof _module.transform === 'function';
    var hasCalcTransform = typeof _module.calcTransform === 'function';

    if (!hasTransform && !hasCalcTransform) {
      throw new Error(prefix + ' is missing a *transform* or *calcTransform* method.');
    }

    if (hasTransform && hasCalcTransform) {
      loggers_1.log([prefix + ' has both a *transform* and *calcTransform* methods.', 'Please note that all *transform* methods are executed', 'before all *calcTransform* methods.'].join(' '));
    }

    if (!is_plain_object(_module.attributes)) {
      loggers_1.log(prefix + ' registered without an *attributes* object.');
    }

    if (typeof _module.supplyDefaults !== 'function') {
      loggers_1.log(prefix + ' registered without a *supplyDefaults* method.');
    }

    exports.transformsRegistry[_module.name] = _module;

    for (var componentName in exports.componentsRegistry) {
      mergeComponentAttrsToTransform(componentName, _module.name);
    }
  }

  function registerLocale(_module) {
    var locale = _module.name;
    var baseLocale = locale.split('-')[0];
    var newDict = _module.dictionary;
    var newFormat = _module.format;
    var hasDict = newDict && Object.keys(newDict).length;
    var hasFormat = newFormat && Object.keys(newFormat).length;
    var locales = exports.localeRegistry;
    var localeObj = locales[locale];
    if (!localeObj) locales[locale] = localeObj = {}; // Should we use this dict for the base locale?
    // In case we're overwriting a previous dict for this locale, check
    // whether the base matches the full locale dict now. If we're not
    // overwriting, locales[locale] is undefined so this just checks if
    // baseLocale already had a dict or not.
    // Same logic for dateFormats

    if (baseLocale !== locale) {
      var baseLocaleObj = locales[baseLocale];
      if (!baseLocaleObj) locales[baseLocale] = baseLocaleObj = {};

      if (hasDict && baseLocaleObj.dictionary === localeObj.dictionary) {
        baseLocaleObj.dictionary = newDict;
      }

      if (hasFormat && baseLocaleObj.format === localeObj.format) {
        baseLocaleObj.format = newFormat;
      }
    }

    if (hasDict) localeObj.dictionary = newDict;
    if (hasFormat) localeObj.format = newFormat;
  }

  function findArrayRegexps(_module) {
    if (_module.layoutAttributes) {
      var arrayAttrRegexps = _module.layoutAttributes._arrayAttrRegexps;

      if (arrayAttrRegexps) {
        for (var i = 0; i < arrayAttrRegexps.length; i++) {
          push_unique(exports.layoutArrayRegexes, arrayAttrRegexps[i]);
        }
      }
    }
  }

  function mergeComponentAttrsToTrace(componentName, traceType) {
    var componentSchema = exports.componentsRegistry[componentName].schema;
    if (!componentSchema || !componentSchema.traces) return;
    var traceAttrs = componentSchema.traces[traceType];

    if (traceAttrs) {
      extendDeepAll(exports.modules[traceType]._module.attributes, traceAttrs);
    }
  }

  function mergeComponentAttrsToTransform(componentName, transformType) {
    var componentSchema = exports.componentsRegistry[componentName].schema;
    if (!componentSchema || !componentSchema.transforms) return;
    var transformAttrs = componentSchema.transforms[transformType];

    if (transformAttrs) {
      extendDeepAll(exports.transformsRegistry[transformType].attributes, transformAttrs);
    }
  }

  function mergeComponentAttrsToSubplot(componentName, subplotName) {
    var componentSchema = exports.componentsRegistry[componentName].schema;
    if (!componentSchema || !componentSchema.subplots) return;
    var subplotModule = exports.subplotsRegistry[subplotName];
    var subplotAttrs = subplotModule.layoutAttributes;
    var subplotAttr = subplotModule.attr === 'subplot' ? subplotModule.name : subplotModule.attr;
    if (Array.isArray(subplotAttr)) subplotAttr = subplotAttr[0];
    var componentLayoutAttrs = componentSchema.subplots[subplotAttr];

    if (subplotAttrs && componentLayoutAttrs) {
      extendDeepAll(subplotAttrs, componentLayoutAttrs);
    }
  }

  function getTraceType(traceType) {
    if (typeof traceType === 'object') traceType = traceType.type;
    return traceType;
  }
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(src$1);

var dates = createCommonjsModule(function (module, exports) {

  var timeFormat = require$$0.timeFormat;
  var mod = mod_1.mod;
  var BADNUM = numerical.BADNUM;
  var ONEDAY = numerical.ONEDAY;
  var ONEHOUR = numerical.ONEHOUR;
  var ONEMIN = numerical.ONEMIN;
  var ONESEC = numerical.ONESEC;
  var EPOCHJD = numerical.EPOCHJD;
  var utcFormat = require$$0.utcFormat;
  var DATETIME_REGEXP = /^\s*(-?\d\d\d\d|\d\d)(-(\d?\d)(-(\d?\d)([ Tt]([01]?\d|2[0-3])(:([0-5]\d)(:([0-5]\d(\.\d+)?))?(Z|z|[+\-]\d\d(:?\d\d)?)?)?)?)?)?\s*$/m; // special regex for chinese calendars to support yyyy-mmi-dd etc for intercalary months

  var DATETIME_REGEXP_CN = /^\s*(-?\d\d\d\d|\d\d)(-(\d?\di?)(-(\d?\d)([ Tt]([01]?\d|2[0-3])(:([0-5]\d)(:([0-5]\d(\.\d+)?))?(Z|z|[+\-]\d\d(:?\d\d)?)?)?)?)?)?\s*$/m; // for 2-digit years, the first year we map them onto

  var YFIRST = new Date().getFullYear() - 70;

  function isWorldCalendar(calendar) {
    return calendar && registry.componentsRegistry.calendars && typeof calendar === 'string' && calendar !== 'gregorian';
  }
  /*
   * dateTick0: get the canonical tick for this calendar
   *
   * integer weekdays : Saturday: 0, Sunday: 1, Monday: 2, etc.
   */


  exports.dateTick0 = function (calendar, dayOfWeek) {
    var tick0 = _dateTick0(calendar, !!dayOfWeek);

    if (dayOfWeek < 2) return tick0;
    var v = exports.dateTime2ms(tick0, calendar);
    v += ONEDAY * (dayOfWeek - 1); // shift Sunday to Monday, etc.

    return exports.ms2DateTime(v, 0, calendar);
  };
  /*
   * _dateTick0: get the canonical tick for this calendar
   *
   * bool sunday is for week ticks, shift it to a Sunday.
   */


  function _dateTick0(calendar, sunday) {
    if (isWorldCalendar(calendar)) {
      return sunday ? registry.getComponentMethod('calendars', 'CANONICAL_SUNDAY')[calendar] : registry.getComponentMethod('calendars', 'CANONICAL_TICK')[calendar];
    } else {
      return sunday ? '2000-01-02' : '2000-01-01';
    }
  }
  /*
   * dfltRange: for each calendar, give a valid default range
   */


  exports.dfltRange = function (calendar) {
    if (isWorldCalendar(calendar)) {
      return registry.getComponentMethod('calendars', 'DFLTRANGE')[calendar];
    } else {
      return ['2000-01-01', '2001-01-01'];
    }
  }; // is an object a javascript date?


  exports.isJSDate = function (v) {
    return typeof v === 'object' && v !== null && typeof v.getTime === 'function';
  }; // The absolute limits of our date-time system
  // This is a little weird: we use MIN_MS and MAX_MS in dateTime2ms
  // but we use dateTime2ms to calculate them (after defining it!)


  var MIN_MS, MAX_MS;
  /**
   * dateTime2ms - turn a date object or string s into milliseconds
   * (relative to 1970-01-01, per javascript standard)
   * optional calendar (string) to use a non-gregorian calendar
   *
   * Returns BADNUM if it doesn't find a date
   *
   * strings should have the form:
   *
   *    -?YYYY-mm-dd<sep>HH:MM:SS.sss<tzInfo>?
   *
   * <sep>: space (our normal standard) or T or t (ISO-8601)
   * <tzInfo>: Z, z, [+\-]HH:?MM or [+\-]HH and we THROW IT AWAY
   * this format comes from https://tools.ietf.org/html/rfc3339#section-5.6
   * and 4.2.5.1 Difference between local time and UTC of day (ISO-8601)
   * but we allow it even with a space as the separator
   *
   * May truncate after any full field, and sss can be any length
   * even >3 digits, though javascript dates truncate to milliseconds,
   * we keep as much as javascript numeric precision can hold, but we only
   * report back up to 100 microsecond precision, because most dates support
   * this precision (close to 1970 support more, very far away support less)
   *
   * Expanded to support negative years to -9999 but you must always
   * give 4 digits, except for 2-digit positive years which we assume are
   * near the present time.
   * Note that we follow ISO 8601:2004: there *is* a year 0, which
   * is 1BC/BCE, and -1===2BC etc.
   *
   * World calendars: not all of these *have* agreed extensions to this full range,
   * if you have another calendar system but want a date range outside its validity,
   * you can use a gregorian date string prefixed with 'G' or 'g'.
   *
   * Where to cut off 2-digit years between 1900s and 2000s?
   * from https://docs.microsoft.com/en-us/office/troubleshoot/excel/two-digit-year-numbers#the-2029-rule:
   *   1930-2029 (the most retro of all...)
   * but in my mac chrome from eg. d=new Date(Date.parse('8/19/50')):
   *   1950-2049
   * by Java, from http://stackoverflow.com/questions/2024273/:
   *   now-80 - now+19
   * or FileMaker Pro, from
   *      https://fmhelp.filemaker.com/help/18/fmp/en/index.html#page/FMP_Help/dates-with-two-digit-years.html:
   *   now-70 - now+29
   * but python strptime etc, via
   *      http://docs.python.org/py3k/library/time.html:
   *   1969-2068 (super forward-looking, but static, not sliding!)
   *
   * lets go with now-70 to now+29, and if anyone runs into this problem
   * they can learn the hard way not to use 2-digit years, as no choice we
   * make now will cover all possibilities. mostly this will all be taken
   * care of in initial parsing, should only be an issue for hand-entered data
   * currently (2016) this range is:
   *   1946-2045
   */

  exports.dateTime2ms = function (s, calendar) {
    // first check if s is a date object
    if (exports.isJSDate(s)) {
      // Convert to the UTC milliseconds that give the same
      // hours as this date has in the local timezone
      var tzOffset = s.getTimezoneOffset() * ONEMIN;
      var offsetTweak = (s.getUTCMinutes() - s.getMinutes()) * ONEMIN + (s.getUTCSeconds() - s.getSeconds()) * ONESEC + (s.getUTCMilliseconds() - s.getMilliseconds());

      if (offsetTweak) {
        var comb = 3 * ONEMIN;
        tzOffset = tzOffset - comb / 2 + mod(offsetTweak - tzOffset + comb / 2, comb);
      }

      s = Number(s) - tzOffset;
      if (s >= MIN_MS && s <= MAX_MS) return s;
      return BADNUM;
    } // otherwise only accept strings and numbers


    if (typeof s !== 'string' && typeof s !== 'number') return BADNUM;
    s = String(s);
    var isWorld = isWorldCalendar(calendar); // to handle out-of-range dates in international calendars, accept
    // 'G' as a prefix to force the built-in gregorian calendar.

    var s0 = s.charAt(0);

    if (isWorld && (s0 === 'G' || s0 === 'g')) {
      s = s.substr(1);
      calendar = '';
    }

    var isChinese = isWorld && calendar.substr(0, 7) === 'chinese';
    var match = s.match(isChinese ? DATETIME_REGEXP_CN : DATETIME_REGEXP);
    if (!match) return BADNUM;
    var y = match[1];
    var m = match[3] || '1';
    var d = Number(match[5] || 1);
    var H = Number(match[7] || 0);
    var M = Number(match[9] || 0);
    var S = Number(match[11] || 0);

    if (isWorld) {
      // disallow 2-digit years for world calendars
      if (y.length === 2) return BADNUM;
      y = Number(y);
      var cDate;

      try {
        var calInstance = registry.getComponentMethod('calendars', 'getCal')(calendar);

        if (isChinese) {
          var isIntercalary = m.charAt(m.length - 1) === 'i';
          m = parseInt(m, 10);
          cDate = calInstance.newDate(y, calInstance.toMonthIndex(y, m, isIntercalary), d);
        } else {
          cDate = calInstance.newDate(y, Number(m), d);
        }
      } catch (e) {
        return BADNUM;
      } // Invalid ... date


      if (!cDate) return BADNUM;
      return (cDate.toJD() - EPOCHJD) * ONEDAY + H * ONEHOUR + M * ONEMIN + S * ONESEC;
    }

    if (y.length === 2) {
      y = (Number(y) + 2000 - YFIRST) % 100 + YFIRST;
    } else y = Number(y); // new Date uses months from 0; subtract 1 here just so we
    // don't have to do it again during the validity test below


    m -= 1; // javascript takes new Date(0..99,m,d) to mean 1900-1999, so
    // to support years 0-99 we need to use setFullYear explicitly
    // Note that 2000 is a leap year.

    var date = new Date(Date.UTC(2000, m, d, H, M));
    date.setUTCFullYear(y);
    if (date.getUTCMonth() !== m) return BADNUM;
    if (date.getUTCDate() !== d) return BADNUM;
    return date.getTime() + S * ONESEC;
  };

  MIN_MS = exports.MIN_MS = exports.dateTime2ms('-9999');
  MAX_MS = exports.MAX_MS = exports.dateTime2ms('9999-12-31 23:59:59.9999'); // is string s a date? (see above)

  exports.isDateTime = function (s, calendar) {
    return exports.dateTime2ms(s, calendar) !== BADNUM;
  }; // pad a number with zeroes, to given # of digits before the decimal point


  function lpad(val, digits) {
    return String(val + Math.pow(10, digits)).substr(1);
  }
  /**
   * Turn ms into string of the form YYYY-mm-dd HH:MM:SS.ssss
   * Crop any trailing zeros in time, except never stop right after hours
   * (we could choose to crop '-01' from date too but for now we always
   * show the whole date)
   * Optional range r is the data range that applies, also in ms.
   * If rng is big, the later parts of time will be omitted
   */


  var NINETYDAYS = 90 * ONEDAY;
  var THREEHOURS = 3 * ONEHOUR;
  var FIVEMIN = 5 * ONEMIN;

  exports.ms2DateTime = function (ms, r, calendar) {
    if (typeof ms !== 'number' || !(ms >= MIN_MS && ms <= MAX_MS)) return BADNUM;
    if (!r) r = 0;
    var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);
    var msRounded = Math.round(ms - msecTenths / 10);
    var dateStr, h, m, s, msec10, d;

    if (isWorldCalendar(calendar)) {
      var dateJD = Math.floor(msRounded / ONEDAY) + EPOCHJD;
      var timeMs = Math.floor(mod(ms, ONEDAY));

      try {
        dateStr = registry.getComponentMethod('calendars', 'getCal')(calendar).fromJD(dateJD).formatDate('yyyy-mm-dd');
      } catch (e) {
        // invalid date in this calendar - fall back to Gyyyy-mm-dd
        dateStr = utcFormat('G%Y-%m-%d')(new Date(msRounded));
      } // yyyy does NOT guarantee 4-digit years. YYYY mostly does, but does
      // other things for a few calendars, so we can't trust it. Just pad
      // it manually (after the '-' if there is one)


      if (dateStr.charAt(0) === '-') {
        while (dateStr.length < 11) dateStr = '-0' + dateStr.substr(1);
      } else {
        while (dateStr.length < 10) dateStr = '0' + dateStr;
      } // TODO: if this is faster, we could use this block for extracting
      // the time components of regular gregorian too


      h = r < NINETYDAYS ? Math.floor(timeMs / ONEHOUR) : 0;
      m = r < NINETYDAYS ? Math.floor(timeMs % ONEHOUR / ONEMIN) : 0;
      s = r < THREEHOURS ? Math.floor(timeMs % ONEMIN / ONESEC) : 0;
      msec10 = r < FIVEMIN ? timeMs % ONESEC * 10 + msecTenths : 0;
    } else {
      d = new Date(msRounded);
      dateStr = utcFormat('%Y-%m-%d')(d); // <90 days: add hours and minutes - never *only* add hours

      h = r < NINETYDAYS ? d.getUTCHours() : 0;
      m = r < NINETYDAYS ? d.getUTCMinutes() : 0; // <3 hours: add seconds

      s = r < THREEHOURS ? d.getUTCSeconds() : 0; // <5 minutes: add ms (plus one extra digit, this is msec*10)

      msec10 = r < FIVEMIN ? d.getUTCMilliseconds() * 10 + msecTenths : 0;
    }

    return includeTime(dateStr, h, m, s, msec10);
  }; // For converting old-style milliseconds to date strings,
  // we use the local timezone rather than UTC like we use
  // everywhere else, both for backward compatibility and
  // because that's how people mostly use javasript date objects.
  // Clip one extra day off our date range though so we can't get
  // thrown beyond the range by the timezone shift.


  exports.ms2DateTimeLocal = function (ms) {
    if (!(ms >= MIN_MS + ONEDAY && ms <= MAX_MS - ONEDAY)) return BADNUM;
    var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);
    var d = new Date(Math.round(ms - msecTenths / 10));
    var dateStr = timeFormat('%Y-%m-%d')(d);
    var h = d.getHours();
    var m = d.getMinutes();
    var s = d.getSeconds();
    var msec10 = d.getUTCMilliseconds() * 10 + msecTenths;
    return includeTime(dateStr, h, m, s, msec10);
  };

  function includeTime(dateStr, h, m, s, msec10) {
    // include each part that has nonzero data in or after it
    if (h || m || s || msec10) {
      dateStr += ' ' + lpad(h, 2) + ':' + lpad(m, 2);

      if (s || msec10) {
        dateStr += ':' + lpad(s, 2);

        if (msec10) {
          var digits = 4;

          while (msec10 % 10 === 0) {
            digits -= 1;
            msec10 /= 10;
          }

          dateStr += '.' + lpad(msec10, digits);
        }
      }
    }

    return dateStr;
  } // normalize date format to date string, in case it starts as
  // a Date object or milliseconds
  // optional dflt is the return value if cleaning fails


  exports.cleanDate = function (v, dflt, calendar) {
    // let us use cleanDate to provide a missing default without an error
    if (v === BADNUM) return dflt;

    if (exports.isJSDate(v) || typeof v === 'number' && isFinite(v)) {
      // do not allow milliseconds (old) or jsdate objects (inherently
      // described as gregorian dates) with world calendars
      if (isWorldCalendar(calendar)) {
        loggers_1.error('JS Dates and milliseconds are incompatible with world calendars', v);
        return dflt;
      } // NOTE: if someone puts in a year as a number rather than a string,
      // this will mistakenly convert it thinking it's milliseconds from 1970
      // that is: '2012' -> Jan. 1, 2012, but 2012 -> 2012 epoch milliseconds


      v = exports.ms2DateTimeLocal(+v);
      if (!v && dflt !== undefined) return dflt;
    } else if (!exports.isDateTime(v, calendar)) {
      loggers_1.error('unrecognized date', v);
      return dflt;
    }

    return v;
  };
  /*
   *  Date formatting for ticks and hovertext
   */

  /*
   * modDateFormat: Support world calendars, and add two items to
   * d3's vocabulary:
   * %{n}f where n is the max number of digits of fractional seconds
   * %h formats: half of the year as a decimal number [1,2]
   */


  var fracMatch = /%\d?f/g;
  var halfYearMatch = /%h/g;
  var quarterToHalfYear = {
    '1': '1',
    '2': '1',
    '3': '2',
    '4': '2'
  };

  function modDateFormat(fmt, x, formatter, calendar) {
    fmt = fmt.replace(fracMatch, function (match) {
      var digits = Math.min(+match.charAt(1) || 6, 6);
      var fracSecs = (x / 1000 % 1 + 2).toFixed(digits).substr(2).replace(/0+$/, '') || '0';
      return fracSecs;
    });
    var d = new Date(Math.floor(x + 0.05));
    fmt = fmt.replace(halfYearMatch, function () {
      return quarterToHalfYear[formatter('%q')(d)];
    });

    if (isWorldCalendar(calendar)) {
      try {
        fmt = registry.getComponentMethod('calendars', 'worldCalFmt')(fmt, x, calendar);
      } catch (e) {
        return 'Invalid';
      }
    }

    return formatter(fmt)(d);
  }
  /*
   * formatTime: create a time string from:
   *   x: milliseconds
   *   tr: tickround ('M', 'S', or # digits)
   * only supports UTC times (where every day is 24 hours and 0 is at midnight)
   */


  var MAXSECONDS = [59, 59.9, 59.99, 59.999, 59.9999];

  function formatTime(x, tr) {
    var timePart = mod(x + 0.05, ONEDAY);
    var timeStr = lpad(Math.floor(timePart / ONEHOUR), 2) + ':' + lpad(mod(Math.floor(timePart / ONEMIN), 60), 2);

    if (tr !== 'M') {
      if (!fastIsnumeric(tr)) tr = 0; // should only be 'S'

      /*
       * this is a weird one - and shouldn't come up unless people
       * monkey with tick0 in weird ways, but we need to do something!
       * IN PARTICULAR we had better not display garbage (see below)
       * for numbers we always round to the nearest increment of the
       * precision we're showing, and this seems like the right way to
       * handle seconds and milliseconds, as they have a decimal point
       * and people will interpret that to mean rounding like numbers.
       * but for larger increments we floor the value: it's always
       * 2013 until the ball drops on the new year. We could argue about
       * which field it is where we start rounding (should 12:08:59
       * round to 12:09 if we're stopping at minutes?) but for now I'll
       * say we round seconds but floor everything else. BUT that means
       * we need to never round up to 60 seconds, ie 23:59:60
       */

      var sec = Math.min(mod(x / ONESEC, 60), MAXSECONDS[tr]);
      var secStr = (100 + sec).toFixed(tr).substr(1);

      if (tr > 0) {
        secStr = secStr.replace(/0+$/, '').replace(/[\.]$/, '');
      }

      timeStr += ':' + secStr;
    }

    return timeStr;
  }
  /*
   * formatDate: turn a date into tick or hover label text.
   *
   *   x: milliseconds, the value to convert
   *   fmt: optional, an explicit format string (d3 format, even for world calendars)
   *   tr: tickround ('y', 'm', 'd', 'M', 'S', or # digits)
   *      used if no explicit fmt is provided
   *   formatter: locale-aware d3 date formatter for standard gregorian calendars
   *      should be the result of exports.getD3DateFormat(gd)
   *   calendar: optional string, the world calendar system to use
   *
   * returns the date/time as a string, potentially with the leading portion
   * on a separate line (after '\n')
   * Note that this means if you provide an explicit format which includes '\n'
   * the axis may choose to strip things after it when they don't change from
   * one tick to the next (as it does with automatic formatting)
   */


  exports.formatDate = function (x, fmt, tr, formatter, calendar, extraFormat) {
    calendar = isWorldCalendar(calendar) && calendar;

    if (!fmt) {
      if (tr === 'y') fmt = extraFormat.year;else if (tr === 'm') fmt = extraFormat.month;else if (tr === 'd') {
        fmt = extraFormat.dayMonth + '\n' + extraFormat.year;
      } else {
        return formatTime(x, tr) + '\n' + modDateFormat(extraFormat.dayMonthYear, x, formatter, calendar);
      }
    }

    return modDateFormat(fmt, x, formatter, calendar);
  };
  /*
   * incrementMonth: make a new milliseconds value from the given one,
   * having changed the month
   *
   * special case for world calendars: multiples of 12 are treated as years,
   * even for calendar systems that don't have (always or ever) 12 months/year
   * TODO: perhaps we need a different code for year increments to support this?
   *
   * ms (number): the initial millisecond value
   * dMonth (int): the (signed) number of months to shift
   * calendar (string): the calendar system to use
   *
   * changing month does not (and CANNOT) always preserve day, since
   * months have different lengths. The worst example of this is:
   *   d = new Date(1970,0,31); d.setMonth(1) -> Feb 31 turns into Mar 3
   *
   * But we want to be able to iterate over the last day of each month,
   * regardless of what its number is.
   * So shift 3 days forward, THEN set the new month, then unshift:
   *   1/31 -> 2/28 (or 29) -> 3/31 -> 4/30 -> ...
   *
   * Note that odd behavior still exists if you start from the 26th-28th:
   *   1/28 -> 2/28 -> 3/31
   * but at least you can't shift any dates into the wrong month,
   * and ticks on these days incrementing by month would be very unusual
   */


  var THREEDAYS = 3 * ONEDAY;

  exports.incrementMonth = function (ms, dMonth, calendar) {
    calendar = isWorldCalendar(calendar) && calendar; // pull time out and operate on pure dates, then add time back at the end
    // this gives maximum precision - not that we *normally* care if we're
    // incrementing by month, but better to be safe!

    var timeMs = mod(ms, ONEDAY);
    ms = Math.round(ms - timeMs);

    if (calendar) {
      try {
        var dateJD = Math.round(ms / ONEDAY) + EPOCHJD;
        var calInstance = registry.getComponentMethod('calendars', 'getCal')(calendar);
        var cDate = calInstance.fromJD(dateJD);
        if (dMonth % 12) calInstance.add(cDate, dMonth, 'm');else calInstance.add(cDate, dMonth / 12, 'y');
        return (cDate.toJD() - EPOCHJD) * ONEDAY + timeMs;
      } catch (e) {
        loggers_1.error('invalid ms ' + ms + ' in calendar ' + calendar); // then keep going in gregorian even though the result will be 'Invalid'
      }
    }

    var y = new Date(ms + THREEDAYS);
    return y.setUTCMonth(y.getUTCMonth() + dMonth) + timeMs - THREEDAYS;
  };
  /*
   * findExactDates: what fraction of data is exact days, months, or years?
   *
   * data: array of millisecond values
   * calendar (string) the calendar to test against
   */


  exports.findExactDates = function (data, calendar) {
    var exactYears = 0;
    var exactMonths = 0;
    var exactDays = 0;
    var blankCount = 0;
    var d;
    var di;
    var calInstance = isWorldCalendar(calendar) && registry.getComponentMethod('calendars', 'getCal')(calendar);

    for (var i = 0; i < data.length; i++) {
      di = data[i]; // not date data at all

      if (!fastIsnumeric(di)) {
        blankCount++;
        continue;
      } // not an exact date


      if (di % ONEDAY) continue;

      if (calInstance) {
        try {
          d = calInstance.fromJD(di / ONEDAY + EPOCHJD);

          if (d.day() === 1) {
            if (d.month() === 1) exactYears++;else exactMonths++;
          } else exactDays++;
        } catch (e) {// invalid date in this calendar - ignore it here.
        }
      } else {
        d = new Date(di);

        if (d.getUTCDate() === 1) {
          if (d.getUTCMonth() === 0) exactYears++;else exactMonths++;
        } else exactDays++;
      }
    }

    exactMonths += exactYears;
    exactDays += exactMonths;
    var dataCount = data.length - blankCount;
    return {
      exactYears: exactYears / dataCount,
      exactMonths: exactMonths / dataCount,
      exactDays: exactDays / dataCount
    };
  };
});

// none of these need any external deps

var identity$1 = function identity(d) {
  return d;
};

var search = createCommonjsModule(function (module, exports) {

  var BADNUM = numerical.BADNUM; // don't trust floating point equality - fraction of bin size to call
  // "on the line" and ensure that they go the right way specified by
  // linelow

  var roundingError = 1e-9;
  /**
   * findBin - find the bin for val - note that it can return outside the
   * bin range any pos. or neg. integer for linear bins, or -1 or
   * bins.length-1 for explicit.
   * bins is either an object {start,size,end} or an array length #bins+1
   * bins can be either increasing or decreasing but must be monotonic
   * for linear bins, we can just calculate. For listed bins, run a binary
   * search linelow (truthy) says the bin boundary should be attributed to
   * the lower bin rather than the default upper bin
   */

  exports.findBin = function (val, bins, linelow) {
    if (fastIsnumeric(bins.start)) {
      return linelow ? Math.ceil((val - bins.start) / bins.size - roundingError) - 1 : Math.floor((val - bins.start) / bins.size + roundingError);
    } else {
      var n1 = 0;
      var n2 = bins.length;
      var c = 0;
      var binSize = n2 > 1 ? (bins[n2 - 1] - bins[0]) / (n2 - 1) : 1;
      var n, test;

      if (binSize >= 0) {
        test = linelow ? lessThan : lessOrEqual;
      } else {
        test = linelow ? greaterOrEqual : greaterThan;
      }

      val += binSize * roundingError * (linelow ? -1 : 1) * (binSize >= 0 ? 1 : -1); // c is just to avoid infinite loops if there's an error

      while (n1 < n2 && c++ < 100) {
        n = Math.floor((n1 + n2) / 2);
        if (test(bins[n], val)) n1 = n + 1;else n2 = n;
      }

      if (c > 90) loggers_1.log('Long binary search...');
      return n1 - 1;
    }
  };

  function lessThan(a, b) {
    return a < b;
  }

  function lessOrEqual(a, b) {
    return a <= b;
  }

  function greaterThan(a, b) {
    return a > b;
  }

  function greaterOrEqual(a, b) {
    return a >= b;
  }

  exports.sorterAsc = function (a, b) {
    return a - b;
  };

  exports.sorterDes = function (a, b) {
    return b - a;
  };
  /**
   * find distinct values in an array, lumping together ones that appear to
   * just be off by a rounding error
   * return the distinct values and the minimum difference between any two
   */


  exports.distinctVals = function (valsIn) {
    var vals = valsIn.slice(); // otherwise we sort the original array...

    vals.sort(exports.sorterAsc); // undefined listed in the end - also works on IE11

    var last;

    for (last = vals.length - 1; last > -1; last--) {
      if (vals[last] !== BADNUM) break;
    }

    var minDiff = vals[last] - vals[0] || 1;
    var errDiff = minDiff / (last || 1) / 10000;
    var newVals = [];
    var preV;

    for (var i = 0; i <= last; i++) {
      var v = vals[i]; // make sure values aren't just off by a rounding error

      var diff = v - preV;

      if (preV === undefined) {
        newVals.push(v);
        preV = v;
      } else if (diff > errDiff) {
        minDiff = Math.min(minDiff, diff);
        newVals.push(v);
        preV = v;
      }
    }

    return {
      vals: newVals,
      minDiff: minDiff
    };
  };
  /**
   * return the smallest element from (sorted) array arrayIn that's bigger than val,
   * or (reverse) the largest element smaller than val
   * used to find the best tick given the minimum (non-rounded) tick
   * particularly useful for date/time where things are not powers of 10
   * binary search is probably overkill here...
   */


  exports.roundUp = function (val, arrayIn, reverse) {
    var low = 0;
    var high = arrayIn.length - 1;
    var mid;
    var c = 0;
    var dlow = reverse ? 0 : 1;
    var dhigh = reverse ? 1 : 0;
    var rounded = reverse ? Math.ceil : Math.floor; // c is just to avoid infinite loops if there's an error

    while (low < high && c++ < 100) {
      mid = rounded((low + high) / 2);
      if (arrayIn[mid] <= val) low = mid + dlow;else high = mid - dhigh;
    }

    return arrayIn[low];
  };
  /**
   * Tweak to Array.sort(sortFn) that improves performance for pre-sorted arrays
   *
   * Note that newer browsers (such as Chrome v70+) are starting to pick up
   * on pre-sorted arrays which may render the following optimization unnecessary
   * in the future.
   *
   * Motivation: sometimes we need to sort arrays but the input is likely to
   * already be sorted. Browsers don't seem to pick up on pre-sorted arrays,
   * and in fact Chrome is actually *slower* sorting pre-sorted arrays than purely
   * random arrays. FF is at least faster if the array is pre-sorted, but still
   * not as fast as it could be.
   * Here's how this plays out sorting a length-1e6 array:
   *
   * Calls to Sort FN  |  Chrome bare  |  FF bare  |  Chrome tweak  |  FF tweak
   *                   |  v68.0 Mac    |  v61.0 Mac|                |
   * ------------------+---------------+-----------+----------------+------------
   * ordered           |  30.4e6       |  10.1e6   |  1e6           |  1e6
   * reversed          |  29.4e6       |  9.9e6    |  1e6 + reverse |  1e6 + reverse
   * random            |  ~21e6        |  ~18.7e6  |  ~21e6         |  ~18.7e6
   *
   * So this is a substantial win for pre-sorted (ordered or exactly reversed)
   * arrays. Including this wrapper on an unsorted array adds a penalty that will
   * in general be only a few calls to the sort function. The only case this
   * penalty will be significant is if the array is mostly sorted but there are
   * a few unsorted items near the end, but the penalty is still at most N calls
   * out of (for N=1e6) ~20N total calls
   *
   * @param {Array} array: the array, to be sorted in place
   * @param {function} sortFn: As in Array.sort, function(a, b) that puts
   *     item a before item b if the return is negative, a after b if positive,
   *     and no change if zero.
   * @return {Array}: the original array, sorted in place.
   */


  exports.sort = function (array, sortFn) {
    var notOrdered = 0;
    var notReversed = 0;

    for (var i = 1; i < array.length; i++) {
      var pairOrder = sortFn(array[i], array[i - 1]);
      if (pairOrder < 0) notOrdered = 1;else if (pairOrder > 0) notReversed = 1;
      if (notOrdered && notReversed) return array.sort(sortFn);
    }

    return notReversed ? array : array.reverse();
  };
  /**
   * find index in array 'arr' that minimizes 'fn'
   *
   * @param {array} arr : array where to search
   * @param {fn (optional)} fn : function to minimize,
   *   if not given, fn is the identity function
   * @return {integer}
   */


  exports.findIndexOfMin = function (arr, fn) {
    fn = fn || identity$1;
    var min = Infinity;
    var ind;

    for (var i = 0; i < arr.length; i++) {
      var v = fn(arr[i]);

      if (v < min) {
        min = v;
        ind = i;
      }
    }

    return ind;
  };
});

var sort_object_keys = function sortObjectKeys(obj) {
  return Object.keys(obj).sort();
};

var stats = createCommonjsModule(function (module, exports) {

  var isArrayOrTypedArray = array.isArrayOrTypedArray;
  /**
   * aggNums() returns the result of an aggregate function applied to an array of
   * values, where non-numerical values have been tossed out.
   *
   * @param {function} f - aggregation function (e.g., Math.min)
   * @param {Number} v - initial value (continuing from previous calls)
   *      if there's no continuing value, use null for selector-type
   *      functions (max,min), or 0 for summations
   * @param {Array} a - array to aggregate (may be nested, we will recurse,
   *                    but all elements must have the same dimension)
   * @param {Number} len - maximum length of a to aggregate
   * @return {Number} - result of f applied to a starting from v
   */

  exports.aggNums = function (f, v, a, len) {
    var i, b;
    if (!len || len > a.length) len = a.length;
    if (!fastIsnumeric(v)) v = false;

    if (isArrayOrTypedArray(a[0])) {
      b = new Array(len);

      for (i = 0; i < len; i++) b[i] = exports.aggNums(f, v, a[i]);

      a = b;
    }

    for (i = 0; i < len; i++) {
      if (!fastIsnumeric(v)) v = a[i];else if (fastIsnumeric(a[i])) v = f(+v, +a[i]);
    }

    return v;
  };
  /**
   * mean & std dev functions using aggNums, so it handles non-numerics nicely
   * even need to use aggNums instead of .length, to toss out non-numerics
   */


  exports.len = function (data) {
    return exports.aggNums(function (a) {
      return a + 1;
    }, 0, data);
  };

  exports.mean = function (data, len) {
    if (!len) len = exports.len(data);
    return exports.aggNums(function (a, b) {
      return a + b;
    }, 0, data) / len;
  };

  exports.midRange = function (numArr) {
    if (numArr === undefined || numArr.length === 0) return undefined;
    return (exports.aggNums(Math.max, null, numArr) + exports.aggNums(Math.min, null, numArr)) / 2;
  };

  exports.variance = function (data, len, mean) {
    if (!len) len = exports.len(data);
    if (!fastIsnumeric(mean)) mean = exports.mean(data, len);
    return exports.aggNums(function (a, b) {
      return a + Math.pow(b - mean, 2);
    }, 0, data) / len;
  };

  exports.stdev = function (data, len, mean) {
    return Math.sqrt(exports.variance(data, len, mean));
  };
  /**
   * median of a finite set of numbers
   * reference page: https://en.wikipedia.org/wiki/Median#Finite_set_of_numbers
  **/


  exports.median = function (data) {
    var b = data.slice().sort();
    return exports.interp(b, 0.5);
  };
  /**
   * interp() computes a percentile (quantile) for a given distribution.
   * We interpolate the distribution (to compute quantiles, we follow method #10 here:
   * http://www.amstat.org/publications/jse/v14n3/langford.html).
   * Typically the index or rank (n * arr.length) may be non-integer.
   * For reference: ends are clipped to the extreme values in the array;
   * For box plots: index you get is half a point too high (see
   * http://en.wikipedia.org/wiki/Percentile#Nearest_rank) but note that this definition
   * indexes from 1 rather than 0, so we subtract 1/2 (instead of add).
   *
   * @param {Array} arr - This array contains the values that make up the distribution.
   * @param {Number} n - Between 0 and 1, n = p/100 is such that we compute the p^th percentile.
   * For example, the 50th percentile (or median) corresponds to n = 0.5
   * @return {Number} - percentile
   */


  exports.interp = function (arr, n) {
    if (!fastIsnumeric(n)) throw 'n should be a finite number';
    n = n * arr.length - 0.5;
    if (n < 0) return arr[0];
    if (n > arr.length - 1) return arr[arr.length - 1];
    var frac = n % 1;
    return frac * arr[Math.ceil(n)] + (1 - frac) * arr[Math.floor(n)];
  };
});

var mod$1 = mod_1.mod;
var modHalf = mod_1.modHalf;
var PI = Math.PI;
var twoPI = 2 * PI;

function deg2rad(deg) {
  return deg / 180 * PI;
}

function rad2deg(rad) {
  return rad / PI * 180;
}
/**
 * is sector a full circle?
 * ... this comes up a lot in SVG path-drawing routines
 *
 * N.B. we consider all sectors that span more that 2pi 'full' circles
 *
 * @param {2-item array} aBnds : angular bounds in *radians*
 * @return {boolean}
 */


function isFullCircle(aBnds) {
  return Math.abs(aBnds[1] - aBnds[0]) > twoPI - 1e-14;
}
/**
 * angular delta between angle 'a' and 'b'
 * solution taken from: https://stackoverflow.com/a/2007279
 *
 * @param {number} a : first angle in *radians*
 * @param {number} b : second angle in *radians*
 * @return {number} angular delta in *radians*
 */


function angleDelta(a, b) {
  return modHalf(b - a, twoPI);
}
/**
 * angular distance between angle 'a' and 'b'
 *
 * @param {number} a : first angle in *radians*
 * @param {number} b : second angle in *radians*
 * @return {number} angular distance in *radians*
 */


function angleDist(a, b) {
  return Math.abs(angleDelta(a, b));
}
/**
 * is angle inside sector?
 *
 * @param {number} a : angle to test in *radians*
 * @param {2-item array} aBnds : sector's angular bounds in *radians*
 * @param {boolean}
 */


function isAngleInsideSector(a, aBnds) {
  if (isFullCircle(aBnds)) return true;
  var s0, s1;

  if (aBnds[0] < aBnds[1]) {
    s0 = aBnds[0];
    s1 = aBnds[1];
  } else {
    s0 = aBnds[1];
    s1 = aBnds[0];
  }

  s0 = mod$1(s0, twoPI);
  s1 = mod$1(s1, twoPI);
  if (s0 > s1) s1 += twoPI;
  var a0 = mod$1(a, twoPI);
  var a1 = a0 + twoPI;
  return a0 >= s0 && a0 <= s1 || a1 >= s0 && a1 <= s1;
}
/**
 * is pt (r,a) inside sector?
 *
 * @param {number} r : pt's radial coordinate
 * @param {number} a : pt's angular coordinate in *radians*
 * @param {2-item array} rBnds : sector's radial bounds
 * @param {2-item array} aBnds : sector's angular bounds in *radians*
 * @return {boolean}
 */


function isPtInsideSector(r, a, rBnds, aBnds) {
  if (!isAngleInsideSector(a, aBnds)) return false;
  var r0, r1;

  if (rBnds[0] < rBnds[1]) {
    r0 = rBnds[0];
    r1 = rBnds[1];
  } else {
    r0 = rBnds[1];
    r1 = rBnds[0];
  }

  return r >= r0 && r <= r1;
} // common to pathArc, pathSector and pathAnnulus


function _path(r0, r1, a0, a1, cx, cy, isClosed) {
  cx = cx || 0;
  cy = cy || 0;
  var isCircle = isFullCircle([a0, a1]);
  var aStart, aMid, aEnd;
  var rStart, rEnd;

  if (isCircle) {
    aStart = 0;
    aMid = PI;
    aEnd = twoPI;
  } else {
    if (a0 < a1) {
      aStart = a0;
      aEnd = a1;
    } else {
      aStart = a1;
      aEnd = a0;
    }
  }

  if (r0 < r1) {
    rStart = r0;
    rEnd = r1;
  } else {
    rStart = r1;
    rEnd = r0;
  } // N.B. svg coordinates here, where y increases downward


  function pt(r, a) {
    return [r * Math.cos(a) + cx, cy - r * Math.sin(a)];
  }

  var largeArc = Math.abs(aEnd - aStart) <= PI ? 0 : 1;

  function arc(r, a, cw) {
    return 'A' + [r, r] + ' ' + [0, largeArc, cw] + ' ' + pt(r, a);
  }

  var p;

  if (isCircle) {
    if (rStart === null) {
      p = 'M' + pt(rEnd, aStart) + arc(rEnd, aMid, 0) + arc(rEnd, aEnd, 0) + 'Z';
    } else {
      p = 'M' + pt(rStart, aStart) + arc(rStart, aMid, 0) + arc(rStart, aEnd, 0) + 'Z' + 'M' + pt(rEnd, aStart) + arc(rEnd, aMid, 1) + arc(rEnd, aEnd, 1) + 'Z';
    }
  } else {
    if (rStart === null) {
      p = 'M' + pt(rEnd, aStart) + arc(rEnd, aEnd, 0);
      if (isClosed) p += 'L0,0Z';
    } else {
      p = 'M' + pt(rStart, aStart) + 'L' + pt(rEnd, aStart) + arc(rEnd, aEnd, 0) + 'L' + pt(rStart, aEnd) + arc(rStart, aStart, 1) + 'Z';
    }
  }

  return p;
}
/**
 * path an arc
 *
 * @param {number} r : radius
 * @param {number} a0 : first angular coordinate in *radians*
 * @param {number} a1 : second angular coordinate in *radians*
 * @param {number (optional)} cx : x coordinate of center
 * @param {number (optional)} cy : y coordinate of center
 * @return {string} svg path
 */


function pathArc(r, a0, a1, cx, cy) {
  return _path(null, r, a0, a1, cx, cy, 0);
}
/**
 * path a sector
 *
 * @param {number} r : radius
 * @param {number} a0 : first angular coordinate in *radians*
 * @param {number} a1 : second angular coordinate in *radians*
 * @param {number (optional)} cx : x coordinate of center
 * @param {number (optional)} cy : y coordinate of center
 * @return {string} svg path
 */


function pathSector(r, a0, a1, cx, cy) {
  return _path(null, r, a0, a1, cx, cy, 1);
}
/**
 * path an annulus
 *
 * @param {number} r0 : first radial coordinate
 * @param {number} r1 : second radial coordinate
 * @param {number} a0 : first angular coordinate in *radians*
 * @param {number} a1 : second angular coordinate in *radians*
 * @param {number (optional)} cx : x coordinate of center
 * @param {number (optional)} cy : y coordinate of center
 * @return {string} svg path
 */


function pathAnnulus(r0, r1, a0, a1, cx, cy) {
  return _path(r0, r1, a0, a1, cx, cy, 1);
}

var angles = {
  deg2rad: deg2rad,
  rad2deg: rad2deg,
  angleDelta: angleDelta,
  angleDist: angleDist,
  isFullCircle: isFullCircle,
  isAngleInsideSector: isAngleInsideSector,
  isPtInsideSector: isPtInsideSector,
  pathArc: pathArc,
  pathSector: pathSector,
  pathAnnulus: pathAnnulus
};

/**
 * Determine the position anchor property of x/y xanchor/yanchor components.
 *
 * - values < 1/3 align the low side at that fraction,
 * - values [1/3, 2/3] align the center at that fraction,
 * - values > 2/3 align the right at that fraction.
 */

var isLeftAnchor = function isLeftAnchor(opts) {
  return opts.xanchor === 'left' || opts.xanchor === 'auto' && opts.x <= 1 / 3;
};

var isCenterAnchor = function isCenterAnchor(opts) {
  return opts.xanchor === 'center' || opts.xanchor === 'auto' && opts.x > 1 / 3 && opts.x < 2 / 3;
};

var isRightAnchor = function isRightAnchor(opts) {
  return opts.xanchor === 'right' || opts.xanchor === 'auto' && opts.x >= 2 / 3;
};

var isTopAnchor = function isTopAnchor(opts) {
  return opts.yanchor === 'top' || opts.yanchor === 'auto' && opts.y >= 2 / 3;
};

var isMiddleAnchor = function isMiddleAnchor(opts) {
  return opts.yanchor === 'middle' || opts.yanchor === 'auto' && opts.y > 1 / 3 && opts.y < 2 / 3;
};

var isBottomAnchor = function isBottomAnchor(opts) {
  return opts.yanchor === 'bottom' || opts.yanchor === 'auto' && opts.y <= 1 / 3;
};

var anchor_utils = {
  isLeftAnchor: isLeftAnchor,
  isCenterAnchor: isCenterAnchor,
  isRightAnchor: isRightAnchor,
  isTopAnchor: isTopAnchor,
  isMiddleAnchor: isMiddleAnchor,
  isBottomAnchor: isBottomAnchor
};

var mod = mod_1.mod;
/*
 * look for intersection of two line segments
 *   (1->2 and 3->4) - returns array [x,y] if they do, null if not
 */

var segmentsIntersect_1 = segmentsIntersect$1;

function segmentsIntersect$1(x1, y1, x2, y2, x3, y3, x4, y4) {
  var a = x2 - x1;
  var b = x3 - x1;
  var c = x4 - x3;
  var d = y2 - y1;
  var e = y3 - y1;
  var f = y4 - y3;
  var det = a * f - c * d; // parallel lines? intersection is undefined
  // ignore the case where they are colinear

  if (det === 0) return null;
  var t = (b * f - c * e) / det;
  var u = (b * d - a * e) / det; // segments do not intersect?

  if (u < 0 || u > 1 || t < 0 || t > 1) return null;
  return {
    x: x1 + a * t,
    y: y1 + d * t
  };
}
/*
 * find the minimum distance between two line segments (1->2 and 3->4)
 */


var segmentDistance = function segmentDistance(x1, y1, x2, y2, x3, y3, x4, y4) {
  if (segmentsIntersect$1(x1, y1, x2, y2, x3, y3, x4, y4)) return 0; // the two segments and their lengths squared

  var x12 = x2 - x1;
  var y12 = y2 - y1;
  var x34 = x4 - x3;
  var y34 = y4 - y3;
  var ll12 = x12 * x12 + y12 * y12;
  var ll34 = x34 * x34 + y34 * y34; // calculate distance squared, then take the sqrt at the very end

  var dist2 = Math.min(perpDistance2(x12, y12, ll12, x3 - x1, y3 - y1), perpDistance2(x12, y12, ll12, x4 - x1, y4 - y1), perpDistance2(x34, y34, ll34, x1 - x3, y1 - y3), perpDistance2(x34, y34, ll34, x2 - x3, y2 - y3));
  return Math.sqrt(dist2);
};
/*
 * distance squared from segment ab to point c
 * [xab, yab] is the vector b-a
 * [xac, yac] is the vector c-a
 * llab is the length squared of (b-a), just to simplify calculation
 */


function perpDistance2(xab, yab, llab, xac, yac) {
  var fcAB = xac * xab + yac * yab;

  if (fcAB < 0) {
    // point c is closer to point a
    return xac * xac + yac * yac;
  } else if (fcAB > llab) {
    // point c is closer to point b
    var xbc = xac - xab;
    var ybc = yac - yab;
    return xbc * xbc + ybc * ybc;
  } else {
    // perpendicular distance is the shortest
    var crossProduct = xac * yab - yac * xab;
    return crossProduct * crossProduct / llab;
  }
} // a very short-term cache for getTextLocation, just because
// we're often looping over the same locations multiple times
// invalidated as soon as we look at a different path


var locationCache, workingPath, workingTextWidth; // turn a path and position along it into x, y, and angle for the given text

var getTextLocation = function getTextLocation(path, totalPathLen, positionOnPath, textWidth) {
  if (path !== workingPath || textWidth !== workingTextWidth) {
    locationCache = {};
    workingPath = path;
    workingTextWidth = textWidth;
  }

  if (locationCache[positionOnPath]) {
    return locationCache[positionOnPath];
  } // for the angle, use points on the path separated by the text width
  // even though due to curvature, the text will cover a bit more than that


  var p0 = path.getPointAtLength(mod(positionOnPath - textWidth / 2, totalPathLen));
  var p1 = path.getPointAtLength(mod(positionOnPath + textWidth / 2, totalPathLen)); // note: atan handles 1/0 nicely

  var theta = Math.atan((p1.y - p0.y) / (p1.x - p0.x)); // center the text at 2/3 of the center position plus 1/3 the p0/p1 midpoint
  // that's the average position of this segment, assuming it's roughly quadratic

  var pCenter = path.getPointAtLength(mod(positionOnPath, totalPathLen));
  var x = (pCenter.x * 4 + p0.x + p1.x) / 6;
  var y = (pCenter.y * 4 + p0.y + p1.y) / 6;
  var out = {
    x: x,
    y: y,
    theta: theta
  };
  locationCache[positionOnPath] = out;
  return out;
};

var clearLocationCache = function () {
  workingPath = null;
};
/*
 * Find the segment of `path` that's within the visible area
 * given by `bounds` {left, right, top, bottom}, to within a
 * precision of `buffer` px
 *
 * returns: undefined if nothing is visible, else object:
 * {
 *   min: position where the path first enters bounds, or 0 if it
 *        starts within bounds
 *   max: position where the path last exits bounds, or the path length
 *        if it finishes within bounds
 *   len: max - min, ie the length of visible path
 *   total: the total path length - just included so the caller doesn't
 *        need to call path.getTotalLength() again
 *   isClosed: true iff the start and end points of the path are both visible
 *        and are at the same point
 * }
 *
 * Works by starting from either end and repeatedly finding the distance from
 * that point to the plot area, and if it's outside the plot, moving along the
 * path by that distance (because the plot must be at least that far away on
 * the path). Note that if a path enters, exits, and re-enters the plot, we
 * will not capture this behavior.
 */


var getVisibleSegment = function getVisibleSegment(path, bounds, buffer) {
  var left = bounds.left;
  var right = bounds.right;
  var top = bounds.top;
  var bottom = bounds.bottom;
  var pMin = 0;
  var pTotal = path.getTotalLength();
  var pMax = pTotal;
  var pt0, ptTotal;

  function getDistToPlot(len) {
    var pt = path.getPointAtLength(len); // hold on to the start and end points for `closed`

    if (len === 0) pt0 = pt;else if (len === pTotal) ptTotal = pt;
    var dx = pt.x < left ? left - pt.x : pt.x > right ? pt.x - right : 0;
    var dy = pt.y < top ? top - pt.y : pt.y > bottom ? pt.y - bottom : 0;
    return Math.sqrt(dx * dx + dy * dy);
  }

  var distToPlot = getDistToPlot(pMin);

  while (distToPlot) {
    pMin += distToPlot + buffer;
    if (pMin > pMax) return;
    distToPlot = getDistToPlot(pMin);
  }

  distToPlot = getDistToPlot(pMax);

  while (distToPlot) {
    pMax -= distToPlot + buffer;
    if (pMin > pMax) return;
    distToPlot = getDistToPlot(pMax);
  }

  return {
    min: pMin,
    max: pMax,
    len: pMax - pMin,
    total: pTotal,
    isClosed: pMin === 0 && pMax === pTotal && Math.abs(pt0.x - ptTotal.x) < 0.1 && Math.abs(pt0.y - ptTotal.y) < 0.1
  };
};
/**
 * Find point on SVG path corresponding to a given constraint coordinate
 *
 * @param {SVGPathElement} path
 * @param {Number} val : constraint coordinate value
 * @param {String} coord : 'x' or 'y' the constraint coordinate
 * @param {Object} opts :
 *  - {Number} pathLength : supply total path length before hand
 *  - {Number} tolerance
 *  - {Number} iterationLimit
 * @return {SVGPoint}
 */


var findPointOnPath = function findPointOnPath(path, val, coord, opts) {
  opts = opts || {};
  var pathLength = opts.pathLength || path.getTotalLength();
  var tolerance = opts.tolerance || 1e-3;
  var iterationLimit = opts.iterationLimit || 30; // if path starts at a val greater than the path tail (like on vertical violins),
  // we must flip the sign of the computed diff.

  var mul = path.getPointAtLength(0)[coord] > path.getPointAtLength(pathLength)[coord] ? -1 : 1;
  var i = 0;
  var b0 = 0;
  var b1 = pathLength;
  var mid;
  var pt;
  var diff;

  while (i < iterationLimit) {
    mid = (b0 + b1) / 2;
    pt = path.getPointAtLength(mid);
    diff = pt[coord] - val;

    if (Math.abs(diff) < tolerance) {
      return pt;
    } else {
      if (mul * diff > 0) {
        b1 = mid;
      } else {
        b0 = mid;
      }

      i++;
    }
  }

  return pt;
};

var geometry2d = {
  segmentsIntersect: segmentsIntersect_1,
  segmentDistance: segmentDistance,
  getTextLocation: getTextLocation,
  clearLocationCache: clearLocationCache,
  getVisibleSegment: getVisibleSegment,
  findPointOnPath: findPointOnPath
};

var throttle = createCommonjsModule(function (module, exports) {

  var timerCache = {};
  /**
   * Throttle a callback. `callback` executes synchronously only if
   * more than `minInterval` milliseconds have already elapsed since the latest
   * call (if any). Otherwise we wait until `minInterval` is over and execute the
   * last callback received while waiting.
   * So the first and last events in a train are always executed (eventually)
   * but some of the events in the middle can be dropped.
   *
   * @param {string} id: an identifier to mark events to throttle together
   * @param {number} minInterval: minimum time, in milliseconds, between
   *   invocations of `callback`
   * @param {function} callback: the function to throttle. `callback` itself
   *   should be a purely synchronous function.
   */

  exports.throttle = function throttle(id, minInterval, callback) {
    var cache = timerCache[id];
    var now = Date.now();

    if (!cache) {
      /*
       * Throw out old items before making a new one, to prevent the cache
       * getting overgrown, for example from old plots that have been replaced.
       * 1 minute age is arbitrary.
       */
      for (var idi in timerCache) {
        if (timerCache[idi].ts < now - 60000) {
          delete timerCache[idi];
        }
      }

      cache = timerCache[id] = {
        ts: 0,
        timer: null
      };
    }

    _clearTimeout(cache);

    function exec() {
      callback();
      cache.ts = Date.now();

      if (cache.onDone) {
        cache.onDone();
        cache.onDone = null;
      }
    }

    if (now > cache.ts + minInterval) {
      exec();
      return;
    }

    cache.timer = setTimeout(function () {
      exec();
      cache.timer = null;
    }, minInterval);
  };

  exports.done = function (id) {
    var cache = timerCache[id];
    if (!cache || !cache.timer) return Promise.resolve();
    return new Promise(function (resolve) {
      var previousOnDone = cache.onDone;

      cache.onDone = function onDone() {
        if (previousOnDone) previousOnDone();
        resolve();
        cache.onDone = null;
      };
    });
  };
  /**
   * Clear the throttle cache for one or all timers
   * @param {optional string} id:
   *   if provided, clear just this timer
   *   if omitted, clear all timers (mainly useful for testing)
   */


  exports.clear = function (id) {
    if (id) {
      _clearTimeout(timerCache[id]);

      delete timerCache[id];
    } else {
      for (var idi in timerCache) exports.clear(idi);
    }
  };

  function _clearTimeout(cache) {
    if (cache && cache.timer !== null) {
      clearTimeout(cache.timer);
      cache.timer = null;
    }
  }
});

/**
 * Clear responsive handlers (if any).
 *
 * @param {DOM node or object} gd : graph div object
 */

var clear_responsive = function clearResponsive(gd) {
  if (gd._responsiveChartHandler) {
    window.removeEventListener('resize', gd._responsiveChartHandler);
    delete gd._responsiveChartHandler;
  }
};

var isMobile_1 = isMobile;
var isMobile_2 = isMobile;
var _default = isMobile;
var mobileRE = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;
var tabletRE = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;

function isMobile(opts) {
  if (!opts) opts = {};
  var ua = opts.ua;
  if (!ua && typeof navigator !== 'undefined') ua = navigator.userAgent;

  if (ua && ua.headers && typeof ua.headers['user-agent'] === 'string') {
    ua = ua.headers['user-agent'];
  }

  if (typeof ua !== 'string') return false;
  var result = opts.tablet ? tabletRE.test(ua) : mobileRE.test(ua);

  if (!result && opts.tablet && opts.featureDetect && navigator && navigator.maxTouchPoints > 1 && ua.indexOf('Macintosh') !== -1 && ua.indexOf('Safari') !== -1) {
    result = true;
  }

  return result;
}
isMobile_1.isMobile = isMobile_2;
isMobile_1.default = _default;

var preserve_drawing_buffer = function preserveDrawingBuffer(opts) {
  var ua;

  if (opts && opts.hasOwnProperty('userAgent')) {
    ua = opts.userAgent;
  } else {
    ua = getUserAgent();
  }

  if (typeof ua !== 'string') return true;
  var enable = isMobile_1({
    ua: {
      headers: {
        'user-agent': ua
      }
    },
    tablet: true,
    featureDetect: false
  });

  if (!enable) {
    var allParts = ua.split(' ');

    for (var i = 1; i < allParts.length; i++) {
      var part = allParts[i];

      if (part.indexOf('Safari') !== -1) {
        // find Safari version
        for (var k = i - 1; k > -1; k--) {
          var prevPart = allParts[k];

          if (prevPart.substr(0, 8) === 'Version/') {
            var v = prevPart.substr(8).split('.')[0];
            if (fastIsnumeric(v)) v = +v;
            if (v >= 13) return true;
          }
        }
      }
    }
  }

  return enable;
};

function getUserAgent() {
  // similar to https://github.com/juliangruber/is-mobile/blob/91ca39ccdd4cfc5edfb5391e2515b923a730fbea/index.js#L14-L17
  var ua;

  if (typeof navigator !== 'undefined') {
    ua = navigator.userAgent;
  }

  if (ua && ua.headers && typeof ua.headers['user-agent'] === 'string') {
    ua = ua.headers['user-agent'];
  }

  return ua;
}

/**
 * General helper to manage trace groups based on calcdata
 *
 * @param {d3.selection} traceLayer: a selection containing a single group
 *     to draw these traces into
 * @param {array} cdModule: array of calcdata items for this
 *     module and subplot combination. Assumes the calcdata item for each
 *     trace is an array with the fullData trace attached to the first item.
 * @param {string} cls: the class attribute to give each trace group
 *     so you can give multiple classes separated by spaces
 */


var make_trace_groups = function makeTraceGroups(traceLayer, cdModule, cls) {
  var traces = traceLayer.selectAll('g.' + cls.replace(/\s/g, '.')).data(cdModule, function (cd) {
    return cd[0].trace.uid;
  });
  traces.exit().remove();
  traces.enter().append('g').attr('class', cls);
  traces.order(); // stash ref node to trace group in calcdata,
  // useful for (fast) styleOnSelect

  var k = traceLayer.classed('rangeplot') ? 'nodeRangePlot3' : 'node3';
  traces.each(function (cd) {
    cd[0][k] = d3.select(this);
  });
  return traces;
};

/**
 * localize: translate a string for the current locale
 *
 * @param {object} gd: the graphDiv for context
 *  gd._context.locale determines the language (& optional region/country)
 *  the dictionary for each locale may either be supplied in
 *  gd._context.locales or globally via Plotly.register
 * @param {string} s: the string to translate
 */


var localize = function localize(gd, s) {
  var locale = gd._context.locale;
  /*
   * Priority of lookup:
   *     contextDicts[locale],
   *     registeredDicts[locale],
   *     contextDicts[baseLocale], (if baseLocale is distinct)
   *     registeredDicts[baseLocale]
   * Return the first translation we find.
   * This way if you have a regionalization you are allowed to specify
   * only what's different from the base locale, everything else will
   * fall back on the base.
   */

  for (var i = 0; i < 2; i++) {
    var locales = gd._context.locales;

    for (var j = 0; j < 2; j++) {
      var dict = (locales[locale] || {}).dictionary;

      if (dict) {
        var out = dict[s];
        if (out) return out;
      }

      locales = registry.localeRegistry;
    }

    var baseLocale = locale.split('-')[0];
    if (baseLocale === locale) break;
    locale = baseLocale;
  }

  return s;
};

/**
 * Return news array containing only the unique items
 * found in input array.
 *
 * IMPORTANT: Note that items are considered unique
 * if `String({})` is unique. For example;
 *
 *  Lib.filterUnique([ { a: 1 }, { b: 2 } ])
 *
 *  returns [{ a: 1 }]
 *
 * and
 *
 *  Lib.filterUnique([ '1', 1 ])
 *
 *  returns ['1']
 *
 *
 * @param {array} array base array
 * @return {array} new filtered array
 */

var filter_unique = function filterUnique(array) {
  var seen = {};
  var out = [];
  var j = 0;

  for (var i = 0; i < array.length; i++) {
    var item = array[i];

    if (seen[item] !== 1) {
      seen[item] = 1;
      out[j++] = item;
    }
  }

  return out;
};

/** Filter out object items with visible !== true
 *  insider array container.
 *
 *  @param {array of objects} container
 *  @return {array of objects} of length <= container
 *
 */

var filter_visible = function filterVisible(container) {
  var filterFn = isCalcData(container) ? calcDataFilter : baseFilter;
  var out = [];

  for (var i = 0; i < container.length; i++) {
    var item = container[i];
    if (filterFn(item)) out.push(item);
  }

  return out;
};

function baseFilter(item) {
  return item.visible === true;
}

function calcDataFilter(item) {
  var trace = item[0].trace;
  return trace.visible === true && trace._length !== 0;
}

function isCalcData(cont) {
  return Array.isArray(cont) && Array.isArray(cont[0]) && cont[0][0] && cont[0][0].trace;
}

var increment = function incrementNumeric(x, delta) {
  if (!delta) return x; // Note 1:
  // 0.3 != 0.1 + 0.2 == 0.30000000000000004
  // but 0.3 == (10 * 0.1 + 10 * 0.2) / 10
  // Attempt to use integer steps to increment

  var scale = 1 / Math.abs(delta);
  var newX = scale > 1 ? (scale * x + scale * delta) / scale : x + delta; // Note 2:
  // now we may also consider rounding to cover few more edge cases
  // e.g. 0.3 * 3 = 0.8999999999999999

  var lenX1 = String(newX).length;

  if (lenX1 > 16) {
    var lenDt = String(delta).length;
    var lenX0 = String(x).length;

    if (lenX1 >= lenX0 + lenDt) {
      // likely a rounding error!
      var s = parseFloat(newX).toPrecision(12);
      if (s.indexOf('e+') === -1) newX = +s;
    }
  }

  return newX;
};

var BADNUM$4 = numerical.BADNUM; // precompile for speed

var JUNK = /^['"%,$#\s']+|[, ]|['"%,$#\s']+$/g;
/**
 * cleanNumber: remove common leading and trailing cruft
 * Always returns either a number or BADNUM.
 */

var clean_number = function cleanNumber(v) {
  if (typeof v === 'string') {
    v = v.replace(JUNK, '');
  }

  if (fastIsnumeric(v)) return Number(v);
  return BADNUM$4;
};

var require$$1 = /*@__PURE__*/getAugmentedNamespace(src);

var lib_1 = createCommonjsModule(function (module) {

  var utcFormat = require$$0.utcFormat;
  var d3Format = require$$1.format;
  var MAX_SAFE = numerical.FP_SAFE;
  var MIN_SAFE = -MAX_SAFE;
  var BADNUM = numerical.BADNUM;
  var lib = module.exports = {};

  lib.adjustFormat = function adjustFormat(formatStr) {
    if (!formatStr || /^\d[.]\df/.test(formatStr) || /[.]\d%/.test(formatStr)) return formatStr;
    if (formatStr === '0.f') return '~f';
    if (/^\d%/.test(formatStr)) return '~%';
    if (/^\ds/.test(formatStr)) return '~s'; // try adding tilde to the start of format in order to trim

    if (!/^[~,.0$]/.test(formatStr) && /[&fps]/.test(formatStr)) return '~' + formatStr;
    return formatStr;
  };

  var seenBadFormats = {};

  lib.warnBadFormat = function (f) {
    var key = String(f);

    if (!seenBadFormats[key]) {
      seenBadFormats[key] = 1;
      lib.warn('encountered bad format: "' + key + '"');
    }
  };

  lib.noFormat = function (value) {
    return String(value);
  };

  lib.numberFormat = function (formatStr) {
    var fn;

    try {
      fn = d3Format(lib.adjustFormat(formatStr));
    } catch (e) {
      lib.warnBadFormat(formatStr);
      return lib.noFormat;
    }

    return fn;
  };

  lib.nestedProperty = nested_property;
  lib.keyedContainer = keyed_container;
  lib.relativeAttr = relative_attr;
  lib.isPlainObject = is_plain_object;
  lib.toLogRange = to_log_range;
  lib.relinkPrivateKeys = relink_private;
  lib.isTypedArray = array.isTypedArray;
  lib.isArrayOrTypedArray = array.isArrayOrTypedArray;
  lib.isArray1D = array.isArray1D;
  lib.ensureArray = array.ensureArray;
  lib.concat = array.concat;
  lib.maxRowLength = array.maxRowLength;
  lib.minRowLength = array.minRowLength;
  lib.mod = mod_1.mod;
  lib.modHalf = mod_1.modHalf;
  lib.valObjectMeta = coerce.valObjectMeta;
  lib.coerce = coerce.coerce;
  lib.coerce2 = coerce.coerce2;
  lib.coerceFont = coerce.coerceFont;
  lib.coercePattern = coerce.coercePattern;
  lib.coerceHoverinfo = coerce.coerceHoverinfo;
  lib.coerceSelectionMarkerOpacity = coerce.coerceSelectionMarkerOpacity;
  lib.validate = coerce.validate;
  lib.dateTime2ms = dates.dateTime2ms;
  lib.isDateTime = dates.isDateTime;
  lib.ms2DateTime = dates.ms2DateTime;
  lib.ms2DateTimeLocal = dates.ms2DateTimeLocal;
  lib.cleanDate = dates.cleanDate;
  lib.isJSDate = dates.isJSDate;
  lib.formatDate = dates.formatDate;
  lib.incrementMonth = dates.incrementMonth;
  lib.dateTick0 = dates.dateTick0;
  lib.dfltRange = dates.dfltRange;
  lib.findExactDates = dates.findExactDates;
  lib.MIN_MS = dates.MIN_MS;
  lib.MAX_MS = dates.MAX_MS;
  lib.findBin = search.findBin;
  lib.sorterAsc = search.sorterAsc;
  lib.sorterDes = search.sorterDes;
  lib.distinctVals = search.distinctVals;
  lib.roundUp = search.roundUp;
  lib.sort = search.sort;
  lib.findIndexOfMin = search.findIndexOfMin;
  lib.sortObjectKeys = sort_object_keys;
  lib.aggNums = stats.aggNums;
  lib.len = stats.len;
  lib.mean = stats.mean;
  lib.median = stats.median;
  lib.midRange = stats.midRange;
  lib.variance = stats.variance;
  lib.stdev = stats.stdev;
  lib.interp = stats.interp;
  lib.init2dArray = matrix.init2dArray;
  lib.transposeRagged = matrix.transposeRagged;
  lib.dot = matrix.dot;
  lib.translationMatrix = matrix.translationMatrix;
  lib.rotationMatrix = matrix.rotationMatrix;
  lib.rotationXYMatrix = matrix.rotationXYMatrix;
  lib.apply3DTransform = matrix.apply3DTransform;
  lib.apply2DTransform = matrix.apply2DTransform;
  lib.apply2DTransform2 = matrix.apply2DTransform2;
  lib.convertCssMatrix = matrix.convertCssMatrix;
  lib.inverseTransformMatrix = matrix.inverseTransformMatrix;
  lib.deg2rad = angles.deg2rad;
  lib.rad2deg = angles.rad2deg;
  lib.angleDelta = angles.angleDelta;
  lib.angleDist = angles.angleDist;
  lib.isFullCircle = angles.isFullCircle;
  lib.isAngleInsideSector = angles.isAngleInsideSector;
  lib.isPtInsideSector = angles.isPtInsideSector;
  lib.pathArc = angles.pathArc;
  lib.pathSector = angles.pathSector;
  lib.pathAnnulus = angles.pathAnnulus;
  lib.isLeftAnchor = anchor_utils.isLeftAnchor;
  lib.isCenterAnchor = anchor_utils.isCenterAnchor;
  lib.isRightAnchor = anchor_utils.isRightAnchor;
  lib.isTopAnchor = anchor_utils.isTopAnchor;
  lib.isMiddleAnchor = anchor_utils.isMiddleAnchor;
  lib.isBottomAnchor = anchor_utils.isBottomAnchor;
  lib.segmentsIntersect = geometry2d.segmentsIntersect;
  lib.segmentDistance = geometry2d.segmentDistance;
  lib.getTextLocation = geometry2d.getTextLocation;
  lib.clearLocationCache = geometry2d.clearLocationCache;
  lib.getVisibleSegment = geometry2d.getVisibleSegment;
  lib.findPointOnPath = geometry2d.findPointOnPath;
  lib.extendFlat = extend.extendFlat;
  lib.extendDeep = extend.extendDeep;
  lib.extendDeepAll = extend.extendDeepAll;
  lib.extendDeepNoArrays = extend.extendDeepNoArrays;
  lib.log = loggers_1.log;
  lib.warn = loggers_1.warn;
  lib.error = loggers_1.error;
  lib.counterRegex = regex.counter;
  lib.throttle = throttle.throttle;
  lib.throttleDone = throttle.done;
  lib.clearThrottle = throttle.clear;
  lib.getGraphDiv = dom.getGraphDiv;
  lib.isPlotDiv = dom.isPlotDiv;
  lib.removeElement = dom.removeElement;
  lib.addStyleRule = dom.addStyleRule;
  lib.addRelatedStyleRule = dom.addRelatedStyleRule;
  lib.deleteRelatedStyleRule = dom.deleteRelatedStyleRule;
  lib.getFullTransformMatrix = dom.getFullTransformMatrix;
  lib.getElementTransformMatrix = dom.getElementTransformMatrix;
  lib.getElementAndAncestors = dom.getElementAndAncestors;
  lib.equalDomRects = dom.equalDomRects;
  lib.clearResponsive = clear_responsive;
  lib.preserveDrawingBuffer = preserve_drawing_buffer;
  lib.makeTraceGroups = make_trace_groups;
  lib._ = localize;
  lib.notifier = notifier;
  lib.filterUnique = filter_unique;
  lib.filterVisible = filter_visible;
  lib.pushUnique = push_unique;
  lib.increment = increment;
  lib.cleanNumber = clean_number;

  lib.ensureNumber = function ensureNumber(v) {
    if (!fastIsnumeric(v)) return BADNUM;
    v = Number(v);
    return v > MAX_SAFE || v < MIN_SAFE ? BADNUM : v;
  };
  /**
   * Is v a valid array index? Accepts numeric strings as well as numbers.
   *
   * @param {any} v: the value to test
   * @param {Optional[integer]} len: the array length we are indexing
   *
   * @return {bool}: v is a valid array index
   */


  lib.isIndex = function (v, len) {
    if (len !== undefined && v >= len) return false;
    return fastIsnumeric(v) && v >= 0 && v % 1 === 0;
  };

  lib.noop = noop;
  lib.identity = identity$1;
  /**
   * create an array of length 'cnt' filled with 'v' at all indices
   *
   * @param {any} v
   * @param {number} cnt
   * @return {array}
   */

  lib.repeat = function (v, cnt) {
    var out = new Array(cnt);

    for (var i = 0; i < cnt; i++) {
      out[i] = v;
    }

    return out;
  };
  /**
   * swap x and y of the same attribute in container cont
   * specify attr with a ? in place of x/y
   * you can also swap other things than x/y by providing part1 and part2
   */


  lib.swapAttrs = function (cont, attrList, part1, part2) {
    if (!part1) part1 = 'x';
    if (!part2) part2 = 'y';

    for (var i = 0; i < attrList.length; i++) {
      var attr = attrList[i];
      var xp = lib.nestedProperty(cont, attr.replace('?', part1));
      var yp = lib.nestedProperty(cont, attr.replace('?', part2));
      var temp = xp.get();
      xp.set(yp.get());
      yp.set(temp);
    }
  };
  /**
   * SVG painter's algo worked around with reinsertion
   */


  lib.raiseToTop = function raiseToTop(elem) {
    elem.parentNode.appendChild(elem);
  };
  /**
   * cancel a possibly pending transition; returned selection may be used by caller
   */


  lib.cancelTransition = function (selection) {
    return selection.transition().duration(0);
  }; // constrain - restrict a number v to be between v0 and v1


  lib.constrain = function (v, v0, v1) {
    if (v0 > v1) return Math.max(v1, Math.min(v0, v));
    return Math.max(v0, Math.min(v1, v));
  };
  /**
   * do two bounding boxes from getBoundingClientRect,
   * ie {left,right,top,bottom,width,height}, overlap?
   * takes optional padding pixels
   */


  lib.bBoxIntersect = function (a, b, pad) {
    pad = pad || 0;
    return a.left <= b.right + pad && b.left <= a.right + pad && a.top <= b.bottom + pad && b.top <= a.bottom + pad;
  };
  /*
   * simpleMap: alternative to Array.map that only
   * passes on the element and up to 2 extra args you
   * provide (but not the array index or the whole array)
   *
   * array: the array to map it to
   * func: the function to apply
   * x1, x2: optional extra args
   */


  lib.simpleMap = function (array, func, x1, x2, opts) {
    var len = array.length;
    var out = new Array(len);

    for (var i = 0; i < len; i++) out[i] = func(array[i], x1, x2, opts);

    return out;
  };
  /**
   * Random string generator
   *
   * @param {object} existing
   *     pass in strings to avoid as keys with truthy values
   * @param {int} bits
   *     bits of information in the output string, default 24
   * @param {int} base
   *     base of string representation, default 16. Should be a power of 2.
   */


  lib.randstr = function randstr(existing, bits, base, _recursion) {
    if (!base) base = 16;
    if (bits === undefined) bits = 24;
    if (bits <= 0) return '0';
    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
    var res = '';
    var i, b, x;

    for (i = 2; digits === Infinity; i *= 2) {
      digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
    }

    var rem = digits - Math.floor(digits);

    for (i = 0; i < Math.floor(digits); i++) {
      x = Math.floor(Math.random() * base).toString(base);
      res = x + res;
    }

    if (rem) {
      b = Math.pow(base, rem);
      x = Math.floor(Math.random() * b).toString(base);
      res = x + res;
    }

    var parsed = parseInt(res, base);

    if (existing && existing[res] || parsed !== Infinity && parsed >= Math.pow(2, bits)) {
      if (_recursion > 10) {
        lib.warn('randstr failed uniqueness');
        return res;
      }

      return randstr(existing, bits, base, (_recursion || 0) + 1);
    } else return res;
  };

  lib.OptionControl = function (opt, optname) {
    /*
     * An environment to contain all option setters and
     * getters that collectively modify opts.
     *
     * You can call up opts from any function in new object
     * as this.optname || this.opt
     *
     * See FitOpts for example of usage
     */
    if (!opt) opt = {};
    if (!optname) optname = 'opt';
    var self = {};
    self.optionList = [];

    self._newoption = function (optObj) {
      optObj[optname] = opt;
      self[optObj.name] = optObj;
      self.optionList.push(optObj);
    };

    self['_' + optname] = opt;
    return self;
  };
  /**
   * lib.smooth: smooth arrayIn by convolving with
   * a hann window with given full width at half max
   * bounce the ends in, so the output has the same length as the input
   */


  lib.smooth = function (arrayIn, FWHM) {
    FWHM = Math.round(FWHM) || 0; // only makes sense for integers

    if (FWHM < 2) return arrayIn;
    var alen = arrayIn.length;
    var alen2 = 2 * alen;
    var wlen = 2 * FWHM - 1;
    var w = new Array(wlen);
    var arrayOut = new Array(alen);
    var i;
    var j;
    var k;
    var v; // first make the window array

    for (i = 0; i < wlen; i++) {
      w[i] = (1 - Math.cos(Math.PI * (i + 1) / FWHM)) / (2 * FWHM);
    } // now do the convolution


    for (i = 0; i < alen; i++) {
      v = 0;

      for (j = 0; j < wlen; j++) {
        k = i + j + 1 - FWHM; // multibounce

        if (k < -alen) k -= alen2 * Math.round(k / alen2);else if (k >= alen2) k -= alen2 * Math.floor(k / alen2); // single bounce

        if (k < 0) k = -1 - k;else if (k >= alen) k = alen2 - 1 - k;
        v += arrayIn[k] * w[j];
      }

      arrayOut[i] = v;
    }

    return arrayOut;
  };
  /**
   * syncOrAsync: run a sequence of functions synchronously
   * as long as its returns are not promises (ie have no .then)
   * includes one argument arg to send to all functions...
   * this is mainly just to prevent us having to make wrapper functions
   * when the only purpose of the wrapper is to reference gd
   * and a final step to be executed at the end
   * TODO: if there's an error and everything is sync,
   * this doesn't happen yet because we want to make sure
   * that it gets reported
   */


  lib.syncOrAsync = function (sequence, arg, finalStep) {
    var ret, fni;

    function continueAsync() {
      return lib.syncOrAsync(sequence, arg, finalStep);
    }

    while (sequence.length) {
      fni = sequence.splice(0, 1)[0];
      ret = fni(arg);

      if (ret && ret.then) {
        return ret.then(continueAsync);
      }
    }

    return finalStep && finalStep(arg);
  };
  /**
   * Helper to strip trailing slash, from
   * http://stackoverflow.com/questions/6680825/return-string-without-trailing-slash
   */


  lib.stripTrailingSlash = function (str) {
    if (str.substr(-1) === '/') return str.substr(0, str.length - 1);
    return str;
  };

  lib.noneOrAll = function (containerIn, containerOut, attrList) {
    /**
     * some attributes come together, so if you have one of them
     * in the input, you should copy the default values of the others
     * to the input as well.
     */
    if (!containerIn) return;
    var hasAny = false;
    var hasAll = true;
    var i;
    var val;

    for (i = 0; i < attrList.length; i++) {
      val = containerIn[attrList[i]];
      if (val !== undefined && val !== null) hasAny = true;else hasAll = false;
    }

    if (hasAny && !hasAll) {
      for (i = 0; i < attrList.length; i++) {
        containerIn[attrList[i]] = containerOut[attrList[i]];
      }
    }
  };
  /** merges calcdata field (given by cdAttr) with traceAttr values
   *
   * N.B. Loop over minimum of cd.length and traceAttr.length
   * i.e. it does not try to fill in beyond traceAttr.length-1
   *
   * @param {array} traceAttr : trace attribute
   * @param {object} cd : calcdata trace
   * @param {string} cdAttr : calcdata key
   */


  lib.mergeArray = function (traceAttr, cd, cdAttr, fn) {
    var hasFn = typeof fn === 'function';

    if (lib.isArrayOrTypedArray(traceAttr)) {
      var imax = Math.min(traceAttr.length, cd.length);

      for (var i = 0; i < imax; i++) {
        var v = traceAttr[i];
        cd[i][cdAttr] = hasFn ? fn(v) : v;
      }
    }
  }; // cast numbers to positive numbers, returns 0 if not greater than 0


  lib.mergeArrayCastPositive = function (traceAttr, cd, cdAttr) {
    return lib.mergeArray(traceAttr, cd, cdAttr, function (v) {
      var w = +v;
      return !isFinite(w) ? 0 : w > 0 ? w : 0;
    });
  };
  /** fills calcdata field (given by cdAttr) with traceAttr values
   *  or function of traceAttr values (e.g. some fallback)
   *
   * N.B. Loops over all cd items.
   *
   * @param {array} traceAttr : trace attribute
   * @param {object} cd : calcdata trace
   * @param {string} cdAttr : calcdata key
   * @param {function} [fn] : optional function to apply to each array item
   */


  lib.fillArray = function (traceAttr, cd, cdAttr, fn) {
    fn = fn || lib.identity;

    if (lib.isArrayOrTypedArray(traceAttr)) {
      for (var i = 0; i < cd.length; i++) {
        cd[i][cdAttr] = fn(traceAttr[i]);
      }
    }
  };
  /** Handler for trace-wide vs per-point options
   *
   * @param {object} trace : (full) trace object
   * @param {number} ptNumber : index of the point in question
   * @param {string} astr : attribute string
   * @param {function} [fn] : optional function to apply to each array item
   *
   * @return {any}
   */


  lib.castOption = function (trace, ptNumber, astr, fn) {
    fn = fn || lib.identity;
    var val = lib.nestedProperty(trace, astr).get();

    if (lib.isArrayOrTypedArray(val)) {
      if (Array.isArray(ptNumber) && lib.isArrayOrTypedArray(val[ptNumber[0]])) {
        return fn(val[ptNumber[0]][ptNumber[1]]);
      } else {
        return fn(val[ptNumber]);
      }
    } else {
      return val;
    }
  };
  /** Extract option from calcdata item, correctly falling back to
   *  trace value if not found.
   *
   *  @param {object} calcPt : calcdata[i][j] item
   *  @param {object} trace : (full) trace object
   *  @param {string} calcKey : calcdata key
   *  @param {string} traceKey : aka trace attribute string
   *  @return {any}
   */


  lib.extractOption = function (calcPt, trace, calcKey, traceKey) {
    if (calcKey in calcPt) return calcPt[calcKey]; // fallback to trace value,
    //   must check if value isn't itself an array
    //   which means the trace attribute has a corresponding
    //   calcdata key, but its value is falsy

    var traceVal = lib.nestedProperty(trace, traceKey).get();
    if (!Array.isArray(traceVal)) return traceVal;
  };

  function makePtIndex2PtNumber(indexToPoints) {
    var ptIndex2ptNumber = {};

    for (var k in indexToPoints) {
      var pts = indexToPoints[k];

      for (var j = 0; j < pts.length; j++) {
        ptIndex2ptNumber[pts[j]] = +k;
      }
    }

    return ptIndex2ptNumber;
  }
  /** Tag selected calcdata items
   *
   * N.B. note that point 'index' corresponds to input data array index
   *  whereas 'number' is its post-transform version.
   *
   * @param {array} calcTrace
   * @param {object} trace
   *  - selectedpoints {array}
   *  - _indexToPoints {object}
   * @param {ptNumber2cdIndex} ptNumber2cdIndex (optional)
   *  optional map object for trace types that do not have 1-to-1 point number to
   *  calcdata item index correspondence (e.g. histogram)
   */


  lib.tagSelected = function (calcTrace, trace, ptNumber2cdIndex) {
    var selectedpoints = trace.selectedpoints;
    var indexToPoints = trace._indexToPoints;
    var ptIndex2ptNumber; // make pt index-to-number map object, which takes care of transformed traces

    if (indexToPoints) {
      ptIndex2ptNumber = makePtIndex2PtNumber(indexToPoints);
    }

    function isCdIndexValid(v) {
      return v !== undefined && v < calcTrace.length;
    }

    for (var i = 0; i < selectedpoints.length; i++) {
      var ptIndex = selectedpoints[i];

      if (lib.isIndex(ptIndex) || lib.isArrayOrTypedArray(ptIndex) && lib.isIndex(ptIndex[0]) && lib.isIndex(ptIndex[1])) {
        var ptNumber = ptIndex2ptNumber ? ptIndex2ptNumber[ptIndex] : ptIndex;
        var cdIndex = ptNumber2cdIndex ? ptNumber2cdIndex[ptNumber] : ptNumber;

        if (isCdIndexValid(cdIndex)) {
          calcTrace[cdIndex].selected = 1;
        }
      }
    }
  };

  lib.selIndices2selPoints = function (trace) {
    var selectedpoints = trace.selectedpoints;
    var indexToPoints = trace._indexToPoints;

    if (indexToPoints) {
      var ptIndex2ptNumber = makePtIndex2PtNumber(indexToPoints);
      var out = [];

      for (var i = 0; i < selectedpoints.length; i++) {
        var ptIndex = selectedpoints[i];

        if (lib.isIndex(ptIndex)) {
          var ptNumber = ptIndex2ptNumber[ptIndex];

          if (lib.isIndex(ptNumber)) {
            out.push(ptNumber);
          }
        }
      }

      return out;
    } else {
      return selectedpoints;
    }
  };
  /** Returns target as set by 'target' transform attribute
   *
   * @param {object} trace : full trace object
   * @param {object} transformOpts : transform option object
   *  - target (string} :
   *      either an attribute string referencing an array in the trace object, or
   *      a set array.
   *
   * @return {array or false} : the target array (NOT a copy!!) or false if invalid
   */


  lib.getTargetArray = function (trace, transformOpts) {
    var target = transformOpts.target;

    if (typeof target === 'string' && target) {
      var array = lib.nestedProperty(trace, target).get();
      return Array.isArray(array) ? array : false;
    } else if (Array.isArray(target)) {
      return target;
    }

    return false;
  };
  /**
   * modified version of jQuery's extend to strip out private objs and functions,
   * and cut arrays down to first <arraylen> or 1 elements
   * because extend-like algorithms are hella slow
   * obj2 is assumed to already be clean of these things (including no arrays)
   */


  lib.minExtend = function (obj1, obj2) {
    var objOut = {};
    if (typeof obj2 !== 'object') obj2 = {};
    var arrayLen = 3;
    var keys = Object.keys(obj1);
    var i, k, v;

    for (i = 0; i < keys.length; i++) {
      k = keys[i];
      v = obj1[k];
      if (k.charAt(0) === '_' || typeof v === 'function') continue;else if (k === 'module') objOut[k] = v;else if (Array.isArray(v)) {
        if (k === 'colorscale') {
          objOut[k] = v.slice();
        } else {
          objOut[k] = v.slice(0, arrayLen);
        }
      } else if (lib.isTypedArray(v)) {
        objOut[k] = v.subarray(0, arrayLen);
      } else if (v && typeof v === 'object') objOut[k] = lib.minExtend(obj1[k], obj2[k]);else objOut[k] = v;
    }

    keys = Object.keys(obj2);

    for (i = 0; i < keys.length; i++) {
      k = keys[i];
      v = obj2[k];

      if (typeof v !== 'object' || !(k in objOut) || typeof objOut[k] !== 'object') {
        objOut[k] = v;
      }
    }

    return objOut;
  };

  lib.titleCase = function (s) {
    return s.charAt(0).toUpperCase() + s.substr(1);
  };

  lib.containsAny = function (s, fragments) {
    for (var i = 0; i < fragments.length; i++) {
      if (s.indexOf(fragments[i]) !== -1) return true;
    }

    return false;
  };

  lib.isIE = function () {
    return typeof window.navigator.msSaveBlob !== 'undefined';
  };

  var IS_SAFARI_REGEX = /Version\/[\d\.]+.*Safari/;

  lib.isSafari = function () {
    return IS_SAFARI_REGEX.test(window.navigator.userAgent);
  };

  var IS_IOS_REGEX = /iPad|iPhone|iPod/;

  lib.isIOS = function () {
    return IS_IOS_REGEX.test(window.navigator.userAgent);
  };

  var FIREFOX_VERSION_REGEX = /Firefox\/(\d+)\.\d+/;

  lib.getFirefoxVersion = function () {
    var match = FIREFOX_VERSION_REGEX.exec(window.navigator.userAgent);

    if (match && match.length === 2) {
      var versionInt = parseInt(match[1]);

      if (!isNaN(versionInt)) {
        return versionInt;
      }
    }

    return null;
  };

  lib.isD3Selection = function (obj) {
    return obj instanceof d3.selection;
  };
  /**
   * Append element to DOM only if not present.
   *
   * @param {d3 selection} parent : parent selection of the element in question
   * @param {string} nodeType : node type of element to append
   * @param {string} className (optional) : class name of element in question
   * @param {fn} enterFn (optional) : optional fn applied to entering elements only
   * @return {d3 selection} selection of new layer
   *
   * Previously, we were using the following pattern:
   *
   * ```
   * var sel = parent.selectAll('.' + className)
   *     .data([0]);
   *
   * sel.enter().append(nodeType)
   *     .classed(className, true);
   *
   * return sel;
   * ```
   *
   * in numerous places in our codebase to achieve the same behavior.
   *
   * The logic below performs much better, mostly as we are using
   * `.select` instead `.selectAll` that is `querySelector` instead of
   * `querySelectorAll`.
   *
   */


  lib.ensureSingle = function (parent, nodeType, className, enterFn) {
    var sel = parent.select(nodeType + (className ? '.' + className : ''));
    if (sel.size()) return sel;
    var layer = parent.append(nodeType);
    if (className) layer.classed(className, true);
    if (enterFn) layer.call(enterFn);
    return layer;
  };
  /**
   * Same as Lib.ensureSingle, but using id as selector.
   * This version is mostly used for clipPath nodes.
   *
   * @param {d3 selection} parent : parent selection of the element in question
   * @param {string} nodeType : node type of element to append
   * @param {string} id : id of element in question
   * @param {fn} enterFn (optional) : optional fn applied to entering elements only
   * @return {d3 selection} selection of new layer
   */


  lib.ensureSingleById = function (parent, nodeType, id, enterFn) {
    var sel = parent.select(nodeType + '#' + id);
    if (sel.size()) return sel;
    var layer = parent.append(nodeType).attr('id', id);
    if (enterFn) layer.call(enterFn);
    return layer;
  };
  /**
   * Converts a string path to an object.
   *
   * When given a string containing an array element, it will create a `null`
   * filled array of the given size.
   *
   * @example
   * lib.objectFromPath('nested.test[2].path', 'value');
   * // returns { nested: { test: [null, null, { path: 'value' }]}
   *
   * @param   {string}    path to nested value
   * @param   {*}         any value to be set
   *
   * @return {Object} the constructed object with a full nested path
   */


  lib.objectFromPath = function (path, value) {
    var keys = path.split('.');
    var tmpObj;
    var obj = tmpObj = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var el = null;
      var parts = keys[i].match(/(.*)\[([0-9]+)\]/);

      if (parts) {
        key = parts[1];
        el = parts[2];
        tmpObj = tmpObj[key] = [];

        if (i === keys.length - 1) {
          tmpObj[el] = value;
        } else {
          tmpObj[el] = {};
        }

        tmpObj = tmpObj[el];
      } else {
        if (i === keys.length - 1) {
          tmpObj[key] = value;
        } else {
          tmpObj[key] = {};
        }

        tmpObj = tmpObj[key];
      }
    }

    return obj;
  };
  /**
   * Iterate through an object in-place, converting dotted properties to objects.
   *
   * Examples:
   *
   *   lib.expandObjectPaths({'nested.test.path': 'value'});
   *     => { nested: { test: {path: 'value'}}}
   *
   * It also handles array notation, e.g.:
   *
   *   lib.expandObjectPaths({'foo[1].bar': 'value'});
   *     => { foo: [null, {bar: value}] }
   *
   * It handles merges the results when two properties are specified in parallel:
   *
   *   lib.expandObjectPaths({'foo[1].bar': 10, 'foo[0].bar': 20});
   *     => { foo: [{bar: 10}, {bar: 20}] }
   *
   * It does NOT, however, merge multiple multiply-nested arrays::
   *
   *   lib.expandObjectPaths({'marker[1].range[1]': 5, 'marker[1].range[0]': 4})
   *     => { marker: [null, {range: 4}] }
   */
  // Store this to avoid recompiling regex on *every* prop since this may happen many
  // many times for animations. Could maybe be inside the function. Not sure about
  // scoping vs. recompilation tradeoff, but at least it's not just inlining it into
  // the inner loop.


  var dottedPropertyRegex = /^([^\[\.]+)\.(.+)?/;
  var indexedPropertyRegex = /^([^\.]+)\[([0-9]+)\](\.)?(.+)?/;

  lib.expandObjectPaths = function (data) {
    var match, key, prop, datum, idx, dest, trailingPath;

    if (typeof data === 'object' && !Array.isArray(data)) {
      for (key in data) {
        if (data.hasOwnProperty(key)) {
          if (match = key.match(dottedPropertyRegex)) {
            datum = data[key];
            prop = match[1];
            delete data[key];
            data[prop] = lib.extendDeepNoArrays(data[prop] || {}, lib.objectFromPath(key, lib.expandObjectPaths(datum))[prop]);
          } else if (match = key.match(indexedPropertyRegex)) {
            datum = data[key];
            prop = match[1];
            idx = parseInt(match[2]);
            delete data[key];
            data[prop] = data[prop] || [];

            if (match[3] === '.') {
              // This is the case where theere are subsequent properties into which
              // we must recurse, e.g. transforms[0].value
              trailingPath = match[4];
              dest = data[prop][idx] = data[prop][idx] || {}; // NB: Extend deep no arrays prevents this from working on multiple
              // nested properties in the same object, e.g.
              //
              // {
              //   foo[0].bar[1].range
              //   foo[0].bar[0].range
              // }
              //
              // In this case, the extendDeepNoArrays will overwrite one array with
              // the other, so that both properties *will not* be present in the
              // result. Fixing this would require a more intelligent tracking
              // of changes and merging than extendDeepNoArrays currently accomplishes.

              lib.extendDeepNoArrays(dest, lib.objectFromPath(trailingPath, lib.expandObjectPaths(datum)));
            } else {
              // This is the case where this property is the end of the line,
              // e.g. xaxis.range[0]
              data[prop][idx] = lib.expandObjectPaths(datum);
            }
          } else {
            data[key] = lib.expandObjectPaths(data[key]);
          }
        }
      }
    }

    return data;
  };
  /**
   * Converts value to string separated by the provided separators.
   *
   * @example
   * lib.numSeparate(2016, '.,');
   * // returns '2016'
   *
   * @example
   * lib.numSeparate(3000, '.,', true);
   * // returns '3,000'
   *
   * @example
   * lib.numSeparate(1234.56, '|,')
   * // returns '1,234|56'
   *
   * @param   {string|number} value       the value to be converted
   * @param   {string}    separators  string of decimal, then thousands separators
   * @param   {boolean}    separatethousands  boolean, 4-digit integers are separated if true
   *
   * @return  {string}    the value that has been separated
   */


  lib.numSeparate = function (value, separators, separatethousands) {
    if (!separatethousands) separatethousands = false;

    if (typeof separators !== 'string' || separators.length === 0) {
      throw new Error('Separator string required for formatting!');
    }

    if (typeof value === 'number') {
      value = String(value);
    }

    var thousandsRe = /(\d+)(\d{3})/;
    var decimalSep = separators.charAt(0);
    var thouSep = separators.charAt(1);
    var x = value.split('.');
    var x1 = x[0];
    var x2 = x.length > 1 ? decimalSep + x[1] : ''; // Years are ignored for thousands separators

    if (thouSep && (x.length > 1 || x1.length > 4 || separatethousands)) {
      while (thousandsRe.test(x1)) {
        x1 = x1.replace(thousandsRe, '$1' + thouSep + '$2');
      }
    }

    return x1 + x2;
  };

  lib.TEMPLATE_STRING_REGEX = /%{([^\s%{}:]*)([:|\|][^}]*)?}/g;
  var SIMPLE_PROPERTY_REGEX = /^\w*$/;
  /**
   * Substitute values from an object into a string
   *
   * Examples:
   *  Lib.templateString('name: %{trace}', {trace: 'asdf'}) --> 'name: asdf'
   *  Lib.templateString('name: %{trace[0].name}', {trace: [{name: 'asdf'}]}) --> 'name: asdf'
   *
   * @param {string}  input string containing %{...} template strings
   * @param {obj}     data object containing substitution values
   *
   * @return {string} templated string
   */

  lib.templateString = function (string, obj) {
    // Not all that useful, but cache nestedProperty instantiation
    // just in case it speeds things up *slightly*:
    var getterCache = {};
    return string.replace(lib.TEMPLATE_STRING_REGEX, function (dummy, key) {
      var v;

      if (SIMPLE_PROPERTY_REGEX.test(key)) {
        v = obj[key];
      } else {
        getterCache[key] = getterCache[key] || lib.nestedProperty(obj, key).get;
        v = getterCache[key]();
      }

      return lib.isValidTextValue(v) ? v : '';
    });
  };

  var hovertemplateWarnings = {
    max: 10,
    count: 0,
    name: 'hovertemplate'
  };

  lib.hovertemplateString = function () {
    return templateFormatString.apply(hovertemplateWarnings, arguments);
  };

  var texttemplateWarnings = {
    max: 10,
    count: 0,
    name: 'texttemplate'
  };

  lib.texttemplateString = function () {
    return templateFormatString.apply(texttemplateWarnings, arguments);
  };

  var TEMPLATE_STRING_FORMAT_SEPARATOR = /^[:|\|]/;
  /**
   * Substitute values from an object into a string and optionally formats them using d3-format,
   * or fallback to associated labels.
   *
   * Examples:
   *  Lib.hovertemplateString('name: %{trace}', {trace: 'asdf'}) --> 'name: asdf'
   *  Lib.hovertemplateString('name: %{trace[0].name}', {trace: [{name: 'asdf'}]}) --> 'name: asdf'
   *  Lib.hovertemplateString('price: %{y:$.2f}', {y: 1}) --> 'price: $1.00'
   *
   * @param {string}  input string containing %{...:...} template strings
   * @param {obj}     data object containing fallback text when no formatting is specified, ex.: {yLabel: 'formattedYValue'}
   * @param {obj}     d3 locale
   * @param {obj}     data objects containing substitution values
   *
   * @return {string} templated string
   */

  function templateFormatString(string, labels, d3locale) {
    var opts = this;
    var args = arguments;
    if (!labels) labels = {}; // Not all that useful, but cache nestedProperty instantiation
    // just in case it speeds things up *slightly*:

    var getterCache = {};
    return string.replace(lib.TEMPLATE_STRING_REGEX, function (match, rawKey, format) {
      var isOther = rawKey === 'xother' || rawKey === 'yother';
      var isSpaceOther = rawKey === '_xother' || rawKey === '_yother';
      var isSpaceOtherSpace = rawKey === '_xother_' || rawKey === '_yother_';
      var isOtherSpace = rawKey === 'xother_' || rawKey === 'yother_';
      var hasOther = isOther || isSpaceOther || isOtherSpace || isSpaceOtherSpace;
      var key = rawKey;
      if (isSpaceOther || isSpaceOtherSpace) key = key.substring(1);
      if (isOtherSpace || isSpaceOtherSpace) key = key.substring(0, key.length - 1);
      var value;

      if (hasOther) {
        value = labels[key];
        if (value === undefined) return '';
      } else {
        var obj, i;

        for (i = 3; i < args.length; i++) {
          obj = args[i];
          if (!obj) continue;

          if (obj.hasOwnProperty(key)) {
            value = obj[key];
            break;
          }

          if (!SIMPLE_PROPERTY_REGEX.test(key)) {
            value = lib.nestedProperty(obj, key).get();
            value = getterCache[key] || lib.nestedProperty(obj, key).get();
            if (value) getterCache[key] = value;
          }

          if (value !== undefined) break;
        }
      }

      if (value === undefined && opts) {
        if (opts.count < opts.max) {
          lib.warn('Variable \'' + key + '\' in ' + opts.name + ' could not be found!');
          value = match;
        }

        if (opts.count === opts.max) {
          lib.warn('Too many ' + opts.name + ' warnings - additional warnings will be suppressed');
        }

        opts.count++;
        return match;
      }

      if (format) {
        var fmt;

        if (format[0] === ':') {
          fmt = d3locale ? d3locale.numberFormat : lib.numberFormat;
          value = fmt(format.replace(TEMPLATE_STRING_FORMAT_SEPARATOR, ''))(value);
        }

        if (format[0] === '|') {
          fmt = d3locale ? d3locale.timeFormat : utcFormat;
          var ms = lib.dateTime2ms(value);
          value = lib.formatDate(ms, format.replace(TEMPLATE_STRING_FORMAT_SEPARATOR, ''), false, fmt);
        }
      } else {
        var keyLabel = key + 'Label';
        if (labels.hasOwnProperty(keyLabel)) value = labels[keyLabel];
      }

      if (hasOther) {
        value = '(' + value + ')';
        if (isSpaceOther || isSpaceOtherSpace) value = ' ' + value;
        if (isOtherSpace || isSpaceOtherSpace) value = value + ' ';
      }

      return value;
    });
  }
  /*
   * alphanumeric string sort, tailored for subplot IDs like scene2, scene10, x10y13 etc
   */


  var char0 = 48;
  var char9 = 57;

  lib.subplotSort = function (a, b) {
    var l = Math.min(a.length, b.length) + 1;
    var numA = 0;
    var numB = 0;

    for (var i = 0; i < l; i++) {
      var charA = a.charCodeAt(i) || 0;
      var charB = b.charCodeAt(i) || 0;
      var isNumA = charA >= char0 && charA <= char9;
      var isNumB = charB >= char0 && charB <= char9;
      if (isNumA) numA = 10 * numA + charA - char0;
      if (isNumB) numB = 10 * numB + charB - char0;

      if (!isNumA || !isNumB) {
        if (numA !== numB) return numA - numB;
        if (charA !== charB) return charA - charB;
      }
    }

    return numB - numA;
  }; // repeatable pseudorandom generator


  var randSeed = 2000000000;

  lib.seedPseudoRandom = function () {
    randSeed = 2000000000;
  };

  lib.pseudoRandom = function () {
    var lastVal = randSeed;
    randSeed = (69069 * randSeed + 1) % 4294967296; // don't let consecutive vals be too close together
    // gets away from really trying to be random, in favor of better local uniformity

    if (Math.abs(randSeed - lastVal) < 429496729) return lib.pseudoRandom();
    return randSeed / 4294967296;
  };
  /** Fill hover 'pointData' container with 'correct' hover text value
   *
   * - If trace hoverinfo contains a 'text' flag and hovertext is not set,
   *   the text elements will be seen in the hover labels.
   *
   * - If trace hoverinfo contains a 'text' flag and hovertext is set,
   *   hovertext takes precedence over text
   *   i.e. the hoverinfo elements will be seen in the hover labels
   *
   *  @param {object} calcPt
   *  @param {object} trace
   *  @param {object || array} contOut (mutated here)
   */


  lib.fillText = function (calcPt, trace, contOut) {
    var fill = Array.isArray(contOut) ? function (v) {
      contOut.push(v);
    } : function (v) {
      contOut.text = v;
    };
    var htx = lib.extractOption(calcPt, trace, 'htx', 'hovertext');
    if (lib.isValidTextValue(htx)) return fill(htx);
    var tx = lib.extractOption(calcPt, trace, 'tx', 'text');
    if (lib.isValidTextValue(tx)) return fill(tx);
  }; // accept all truthy values and 0 (which gets cast to '0' in the hover labels)


  lib.isValidTextValue = function (v) {
    return v || v === 0;
  };
  /**
   * @param {number} ratio
   * @param {number} n (number of decimal places)
   */


  lib.formatPercent = function (ratio, n) {
    n = n || 0;
    var str = (Math.round(100 * ratio * Math.pow(10, n)) * Math.pow(0.1, n)).toFixed(n) + '%';

    for (var i = 0; i < n; i++) {
      if (str.indexOf('.') !== -1) {
        str = str.replace('0%', '%');
        str = str.replace('.%', '%');
      }
    }

    return str;
  };

  lib.isHidden = function (gd) {
    var display = window.getComputedStyle(gd).display;
    return !display || display === 'none';
  };

  lib.strTranslate = function (x, y) {
    return x || y ? 'translate(' + x + ',' + y + ')' : '';
  };

  lib.strRotate = function (a) {
    return a ? 'rotate(' + a + ')' : '';
  };

  lib.strScale = function (s) {
    return s !== 1 ? 'scale(' + s + ')' : '';
  };
  /** Return transform text for bar bar-like rectangles and pie-like slices
   *  @param {object} transform
   *  - targetX: desired position on the x-axis
   *  - targetY: desired position on the y-axis
   *  - textX: text middle position on the x-axis
   *  - textY: text middle position on the y-axis
   *  - anchorX: (optional) text anchor position on the x-axis (computed from textX), zero for middle anchor
   *  - anchorY: (optional) text anchor position on the y-axis (computed from textY), zero for middle anchor
   *  - scale: (optional) scale applied after translate
   *  - rotate: (optional) rotation applied after scale
   *  - noCenter: when defined no extra arguments needed in rotation
   */


  lib.getTextTransform = function (transform) {
    var noCenter = transform.noCenter;
    var textX = transform.textX;
    var textY = transform.textY;
    var targetX = transform.targetX;
    var targetY = transform.targetY;
    var anchorX = transform.anchorX || 0;
    var anchorY = transform.anchorY || 0;
    var rotate = transform.rotate;
    var scale = transform.scale;
    if (!scale) scale = 0;else if (scale > 1) scale = 1;
    return lib.strTranslate(targetX - scale * (textX + anchorX), targetY - scale * (textY + anchorY)) + lib.strScale(scale) + (rotate ? 'rotate(' + rotate + (noCenter ? '' : ' ' + textX + ' ' + textY) + ')' : '');
  };

  lib.ensureUniformFontSize = function (gd, baseFont) {
    var out = lib.extendFlat({}, baseFont);
    out.size = Math.max(baseFont.size, gd._fullLayout.uniformtext.minsize || 0);
    return out;
  };
  /**
   * provide a human-readable list e.g. "A, B, C and D" with an ending separator
   *
   * @param {array} arr : the array to join
   * @param {string} mainSeparator : main separator
   * @param {string} lastSeparator : last separator
   *
   * @return {string} : joined list
   */


  lib.join2 = function (arr, mainSeparator, lastSeparator) {
    var len = arr.length;

    if (len > 1) {
      return arr.slice(0, -1).join(mainSeparator) + lastSeparator + arr[len - 1];
    }

    return arr.join(mainSeparator);
  };

  lib.bigFont = function (size) {
    return Math.round(1.2 * size);
  };

  var firefoxVersion = lib.getFirefoxVersion(); // see https://bugzilla.mozilla.org/show_bug.cgi?id=1684973

  var isProblematicFirefox = firefoxVersion !== null && firefoxVersion < 86;
  /**
   * Return the mouse position from the last event registered by D3.
   * @returns An array with two numbers, representing the x and y coordinates of the mouse pointer
   *   at the event relative to the targeted node.
   */

  lib.getPositionFromD3Event = function () {
    if (isProblematicFirefox) {
      // layerX and layerY are non-standard, so we only fallback to them when we have to:
      return [d3.event.layerX, d3.event.layerY];
    } else {
      return [d3.event.offsetX, d3.event.offsetY];
    }
  };
});

var rules = {
  "X,X div": "direction:ltr;font-family:\"Open Sans\",verdana,arial,sans-serif;margin:0;padding:0;",
  "X input,X button": "font-family:\"Open Sans\",verdana,arial,sans-serif;",
  "X input:focus,X button:focus": "outline:none;",
  "X a": "text-decoration:none;",
  "X a:hover": "text-decoration:none;",
  "X .crisp": "shape-rendering:crispEdges;",
  "X .user-select-none": "-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none;",
  "X svg": "overflow:hidden;",
  "X svg a": "fill:#447adb;",
  "X svg a:hover": "fill:#3c6dc5;",
  "X .main-svg": "position:absolute;top:0;left:0;pointer-events:none;",
  "X .main-svg .draglayer": "pointer-events:all;",
  "X .cursor-default": "cursor:default;",
  "X .cursor-pointer": "cursor:pointer;",
  "X .cursor-crosshair": "cursor:crosshair;",
  "X .cursor-move": "cursor:move;",
  "X .cursor-col-resize": "cursor:col-resize;",
  "X .cursor-row-resize": "cursor:row-resize;",
  "X .cursor-ns-resize": "cursor:ns-resize;",
  "X .cursor-ew-resize": "cursor:ew-resize;",
  "X .cursor-sw-resize": "cursor:sw-resize;",
  "X .cursor-s-resize": "cursor:s-resize;",
  "X .cursor-se-resize": "cursor:se-resize;",
  "X .cursor-w-resize": "cursor:w-resize;",
  "X .cursor-e-resize": "cursor:e-resize;",
  "X .cursor-nw-resize": "cursor:nw-resize;",
  "X .cursor-n-resize": "cursor:n-resize;",
  "X .cursor-ne-resize": "cursor:ne-resize;",
  "X .cursor-grab": "cursor:-webkit-grab;cursor:grab;",
  "X .modebar": "position:absolute;top:2px;right:2px;",
  "X .ease-bg": "-webkit-transition:background-color .3s ease 0s;-moz-transition:background-color .3s ease 0s;-ms-transition:background-color .3s ease 0s;-o-transition:background-color .3s ease 0s;transition:background-color .3s ease 0s;",
  "X .modebar--hover>:not(.watermark)": "opacity:0;-webkit-transition:opacity .3s ease 0s;-moz-transition:opacity .3s ease 0s;-ms-transition:opacity .3s ease 0s;-o-transition:opacity .3s ease 0s;transition:opacity .3s ease 0s;",
  "X:hover .modebar--hover .modebar-group": "opacity:1;",
  "X .modebar-group": "float:left;display:inline-block;box-sizing:border-box;padding-left:8px;position:relative;vertical-align:middle;white-space:nowrap;",
  "X .modebar-btn": "position:relative;font-size:16px;padding:3px 4px;height:22px;cursor:pointer;line-height:normal;box-sizing:border-box;",
  "X .modebar-btn svg": "position:relative;top:2px;",
  "X .modebar.vertical": "display:flex;flex-direction:column;flex-wrap:wrap;align-content:flex-end;max-height:100%;",
  "X .modebar.vertical svg": "top:-1px;",
  "X .modebar.vertical .modebar-group": "display:block;float:none;padding-left:0px;padding-bottom:8px;",
  "X .modebar.vertical .modebar-group .modebar-btn": "display:block;text-align:center;",
  "X [data-title]:before,X [data-title]:after": "position:absolute;-webkit-transform:translate3d(0, 0, 0);-moz-transform:translate3d(0, 0, 0);-ms-transform:translate3d(0, 0, 0);-o-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);display:none;opacity:0;z-index:1001;pointer-events:none;top:110%;right:50%;",
  "X [data-title]:hover:before,X [data-title]:hover:after": "display:block;opacity:1;",
  "X [data-title]:before": "content:\"\";position:absolute;background:transparent;border:6px solid transparent;z-index:1002;margin-top:-12px;border-bottom-color:#69738a;margin-right:-6px;",
  "X [data-title]:after": "content:attr(data-title);background:#69738a;color:#fff;padding:8px 10px;font-size:12px;line-height:12px;white-space:nowrap;margin-right:-18px;border-radius:2px;",
  "X .vertical [data-title]:before,X .vertical [data-title]:after": "top:0%;right:200%;",
  "X .vertical [data-title]:before": "border:6px solid transparent;border-left-color:#69738a;margin-top:8px;margin-right:-30px;",
  "X .select-outline": "fill:none;stroke-width:1;shape-rendering:crispEdges;",
  "X .select-outline-1": "stroke:#fff;",
  "X .select-outline-2": "stroke:#000;stroke-dasharray:2px 2px;",
  Y: "font-family:\"Open Sans\",verdana,arial,sans-serif;position:fixed;top:50px;right:20px;z-index:10000;font-size:10pt;max-width:180px;",
  "Y p": "margin:0;",
  "Y .notifier-note": "min-width:180px;max-width:250px;border:1px solid #fff;z-index:3000;margin:0;background-color:#8c97af;background-color:rgba(140,151,175,.9);color:#fff;padding:10px;overflow-wrap:break-word;word-wrap:break-word;-ms-hyphens:auto;-webkit-hyphens:auto;hyphens:auto;",
  "Y .notifier-close": "color:#fff;opacity:.8;float:right;padding:0 5px;background:none;border:none;font-size:20px;font-weight:bold;line-height:20px;",
  "Y .notifier-close:hover": "color:#444;text-decoration:none;cursor:pointer;"
};

for (var selector in rules) {
  var fullSelector = selector.replace(/^,/, ' ,').replace(/X/g, '.js-plotly-plot .plotly').replace(/Y/g, '.plotly-notifier');
  lib_1.addStyleRule(fullSelector, rules[selector]);
}

var server = false;

var hasHover;

if (typeof commonjsGlobal.matchMedia === 'function') {
  hasHover = !commonjsGlobal.matchMedia('(hover: none)').matches;
} else {
  hasHover = server;
}

var hasHover_1 = hasHover;

// Copyright Joyent, Inc. and other Node contributors.

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter$3() {
  EventEmitter$3.init.call(this);
}

var events$1 = EventEmitter$3;
var once_1 = once; // Backwards-compat with node 0.10.x

EventEmitter$3.EventEmitter = EventEmitter$3;
EventEmitter$3.prototype._events = undefined;
EventEmitter$3.prototype._eventsCount = 0;
EventEmitter$3.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter$3, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter$3.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter$3.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter$3.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter$3.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter$3.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter$3.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter$3.prototype.on = EventEmitter$3.prototype.addListener;

EventEmitter$3.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter$3.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter$3.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter$3.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter$3.prototype.off = EventEmitter$3.prototype.removeListener;

EventEmitter$3.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter$3.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter$3.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter$3.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter$3.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter$3.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }

      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });

    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }

      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
events$1.once = once_1;

/* global jQuery:false */


var EventEmitter$2 = events$1.EventEmitter;
var Events = {
  init: function (plotObj) {
    /*
     * If we have already instantiated an emitter for this plot
     * return early.
     */
    if (plotObj._ev instanceof EventEmitter$2) return plotObj;
    var ev = new EventEmitter$2();
    var internalEv = new EventEmitter$2();
    /*
     * Assign to plot._ev while we still live in a land
     * where plot is a DOM element with stuff attached to it.
     * In the future we can make plot the event emitter itself.
     */

    plotObj._ev = ev;
    /*
     * Create a second event handler that will manage events *internally*.
     * This allows parts of plotly to respond to thing like relayout without
     * having to use the user-facing event handler. They cannot peacefully
     * coexist on the same handler because a user invoking
     * plotObj.removeAllListeners() would detach internal events, breaking
     * plotly.
     */

    plotObj._internalEv = internalEv;
    /*
     * Assign bound methods from the ev to the plot object. These methods
     * will reference the 'this' of plot._ev even though they are methods
     * of plot. This will keep the event machinery away from the plot object
     * which currently is often a DOM element but presents an API that will
     * continue to function when plot becomes an emitter. Not all EventEmitter
     * methods have been bound to `plot` as some do not currently add value to
     * the Plotly event API.
     */

    plotObj.on = ev.on.bind(ev);
    plotObj.once = ev.once.bind(ev);
    plotObj.removeListener = ev.removeListener.bind(ev);
    plotObj.removeAllListeners = ev.removeAllListeners.bind(ev);
    /*
     * Create functions for managing internal events. These are *only* triggered
     * by the mirroring of external events via the emit function.
     */

    plotObj._internalOn = internalEv.on.bind(internalEv);
    plotObj._internalOnce = internalEv.once.bind(internalEv);
    plotObj._removeInternalListener = internalEv.removeListener.bind(internalEv);
    plotObj._removeAllInternalListeners = internalEv.removeAllListeners.bind(internalEv);
    /*
     * We must wrap emit to continue to support JQuery events. The idea
     * is to check to see if the user is using JQuery events, if they are
     * we emit JQuery events to trigger user handlers as well as the EventEmitter
     * events.
     */

    plotObj.emit = function (event, data) {
      if (typeof jQuery !== 'undefined') {
        jQuery(plotObj).trigger(event, data);
      }

      ev.emit(event, data);
      internalEv.emit(event, data);
    };

    return plotObj;
  },

  /*
   * This function behaves like jQuery's triggerHandler. It calls
   * all handlers for a particular event and returns the return value
   * of the LAST handler. This function also triggers jQuery's
   * triggerHandler for backwards compatibility.
   */
  triggerHandler: function (plotObj, event, data) {
    var jQueryHandlerValue;
    var nodeEventHandlerValue;
    /*
     * If jQuery exists run all its handlers for this event and
     * collect the return value of the LAST handler function
     */

    if (typeof jQuery !== 'undefined') {
      jQueryHandlerValue = jQuery(plotObj).triggerHandler(event, data);
    }
    /*
     * Now run all the node style event handlers
     */


    var ev = plotObj._ev;
    if (!ev) return jQueryHandlerValue;
    var handlers = ev._events[event];
    if (!handlers) return jQueryHandlerValue; // making sure 'this' is the EventEmitter instance

    function apply(handler) {
      // The 'once' case, we can't just call handler() as we need
      // the return value here. So,
      // - remove handler
      // - call listener and grab return value!
      // - stash 'fired' key to not call handler twice
      if (handler.listener) {
        ev.removeListener(event, handler.listener);

        if (!handler.fired) {
          handler.fired = true;
          return handler.listener.apply(ev, [data]);
        }
      } else {
        return handler.apply(ev, [data]);
      }
    } // handlers can be function or an array of functions


    handlers = Array.isArray(handlers) ? handlers : [handlers];
    var i;

    for (i = 0; i < handlers.length - 1; i++) {
      apply(handlers[i]);
    } // now call the final handler and collect its value


    nodeEventHandlerValue = apply(handlers[i]);
    /*
     * Return either the jQuery handler value if it exists or the
     * nodeEventHandler value. jQuery event value supersedes nodejs
     * events for backwards compatibility reasons.
     */

    return jQueryHandlerValue !== undefined ? jQueryHandlerValue : nodeEventHandlerValue;
  },
  purge: function (plotObj) {
    delete plotObj._ev;
    delete plotObj.on;
    delete plotObj.once;
    delete plotObj.removeListener;
    delete plotObj.removeAllListeners;
    delete plotObj.emit;
    delete plotObj._ev;
    delete plotObj._internalEv;
    delete plotObj._internalOn;
    delete plotObj._internalOnce;
    delete plotObj._removeInternalListener;
    delete plotObj._removeAllInternalListeners;
    return plotObj;
  }
};
var events = Events;

var dfltConfig$2 = plot_config.dfltConfig;
/**
 * Copy arg array *without* removing `undefined` values from objects.
 *
 * @param gd
 * @param args
 * @returns {Array}
 */

function copyArgArray(gd, args) {
  var copy = [];
  var arg;

  for (var i = 0; i < args.length; i++) {
    arg = args[i];
    if (arg === gd) copy[i] = arg;else if (typeof arg === 'object') {
      copy[i] = Array.isArray(arg) ? lib_1.extendDeep([], arg) : lib_1.extendDeepAll({}, arg);
    } else copy[i] = arg;
  }

  return copy;
} // -----------------------------------------------------
// Undo/Redo queue for plots
// -----------------------------------------------------


var queue = {}; // TODO: disable/enable undo and redo buttons appropriately

/**
 * Add an item to the undoQueue for a graphDiv
 *
 * @param gd
 * @param undoFunc Function undo this operation
 * @param undoArgs Args to supply undoFunc with
 * @param redoFunc Function to redo this operation
 * @param redoArgs Args to supply redoFunc with
 */

queue.add = function (gd, undoFunc, undoArgs, redoFunc, redoArgs) {
  var queueObj, queueIndex; // make sure we have the queue and our position in it

  gd.undoQueue = gd.undoQueue || {
    index: 0,
    queue: [],
    sequence: false
  };
  queueIndex = gd.undoQueue.index; // if we're already playing an undo or redo, or if this is an auto operation
  // (like pane resize... any others?) then we don't save this to the undo queue

  if (gd.autoplay) {
    if (!gd.undoQueue.inSequence) gd.autoplay = false;
    return;
  } // if we're not in a sequence or are just starting, we need a new queue item


  if (!gd.undoQueue.sequence || gd.undoQueue.beginSequence) {
    queueObj = {
      undo: {
        calls: [],
        args: []
      },
      redo: {
        calls: [],
        args: []
      }
    };
    gd.undoQueue.queue.splice(queueIndex, gd.undoQueue.queue.length - queueIndex, queueObj);
    gd.undoQueue.index += 1;
  } else {
    queueObj = gd.undoQueue.queue[queueIndex - 1];
  }

  gd.undoQueue.beginSequence = false; // we unshift to handle calls for undo in a forward for loop later

  if (queueObj) {
    queueObj.undo.calls.unshift(undoFunc);
    queueObj.undo.args.unshift(undoArgs);
    queueObj.redo.calls.push(redoFunc);
    queueObj.redo.args.push(redoArgs);
  }

  if (gd.undoQueue.queue.length > dfltConfig$2.queueLength) {
    gd.undoQueue.queue.shift();
    gd.undoQueue.index--;
  }
};
/**
 * Begin a sequence of undoQueue changes
 *
 * @param gd
 */


queue.startSequence = function (gd) {
  gd.undoQueue = gd.undoQueue || {
    index: 0,
    queue: [],
    sequence: false
  };
  gd.undoQueue.sequence = true;
  gd.undoQueue.beginSequence = true;
};
/**
 * Stop a sequence of undoQueue changes
 *
 * Call this *after* you're sure your undo chain has ended
 *
 * @param gd
 */


queue.stopSequence = function (gd) {
  gd.undoQueue = gd.undoQueue || {
    index: 0,
    queue: [],
    sequence: false
  };
  gd.undoQueue.sequence = false;
  gd.undoQueue.beginSequence = false;
};
/**
 * Move one step back in the undo queue, and undo the object there.
 *
 * @param gd
 */


queue.undo = function undo(gd) {
  var queueObj, i;

  if (gd.undoQueue === undefined || isNaN(gd.undoQueue.index) || gd.undoQueue.index <= 0) {
    return;
  } // index is pointing to next *forward* queueObj, point to the one we're undoing


  gd.undoQueue.index--; // get the queueObj for instructions on how to undo

  queueObj = gd.undoQueue.queue[gd.undoQueue.index]; // this sequence keeps things from adding to the queue during undo/redo

  gd.undoQueue.inSequence = true;

  for (i = 0; i < queueObj.undo.calls.length; i++) {
    queue.plotDo(gd, queueObj.undo.calls[i], queueObj.undo.args[i]);
  }

  gd.undoQueue.inSequence = false;
  gd.autoplay = false;
};
/**
 * Redo the current object in the undo, then move forward in the queue.
 *
 * @param gd
 */


queue.redo = function redo(gd) {
  var queueObj, i;

  if (gd.undoQueue === undefined || isNaN(gd.undoQueue.index) || gd.undoQueue.index >= gd.undoQueue.queue.length) {
    return;
  } // get the queueObj for instructions on how to undo


  queueObj = gd.undoQueue.queue[gd.undoQueue.index]; // this sequence keeps things from adding to the queue during undo/redo

  gd.undoQueue.inSequence = true;

  for (i = 0; i < queueObj.redo.calls.length; i++) {
    queue.plotDo(gd, queueObj.redo.calls[i], queueObj.redo.args[i]);
  }

  gd.undoQueue.inSequence = false;
  gd.autoplay = false; // index is pointing to the thing we just redid, move it

  gd.undoQueue.index++;
};
/**
 * Called by undo/redo to make the actual changes.
 *
 * Not meant to be called publically, but included for mocking out in tests.
 *
 * @param gd
 * @param func
 * @param args
 */


queue.plotDo = function (gd, func, args) {
  gd.autoplay = true; // this *won't* copy gd and it preserves `undefined` properties!

  args = copyArgArray(gd, args); // call the supplied function

  func.apply(null, args);
};

var queue_1 = queue;

var frame_attributes = {
  _isLinkedToArray: 'frames_entry',
  group: {
    valType: 'string',
    description: ['An identifier that specifies the group to which the frame belongs,', 'used by animate to select a subset of frames.'].join(' ')
  },
  name: {
    valType: 'string',
    description: 'A label by which to identify the frame'
  },
  traces: {
    valType: 'any',
    description: ['A list of trace indices that identify the respective traces in the', 'data attribute'].join(' ')
  },
  baseframe: {
    valType: 'string',
    description: ['The name of the frame into which this frame\'s properties are merged', 'before applying. This is used to unify properties and avoid needing', 'to specify the same values for the same properties in multiple frames.'].join(' ')
  },
  data: {
    valType: 'any',
    description: ['A list of traces this frame modifies. The format is identical to the', 'normal trace definition.'].join(' ')
  },
  layout: {
    valType: 'any',
    description: ['Layout properties which this frame modifies. The format is identical', 'to the normal layout definition.'].join(' ')
  }
};

var extendFlat$9 = lib_1.extendFlat;
var isPlainObject$2 = lib_1.isPlainObject;
var traceOpts = {
  valType: 'flaglist',
  extras: ['none'],
  flags: ['calc', 'clearAxisTypes', 'plot', 'style', 'markerSize', 'colorbars'],
  description: ['trace attributes should include an `editType` string matching this flaglist.', '*calc* is the most extensive: a full (re)plot starting by clearing `gd.calcdata`', 'to force it to be regenerated', '*clearAxisTypes* resets the types of the axes this trace is on, because new data could', 'cause the automatic axis type detection to change. Log type will not be cleared, as that', 'is never automatically chosen so must have been user-specified.', '*plot* (re)plots but without first clearing `gd.calcdata`.', '*style* only calls `module.style` (or module.editStyle) for all trace modules and redraws the legend.', '*markerSize* is like *style*, but propagate axis-range changes due to scatter `marker.size`', '*colorbars* only redraws colorbars.'].join(' ')
};
var layoutOpts = {
  valType: 'flaglist',
  extras: ['none'],
  flags: ['calc', 'plot', 'legend', 'ticks', 'axrange', 'layoutstyle', 'modebar', 'camera', 'arraydraw', 'colorbars'],
  description: ['layout attributes should include an `editType` string matching this flaglist.', '*calc* is the most extensive: a full (re)plot starting by clearing `gd.calcdata`', 'to force it to be regenerated', '*plot* (re)plots but without first clearing `gd.calcdata`.', '*legend* only redraws the legend.', '*ticks* only redraws axis ticks, labels, and gridlines.', '*axrange* minimal sequence when updating axis ranges.', '*layoutstyle* reapplies global and SVG cartesian axis styles.', '*modebar* just updates the modebar.', '*camera* just updates the camera settings for gl3d scenes.', '*arraydraw* allows component arrays to invoke the redraw routines just for the', 'component(s) that changed.', '*colorbars* only redraws colorbars.'].join(' ')
}; // flags for inside restyle/relayout include a few extras
// that shouldn't be used in attributes, to deal with certain
// combinations and conditionals efficiently

var traceEditTypeFlags = traceOpts.flags.slice().concat(['fullReplot']);
var layoutEditTypeFlags = layoutOpts.flags.slice().concat('layoutReplot');
var edit_types = {
  traces: traceOpts,
  layout: layoutOpts,

  /*
   * default (all false) edit flags for restyle (traces)
   * creates a new object each call, so the caller can mutate freely
   */
  traceFlags: function () {
    return falseObj(traceEditTypeFlags);
  },

  /*
   * default (all false) edit flags for relayout
   * creates a new object each call, so the caller can mutate freely
   */
  layoutFlags: function () {
    return falseObj(layoutEditTypeFlags);
  },

  /*
   * update `flags` with the `editType` values found in `attr`
   */
  update: function (flags, attr) {
    var editType = attr.editType;

    if (editType && editType !== 'none') {
      var editTypeParts = editType.split('+');

      for (var i = 0; i < editTypeParts.length; i++) {
        flags[editTypeParts[i]] = true;
      }
    }
  },
  overrideAll: overrideAll$5
};

function falseObj(keys) {
  var out = {};

  for (var i = 0; i < keys.length; i++) out[keys[i]] = false;

  return out;
}
/**
 * For attributes that are largely copied from elsewhere into a plot type that doesn't
 * support partial redraws - overrides the editType field of all attributes in the object
 *
 * @param {object} attrs: the attributes to override. Will not be mutated.
 * @param {string} editTypeOverride: the new editType to use
 * @param {'nested'|'from-root'} overrideContainers:
 *   - 'nested' will override editType for nested containers but not the root.
 *   - 'from-root' will also override editType of the root container.
 *   Containers below the absolute top level (trace or layout root) DO need an
 *   editType even if they are not `valObject`s themselves (eg `scatter.marker`)
 *   to handle the case where you edit the whole container.
 *
 * @return {object} a new attributes object with `editType` modified as directed
 */


function overrideAll$5(attrs, editTypeOverride, overrideContainers) {
  var out = extendFlat$9({}, attrs);

  for (var key in out) {
    var attr = out[key];

    if (isPlainObject$2(attr)) {
      out[key] = overrideOne(attr, editTypeOverride, overrideContainers, key);
    }
  }

  if (overrideContainers === 'from-root') out.editType = editTypeOverride;
  return out;
}

function overrideOne(attr, editTypeOverride, overrideContainers, key) {
  if (attr.valType) {
    var out = extendFlat$9({}, attr);
    out.editType = editTypeOverride;

    if (Array.isArray(attr.items)) {
      out.items = new Array(attr.items.length);

      for (var i = 0; i < attr.items.length; i++) {
        out.items[i] = overrideOne(attr.items[i], editTypeOverride);
      }
    }

    return out;
  } else {
    // don't provide an editType for the _deprecated container
    return overrideAll$5(attr, editTypeOverride, key.charAt(0) === '_' ? 'nested' : 'from-root');
  }
}

var plot_schema = createCommonjsModule(function (module, exports) {

  var configAttributes = plot_config.configAttributes;
  var extendDeepAll = lib_1.extendDeepAll;
  var isPlainObject = lib_1.isPlainObject;
  var isArrayOrTypedArray = lib_1.isArrayOrTypedArray;
  var nestedProperty = lib_1.nestedProperty;
  var valObjectMeta = lib_1.valObjectMeta;
  var IS_SUBPLOT_OBJ = '_isSubplotObj';
  var IS_LINKED_TO_ARRAY = '_isLinkedToArray';
  var ARRAY_ATTR_REGEXPS = '_arrayAttrRegexps';
  var DEPRECATED = '_deprecated';
  var UNDERSCORE_ATTRS = [IS_SUBPLOT_OBJ, IS_LINKED_TO_ARRAY, ARRAY_ATTR_REGEXPS, DEPRECATED];
  exports.IS_SUBPLOT_OBJ = IS_SUBPLOT_OBJ;
  exports.IS_LINKED_TO_ARRAY = IS_LINKED_TO_ARRAY;
  exports.DEPRECATED = DEPRECATED;
  exports.UNDERSCORE_ATTRS = UNDERSCORE_ATTRS;
  /** Outputs the full plotly.js plot schema
   *
   * @return {object}
   *  - defs
   *  - traces
   *  - layout
   *  - transforms
   *  - frames
   *  - animations
   *  - config
   */

  exports.get = function () {
    var traces = {};
    registry.allTypes.forEach(function (type) {
      traces[type] = getTraceAttributes(type);
    });
    var transforms = {};
    Object.keys(registry.transformsRegistry).forEach(function (type) {
      transforms[type] = getTransformAttributes(type);
    });
    return {
      defs: {
        valObjects: valObjectMeta,
        metaKeys: UNDERSCORE_ATTRS.concat(['description', 'role', 'editType', 'impliedEdits']),
        editType: {
          traces: edit_types.traces,
          layout: edit_types.layout
        },
        impliedEdits: {
          description: ['Sometimes when an attribute is changed, other attributes', 'must be altered as well in order to achieve the intended', 'result. For example, when `range` is specified, it is', 'important to set `autorange` to `false` or the new `range`', 'value would be lost in the redraw. `impliedEdits` is the', 'mechanism to do this: `impliedEdits: {autorange: false}`.', 'Each key is a relative paths to the attribute string to', 'change, using *^* to ascend into the parent container,', 'for example `range[0]` has `impliedEdits: {*^autorange*: false}`.', 'A value of `undefined` means that the attribute will not be', 'changed, but its previous value should be recorded in case', 'we want to reverse this change later. For example, `autorange`', 'has `impliedEdits: {*range[0]*: undefined, *range[1]*:undefined}', 'because the range will likely be changed by redraw.'].join(' ')
        }
      },
      traces: traces,
      layout: getLayoutAttributes(),
      transforms: transforms,
      frames: getFramesAttributes(),
      animation: formatAttributes(animation_attributes),
      config: formatAttributes(configAttributes)
    };
  };
  /**
   * Crawl the attribute tree, recursively calling a callback function
   *
   * @param {object} attrs
   *  The node of the attribute tree (e.g. the root) from which recursion originates
   * @param {Function} callback
   *  A callback function with the signature:
   *          @callback callback
   *          @param {object} attr an attribute
   *          @param {String} attrName name string
   *          @param {object[]} attrs all the attributes
   *          @param {Number} level the recursion level, 0 at the root
   *          @param {String} fullAttrString full attribute name (ie 'marker.line')
   * @param {Number} [specifiedLevel]
   *  The level in the tree, in order to let the callback function detect descend or backtrack,
   *  typically unsupplied (implied 0), just used by the self-recursive call.
   *  The necessity arises because the tree traversal is not controlled by callback return values.
   *  The decision to not use callback return values for controlling tree pruning arose from
   *  the goal of keeping the crawler backwards compatible. Observe that one of the pruning conditions
   *  precedes the callback call.
   * @param {string} [attrString]
   *  the path to the current attribute, as an attribute string (ie 'marker.line')
   *  typically unsupplied, but you may supply it if you want to disambiguate which attrs tree you
   *  are starting from
   *
   * @return {object} transformOut
   *  copy of transformIn that contains attribute defaults
   */


  exports.crawl = function (attrs, callback, specifiedLevel, attrString) {
    var level = specifiedLevel || 0;
    attrString = attrString || '';
    Object.keys(attrs).forEach(function (attrName) {
      var attr = attrs[attrName];
      if (UNDERSCORE_ATTRS.indexOf(attrName) !== -1) return;
      var fullAttrString = (attrString ? attrString + '.' : '') + attrName;
      callback(attr, attrName, attrs, level, fullAttrString);
      if (exports.isValObject(attr)) return;

      if (isPlainObject(attr) && attrName !== 'impliedEdits') {
        exports.crawl(attr, callback, level + 1, fullAttrString);
      }
    });
  };
  /** Is object a value object (or a container object)?
   *
   * @param {object} obj
   * @return {boolean}
   *  returns true for a valid value object and
   *  false for tree nodes in the attribute hierarchy
   */


  exports.isValObject = function (obj) {
    return obj && obj.valType !== undefined;
  };
  /**
   * Find all data array attributes in a given trace object - including
   * `arrayOk` attributes.
   *
   * @param {object} trace
   *  full trace object that contains a reference to `_module.attributes`
   *
   * @return {array} arrayAttributes
   *  list of array attributes for the given trace
   */


  exports.findArrayAttributes = function (trace) {
    var arrayAttributes = [];
    var stack = [];
    var isArrayStack = [];
    var baseContainer, baseAttrName;

    function callback(attr, attrName, attrs, level) {
      stack = stack.slice(0, level).concat([attrName]);
      isArrayStack = isArrayStack.slice(0, level).concat([attr && attr._isLinkedToArray]);
      var splittableAttr = attr && (attr.valType === 'data_array' || attr.arrayOk === true) && !(stack[level - 1] === 'colorbar' && (attrName === 'ticktext' || attrName === 'tickvals')); // Manually exclude 'colorbar.tickvals' and 'colorbar.ticktext' for now
      // which are declared as `valType: 'data_array'` but scale independently of
      // the coordinate arrays.
      //
      // Down the road, we might want to add a schema field (e.g `uncorrelatedArray: true`)
      // to distinguish attributes of the likes.

      if (!splittableAttr) return;
      crawlIntoTrace(baseContainer, 0, '');
    }

    function crawlIntoTrace(container, i, astrPartial) {
      var item = container[stack[i]];
      var newAstrPartial = astrPartial + stack[i];

      if (i === stack.length - 1) {
        if (isArrayOrTypedArray(item)) {
          arrayAttributes.push(baseAttrName + newAstrPartial);
        }
      } else {
        if (isArrayStack[i]) {
          if (Array.isArray(item)) {
            for (var j = 0; j < item.length; j++) {
              if (isPlainObject(item[j])) {
                crawlIntoTrace(item[j], i + 1, newAstrPartial + '[' + j + '].');
              }
            }
          }
        } else if (isPlainObject(item)) {
          crawlIntoTrace(item, i + 1, newAstrPartial + '.');
        }
      }
    }

    baseContainer = trace;
    baseAttrName = '';
    exports.crawl(attributes$k, callback);

    if (trace._module && trace._module.attributes) {
      exports.crawl(trace._module.attributes, callback);
    }

    var transforms = trace.transforms;

    if (transforms) {
      for (var i = 0; i < transforms.length; i++) {
        var transform = transforms[i];
        var module = transform._module;

        if (module) {
          baseAttrName = 'transforms[' + i + '].';
          baseContainer = transform;
          exports.crawl(module.attributes, callback);
        }
      }
    }

    return arrayAttributes;
  };
  /*
   * Find the valObject for one attribute in an existing trace
   *
   * @param {object} trace
   *  full trace object that contains a reference to `_module.attributes`
   * @param {object} parts
   *  an array of parts, like ['transforms', 1, 'value']
   *  typically from nestedProperty(...).parts
   *
   * @return {object|false}
   *  the valObject for this attribute, or the last found parent
   *  in some cases the innermost valObject will not exist, for example
   *  `valType: 'any'` attributes where we might set a part of the attribute.
   *  In that case, stop at the deepest valObject we *do* find.
   */


  exports.getTraceValObject = function (trace, parts) {
    var head = parts[0];
    var i = 1; // index to start recursing from

    var moduleAttrs, valObject;

    if (head === 'transforms') {
      if (parts.length === 1) {
        return attributes$k.transforms;
      }

      var transforms = trace.transforms;
      if (!Array.isArray(transforms) || !transforms.length) return false;
      var tNum = parts[1];

      if (!isIndex(tNum) || tNum >= transforms.length) {
        return false;
      }

      moduleAttrs = (registry.transformsRegistry[transforms[tNum].type] || {}).attributes;
      valObject = moduleAttrs && moduleAttrs[parts[2]];
      i = 3; // start recursing only inside the transform
    } else {
      // first look in the module for this trace
      // components have already merged their trace attributes in here
      var _module = trace._module;
      if (!_module) _module = (registry.modules[trace.type || attributes$k.type.dflt] || {})._module;
      if (!_module) return false;
      moduleAttrs = _module.attributes;
      valObject = moduleAttrs && moduleAttrs[head]; // then look in the subplot attributes

      if (!valObject) {
        var subplotModule = _module.basePlotModule;

        if (subplotModule && subplotModule.attributes) {
          valObject = subplotModule.attributes[head];
        }
      } // finally look in the global attributes


      if (!valObject) valObject = attributes$k[head];
    }

    return recurseIntoValObject(valObject, parts, i);
  };
  /*
   * Find the valObject for one layout attribute
   *
   * @param {array} parts
   *  an array of parts, like ['annotations', 1, 'x']
   *  typically from nestedProperty(...).parts
   *
   * @return {object|false}
   *  the valObject for this attribute, or the last found parent
   *  in some cases the innermost valObject will not exist, for example
   *  `valType: 'any'` attributes where we might set a part of the attribute.
   *  In that case, stop at the deepest valObject we *do* find.
   */


  exports.getLayoutValObject = function (fullLayout, parts) {
    var valObject = layoutHeadAttr(fullLayout, parts[0]);
    return recurseIntoValObject(valObject, parts, 1);
  };

  function layoutHeadAttr(fullLayout, head) {
    var i, key, _module, attributes; // look for attributes of the subplot types used on the plot


    var basePlotModules = fullLayout._basePlotModules;

    if (basePlotModules) {
      var out;

      for (i = 0; i < basePlotModules.length; i++) {
        _module = basePlotModules[i];

        if (_module.attrRegex && _module.attrRegex.test(head)) {
          // if a module defines overrides, these take precedence
          // initially this is to allow gl2d different editTypes from svg cartesian
          if (_module.layoutAttrOverrides) return _module.layoutAttrOverrides; // otherwise take the first attributes we find

          if (!out && _module.layoutAttributes) out = _module.layoutAttributes;
        } // a module can also override the behavior of base (and component) module layout attrs
        // again see gl2d for initial use case


        var baseOverrides = _module.baseLayoutAttrOverrides;
        if (baseOverrides && head in baseOverrides) return baseOverrides[head];
      }

      if (out) return out;
    } // look for layout attributes contributed by traces on the plot


    var modules = fullLayout._modules;

    if (modules) {
      for (i = 0; i < modules.length; i++) {
        attributes = modules[i].layoutAttributes;

        if (attributes && head in attributes) {
          return attributes[head];
        }
      }
    }
    /*
     * Next look in components.
     * Components that define a schema have already merged this into
     * base and subplot attribute defs, so ignore these.
     * Others (older style) all put all their attributes
     * inside a container matching the module `name`
     * eg `attributes` (array) or `legend` (object)
     */


    for (key in registry.componentsRegistry) {
      _module = registry.componentsRegistry[key];

      if (_module.name === 'colorscale' && head.indexOf('coloraxis') === 0) {
        return _module.layoutAttributes[head];
      } else if (!_module.schema && head === _module.name) {
        return _module.layoutAttributes;
      }
    }

    if (head in layout_attributes$2) return layout_attributes$2[head];
    return false;
  }

  function recurseIntoValObject(valObject, parts, i) {
    if (!valObject) return false;

    if (valObject._isLinkedToArray) {
      // skip array index, abort if we try to dive into an array without an index
      if (isIndex(parts[i])) i++;else if (i < parts.length) return false;
    } // now recurse as far as we can. Occasionally we have an attribute
    // setting an internal part below what's in the schema; just return
    // the innermost schema item we find.


    for (; i < parts.length; i++) {
      var newValObject = valObject[parts[i]];
      if (isPlainObject(newValObject)) valObject = newValObject;else break;
      if (i === parts.length - 1) break;

      if (valObject._isLinkedToArray) {
        i++;
        if (!isIndex(parts[i])) return false;
      } else if (valObject.valType === 'info_array') {
        i++;
        var index = parts[i];
        if (!isIndex(index)) return false;
        var items = valObject.items;

        if (Array.isArray(items)) {
          if (index >= items.length) return false;

          if (valObject.dimensions === 2) {
            i++;
            if (parts.length === i) return valObject;
            var index2 = parts[i];
            if (!isIndex(index2)) return false;
            valObject = items[index][index2];
          } else valObject = items[index];
        } else {
          valObject = items;
        }
      }
    }

    return valObject;
  } // note: this is different from Lib.isIndex, this one doesn't accept numeric
  // strings, only actual numbers.


  function isIndex(val) {
    return val === Math.round(val) && val >= 0;
  }

  function getTraceAttributes(type) {
    var _module, basePlotModule;

    _module = registry.modules[type]._module, basePlotModule = _module.basePlotModule;
    var attributes = {}; // make 'type' the first attribute in the object

    attributes.type = null;
    var copyBaseAttributes = extendDeepAll({}, attributes$k);
    var copyModuleAttributes = extendDeepAll({}, _module.attributes); // prune global-level trace attributes that are already defined in a trace

    exports.crawl(copyModuleAttributes, function (attr, attrName, attrs, level, fullAttrString) {
      nestedProperty(copyBaseAttributes, fullAttrString).set(undefined); // Prune undefined attributes

      if (attr === undefined) nestedProperty(copyModuleAttributes, fullAttrString).set(undefined);
    }); // base attributes (same for all trace types)

    extendDeepAll(attributes, copyBaseAttributes); // prune-out base attributes based on trace module categories

    if (registry.traceIs(type, 'noOpacity')) {
      delete attributes.opacity;
    }

    if (!registry.traceIs(type, 'showLegend')) {
      delete attributes.showlegend;
      delete attributes.legendgroup;
    }

    if (registry.traceIs(type, 'noHover')) {
      delete attributes.hoverinfo;
      delete attributes.hoverlabel;
    }

    if (!_module.selectPoints) {
      delete attributes.selectedpoints;
    } // module attributes


    extendDeepAll(attributes, copyModuleAttributes); // subplot attributes

    if (basePlotModule.attributes) {
      extendDeepAll(attributes, basePlotModule.attributes);
    } // 'type' gets overwritten by baseAttributes; reset it here


    attributes.type = type;
    var out = {
      meta: _module.meta || {},
      categories: _module.categories || {},
      animatable: Boolean(_module.animatable),
      type: type,
      attributes: formatAttributes(attributes)
    }; // trace-specific layout attributes

    if (_module.layoutAttributes) {
      var layoutAttributes = {};
      extendDeepAll(layoutAttributes, _module.layoutAttributes);
      out.layoutAttributes = formatAttributes(layoutAttributes);
    } // drop anim:true in non-animatable modules


    if (!_module.animatable) {
      exports.crawl(out, function (attr) {
        if (exports.isValObject(attr) && 'anim' in attr) {
          delete attr.anim;
        }
      });
    }

    return out;
  }

  function getLayoutAttributes() {
    var layoutAttributes = {};

    var key, _module; // global layout attributes


    extendDeepAll(layoutAttributes, layout_attributes$2); // add base plot module layout attributes

    for (key in registry.subplotsRegistry) {
      _module = registry.subplotsRegistry[key];
      if (!_module.layoutAttributes) continue;

      if (Array.isArray(_module.attr)) {
        for (var i = 0; i < _module.attr.length; i++) {
          handleBasePlotModule(layoutAttributes, _module, _module.attr[i]);
        }
      } else {
        var astr = _module.attr === 'subplot' ? _module.name : _module.attr;
        handleBasePlotModule(layoutAttributes, _module, astr);
      }
    } // add registered components layout attributes


    for (key in registry.componentsRegistry) {
      _module = registry.componentsRegistry[key];
      var schema = _module.schema;

      if (schema && (schema.subplots || schema.layout)) {
        /*
         * Components with defined schema have already been merged in at register time
         * but a few components define attributes that apply only to xaxis
         * not yaxis (rangeselector, rangeslider) - delete from y schema.
         * Note that the input attributes for xaxis/yaxis are the same object
         * so it's not possible to only add them to xaxis from the start.
         * If we ever have such asymmetry the other way, or anywhere else,
         * we will need to extend both this code and mergeComponentAttrsToSubplot
         * (which will not find yaxis only for example)
         */
        var subplots = schema.subplots;

        if (subplots && subplots.xaxis && !subplots.yaxis) {
          for (var xkey in subplots.xaxis) {
            delete layoutAttributes.yaxis[xkey];
          }
        }
      } else if (_module.name === 'colorscale') {
        extendDeepAll(layoutAttributes, _module.layoutAttributes);
      } else if (_module.layoutAttributes) {
        // older style without schema need to be explicitly merged in now
        insertAttrs(layoutAttributes, _module.layoutAttributes, _module.name);
      }
    }

    return {
      layoutAttributes: formatAttributes(layoutAttributes)
    };
  }

  function getTransformAttributes(type) {
    var _module = registry.transformsRegistry[type];
    var attributes = extendDeepAll({}, _module.attributes); // add registered components transform attributes

    Object.keys(registry.componentsRegistry).forEach(function (k) {
      var _module = registry.componentsRegistry[k];

      if (_module.schema && _module.schema.transforms && _module.schema.transforms[type]) {
        Object.keys(_module.schema.transforms[type]).forEach(function (v) {
          insertAttrs(attributes, _module.schema.transforms[type][v], v);
        });
      }
    });
    return {
      attributes: formatAttributes(attributes)
    };
  }

  function getFramesAttributes() {
    var attrs = {
      frames: extendDeepAll({}, frame_attributes)
    };
    formatAttributes(attrs);
    return attrs.frames;
  }

  function formatAttributes(attrs) {
    mergeValTypeAndRole(attrs);
    formatArrayContainers(attrs);
    stringify(attrs);
    return attrs;
  }

  function mergeValTypeAndRole(attrs) {
    function makeSrcAttr(attrName) {
      return {
        valType: 'string',
        description: 'Sets the source reference on Chart Studio Cloud for `' + attrName + '`.',
        editType: 'none'
      };
    }

    function callback(attr, attrName, attrs) {
      if (exports.isValObject(attr)) {
        if (attr.arrayOk === true || attr.valType === 'data_array') {
          // all 'arrayOk' and 'data_array' attrs have a corresponding 'src' attr
          attrs[attrName + 'src'] = makeSrcAttr(attrName);
        }
      } else if (isPlainObject(attr)) {
        // all attrs container objects get role 'object'
        attr.role = 'object';
      }
    }

    exports.crawl(attrs, callback);
  }

  function formatArrayContainers(attrs) {
    function callback(attr, attrName, attrs) {
      if (!attr) return;
      var itemName = attr[IS_LINKED_TO_ARRAY];
      if (!itemName) return;
      delete attr[IS_LINKED_TO_ARRAY];
      attrs[attrName] = {
        items: {}
      };
      attrs[attrName].items[itemName] = attr;
      attrs[attrName].role = 'object';
    }

    exports.crawl(attrs, callback);
  } // this can take around 10ms and should only be run from PlotSchema.get(),
  // to ensure JSON.stringify(PlotSchema.get()) gives the intended result.


  function stringify(attrs) {
    function walk(attr) {
      for (var k in attr) {
        if (isPlainObject(attr[k])) {
          walk(attr[k]);
        } else if (Array.isArray(attr[k])) {
          for (var i = 0; i < attr[k].length; i++) {
            walk(attr[k][i]);
          }
        } else {
          // as JSON.stringify(/test/) // => {}
          if (attr[k] instanceof RegExp) {
            attr[k] = attr[k].toString();
          }
        }
      }
    }

    walk(attrs);
  }

  function handleBasePlotModule(layoutAttributes, _module, astr) {
    var np = nestedProperty(layoutAttributes, astr);
    var attrs = extendDeepAll({}, _module.layoutAttributes);
    attrs[IS_SUBPLOT_OBJ] = true;
    np.set(attrs);
  }

  function insertAttrs(baseAttrs, newAttrs, astr) {
    var np = nestedProperty(baseAttrs, astr);
    np.set(extendDeepAll(np.get() || {}, newAttrs));
  }
});

var TEMPLATEITEMNAME = 'templateitemname';
var templateAttrs = {
  name: {
    valType: 'string',
    editType: 'none',
    description: ['When used in a template, named items are created in the output figure', 'in addition to any items the figure already has in this array.', 'You can modify these items in the output figure by making your own', 'item with `templateitemname` matching this `name`', 'alongside your modifications (including `visible: false` or', '`enabled: false` to hide it).', 'Has no effect outside of a template.'].join(' ')
  }
};
templateAttrs[TEMPLATEITEMNAME] = {
  valType: 'string',
  editType: 'calc',
  description: ['Used to refer to a named item in this array in the template. Named', 'items from the template will be created even without a matching item', 'in the input figure, but you can modify one by making an item with', '`templateitemname` matching its `name`, alongside your modifications', '(including `visible: false` or `enabled: false` to hide it).', 'If there is no template or no matching item, this item will be', 'hidden unless you explicitly show it with `visible: true`.'].join(' ')
};
/**
 * templatedArray: decorate an attributes object with templating (and array)
 * properties.
 *
 * @param {string} name: the singular form of the array name. Sets
 *     `_isLinkedToArray` to this, so the schema knows to treat this as an array.
 * @param {object} attrs: the item attributes. Since all callers are expected
 *     to be constructing this object on the spot, we mutate it here for
 *     performance, rather than extending a new object with it.
 *
 * @returns {object}: the decorated `attrs` object
 */

var templatedArray$8 = function (name, attrs) {
  attrs._isLinkedToArray = name;
  attrs.name = templateAttrs.name;
  attrs[TEMPLATEITEMNAME] = templateAttrs[TEMPLATEITEMNAME];
  return attrs;
};
/**
 * traceTemplater: logic for matching traces to trace templates
 *
 * @param {object} dataTemplate: collection of {traceType: [{template}, ...]}
 *     ie each type the template applies to contains a list of template objects,
 *     to be provided cyclically to data traces of that type.
 *
 * @returns {object}: {newTrace}, a function:
 *     newTrace(traceIn): that takes the input traceIn, coerces its type, then
 *         uses that type to find the next template to apply. returns the output
 *         traceOut with template attached, ready to continue supplyDefaults.
 */


var traceTemplater = function (dataTemplate) {
  var traceCounts = {};
  var traceType, typeTemplates;

  for (traceType in dataTemplate) {
    typeTemplates = dataTemplate[traceType];

    if (Array.isArray(typeTemplates) && typeTemplates.length) {
      traceCounts[traceType] = 0;
    }
  }

  function newTrace(traceIn) {
    traceType = lib_1.coerce(traceIn, {}, attributes$k, 'type');
    var traceOut = {
      type: traceType,
      _template: null
    };

    if (traceType in traceCounts) {
      typeTemplates = dataTemplate[traceType]; // cycle through traces in the template set for this type

      var typei = traceCounts[traceType] % typeTemplates.length;
      traceCounts[traceType]++;
      traceOut._template = typeTemplates[typei];
    }

    return traceOut;
  }

  return {
    newTrace: newTrace // TODO: function to figure out what's left & what didn't work

  };
};
/**
 * newContainer: Create a new sub-container inside `container` and propagate any
 * applicable template to it. If there's no template, still propagates
 * `undefined` so relinkPrivate will not retain an old template!
 *
 * @param {object} container: the outer container, should already have _template
 *     if there *is* a template for this plot
 * @param {string} name: the key of the new container to make
 * @param {string} baseName: if applicable, a base attribute to take the
 *     template from, ie for xaxis3 the base would be xaxis
 *
 * @returns {object}: an object for inclusion _full*, empty except for the
 *     appropriate template piece
 */


var newContainer = function (container, name, baseName) {
  var template = container._template;
  var part = template && (template[name] || baseName && template[baseName]);
  if (!lib_1.isPlainObject(part)) part = null;
  var out = container[name] = {
    _template: part
  };
  return out;
};
/**
 * arrayTemplater: special logic for templating both defaults and specific items
 * in a container array (annotations etc)
 *
 * @param {object} container: the outer container, should already have _template
 *     if there *is* a template for this plot
 * @param {string} name: the name of the array to template (ie 'annotations')
 *     will be used to find default ('annotationdefaults' object) and specific
 *     ('annotations' array) template specs.
 * @param {string} inclusionAttr: the attribute determining this item's
 *     inclusion in the output, usually 'visible' or 'enabled'
 *
 * @returns {object}: {newItem, defaultItems}, both functions:
 *     newItem(itemIn): create an output item, bare except for the correct
 *         template and name(s), as the base for supplyDefaults
 *     defaultItems(): to be called after all newItem calls, return any
 *         specific template items that have not already beeen included,
 *         also as bare output items ready for supplyDefaults.
 */


var arrayTemplater = function (container, name, inclusionAttr) {
  var template = container._template;
  var defaultsTemplate = template && template[arrayDefaultKey(name)];
  var templateItems = template && template[name];

  if (!Array.isArray(templateItems) || !templateItems.length) {
    templateItems = [];
  }

  var usedNames = {};

  function newItem(itemIn) {
    // include name and templateitemname in the output object for ALL
    // container array items. Note: you could potentially use different
    // name and templateitemname, if you're using one template to make
    // another template. templateitemname would be the name in the original
    // template, and name is the new "subclassed" item name.
    var out = {
      name: itemIn.name,
      _input: itemIn
    };
    var templateItemName = out[TEMPLATEITEMNAME] = itemIn[TEMPLATEITEMNAME]; // no itemname: use the default template

    if (!validItemName(templateItemName)) {
      out._template = defaultsTemplate;
      return out;
    } // look for an item matching this itemname
    // note these do not inherit from the default template, only the item.


    for (var i = 0; i < templateItems.length; i++) {
      var templateItem = templateItems[i];

      if (templateItem.name === templateItemName) {
        // Note: it's OK to use a template item more than once
        // but using it at least once will stop it from generating
        // a default item at the end.
        usedNames[templateItemName] = 1;
        out._template = templateItem;
        return out;
      }
    } // Didn't find a matching template item, so since this item is intended
    // to only be modifications it's most likely broken. Hide it unless
    // it's explicitly marked visible - in which case it gets NO template,
    // not even the default.


    out[inclusionAttr] = itemIn[inclusionAttr] || false; // special falsy value we can look for in validateTemplate

    out._template = false;
    return out;
  }

  function defaultItems() {
    var out = [];

    for (var i = 0; i < templateItems.length; i++) {
      var templateItem = templateItems[i];
      var name = templateItem.name; // only allow named items to be added as defaults,
      // and only allow each name once

      if (validItemName(name) && !usedNames[name]) {
        var outi = {
          _template: templateItem,
          name: name,
          _input: {
            _templateitemname: name
          }
        };
        outi[TEMPLATEITEMNAME] = templateItem[TEMPLATEITEMNAME];
        out.push(outi);
        usedNames[name] = 1;
      }
    }

    return out;
  }

  return {
    newItem: newItem,
    defaultItems: defaultItems
  };
};

function validItemName(name) {
  return name && typeof name === 'string';
}

function arrayDefaultKey(name) {
  var lastChar = name.length - 1;

  if (name.charAt(lastChar) !== 's') {
    lib_1.warn('bad argument to arrayDefaultKey: ' + name);
  }

  return name.substr(0, name.length - 1) + 'defaults';
}

var arrayDefaultKey_1 = arrayDefaultKey;
/**
 * arrayEditor: helper for editing array items that may have come from
 *     template defaults (in which case they will not exist in the input yet)
 *
 * @param {object} parentIn: the input container (eg gd.layout)
 * @param {string} containerStr: the attribute string for the container inside
 *     `parentIn`.
 * @param {object} itemOut: the _full* item (eg gd._fullLayout.annotations[0])
 *     that we'll be editing. Assumed to have been created by `arrayTemplater`.
 *
 * @returns {object}: {modifyBase, modifyItem, getUpdateObj, applyUpdate}, all functions:
 *     modifyBase(attr, value): Add an update that's *not* related to the item.
 *         `attr` is the full attribute string.
 *     modifyItem(attr, value): Add an update to the item. `attr` is just the
 *         portion of the attribute string inside the item.
 *     getUpdateObj(): Get the final constructed update object, to use in
 *         `restyle` or `relayout`. Also resets the update object in case this
 *         update was canceled.
 *     applyUpdate(attr, value): optionally add an update `attr: value`,
 *         then apply it to `parent` which should be the parent of `containerIn`,
 *         ie the object to which `containerStr` is the attribute string.
 */

var arrayEditor$5 = function (parentIn, containerStr, itemOut) {
  var lengthIn = (lib_1.nestedProperty(parentIn, containerStr).get() || []).length;
  var index = itemOut._index; // Check that we are indeed off the end of this container.
  // Otherwise a devious user could put a key `_templateitemname` in their
  // own input and break lots of things.

  var templateItemName = index >= lengthIn && (itemOut._input || {})._templateitemname;
  if (templateItemName) index = lengthIn;
  var itemStr = containerStr + '[' + index + ']';
  var update;

  function resetUpdate() {
    update = {};

    if (templateItemName) {
      update[itemStr] = {};
      update[itemStr][TEMPLATEITEMNAME] = templateItemName;
    }
  }

  resetUpdate();

  function modifyBase(attr, value) {
    update[attr] = value;
  }

  function modifyItem(attr, value) {
    if (templateItemName) {
      // we're making a new object: edit that object
      lib_1.nestedProperty(update[itemStr], attr).set(value);
    } else {
      // we're editing an existing object: include *just* the edit
      update[itemStr + '.' + attr] = value;
    }
  }

  function getUpdateObj() {
    var updateOut = update;
    resetUpdate();
    return updateOut;
  }

  function applyUpdate(attr, value) {
    if (attr) modifyItem(attr, value);
    var updateToApply = getUpdateObj();

    for (var key in updateToApply) {
      lib_1.nestedProperty(parentIn, key).set(updateToApply[key]);
    }
  }

  return {
    modifyBase: modifyBase,
    modifyItem: modifyItem,
    getUpdateObj: getUpdateObj,
    applyUpdate: applyUpdate
  };
};

var plot_template = {
  templatedArray: templatedArray$8,
  traceTemplater: traceTemplater,
  newContainer: newContainer,
  arrayTemplater: arrayTemplater,
  arrayDefaultKey: arrayDefaultKey_1,
  arrayEditor: arrayEditor$5
};

var counterRegex$2 = regex.counter;
var constants$a = {
  idRegex: {
    x: counterRegex$2('x', '( domain)?'),
    y: counterRegex$2('y', '( domain)?')
  },
  attrRegex: counterRegex$2('[xy]axis'),
  // axis match regular expression
  xAxisMatch: counterRegex$2('xaxis'),
  yAxisMatch: counterRegex$2('yaxis'),
  // pattern matching axis ids and names
  // note that this is more permissive than counterRegex, as
  // id2name, name2id, and cleanId accept "x1" etc
  AX_ID_PATTERN: /^[xyz][0-9]*( domain)?$/,
  AX_NAME_PATTERN: /^[xyz]axis[0-9]*$/,
  // and for 2D subplots
  SUBPLOT_PATTERN: /^x([0-9]*)y([0-9]*)$/,
  HOUR_PATTERN: 'hour',
  WEEKDAY_PATTERN: 'day of week',
  // pixels to move mouse before you stop clamping to starting point
  MINDRAG: 8,
  // smallest dimension allowed for a select box
  MINSELECT: 12,
  // smallest dimension allowed for a zoombox
  MINZOOM: 20,
  // width of axis drag regions
  DRAGGERSIZE: 20,
  // max pixels off straight before a lasso select line counts as bent
  BENDPX: 1.5,
  // delay before a redraw (relayout) after smooth panning and zooming
  REDRAWDELAY: 50,
  // throttling limit (ms) for selectPoints calls
  SELECTDELAY: 100,
  // cache ID suffix for throttle
  SELECTID: '-select',
  // last resort axis ranges for x and y axes if we have no data
  DFLTRANGEX: [-1, 6],
  DFLTRANGEY: [-1, 4],
  // Layers to keep trace types in the right order
  // N.B. each  'unique' plot method must have its own layer
  traceLayerClasses: ['imagelayer', 'heatmaplayer', 'contourcarpetlayer', 'contourlayer', 'funnellayer', 'waterfalllayer', 'barlayer', 'carpetlayer', 'violinlayer', 'boxlayer', 'ohlclayer', 'scattercarpetlayer', 'scatterlayer'],
  clipOnAxisFalseQuery: ['.scatterlayer', '.barlayer', '.funnellayer', '.waterfalllayer'],
  layerValue2layerClass: {
    'above traces': 'above',
    'below traces': 'below'
  }
};

var axis_ids = createCommonjsModule(function (module, exports) {
  // and axis id's (x, x2, etc). Would probably have ditched 'xaxis'
  // completely in favor of just 'x' if it weren't ingrained in the API etc.

  exports.id2name = function id2name(id) {
    if (typeof id !== 'string' || !id.match(constants$a.AX_ID_PATTERN)) return;
    var axNum = id.split(' ')[0].substr(1);
    if (axNum === '1') axNum = '';
    return id.charAt(0) + 'axis' + axNum;
  };

  exports.name2id = function name2id(name) {
    if (!name.match(constants$a.AX_NAME_PATTERN)) return;
    var axNum = name.substr(5);
    if (axNum === '1') axNum = '';
    return name.charAt(0) + axNum;
  };
  /*
   * Cleans up the number of an axis, e.g., 'x002'->'x2', 'x0'->'x', 'x1' -> 'x',
   * etc.
   * If domainId is true, then id could be a domain reference and if it is, the
   * ' domain' part is kept at the end of the axis ID string.
   */


  exports.cleanId = function cleanId(id, axLetter, domainId) {
    var domainTest = /( domain)$/.test(id);
    if (typeof id !== 'string' || !id.match(constants$a.AX_ID_PATTERN)) return;
    if (axLetter && id.charAt(0) !== axLetter) return;
    if (domainTest && !domainId) return;
    var axNum = id.split(' ')[0].substr(1).replace(/^0+/, '');
    if (axNum === '1') axNum = '';
    return id.charAt(0) + axNum + (domainTest && domainId ? ' domain' : '');
  }; // get all axis objects, as restricted in listNames


  exports.list = function (gd, axLetter, only2d) {
    var fullLayout = gd._fullLayout;
    if (!fullLayout) return [];
    var idList = exports.listIds(gd, axLetter);
    var out = new Array(idList.length);
    var i;

    for (i = 0; i < idList.length; i++) {
      var idi = idList[i];
      out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];
    }

    if (!only2d) {
      var sceneIds3D = fullLayout._subplots.gl3d || [];

      for (i = 0; i < sceneIds3D.length; i++) {
        var scene = fullLayout[sceneIds3D[i]];
        if (axLetter) out.push(scene[axLetter + 'axis']);else out.push(scene.xaxis, scene.yaxis, scene.zaxis);
      }
    }

    return out;
  }; // get all axis ids, optionally restricted by letter
  // this only makes sense for 2d axes


  exports.listIds = function (gd, axLetter) {
    var fullLayout = gd._fullLayout;
    if (!fullLayout) return [];
    var subplotLists = fullLayout._subplots;
    if (axLetter) return subplotLists[axLetter + 'axis'];
    return subplotLists.xaxis.concat(subplotLists.yaxis);
  }; // get an axis object from its id 'x','x2' etc
  // optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it


  exports.getFromId = function (gd, id, type) {
    var fullLayout = gd._fullLayout; // remove "domain" suffix

    id = id === undefined || typeof id !== 'string' ? id : id.replace(' domain', '');
    if (type === 'x') id = id.replace(/y[0-9]*/, '');else if (type === 'y') id = id.replace(/x[0-9]*/, '');
    return fullLayout[exports.id2name(id)];
  }; // get an axis object of specified type from the containing trace


  exports.getFromTrace = function (gd, fullTrace, type) {
    var fullLayout = gd._fullLayout;
    var ax = null;

    if (registry.traceIs(fullTrace, 'gl3d')) {
      var scene = fullTrace.scene;

      if (scene.substr(0, 5) === 'scene') {
        ax = fullLayout[scene][type + 'axis'];
      }
    } else {
      ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);
    }

    return ax;
  }; // sort x, x2, x10, y, y2, y10...


  exports.idSort = function (id1, id2) {
    var letter1 = id1.charAt(0);
    var letter2 = id2.charAt(0);
    if (letter1 !== letter2) return letter1 > letter2 ? 1 : -1;
    return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);
  };
  /*
   * An axis reference (e.g., the contents at the 'xref' key of an object) might
   * have extra information appended. Extract the axis ID only.
   *
   * ar: the axis reference string
   *
   */


  exports.ref2id = function (ar) {
    // This assumes ar has been coerced via coerceRef, and uses the shortcut of
    // checking if the first letter matches [xyz] to determine if it should
    // return the axis ID. Otherwise it returns false.
    return /^[xyz]/.test(ar) ? ar.split(' ')[0] : false;
  };

  function isFound(axId, list) {
    if (list && list.length) {
      for (var i = 0; i < list.length; i++) {
        if (list[i][axId]) return true;
      }
    }

    return false;
  }

  exports.isLinked = function (fullLayout, axId) {
    return isFound(axId, fullLayout._axisMatchGroups) || isFound(axId, fullLayout._axisConstraintGroups);
  };
});

function clearOutlineControllers$2(gd) {
  var zoomLayer = gd._fullLayout._zoomlayer;

  if (zoomLayer) {
    zoomLayer.selectAll('.outline-controllers').remove();
  }
}

function clearSelect$3(gd) {
  var zoomLayer = gd._fullLayout._zoomlayer;

  if (zoomLayer) {
    // until we get around to persistent selections, remove the outline
    // here. The selection itself will be removed when the plot redraws
    // at the end.
    zoomLayer.selectAll('.select-outline').remove();
  }

  gd._fullLayout._drawing = false;
}

var handle_outline = {
  clearOutlineControllers: clearOutlineControllers$2,
  clearSelect: clearSelect$3
};

var SUBPLOT_PATTERN = constants$a.SUBPLOT_PATTERN;
/**
 * Get calcdata trace(s) associated with a given subplot
 *
 * @param {array} calcData: as in gd.calcdata
 * @param {string} type: subplot type
 * @param {string} subplotId: subplot id to look for
 *
 * @return {array} array of calcdata traces
 */

var getSubplotCalcData = function (calcData, type, subplotId) {
  var basePlotModule = registry.subplotsRegistry[type];
  if (!basePlotModule) return [];
  var attr = basePlotModule.attr;
  var subplotCalcData = [];

  for (var i = 0; i < calcData.length; i++) {
    var calcTrace = calcData[i];
    var trace = calcTrace[0].trace;
    if (trace[attr] === subplotId) subplotCalcData.push(calcTrace);
  }

  return subplotCalcData;
};
/**
 * Get calcdata trace(s) that can be plotted with a given module
 * NOTE: this isn't necessarily just exactly matching trace type,
 * if multiple trace types use the same plotting routine, they will be
 * collected here.
 * In order to not plot the same thing multiple times, we return two arrays,
 * the calcdata we *will* plot with this module, and the ones we *won't*
 *
 * @param {array} calcdata: as in gd.calcdata
 * @param {object|string|fn} arg1:
 *  the plotting module, or its name, or its plot method
 *
 * @return {array[array]} [foundCalcdata, remainingCalcdata]
 */


var getModuleCalcData$1 = function (calcdata, arg1) {
  var moduleCalcData = [];
  var remainingCalcData = [];
  var plotMethod;

  if (typeof arg1 === 'string') {
    plotMethod = registry.getModule(arg1).plot;
  } else if (typeof arg1 === 'function') {
    plotMethod = arg1;
  } else {
    plotMethod = arg1.plot;
  }

  if (!plotMethod) {
    return [moduleCalcData, calcdata];
  }

  for (var i = 0; i < calcdata.length; i++) {
    var cd = calcdata[i];
    var trace = cd[0].trace; // N.B.
    // - 'legendonly' traces do not make it past here
    // - skip over 'visible' traces that got trimmed completely during calc transforms

    if (trace.visible !== true || trace._length === 0) continue; // group calcdata trace not by 'module' (as the name of this function
    // would suggest), but by 'module plot method' so that if some traces
    // share the same module plot method (e.g. bar and histogram), we
    // only call it one!

    if (trace._module.plot === plotMethod) {
      moduleCalcData.push(cd);
    } else {
      remainingCalcData.push(cd);
    }
  }

  return [moduleCalcData, remainingCalcData];
};
/**
 * Get the data trace(s) associated with a given subplot.
 *
 * @param {array} data  plotly full data array.
 * @param {string} type subplot type to look for.
 * @param {string} subplotId subplot id to look for.
 *
 * @return {array} list of trace objects.
 *
 */


var getSubplotData = function getSubplotData(data, type, subplotId) {
  if (!registry.subplotsRegistry[type]) return [];
  var attr = registry.subplotsRegistry[type].attr;
  var subplotData = [];
  var trace, subplotX, subplotY;

  if (type === 'gl2d') {
    var spmatch = subplotId.match(SUBPLOT_PATTERN);
    subplotX = 'x' + spmatch[1];
    subplotY = 'y' + spmatch[2];
  }

  for (var i = 0; i < data.length; i++) {
    trace = data[i];

    if (type === 'gl2d' && registry.traceIs(trace, 'gl2d')) {
      if (trace[attr[0]] === subplotX && trace[attr[1]] === subplotY) {
        subplotData.push(trace);
      }
    } else {
      if (trace[attr] === subplotId) subplotData.push(trace);
    }
  }

  return subplotData;
};

var get_data = {
  getSubplotCalcData: getSubplotCalcData,
  getModuleCalcData: getModuleCalcData$1,
  getSubplotData: getSubplotData
};

var command = createCommonjsModule(function (module, exports) {
  /*
   * Create or update an observer. This function is designed to be
   * idempotent so that it can be called over and over as the component
   * updates, and will attach and detach listeners as needed.
   *
   * @param {optional object} container
   *      An object on which the observer is stored. This is the mechanism
   *      by which it is idempotent. If it already exists, another won't be
   *      added. Each time it's called, the value lookup table is updated.
   * @param {array} commandList
   *      An array of commands, following either `buttons` of `updatemenus`
   *      or `steps` of `sliders`.
   * @param {function} onchange
   *      A listener called when the value is changed. Receives data object
   *      with information about the new state.
   */

  exports.manageCommandObserver = function (gd, container, commandList, onchange) {
    var ret = {};
    var enabled = true;

    if (container && container._commandObserver) {
      ret = container._commandObserver;
    }

    if (!ret.cache) {
      ret.cache = {};
    } // Either create or just recompute this:


    ret.lookupTable = {};
    var binding = exports.hasSimpleAPICommandBindings(gd, commandList, ret.lookupTable);

    if (container && container._commandObserver) {
      if (!binding) {
        // If container exists and there are no longer any bindings,
        // remove existing:
        if (container._commandObserver.remove) {
          container._commandObserver.remove();

          container._commandObserver = null;
          return ret;
        }
      } else {
        // If container exists and there *are* bindings, then the lookup
        // table should have been updated and check is already attached,
        // so there's nothing to be done:
        return ret;
      }
    } // Determine whether there's anything to do for this binding:


    if (binding) {
      // Build the cache:
      bindingValueHasChanged(gd, binding, ret.cache);

      ret.check = function check() {
        if (!enabled) return;
        var update = bindingValueHasChanged(gd, binding, ret.cache);

        if (update.changed && onchange) {
          // Disable checks for the duration of this command in order to avoid
          // infinite loops:
          if (ret.lookupTable[update.value] !== undefined) {
            ret.disable();
            Promise.resolve(onchange({
              value: update.value,
              type: binding.type,
              prop: binding.prop,
              traces: binding.traces,
              index: ret.lookupTable[update.value]
            })).then(ret.enable, ret.enable);
          }
        }

        return update.changed;
      };

      var checkEvents = ['plotly_relayout', 'plotly_redraw', 'plotly_restyle', 'plotly_update', 'plotly_animatingframe', 'plotly_afterplot'];

      for (var i = 0; i < checkEvents.length; i++) {
        gd._internalOn(checkEvents[i], ret.check);
      }

      ret.remove = function () {
        for (var i = 0; i < checkEvents.length; i++) {
          gd._removeInternalListener(checkEvents[i], ret.check);
        }
      };
    } else {
      // TODO: It'd be really neat to actually give a *reason* for this, but at least a warning
      // is a start
      lib_1.log('Unable to automatically bind plot updates to API command');
      ret.lookupTable = {};

      ret.remove = function () {};
    }

    ret.disable = function disable() {
      enabled = false;
    };

    ret.enable = function enable() {
      enabled = true;
    };

    if (container) {
      container._commandObserver = ret;
    }

    return ret;
  };
  /*
   * This function checks to see if an array of objects containing
   * method and args properties is compatible with automatic two-way
   * binding. The criteria right now are that
   *
   *   1. multiple traces may be affected
   *   2. only one property may be affected
   *   3. the same property must be affected by all commands
   */


  exports.hasSimpleAPICommandBindings = function (gd, commandList, bindingsByValue) {
    var i;
    var n = commandList.length;
    var refBinding;

    for (i = 0; i < n; i++) {
      var binding;
      var command = commandList[i];
      var method = command.method;
      var args = command.args;
      if (!Array.isArray(args)) args = []; // If any command has no method, refuse to bind:

      if (!method) {
        return false;
      }

      var bindings = exports.computeAPICommandBindings(gd, method, args); // Right now, handle one and *only* one property being set:

      if (bindings.length !== 1) {
        return false;
      }

      if (!refBinding) {
        refBinding = bindings[0];

        if (Array.isArray(refBinding.traces)) {
          refBinding.traces.sort();
        }
      } else {
        binding = bindings[0];

        if (binding.type !== refBinding.type) {
          return false;
        }

        if (binding.prop !== refBinding.prop) {
          return false;
        }

        if (Array.isArray(refBinding.traces)) {
          if (Array.isArray(binding.traces)) {
            binding.traces.sort();

            for (var j = 0; j < refBinding.traces.length; j++) {
              if (refBinding.traces[j] !== binding.traces[j]) {
                return false;
              }
            }
          } else {
            return false;
          }
        } else {
          if (binding.prop !== refBinding.prop) {
            return false;
          }
        }
      }

      binding = bindings[0];
      var value = binding.value;

      if (Array.isArray(value)) {
        if (value.length === 1) {
          value = value[0];
        } else {
          return false;
        }
      }

      if (bindingsByValue) {
        bindingsByValue[value] = i;
      }
    }

    return refBinding;
  };

  function bindingValueHasChanged(gd, binding, cache) {
    var container, value, obj;
    var changed = false;

    if (binding.type === 'data') {
      // If it's data, we need to get a trace. Based on the limited scope
      // of what we cover, we can just take the first trace from the list,
      // or otherwise just the first trace:
      container = gd._fullData[binding.traces !== null ? binding.traces[0] : 0];
    } else if (binding.type === 'layout') {
      container = gd._fullLayout;
    } else {
      return false;
    }

    value = lib_1.nestedProperty(container, binding.prop).get();
    obj = cache[binding.type] = cache[binding.type] || {};

    if (obj.hasOwnProperty(binding.prop)) {
      if (obj[binding.prop] !== value) {
        changed = true;
      }
    }

    obj[binding.prop] = value;
    return {
      changed: changed,
      value: value
    };
  }
  /*
   * Execute an API command. There's really not much to this; it just provides
   * a common hook so that implementations don't need to be synchronized across
   * multiple components with the ability to invoke API commands.
   *
   * @param {string} method
   *      The name of the plotly command to execute. Must be one of 'animate',
   *      'restyle', 'relayout', 'update'.
   * @param {array} args
   *      A list of arguments passed to the API command
   */


  exports.executeAPICommand = function (gd, method, args) {
    if (method === 'skip') return Promise.resolve();
    var _method = registry.apiMethodRegistry[method];
    var allArgs = [gd];
    if (!Array.isArray(args)) args = [];

    for (var i = 0; i < args.length; i++) {
      allArgs.push(args[i]);
    }

    return _method.apply(null, allArgs).catch(function (err) {
      lib_1.warn('API call to Plotly.' + method + ' rejected.', err);
      return Promise.reject(err);
    });
  };

  exports.computeAPICommandBindings = function (gd, method, args) {
    var bindings;
    if (!Array.isArray(args)) args = [];

    switch (method) {
      case 'restyle':
        bindings = computeDataBindings(gd, args);
        break;

      case 'relayout':
        bindings = computeLayoutBindings(gd, args);
        break;

      case 'update':
        bindings = computeDataBindings(gd, [args[0], args[2]]).concat(computeLayoutBindings(gd, [args[1]]));
        break;

      case 'animate':
        bindings = computeAnimateBindings(gd, args);
        break;

      default:
        // This is the case where intelligent logic about what affects
        // this command is not implemented. It causes no ill effects.
        // For example, addFrames simply won't bind to a control component.
        bindings = [];
    }

    return bindings;
  };

  function computeAnimateBindings(gd, args) {
    // We'll assume that the only relevant modification an animation
    // makes that's meaningfully tracked is the frame:
    if (Array.isArray(args[0]) && args[0].length === 1 && ['string', 'number'].indexOf(typeof args[0][0]) !== -1) {
      return [{
        type: 'layout',
        prop: '_currentFrame',
        value: args[0][0].toString()
      }];
    } else {
      return [];
    }
  }

  function computeLayoutBindings(gd, args) {
    var bindings = [];
    var astr = args[0];
    var aobj = {};

    if (typeof astr === 'string') {
      aobj[astr] = args[1];
    } else if (lib_1.isPlainObject(astr)) {
      aobj = astr;
    } else {
      return bindings;
    }

    crawl(aobj, function (path, attrName, attr) {
      bindings.push({
        type: 'layout',
        prop: path,
        value: attr
      });
    }, '', 0);
    return bindings;
  }

  function computeDataBindings(gd, args) {
    var traces, astr, val, aobj;
    var bindings = []; // Logic copied from Plotly.restyle:

    astr = args[0];
    val = args[1];
    traces = args[2];
    aobj = {};

    if (typeof astr === 'string') {
      aobj[astr] = val;
    } else if (lib_1.isPlainObject(astr)) {
      // the 3-arg form
      aobj = astr;

      if (traces === undefined) {
        traces = val;
      }
    } else {
      return bindings;
    }

    if (traces === undefined) {
      // Explicitly assign this to null instead of undefined:
      traces = null;
    }

    crawl(aobj, function (path, attrName, _attr) {
      var thisTraces;
      var attr;

      if (Array.isArray(_attr)) {
        attr = _attr.slice();
        var nAttr = Math.min(attr.length, gd.data.length);

        if (traces) {
          nAttr = Math.min(nAttr, traces.length);
        }

        thisTraces = [];

        for (var j = 0; j < nAttr; j++) {
          thisTraces[j] = traces ? traces[j] : j;
        }
      } else {
        attr = _attr;
        thisTraces = traces ? traces.slice() : null;
      } // Convert [7] to just 7 when traces is null:


      if (thisTraces === null) {
        if (Array.isArray(attr)) {
          attr = attr[0];
        }
      } else if (Array.isArray(thisTraces)) {
        if (!Array.isArray(attr)) {
          var tmp = attr;
          attr = [];

          for (var i = 0; i < thisTraces.length; i++) {
            attr[i] = tmp;
          }
        }

        attr.length = Math.min(thisTraces.length, attr.length);
      }

      bindings.push({
        type: 'data',
        prop: path,
        traces: thisTraces,
        value: attr
      });
    }, '', 0);
    return bindings;
  }

  function crawl(attrs, callback, path, depth) {
    Object.keys(attrs).forEach(function (attrName) {
      var attr = attrs[attrName];
      if (attrName[0] === '_') return;
      var thisPath = path + (depth > 0 ? '.' : '') + attrName;

      if (lib_1.isPlainObject(attr)) {
        crawl(attr, callback, thisPath, depth + 1);
      } else {
        // Only execute the callback on leaf nodes:
        callback(thisPath, attrName, attr);
      }
    });
  }
});

var plots_1 = createCommonjsModule(function (module) {

  var timeFormatLocale = require$$0.timeFormatLocale;
  var formatLocale = require$$1.formatLocale;
  var BADNUM = numerical.BADNUM;
  var clearSelect = handle_outline.clearSelect;
  var getModuleCalcData = get_data.getModuleCalcData;
  var relinkPrivateKeys = lib_1.relinkPrivateKeys;
  var _ = lib_1._;
  var plots = module.exports = {}; // Expose registry methods on Plots for backward-compatibility

  lib_1.extendFlat(plots, registry);
  plots.attributes = attributes$k;
  plots.attributes.type.values = plots.allTypes;
  plots.fontAttrs = font_attributes;
  plots.layoutAttributes = layout_attributes$2; // TODO make this a plot attribute?

  plots.fontWeight = 'normal';
  var transformsRegistry = plots.transformsRegistry;
  plots.executeAPICommand = command.executeAPICommand;
  plots.computeAPICommandBindings = command.computeAPICommandBindings;
  plots.manageCommandObserver = command.manageCommandObserver;
  plots.hasSimpleAPICommandBindings = command.hasSimpleAPICommandBindings; // in some cases the browser doesn't seem to know how big
  // the text is at first, so it needs to draw it,
  // then wait a little, then draw it again

  plots.redrawText = function (gd) {
    gd = lib_1.getGraphDiv(gd);
    return new Promise(function (resolve) {
      setTimeout(function () {
        if (!gd._fullLayout) return;
        registry.getComponentMethod('annotations', 'draw')(gd);
        registry.getComponentMethod('legend', 'draw')(gd);
        registry.getComponentMethod('colorbar', 'draw')(gd);
        resolve(plots.previousPromises(gd));
      }, 300);
    });
  }; // resize plot about the container size


  plots.resize = function (gd) {
    gd = lib_1.getGraphDiv(gd);
    var resolveLastResize;
    var p = new Promise(function (resolve, reject) {
      if (!gd || lib_1.isHidden(gd)) {
        reject(new Error('Resize must be passed a displayed plot div element.'));
      }

      if (gd._redrawTimer) clearTimeout(gd._redrawTimer);
      if (gd._resolveResize) resolveLastResize = gd._resolveResize;
      gd._resolveResize = resolve;
      gd._redrawTimer = setTimeout(function () {
        // return if there is nothing to resize or is hidden
        if (!gd.layout || gd.layout.width && gd.layout.height || lib_1.isHidden(gd)) {
          resolve(gd);
          return;
        }

        delete gd.layout.width;
        delete gd.layout.height; // autosizing doesn't count as a change that needs saving

        var oldchanged = gd.changed; // nor should it be included in the undo queue

        gd.autoplay = true;
        registry.call('relayout', gd, {
          autosize: true
        }).then(function () {
          gd.changed = oldchanged; // Only resolve if a new call hasn't been made!

          if (gd._resolveResize === resolve) {
            delete gd._resolveResize;
            resolve(gd);
          }
        });
      }, 100);
    });
    if (resolveLastResize) resolveLastResize(p);
    return p;
  }; // for use in Lib.syncOrAsync, check if there are any
  // pending promises in this plot and wait for them


  plots.previousPromises = function (gd) {
    if ((gd._promises || []).length) {
      return Promise.all(gd._promises).then(function () {
        gd._promises = [];
      });
    }
  };
  /**
   * Adds the 'Edit chart' link.
   * Note that now _doPlot calls this so it can regenerate whenever it replots
   *
   * Add source links to your graph inside the 'showSources' config argument.
   */


  plots.addLinks = function (gd) {
    // Do not do anything if showLink and showSources are not set to true in config
    if (!gd._context.showLink && !gd._context.showSources) return;
    var fullLayout = gd._fullLayout;
    var linkContainer = lib_1.ensureSingle(fullLayout._paper, 'text', 'js-plot-link-container', function (s) {
      s.style({
        'font-family': '"Open Sans", Arial, sans-serif',
        'font-size': '12px',
        'fill': color_1.defaultLine,
        'pointer-events': 'all'
      }).each(function () {
        var links = d3.select(this);
        links.append('tspan').classed('js-link-to-tool', true);
        links.append('tspan').classed('js-link-spacer', true);
        links.append('tspan').classed('js-sourcelinks', true);
      });
    }); // The text node inside svg

    var text = linkContainer.node();
    var attrs = {
      y: fullLayout._paper.attr('height') - 9
    }; // If text's width is bigger than the layout
    // Check that text is a child node or document.body
    // because otherwise IE/Edge might throw an exception
    // when calling getComputedTextLength().
    // Apparently offsetParent is null for invisibles.

    if (document.body.contains(text) && text.getComputedTextLength() >= fullLayout.width - 20) {
      // Align the text at the left
      attrs['text-anchor'] = 'start';
      attrs.x = 5;
    } else {
      // Align the text at the right
      attrs['text-anchor'] = 'end';
      attrs.x = fullLayout._paper.attr('width') - 7;
    }

    linkContainer.attr(attrs);
    var toolspan = linkContainer.select('.js-link-to-tool');
    var spacespan = linkContainer.select('.js-link-spacer');
    var sourcespan = linkContainer.select('.js-sourcelinks');
    if (gd._context.showSources) gd._context.showSources(gd); // 'view in plotly' link for embedded plots

    if (gd._context.showLink) positionPlayWithData(gd, toolspan); // separator if we have both sources and tool link

    spacespan.text(toolspan.text() && sourcespan.text() ? ' - ' : '');
  }; // note that now this function is only adding the brand in
  // iframes and 3rd-party apps


  function positionPlayWithData(gd, container) {
    container.text('');
    var link = container.append('a').attr({
      'xlink:xlink:href': '#',
      'class': 'link--impt link--embedview',
      'font-weight': 'bold'
    }).text(gd._context.linkText + ' ' + String.fromCharCode(187));

    if (gd._context.sendData) {
      link.on('click', function () {
        plots.sendDataToCloud(gd);
      });
    } else {
      var path = window.location.pathname.split('/');
      var query = window.location.search;
      link.attr({
        'xlink:xlink:show': 'new',
        'xlink:xlink:href': '/' + path[2].split('.')[0] + '/' + path[1] + query
      });
    }
  }

  plots.sendDataToCloud = function (gd) {
    var baseUrl = (window.PLOTLYENV || {}).BASE_URL || gd._context.plotlyServerURL;
    if (!baseUrl) return;
    gd.emit('plotly_beforeexport');
    var hiddenformDiv = d3.select(gd).append('div').attr('id', 'hiddenform').style('display', 'none');
    var hiddenform = hiddenformDiv.append('form').attr({
      action: baseUrl + '/external',
      method: 'post',
      target: '_blank'
    });
    var hiddenformInput = hiddenform.append('input').attr({
      type: 'text',
      name: 'data'
    });
    hiddenformInput.node().value = plots.graphJson(gd, false, 'keepdata');
    hiddenform.node().submit();
    hiddenformDiv.remove();
    gd.emit('plotly_afterexport');
    return false;
  };

  var d3FormatKeys = ['days', 'shortDays', 'months', 'shortMonths', 'periods', 'dateTime', 'date', 'time', 'decimal', 'thousands', 'grouping', 'currency'];
  var extraFormatKeys = ['year', 'month', 'dayMonth', 'dayMonthYear'];
  /*
   * Fill in default values
   * @param {DOM element} gd
   * @param {object} opts
   * @param {boolean} opts.skipUpdateCalc: normally if the existing gd.calcdata looks
   *   compatible with the new gd._fullData we finish by linking the new _fullData traces
   *   to the old gd.calcdata, so it's correctly set if we're not going to recalc. But also,
   *   if there are calcTransforms on the trace, we first remap data arrays from the old full
   *   trace into the new one. Use skipUpdateCalc to defer this (needed by Plotly.react)
   *
   * gd.data, gd.layout:
   *   are precisely what the user specified (except as modified by cleanData/cleanLayout),
   *   these fields shouldn't be modified (except for filling in some auto values)
   *   nor used directly after the supply defaults step.
   *
   * gd._fullData, gd._fullLayout:
   *   are complete descriptions of how to draw the plot,
   *   use these fields in all required computations.
   *
   * gd._fullLayout._modules
   *   is a list of all the trace modules required to draw the plot.
   *
   * gd._fullLayout._visibleModules
   *   subset of _modules, a list of modules corresponding to visible:true traces.
   *
   * gd._fullLayout._basePlotModules
   *   is a list of all the plot modules required to draw the plot.
   *
   * gd._fullLayout._transformModules
   *   is a list of all the transform modules invoked.
   *
   */

  plots.supplyDefaults = function (gd, opts) {
    var skipUpdateCalc = opts && opts.skipUpdateCalc;
    var oldFullLayout = gd._fullLayout || {};

    if (oldFullLayout._skipDefaults) {
      delete oldFullLayout._skipDefaults;
      return;
    }

    var newFullLayout = gd._fullLayout = {};
    var newLayout = gd.layout || {};
    var oldFullData = gd._fullData || [];
    var newFullData = gd._fullData = [];
    var newData = gd.data || [];
    var oldCalcdata = gd.calcdata || [];
    var context = gd._context || {};
    var i; // Create all the storage space for frames, but only if doesn't already exist

    if (!gd._transitionData) plots.createTransitionData(gd); // So we only need to do this once (and since we have gd here)
    // get the translated placeholder titles.
    // These ones get used as default values so need to be known at supplyDefaults
    // others keep their blank defaults but render the placeholder as desired later
    // TODO: make these work the same way, only inserting the placeholder text at draw time?
    // The challenge is that this has slightly different behavior right now in editable mode:
    // using the placeholder as default makes this text permanently (but lightly) visible,
    // but explicit '' for these titles gives you a placeholder that's hidden until you mouse
    // over it - so you're not distracted by it if you really don't want a title, but if you do
    // and you're new to plotly you may not be able to find it.
    // When editable=false the two behave the same, no title is drawn.

    newFullLayout._dfltTitle = {
      plot: _(gd, 'Click to enter Plot title'),
      x: _(gd, 'Click to enter X axis title'),
      y: _(gd, 'Click to enter Y axis title'),
      colorbar: _(gd, 'Click to enter Colorscale title'),
      annotation: _(gd, 'new text')
    };
    newFullLayout._traceWord = _(gd, 'trace');
    var formatObj = getFormatObj(gd, d3FormatKeys); // stash the token from context so mapbox subplots can use it as default

    newFullLayout._mapboxAccessToken = context.mapboxAccessToken; // first fill in what we can of layout without looking at data
    // because fullData needs a few things from layout

    if (oldFullLayout._initialAutoSizeIsDone) {
      // coerce the updated layout while preserving width and height
      var oldWidth = oldFullLayout.width;
      var oldHeight = oldFullLayout.height;
      plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);
      if (!newLayout.width) newFullLayout.width = oldWidth;
      if (!newLayout.height) newFullLayout.height = oldHeight;
      plots.sanitizeMargins(newFullLayout);
    } else {
      // coerce the updated layout and autosize if needed
      plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);
      var missingWidthOrHeight = !newLayout.width || !newLayout.height;
      var autosize = newFullLayout.autosize;
      var autosizable = context.autosizable;
      var initialAutoSize = missingWidthOrHeight && (autosize || autosizable);
      if (initialAutoSize) plots.plotAutoSize(gd, newLayout, newFullLayout);else if (missingWidthOrHeight) plots.sanitizeMargins(newFullLayout); // for backwards-compatibility with Plotly v1.x.x

      if (!autosize && missingWidthOrHeight) {
        newLayout.width = newFullLayout.width;
        newLayout.height = newFullLayout.height;
      }
    }

    newFullLayout._d3locale = getFormatter(formatObj, newFullLayout.separators);
    newFullLayout._extraFormat = getFormatObj(gd, extraFormatKeys);
    newFullLayout._initialAutoSizeIsDone = true; // keep track of how many traces are inputted

    newFullLayout._dataLength = newData.length; // clear the lists of trace and baseplot modules, and subplots

    newFullLayout._modules = [];
    newFullLayout._visibleModules = [];
    newFullLayout._basePlotModules = [];
    var subplots = newFullLayout._subplots = emptySubplotLists(); // initialize axis and subplot hash objects for splom-generated grids

    var splomAxes = newFullLayout._splomAxes = {
      x: {},
      y: {}
    };
    var splomSubplots = newFullLayout._splomSubplots = {}; // initialize splom grid defaults

    newFullLayout._splomGridDflt = {}; // for stacked area traces to share config across traces

    newFullLayout._scatterStackOpts = {}; // for the first scatter trace on each subplot (so it knows tonext->tozero)

    newFullLayout._firstScatter = {}; // for grouped bar/box/violin trace to share config across traces

    newFullLayout._alignmentOpts = {}; // track color axes referenced in the data

    newFullLayout._colorAxes = {}; // for traces to request a default rangeslider on their x axes
    // eg set `_requestRangeslider.x2 = true` for xaxis2

    newFullLayout._requestRangeslider = {}; // pull uids from old data to use as new defaults

    newFullLayout._traceUids = getTraceUids(oldFullData, newData); // then do the data

    newFullLayout._globalTransforms = (gd._context || {}).globalTransforms;
    plots.supplyDataDefaults(newData, newFullData, newLayout, newFullLayout); // redo grid size defaults with info about splom x/y axes,
    // and fill in generated cartesian axes and subplots

    var splomXa = Object.keys(splomAxes.x);
    var splomYa = Object.keys(splomAxes.y);

    if (splomXa.length > 1 && splomYa.length > 1) {
      registry.getComponentMethod('grid', 'sizeDefaults')(newLayout, newFullLayout);

      for (i = 0; i < splomXa.length; i++) {
        lib_1.pushUnique(subplots.xaxis, splomXa[i]);
      }

      for (i = 0; i < splomYa.length; i++) {
        lib_1.pushUnique(subplots.yaxis, splomYa[i]);
      }

      for (var k in splomSubplots) {
        lib_1.pushUnique(subplots.cartesian, k);
      }
    } // attach helper method to check whether a plot type is present on graph


    newFullLayout._has = plots._hasPlotType.bind(newFullLayout);

    if (oldFullData.length === newFullData.length) {
      for (i = 0; i < newFullData.length; i++) {
        relinkPrivateKeys(newFullData[i], oldFullData[i]);
      }
    } // finally, fill in the pieces of layout that may need to look at data


    plots.supplyLayoutModuleDefaults(newLayout, newFullLayout, newFullData, gd._transitionData); // Special cases that introduce interactions between traces.
    // This is after relinkPrivateKeys so we can use those in crossTraceDefaults
    // and after layout module defaults, so we can use eg barmode

    var _modules = newFullLayout._visibleModules;
    var crossTraceDefaultsFuncs = [];

    for (i = 0; i < _modules.length; i++) {
      var funci = _modules[i].crossTraceDefaults; // some trace types share crossTraceDefaults (ie histogram2d, histogram2dcontour)

      if (funci) lib_1.pushUnique(crossTraceDefaultsFuncs, funci);
    }

    for (i = 0; i < crossTraceDefaultsFuncs.length; i++) {
      crossTraceDefaultsFuncs[i](newFullData, newFullLayout);
    } // turn on flag to optimize large splom-only graphs
    // mostly by omitting SVG layers during Cartesian.drawFramework


    newFullLayout._hasOnlyLargeSploms = newFullLayout._basePlotModules.length === 1 && newFullLayout._basePlotModules[0].name === 'splom' && splomXa.length > 15 && splomYa.length > 15 && newFullLayout.shapes.length === 0 && newFullLayout.images.length === 0; // relink / initialize subplot axis objects

    plots.linkSubplots(newFullData, newFullLayout, oldFullData, oldFullLayout); // clean subplots and other artifacts from previous plot calls

    plots.cleanPlot(newFullData, newFullLayout, oldFullData, oldFullLayout);
    var hadGL2D = !!(oldFullLayout._has && oldFullLayout._has('gl2d'));
    var hasGL2D = !!(newFullLayout._has && newFullLayout._has('gl2d'));
    var hadCartesian = !!(oldFullLayout._has && oldFullLayout._has('cartesian'));
    var hasCartesian = !!(newFullLayout._has && newFullLayout._has('cartesian'));
    var hadBgLayer = hadCartesian || hadGL2D;
    var hasBgLayer = hasCartesian || hasGL2D;

    if (hadBgLayer && !hasBgLayer) {
      // remove bgLayer
      oldFullLayout._bgLayer.remove();
    } else if (hasBgLayer && !hadBgLayer) {
      // create bgLayer
      newFullLayout._shouldCreateBgLayer = true;
    } // clear selection outline until we implement persistent selection,
    // don't clear them though when drag handlers (e.g. listening to
    // `plotly_selecting`) update the graph.
    // we should try to come up with a better solution when implementing
    // https://github.com/plotly/plotly.js/issues/1851


    if (oldFullLayout._zoomlayer && !gd._dragging) {
      clearSelect({
        // mock old gd
        _fullLayout: oldFullLayout
      });
    } // fill in meta helpers


    fillMetaTextHelpers(newFullData, newFullLayout); // relink functions and _ attributes to promote consistency between plots

    relinkPrivateKeys(newFullLayout, oldFullLayout); // colorscale crossTraceDefaults needs newFullLayout with relinked keys

    registry.getComponentMethod('colorscale', 'crossTraceDefaults')(newFullData, newFullLayout); // For persisting GUI-driven changes in layout
    // _preGUI and _tracePreGUI were already copied over in relinkPrivateKeys

    if (!newFullLayout._preGUI) newFullLayout._preGUI = {}; // track trace GUI changes by uid rather than by trace index

    if (!newFullLayout._tracePreGUI) newFullLayout._tracePreGUI = {};
    var tracePreGUI = newFullLayout._tracePreGUI;
    var uids = {};
    var uid;

    for (uid in tracePreGUI) uids[uid] = 'old';

    for (i = 0; i < newFullData.length; i++) {
      uid = newFullData[i]._fullInput.uid;
      if (!uids[uid]) tracePreGUI[uid] = {};
      uids[uid] = 'new';
    }

    for (uid in uids) {
      if (uids[uid] === 'old') delete tracePreGUI[uid];
    } // set up containers for margin calculations


    initMargins(newFullLayout); // collect and do some initial calculations for rangesliders

    registry.getComponentMethod('rangeslider', 'makeData')(newFullLayout); // update object references in calcdata

    if (!skipUpdateCalc && oldCalcdata.length === newFullData.length) {
      plots.supplyDefaultsUpdateCalc(oldCalcdata, newFullData);
    }
  };

  plots.supplyDefaultsUpdateCalc = function (oldCalcdata, newFullData) {
    for (var i = 0; i < newFullData.length; i++) {
      var newTrace = newFullData[i];
      var cd0 = (oldCalcdata[i] || [])[0];

      if (cd0 && cd0.trace) {
        var oldTrace = cd0.trace;

        if (oldTrace._hasCalcTransform) {
          var arrayAttrs = oldTrace._arrayAttrs;
          var j, astr, oldArrayVal;

          for (j = 0; j < arrayAttrs.length; j++) {
            astr = arrayAttrs[j];
            oldArrayVal = lib_1.nestedProperty(oldTrace, astr).get().slice();
            lib_1.nestedProperty(newTrace, astr).set(oldArrayVal);
          }
        }

        cd0.trace = newTrace;
      }
    }
  };
  /**
   * Create a list of uid strings satisfying (in this order of importance):
   * 1. all unique, all strings
   * 2. matches input uids if provided
   * 3. matches previous data uids
   */


  function getTraceUids(oldFullData, newData) {
    var len = newData.length;
    var oldFullInput = [];
    var i, prevFullInput;

    for (i = 0; i < oldFullData.length; i++) {
      var thisFullInput = oldFullData[i]._fullInput;
      if (thisFullInput !== prevFullInput) oldFullInput.push(thisFullInput);
      prevFullInput = thisFullInput;
    }

    var oldLen = oldFullInput.length;
    var out = new Array(len);
    var seenUids = {};

    function setUid(uid, i) {
      out[i] = uid;
      seenUids[uid] = 1;
    }

    function tryUid(uid, i) {
      if (uid && typeof uid === 'string' && !seenUids[uid]) {
        setUid(uid, i);
        return true;
      }
    }

    for (i = 0; i < len; i++) {
      var newUid = newData[i].uid;
      if (typeof newUid === 'number') newUid = String(newUid);
      if (tryUid(newUid, i)) continue;
      if (i < oldLen && tryUid(oldFullInput[i].uid, i)) continue;
      setUid(lib_1.randstr(seenUids), i);
    }

    return out;
  }
  /**
   * Make a container for collecting subplots we need to display.
   *
   * Finds all subplot types we need to enumerate once and caches it,
   * but makes a new output object each time.
   * Single-trace subplots (which have no `id`) such as pie, table, etc
   * do not need to be collected because we just draw all visible traces.
   */


  function emptySubplotLists() {
    var collectableSubplotTypes = registry.collectableSubplotTypes;
    var out = {};
    var i, j;

    if (!collectableSubplotTypes) {
      collectableSubplotTypes = [];
      var subplotsRegistry = registry.subplotsRegistry;

      for (var subplotType in subplotsRegistry) {
        var subplotModule = subplotsRegistry[subplotType];
        var subplotAttr = subplotModule.attr;

        if (subplotAttr) {
          collectableSubplotTypes.push(subplotType); // special case, currently just for cartesian:
          // we need to enumerate axes, not just subplots

          if (Array.isArray(subplotAttr)) {
            for (j = 0; j < subplotAttr.length; j++) {
              lib_1.pushUnique(collectableSubplotTypes, subplotAttr[j]);
            }
          }
        }
      }
    }

    for (i = 0; i < collectableSubplotTypes.length; i++) {
      out[collectableSubplotTypes[i]] = [];
    }

    return out;
  }
  /**
   * getFormatObj: use _context to get the format object from locale.
   * Used to get d3.locale argument object and extraFormat argument object
   *
   * Regarding d3.locale argument :
   * decimal and thousands can be overridden later by layout.separators
   * grouping and currency are not presently used by our automatic number
   * formatting system but can be used by custom formats.
   *
   * @returns {object} d3.locale format object
   */


  function getFormatObj(gd, formatKeys) {
    var locale = gd._context.locale;
    if (!locale) locale = 'en-US';
    var formatDone = false;
    var formatObj = {};

    function includeFormat(newFormat) {
      var formatFinished = true;

      for (var i = 0; i < formatKeys.length; i++) {
        var formatKey = formatKeys[i];

        if (!formatObj[formatKey]) {
          if (newFormat[formatKey]) {
            formatObj[formatKey] = newFormat[formatKey];
          } else formatFinished = false;
        }
      }

      if (formatFinished) formatDone = true;
    } // same as localize, look for format parts in each format spec in the chain


    for (var i = 0; i < 2; i++) {
      var locales = gd._context.locales;

      for (var j = 0; j < 2; j++) {
        var formatj = (locales[locale] || {}).format;

        if (formatj) {
          includeFormat(formatj);
          if (formatDone) break;
        }

        locales = registry.localeRegistry;
      }

      var baseLocale = locale.split('-')[0];
      if (formatDone || baseLocale === locale) break;
      locale = baseLocale;
    } // lastly pick out defaults from english (non-US, as DMY is so much more common)


    if (!formatDone) includeFormat(registry.localeRegistry.en.format);
    return formatObj;
  }
  /**
   * getFormatter: combine the final separators with the locale formatting object
   * we pulled earlier to generate number and time formatters
   * TODO: remove separators in v3, only use locale, so we don't need this step?
   *
   * @param {object} formatObj: d3.locale format object
   * @param {string} separators: length-2 string to override decimal and thousands
   *   separators in number formatting
   *
   * @returns {object} {numberFormat, timeFormat} d3 formatter factory functions
   *   for numbers and time
   */


  function getFormatter(formatObj, separators) {
    formatObj.decimal = separators.charAt(0);
    formatObj.thousands = separators.charAt(1);
    return {
      numberFormat: function (formatStr) {
        try {
          formatStr = formatLocale(formatObj).format(lib_1.adjustFormat(formatStr));
        } catch (e) {
          lib_1.warnBadFormat(formatStr);
          return lib_1.noFormat;
        }

        return formatStr;
      },
      timeFormat: timeFormatLocale(formatObj).utcFormat
    };
  }

  function fillMetaTextHelpers(newFullData, newFullLayout) {
    var _meta;

    var meta4data = [];

    if (newFullLayout.meta) {
      _meta = newFullLayout._meta = {
        meta: newFullLayout.meta,
        layout: {
          meta: newFullLayout.meta
        }
      };
    }

    for (var i = 0; i < newFullData.length; i++) {
      var trace = newFullData[i];

      if (trace.meta) {
        meta4data[trace.index] = trace._meta = {
          meta: trace.meta
        };
      } else if (newFullLayout.meta) {
        trace._meta = {
          meta: newFullLayout.meta
        };
      }

      if (newFullLayout.meta) {
        trace._meta.layout = {
          meta: newFullLayout.meta
        };
      }
    }

    if (meta4data.length) {
      if (!_meta) {
        _meta = newFullLayout._meta = {};
      }

      _meta.data = meta4data;
    }
  } // Create storage for all of the data related to frames and transitions:


  plots.createTransitionData = function (gd) {
    // Set up the default keyframe if it doesn't exist:
    if (!gd._transitionData) {
      gd._transitionData = {};
    }

    if (!gd._transitionData._frames) {
      gd._transitionData._frames = [];
    }

    if (!gd._transitionData._frameHash) {
      gd._transitionData._frameHash = {};
    }

    if (!gd._transitionData._counter) {
      gd._transitionData._counter = 0;
    }

    if (!gd._transitionData._interruptCallbacks) {
      gd._transitionData._interruptCallbacks = [];
    }
  }; // helper function to be bound to fullLayout to check
  // whether a certain plot type is present on plot
  // or trace has a category


  plots._hasPlotType = function (category) {
    var i; // check base plot modules

    var basePlotModules = this._basePlotModules || [];

    for (i = 0; i < basePlotModules.length; i++) {
      if (basePlotModules[i].name === category) return true;
    } // check trace modules (including non-visible:true)


    var modules = this._modules || [];

    for (i = 0; i < modules.length; i++) {
      var name = modules[i].name;
      if (name === category) return true; // N.B. this is modules[i] along with 'categories' as a hash object

      var _module = registry.modules[name];
      if (_module && _module.categories[category]) return true;
    }

    return false;
  };

  plots.cleanPlot = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {
    var i, j;
    var basePlotModules = oldFullLayout._basePlotModules || [];

    for (i = 0; i < basePlotModules.length; i++) {
      var _module = basePlotModules[i];

      if (_module.clean) {
        _module.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);
      }
    }

    var hadGl = oldFullLayout._has && oldFullLayout._has('gl');

    var hasGl = newFullLayout._has && newFullLayout._has('gl');

    if (hadGl && !hasGl) {
      if (oldFullLayout._glcontainer !== undefined) {
        oldFullLayout._glcontainer.selectAll('.gl-canvas').remove();

        oldFullLayout._glcontainer.selectAll('.no-webgl').remove();

        oldFullLayout._glcanvas = null;
      }
    }

    var hasInfoLayer = !!oldFullLayout._infolayer;

    oldLoop: for (i = 0; i < oldFullData.length; i++) {
      var oldTrace = oldFullData[i];
      var oldUid = oldTrace.uid;

      for (j = 0; j < newFullData.length; j++) {
        var newTrace = newFullData[j];
        if (oldUid === newTrace.uid) continue oldLoop;
      } // clean old colorbars


      if (hasInfoLayer) {
        oldFullLayout._infolayer.select('.cb' + oldUid).remove();
      }
    }
  };

  plots.linkSubplots = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {
    var i, j;
    var oldSubplots = oldFullLayout._plots || {};
    var newSubplots = newFullLayout._plots = {};
    var newSubplotList = newFullLayout._subplots;
    var mockGd = {
      _fullData: newFullData,
      _fullLayout: newFullLayout
    };
    var ids = newSubplotList.cartesian.concat(newSubplotList.gl2d || []);

    for (i = 0; i < ids.length; i++) {
      var id = ids[i];
      var oldSubplot = oldSubplots[id];
      var xaxis = axis_ids.getFromId(mockGd, id, 'x');
      var yaxis = axis_ids.getFromId(mockGd, id, 'y');
      var plotinfo; // link or create subplot object

      if (oldSubplot) {
        plotinfo = newSubplots[id] = oldSubplot;
      } else {
        plotinfo = newSubplots[id] = {};
        plotinfo.id = id;
      } // add these axis ids to each others' subplot lists


      xaxis._counterAxes.push(yaxis._id);

      yaxis._counterAxes.push(xaxis._id);

      xaxis._subplotsWith.push(id);

      yaxis._subplotsWith.push(id); // update x and y axis layout object refs


      plotinfo.xaxis = xaxis;
      plotinfo.yaxis = yaxis; // By default, we clip at the subplot level,
      // but if one trace on a given subplot has *cliponaxis* set to false,
      // we need to clip at the trace module layer level;
      // find this out here, once of for all.

      plotinfo._hasClipOnAxisFalse = false;

      for (j = 0; j < newFullData.length; j++) {
        var trace = newFullData[j];

        if (trace.xaxis === plotinfo.xaxis._id && trace.yaxis === plotinfo.yaxis._id && trace.cliponaxis === false) {
          plotinfo._hasClipOnAxisFalse = true;
          break;
        }
      }
    } // while we're at it, link overlaying axes to their main axes and
    // anchored axes to the axes they're anchored to


    var axList = axis_ids.list(mockGd, null, true);
    var ax;

    for (i = 0; i < axList.length; i++) {
      ax = axList[i];
      var mainAx = null;

      if (ax.overlaying) {
        mainAx = axis_ids.getFromId(mockGd, ax.overlaying); // you cannot overlay an axis that's already overlaying another

        if (mainAx && mainAx.overlaying) {
          ax.overlaying = false;
          mainAx = null;
        }
      }

      ax._mainAxis = mainAx || ax;
      /*
       * For now force overlays to overlay completely... so they
       * can drag together correctly and share backgrounds.
       * Later perhaps we make separate axis domain and
       * tick/line domain or something, so they can still share
       * the (possibly larger) dragger and background but don't
       * have to both be drawn over that whole domain
       */

      if (mainAx) ax.domain = mainAx.domain.slice();
      ax._anchorAxis = ax.anchor === 'free' ? null : axis_ids.getFromId(mockGd, ax.anchor);
    } // finally, we can find the main subplot for each axis
    // (on which the ticks & labels are drawn)


    for (i = 0; i < axList.length; i++) {
      ax = axList[i];

      ax._counterAxes.sort(axis_ids.idSort);

      ax._subplotsWith.sort(lib_1.subplotSort);

      ax._mainSubplot = findMainSubplot(ax, newFullLayout); // find "full" domain span of counter axes,
      // this loop can be costly, so only compute it when required

      if (ax._counterAxes.length && (ax.spikemode && ax.spikemode.indexOf('across') !== -1 || ax.automargin && ax.mirror && ax.anchor !== 'free' || registry.getComponentMethod('rangeslider', 'isVisible')(ax))) {
        var min = 1;
        var max = 0;

        for (j = 0; j < ax._counterAxes.length; j++) {
          var ax2 = axis_ids.getFromId(mockGd, ax._counterAxes[j]);
          min = Math.min(min, ax2.domain[0]);
          max = Math.max(max, ax2.domain[1]);
        }

        if (min < max) {
          ax._counterDomainMin = min;
          ax._counterDomainMax = max;
        }
      }
    }
  };

  function findMainSubplot(ax, fullLayout) {
    var mockGd = {
      _fullLayout: fullLayout
    };
    var isX = ax._id.charAt(0) === 'x';
    var anchorAx = ax._mainAxis._anchorAxis;
    var mainSubplotID = '';
    var nextBestMainSubplotID = '';
    var anchorID = ''; // First try the main ID with the anchor

    if (anchorAx) {
      anchorID = anchorAx._mainAxis._id;
      mainSubplotID = isX ? ax._id + anchorID : anchorID + ax._id;
    } // Then look for a subplot with the counteraxis overlaying the anchor
    // If that fails just use the first subplot including this axis


    if (!mainSubplotID || !fullLayout._plots[mainSubplotID]) {
      mainSubplotID = '';
      var counterIDs = ax._counterAxes;

      for (var j = 0; j < counterIDs.length; j++) {
        var counterPart = counterIDs[j];
        var id = isX ? ax._id + counterPart : counterPart + ax._id;
        if (!nextBestMainSubplotID) nextBestMainSubplotID = id;
        var counterAx = axis_ids.getFromId(mockGd, counterPart);

        if (anchorID && counterAx.overlaying === anchorID) {
          mainSubplotID = id;
          break;
        }
      }
    }

    return mainSubplotID || nextBestMainSubplotID;
  } // This function clears any trace attributes with valType: color and
  // no set dflt filed in the plot schema. This is needed because groupby (which
  // is the only transform for which this currently applies) supplies parent
  // trace defaults, then expanded trace defaults. The result is that `null`
  // colors are default-supplied and inherited as a color instead of a null.
  // The result is that expanded trace default colors have no effect, with
  // the final result that groups are indistinguishable. This function clears
  // those colors so that individual groupby groups get unique colors.


  plots.clearExpandedTraceDefaultColors = function (trace) {
    var colorAttrs, path, i; // This uses weird closure state in order to satisfy the linter rule
    // that we can't create functions in a loop.

    function locateColorAttrs(attr, attrName, attrs, level) {
      path[level] = attrName;
      path.length = level + 1;

      if (attr.valType === 'color' && attr.dflt === undefined) {
        colorAttrs.push(path.join('.'));
      }
    }

    path = []; // Get the cached colorAttrs:

    colorAttrs = trace._module._colorAttrs; // Or else compute and cache the colorAttrs on the module:

    if (!colorAttrs) {
      trace._module._colorAttrs = colorAttrs = [];
      plot_schema.crawl(trace._module.attributes, locateColorAttrs);
    }

    for (i = 0; i < colorAttrs.length; i++) {
      var origprop = lib_1.nestedProperty(trace, '_input.' + colorAttrs[i]);

      if (!origprop.get()) {
        lib_1.nestedProperty(trace, colorAttrs[i]).set(null);
      }
    }
  };

  plots.supplyDataDefaults = function (dataIn, dataOut, layout, fullLayout) {
    var modules = fullLayout._modules;
    var visibleModules = fullLayout._visibleModules;
    var basePlotModules = fullLayout._basePlotModules;
    var cnt = 0;
    var colorCnt = 0;
    var i, fullTrace, trace;
    fullLayout._transformModules = [];

    function pushModule(fullTrace) {
      dataOut.push(fullTrace);
      var _module = fullTrace._module;
      if (!_module) return;
      lib_1.pushUnique(modules, _module);
      if (fullTrace.visible === true) lib_1.pushUnique(visibleModules, _module);
      lib_1.pushUnique(basePlotModules, fullTrace._module.basePlotModule);
      cnt++; // TODO: do we really want color not to increment for explicitly invisible traces?
      // This logic is weird, but matches previous behavior: traces that you explicitly
      // set to visible:false do not increment the color, but traces WE determine to be
      // empty or invalid (and thus set to visible:false) DO increment color.
      // I kind of think we should just let all traces increment color, visible or not.
      // see mock: axes-autotype-empty vs. a test of restyling visible: false that
      // I can't find right now...

      if (fullTrace._input.visible !== false) colorCnt++;
    }

    var carpetIndex = {};
    var carpetDependents = [];
    var dataTemplate = (layout.template || {}).data || {};
    var templater = plot_template.traceTemplater(dataTemplate);

    for (i = 0; i < dataIn.length; i++) {
      trace = dataIn[i]; // reuse uid we may have pulled out of oldFullData
      // Note: templater supplies trace type

      fullTrace = templater.newTrace(trace);
      fullTrace.uid = fullLayout._traceUids[i];
      plots.supplyTraceDefaults(trace, fullTrace, colorCnt, fullLayout, i);
      fullTrace.index = i;
      fullTrace._input = trace;
      fullTrace._expandedIndex = cnt;

      if (fullTrace.transforms && fullTrace.transforms.length) {
        var sdInvisible = trace.visible !== false && fullTrace.visible === false;
        var expandedTraces = applyTransforms(fullTrace, dataOut, layout, fullLayout);

        for (var j = 0; j < expandedTraces.length; j++) {
          var expandedTrace = expandedTraces[j]; // No further templating during transforms.

          var fullExpandedTrace = {
            _template: fullTrace._template,
            type: fullTrace.type,
            // set uid using parent uid and expanded index
            // to promote consistency between update calls
            uid: fullTrace.uid + j
          }; // If the first supplyDefaults created `visible: false`,
          // clear it before running supplyDefaults a second time,
          // because sometimes there are items we still want to coerce
          // inside trace modules before determining that the trace is
          // again `visible: false`, for example partial visibilities
          // in `splom` traces.

          if (sdInvisible && expandedTrace.visible === false) {
            delete expandedTrace.visible;
          }

          plots.supplyTraceDefaults(expandedTrace, fullExpandedTrace, cnt, fullLayout, i); // relink private (i.e. underscore) keys expanded trace to full expanded trace so
          // that transform supply-default methods can set _ keys for future use.

          relinkPrivateKeys(fullExpandedTrace, expandedTrace); // add info about parent data trace

          fullExpandedTrace.index = i;
          fullExpandedTrace._input = trace;
          fullExpandedTrace._fullInput = fullTrace; // add info about the expanded data

          fullExpandedTrace._expandedIndex = cnt;
          fullExpandedTrace._expandedInput = expandedTrace;
          pushModule(fullExpandedTrace);
        }
      } else {
        // add identify refs for consistency with transformed traces
        fullTrace._fullInput = fullTrace;
        fullTrace._expandedInput = fullTrace;
        pushModule(fullTrace);
      }

      if (registry.traceIs(fullTrace, 'carpetAxis')) {
        carpetIndex[fullTrace.carpet] = fullTrace;
      }

      if (registry.traceIs(fullTrace, 'carpetDependent')) {
        carpetDependents.push(i);
      }
    }

    for (i = 0; i < carpetDependents.length; i++) {
      fullTrace = dataOut[carpetDependents[i]];
      if (!fullTrace.visible) continue;
      var carpetAxis = carpetIndex[fullTrace.carpet];
      fullTrace._carpet = carpetAxis;

      if (!carpetAxis || !carpetAxis.visible) {
        fullTrace.visible = false;
        continue;
      }

      fullTrace.xaxis = carpetAxis.xaxis;
      fullTrace.yaxis = carpetAxis.yaxis;
    }
  };

  plots.supplyAnimationDefaults = function (opts) {
    opts = opts || {};
    var i;
    var optsOut = {};

    function coerce(attr, dflt) {
      return lib_1.coerce(opts || {}, optsOut, animation_attributes, attr, dflt);
    }

    coerce('mode');
    coerce('direction');
    coerce('fromcurrent');

    if (Array.isArray(opts.frame)) {
      optsOut.frame = [];

      for (i = 0; i < opts.frame.length; i++) {
        optsOut.frame[i] = plots.supplyAnimationFrameDefaults(opts.frame[i] || {});
      }
    } else {
      optsOut.frame = plots.supplyAnimationFrameDefaults(opts.frame || {});
    }

    if (Array.isArray(opts.transition)) {
      optsOut.transition = [];

      for (i = 0; i < opts.transition.length; i++) {
        optsOut.transition[i] = plots.supplyAnimationTransitionDefaults(opts.transition[i] || {});
      }
    } else {
      optsOut.transition = plots.supplyAnimationTransitionDefaults(opts.transition || {});
    }

    return optsOut;
  };

  plots.supplyAnimationFrameDefaults = function (opts) {
    var optsOut = {};

    function coerce(attr, dflt) {
      return lib_1.coerce(opts || {}, optsOut, animation_attributes.frame, attr, dflt);
    }

    coerce('duration');
    coerce('redraw');
    return optsOut;
  };

  plots.supplyAnimationTransitionDefaults = function (opts) {
    var optsOut = {};

    function coerce(attr, dflt) {
      return lib_1.coerce(opts || {}, optsOut, animation_attributes.transition, attr, dflt);
    }

    coerce('duration');
    coerce('easing');
    return optsOut;
  };

  plots.supplyFrameDefaults = function (frameIn) {
    var frameOut = {};

    function coerce(attr, dflt) {
      return lib_1.coerce(frameIn, frameOut, frame_attributes, attr, dflt);
    }

    coerce('group');
    coerce('name');
    coerce('traces');
    coerce('baseframe');
    coerce('data');
    coerce('layout');
    return frameOut;
  };

  plots.supplyTraceDefaults = function (traceIn, traceOut, colorIndex, layout, traceInIndex) {
    var colorway = layout.colorway || color_1.defaults;
    var defaultColor = colorway[colorIndex % colorway.length];
    var i;

    function coerce(attr, dflt) {
      return lib_1.coerce(traceIn, traceOut, plots.attributes, attr, dflt);
    }

    var visible = coerce('visible');
    coerce('type');
    coerce('name', layout._traceWord + ' ' + traceInIndex);
    coerce('uirevision', layout.uirevision); // we want even invisible traces to make their would-be subplots visible
    // so coerce the subplot id(s) now no matter what

    var _module = plots.getModule(traceOut);

    traceOut._module = _module;

    if (_module) {
      var basePlotModule = _module.basePlotModule;
      var subplotAttr = basePlotModule.attr;
      var subplotAttrs = basePlotModule.attributes;

      if (subplotAttr && subplotAttrs) {
        var subplots = layout._subplots;
        var subplotId = '';

        if (visible || basePlotModule.name !== 'gl2d' // for now just drop empty gl2d subplots
        // TODO - currently if we draw an empty gl2d subplot, it draws
        // nothing then gets stuck and you can't get it back without newPlot
        // sort this out in the regl refactor?
        ) {
          if (Array.isArray(subplotAttr)) {
            for (i = 0; i < subplotAttr.length; i++) {
              var attri = subplotAttr[i];
              var vali = lib_1.coerce(traceIn, traceOut, subplotAttrs, attri);
              if (subplots[attri]) lib_1.pushUnique(subplots[attri], vali);
              subplotId += vali;
            }
          } else {
            subplotId = lib_1.coerce(traceIn, traceOut, subplotAttrs, subplotAttr);
          }

          if (subplots[basePlotModule.name]) {
            lib_1.pushUnique(subplots[basePlotModule.name], subplotId);
          }
        }
      }
    }

    if (visible) {
      coerce('customdata');
      coerce('ids');
      coerce('meta');

      if (registry.traceIs(traceOut, 'showLegend')) {
        lib_1.coerce(traceIn, traceOut, _module.attributes.showlegend ? _module.attributes : plots.attributes, 'showlegend');
        coerce('legendgroup');
        coerce('legendgrouptitle.text');
        coerce('legendrank');
        traceOut._dfltShowLegend = true;
      } else {
        traceOut._dfltShowLegend = false;
      }

      if (_module) {
        _module.supplyDefaults(traceIn, traceOut, defaultColor, layout);
      }

      if (!registry.traceIs(traceOut, 'noOpacity')) {
        coerce('opacity');
      }

      if (registry.traceIs(traceOut, 'notLegendIsolatable')) {
        // This clears out the legendonly state for traces like carpet that
        // cannot be isolated in the legend
        traceOut.visible = !!traceOut.visible;
      }

      if (!registry.traceIs(traceOut, 'noHover')) {
        if (!traceOut.hovertemplate) lib_1.coerceHoverinfo(traceIn, traceOut, layout); // parcats support hover, but not hoverlabel stylings (yet)

        if (traceOut.type !== 'parcats') {
          registry.getComponentMethod('fx', 'supplyDefaults')(traceIn, traceOut, defaultColor, layout);
        }
      }

      if (_module && _module.selectPoints) {
        coerce('selectedpoints');
      }

      plots.supplyTransformDefaults(traceIn, traceOut, layout);
    }

    return traceOut;
  };
  /**
   * hasMakesDataTransform: does this trace have a transform that makes its own
   * data, either by grabbing it from somewhere else or by creating it from input
   * parameters? If so, we should still keep going with supplyDefaults
   * even if the trace is invisible, which may just be because it has no data yet.
   */


  function hasMakesDataTransform(trace) {
    var transforms = trace.transforms;

    if (Array.isArray(transforms) && transforms.length) {
      for (var i = 0; i < transforms.length; i++) {
        var ti = transforms[i];

        var _module = ti._module || transformsRegistry[ti.type];

        if (_module && _module.makesData) return true;
      }
    }

    return false;
  }

  plots.hasMakesDataTransform = hasMakesDataTransform;

  plots.supplyTransformDefaults = function (traceIn, traceOut, layout) {
    // For now we only allow transforms on 1D traces, ie those that specify a _length.
    // If we were to implement 2D transforms, we'd need to have each transform
    // describe its own applicability and disable itself when it doesn't apply.
    // Also allow transforms that make their own data, but not in globalTransforms
    if (!(traceOut._length || hasMakesDataTransform(traceIn))) return;
    var globalTransforms = layout._globalTransforms || [];
    var transformModules = layout._transformModules || [];
    if (!Array.isArray(traceIn.transforms) && globalTransforms.length === 0) return;
    var containerIn = traceIn.transforms || [];
    var transformList = globalTransforms.concat(containerIn);
    var containerOut = traceOut.transforms = [];

    for (var i = 0; i < transformList.length; i++) {
      var transformIn = transformList[i];
      var type = transformIn.type;
      var _module = transformsRegistry[type];
      var transformOut;
      /*
       * Supply defaults may run twice. First pass runs all supply defaults steps
       * and adds the _module to any output transforms.
       * If transforms exist another pass is run so that any generated traces also
       * go through supply defaults. This has the effect of rerunning
       * supplyTransformDefaults. If the transform does not have a `transform`
       * function it could not have generated any new traces and the second stage
       * is unnecessary. We detect this case with the following variables.
       */

      var isFirstStage = !(transformIn._module && transformIn._module === _module);
      var doLaterStages = _module && typeof _module.transform === 'function';
      if (!_module) lib_1.warn('Unrecognized transform type ' + type + '.');

      if (_module && _module.supplyDefaults && (isFirstStage || doLaterStages)) {
        transformOut = _module.supplyDefaults(transformIn, traceOut, layout, traceIn);
        transformOut.type = type;
        transformOut._module = _module;
        lib_1.pushUnique(transformModules, _module);
      } else {
        transformOut = lib_1.extendFlat({}, transformIn);
      }

      containerOut.push(transformOut);
    }
  };

  function applyTransforms(fullTrace, fullData, layout, fullLayout) {
    var container = fullTrace.transforms;
    var dataOut = [fullTrace];

    for (var i = 0; i < container.length; i++) {
      var transform = container[i];
      var _module = transformsRegistry[transform.type];

      if (_module && _module.transform) {
        dataOut = _module.transform(dataOut, {
          transform: transform,
          fullTrace: fullTrace,
          fullData: fullData,
          layout: layout,
          fullLayout: fullLayout,
          transformIndex: i
        });
      }
    }

    return dataOut;
  }

  plots.supplyLayoutGlobalDefaults = function (layoutIn, layoutOut, formatObj) {
    function coerce(attr, dflt) {
      return lib_1.coerce(layoutIn, layoutOut, plots.layoutAttributes, attr, dflt);
    }

    var template = layoutIn.template;

    if (lib_1.isPlainObject(template)) {
      layoutOut.template = template;
      layoutOut._template = template.layout;
      layoutOut._dataTemplate = template.data;
    }

    coerce('autotypenumbers');
    var font = lib_1.coerceFont(coerce, 'font');
    var fontSize = font.size;
    lib_1.coerceFont(coerce, 'title.font', lib_1.extendFlat({}, font, {
      size: Math.round(fontSize * 1.4)
    }));
    coerce('title.text', layoutOut._dfltTitle.plot);
    coerce('title.xref');
    coerce('title.yref');
    coerce('title.x');
    coerce('title.y');
    coerce('title.xanchor');
    coerce('title.yanchor');
    coerce('title.pad.t');
    coerce('title.pad.r');
    coerce('title.pad.b');
    coerce('title.pad.l');
    var uniformtextMode = coerce('uniformtext.mode');

    if (uniformtextMode) {
      coerce('uniformtext.minsize');
    } // Make sure that autosize is defaulted to *true*
    // on layouts with no set width and height for backward compatibly,
    // in particular https://plotly.com/javascript/responsive-fluid-layout/
    //
    // Before https://github.com/plotly/plotly.js/pull/635 ,
    // layouts with no set width and height were set temporary set to 'initial'
    // to pass through the autosize routine
    //
    // This behavior is subject to change in v3.


    coerce('autosize', !(layoutIn.width && layoutIn.height));
    coerce('width');
    coerce('height');
    coerce('margin.l');
    coerce('margin.r');
    coerce('margin.t');
    coerce('margin.b');
    coerce('margin.pad');
    coerce('margin.autoexpand');
    if (layoutIn.width && layoutIn.height) plots.sanitizeMargins(layoutOut);
    registry.getComponentMethod('grid', 'sizeDefaults')(layoutIn, layoutOut);
    coerce('paper_bgcolor');
    coerce('separators', formatObj.decimal + formatObj.thousands);
    coerce('hidesources');
    coerce('colorway');
    coerce('datarevision');
    var uirevision = coerce('uirevision');
    coerce('editrevision', uirevision);
    coerce('selectionrevision', uirevision);
    registry.getComponentMethod('modebar', 'supplyLayoutDefaults')(layoutIn, layoutOut);
    registry.getComponentMethod('shapes', 'supplyDrawNewShapeDefaults')(layoutIn, layoutOut, coerce);
    coerce('meta'); // do not include defaults in fullLayout when users do not set transition

    if (lib_1.isPlainObject(layoutIn.transition)) {
      coerce('transition.duration');
      coerce('transition.easing');
      coerce('transition.ordering');
    }

    registry.getComponentMethod('calendars', 'handleDefaults')(layoutIn, layoutOut, 'calendar');
    registry.getComponentMethod('fx', 'supplyLayoutGlobalDefaults')(layoutIn, layoutOut, coerce);
  };

  function getComputedSize(attr) {
    return typeof attr === 'string' && attr.substr(attr.length - 2) === 'px' && parseFloat(attr);
  }

  plots.plotAutoSize = function plotAutoSize(gd, layout, fullLayout) {
    var context = gd._context || {};
    var frameMargins = context.frameMargins;
    var newWidth;
    var newHeight;
    var isPlotDiv = lib_1.isPlotDiv(gd);
    if (isPlotDiv) gd.emit('plotly_autosize'); // embedded in an iframe - just take the full iframe size
    // if we get to this point, with no aspect ratio restrictions

    if (context.fillFrame) {
      newWidth = window.innerWidth;
      newHeight = window.innerHeight; // somehow we get a few extra px height sometimes...
      // just hide it

      document.body.style.overflow = 'hidden';
    } else {
      // plotly.js - let the developers do what they want, either
      // provide height and width for the container div,
      // specify size in layout, or take the defaults,
      // but don't enforce any ratio restrictions
      var computedStyle = isPlotDiv ? window.getComputedStyle(gd) : {};
      newWidth = getComputedSize(computedStyle.width) || getComputedSize(computedStyle.maxWidth) || fullLayout.width;
      newHeight = getComputedSize(computedStyle.height) || getComputedSize(computedStyle.maxHeight) || fullLayout.height;

      if (fastIsnumeric(frameMargins) && frameMargins > 0) {
        var factor = 1 - 2 * frameMargins;
        newWidth = Math.round(factor * newWidth);
        newHeight = Math.round(factor * newHeight);
      }
    }

    var minWidth = plots.layoutAttributes.width.min;
    var minHeight = plots.layoutAttributes.height.min;
    if (newWidth < minWidth) newWidth = minWidth;
    if (newHeight < minHeight) newHeight = minHeight;
    var widthHasChanged = !layout.width && Math.abs(fullLayout.width - newWidth) > 1;
    var heightHasChanged = !layout.height && Math.abs(fullLayout.height - newHeight) > 1;

    if (heightHasChanged || widthHasChanged) {
      if (widthHasChanged) fullLayout.width = newWidth;
      if (heightHasChanged) fullLayout.height = newHeight;
    } // cache initial autosize value, used in relayout when
    // width or height values are set to null


    if (!gd._initialAutoSize) {
      gd._initialAutoSize = {
        width: newWidth,
        height: newHeight
      };
    }

    plots.sanitizeMargins(fullLayout);
  };

  plots.supplyLayoutModuleDefaults = function (layoutIn, layoutOut, fullData, transitionData) {
    var componentsRegistry = registry.componentsRegistry;
    var basePlotModules = layoutOut._basePlotModules;

    var component, i, _module;

    var Cartesian = registry.subplotsRegistry.cartesian; // check if any components need to add more base plot modules
    // that weren't captured by traces

    for (component in componentsRegistry) {
      _module = componentsRegistry[component];

      if (_module.includeBasePlot) {
        _module.includeBasePlot(layoutIn, layoutOut);
      }
    } // make sure we *at least* have some cartesian axes


    if (!basePlotModules.length) {
      basePlotModules.push(Cartesian);
    } // ensure all cartesian axes have at least one subplot


    if (layoutOut._has('cartesian')) {
      registry.getComponentMethod('grid', 'contentDefaults')(layoutIn, layoutOut);
      Cartesian.finalizeSubplots(layoutIn, layoutOut);
    } // sort subplot lists


    for (var subplotType in layoutOut._subplots) {
      layoutOut._subplots[subplotType].sort(lib_1.subplotSort);
    } // base plot module layout defaults


    for (i = 0; i < basePlotModules.length; i++) {
      _module = basePlotModules[i]; // e.g. pie does not have a layout-defaults step

      if (_module.supplyLayoutDefaults) {
        _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);
      }
    } // trace module layout defaults
    // use _modules rather than _visibleModules so that even
    // legendonly traces can include settings - eg barmode, which affects
    // legend.traceorder default value.


    var modules = layoutOut._modules;

    for (i = 0; i < modules.length; i++) {
      _module = modules[i];

      if (_module.supplyLayoutDefaults) {
        _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);
      }
    } // transform module layout defaults


    var transformModules = layoutOut._transformModules;

    for (i = 0; i < transformModules.length; i++) {
      _module = transformModules[i];

      if (_module.supplyLayoutDefaults) {
        _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData, transitionData);
      }
    }

    for (component in componentsRegistry) {
      _module = componentsRegistry[component];

      if (_module.supplyLayoutDefaults) {
        _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);
      }
    }
  }; // Remove all plotly attributes from a div so it can be replotted fresh
  // TODO: these really need to be encapsulated into a much smaller set...


  plots.purge = function (gd) {
    // note: we DO NOT remove _context because it doesn't change when we insert
    // a new plot, and may have been set outside of our scope.
    var fullLayout = gd._fullLayout || {};

    if (fullLayout._glcontainer !== undefined) {
      fullLayout._glcontainer.selectAll('.gl-canvas').remove();

      fullLayout._glcontainer.remove();

      fullLayout._glcanvas = null;
    } // remove modebar


    if (fullLayout._modeBar) fullLayout._modeBar.destroy();

    if (gd._transitionData) {
      // Ensure any dangling callbacks are simply dropped if the plot is purged.
      // This is more or less only actually important for testing.
      if (gd._transitionData._interruptCallbacks) {
        gd._transitionData._interruptCallbacks.length = 0;
      }

      if (gd._transitionData._animationRaf) {
        window.cancelAnimationFrame(gd._transitionData._animationRaf);
      }
    } // remove any planned throttles


    lib_1.clearThrottle(); // remove responsive handler

    lib_1.clearResponsive(gd); // data and layout

    delete gd.data;
    delete gd.layout;
    delete gd._fullData;
    delete gd._fullLayout;
    delete gd.calcdata;
    delete gd.empty;
    delete gd.fid;
    delete gd.undoqueue; // action queue

    delete gd.undonum;
    delete gd.autoplay; // are we doing an action that doesn't go in undo queue?

    delete gd.changed; // these get recreated on _doPlot anyway, but just to be safe
    // (and to have a record of them...)

    delete gd._promises;
    delete gd._redrawTimer;
    delete gd._hmlumcount;
    delete gd._hmpixcount;
    delete gd._transitionData;
    delete gd._transitioning;
    delete gd._initialAutoSize;
    delete gd._transitioningWithDuration; // created during certain events, that *should* clean them up
    // themselves, but may not if there was an error

    delete gd._dragging;
    delete gd._dragged;
    delete gd._dragdata;
    delete gd._hoverdata;
    delete gd._snapshotInProgress;
    delete gd._editing;
    delete gd._mouseDownTime;
    delete gd._legendMouseDownTime; // remove all event listeners

    if (gd.removeAllListeners) gd.removeAllListeners();
  };

  plots.style = function (gd) {
    var _modules = gd._fullLayout._visibleModules;
    var styleModules = [];
    var i; // some trace modules reuse the same style method,
    // make sure to not unnecessary call them multiple times.

    for (i = 0; i < _modules.length; i++) {
      var _module = _modules[i];

      if (_module.style) {
        lib_1.pushUnique(styleModules, _module.style);
      }
    }

    for (i = 0; i < styleModules.length; i++) {
      styleModules[i](gd);
    }
  };

  plots.sanitizeMargins = function (fullLayout) {
    // polar doesn't do margins...
    if (!fullLayout || !fullLayout.margin) return;
    var width = fullLayout.width;
    var height = fullLayout.height;
    var margin = fullLayout.margin;
    var plotWidth = width - (margin.l + margin.r);
    var plotHeight = height - (margin.t + margin.b);
    var correction; // if margin.l + margin.r = 0 then plotWidth > 0
    // as width >= 10 by supplyDefaults
    // similarly for margin.t + margin.b

    if (plotWidth < 0) {
      correction = (width - 1) / (margin.l + margin.r);
      margin.l = Math.floor(correction * margin.l);
      margin.r = Math.floor(correction * margin.r);
    }

    if (plotHeight < 0) {
      correction = (height - 1) / (margin.t + margin.b);
      margin.t = Math.floor(correction * margin.t);
      margin.b = Math.floor(correction * margin.b);
    }
  };

  plots.clearAutoMarginIds = function (gd) {
    gd._fullLayout._pushmarginIds = {};
  };

  plots.allowAutoMargin = function (gd, id) {
    gd._fullLayout._pushmarginIds[id] = 1;
  };

  function initMargins(fullLayout) {
    var margin = fullLayout.margin;

    if (!fullLayout._size) {
      var gs = fullLayout._size = {
        l: Math.round(margin.l),
        r: Math.round(margin.r),
        t: Math.round(margin.t),
        b: Math.round(margin.b),
        p: Math.round(margin.pad)
      };
      gs.w = Math.round(fullLayout.width) - gs.l - gs.r;
      gs.h = Math.round(fullLayout.height) - gs.t - gs.b;
    }

    if (!fullLayout._pushmargin) fullLayout._pushmargin = {};
    if (!fullLayout._pushmarginIds) fullLayout._pushmarginIds = {};
  } // non-negotiable - this is the smallest height we will allow users to specify via explicit margins


  var MIN_SPECIFIED_WIDTH = 2;
  var MIN_SPECIFIED_HEIGHT = 2; // could be exposed as an option - the smallest we will allow automargin to shrink a larger plot

  var MIN_REDUCED_WIDTH = 64;
  var MIN_REDUCED_HEIGHT = 64;
  /**
   * autoMargin: called by components that may need to expand the margins to
   * be rendered on-plot.
   *
   * @param {DOM element} gd
   * @param {string} id - an identifier unique (within this plot) to this object,
   *     so we can remove a previous margin expansion from the same object.
   * @param {object} o - the margin requirements of this object, or omit to delete
   *     this entry (like if it's hidden). Keys are:
   *     x, y: plot fraction of the anchor point.
   *     xl, xr, yt, yb: if the object has an extent defined in plot fraction,
   *         you can specify both edges as plot fractions in each dimension
   *     l, r, t, b: the pixels to pad past the plot fraction x[l|r] and y[t|b]
   *     pad: extra pixels to add in all directions, default 12 (why?)
   */

  plots.autoMargin = function (gd, id, o) {
    var fullLayout = gd._fullLayout;
    var width = fullLayout.width;
    var height = fullLayout.height;
    var margin = fullLayout.margin;
    var minFinalWidth = lib_1.constrain(width - margin.l - margin.r, MIN_SPECIFIED_WIDTH, MIN_REDUCED_WIDTH);
    var minFinalHeight = lib_1.constrain(height - margin.t - margin.b, MIN_SPECIFIED_HEIGHT, MIN_REDUCED_HEIGHT);
    var maxSpaceW = Math.max(0, width - minFinalWidth);
    var maxSpaceH = Math.max(0, height - minFinalHeight);
    var pushMargin = fullLayout._pushmargin;
    var pushMarginIds = fullLayout._pushmarginIds;

    if (margin.autoexpand !== false) {
      if (!o) {
        delete pushMargin[id];
        delete pushMarginIds[id];
      } else {
        var pad = o.pad;

        if (pad === undefined) {
          // if no explicit pad is given, use 12px unless there's a
          // specified margin that's smaller than that
          pad = Math.min(12, margin.l, margin.r, margin.t, margin.b);
        } // if the item is too big, just give it enough automargin to
        // make sure you can still grab it and bring it back


        if (maxSpaceW) {
          var rW = (o.l + o.r) / maxSpaceW;

          if (rW > 1) {
            o.l /= rW;
            o.r /= rW;
          }
        }

        if (maxSpaceH) {
          var rH = (o.t + o.b) / maxSpaceH;

          if (rH > 1) {
            o.t /= rH;
            o.b /= rH;
          }
        }

        var xl = o.xl !== undefined ? o.xl : o.x;
        var xr = o.xr !== undefined ? o.xr : o.x;
        var yt = o.yt !== undefined ? o.yt : o.y;
        var yb = o.yb !== undefined ? o.yb : o.y;
        pushMargin[id] = {
          l: {
            val: xl,
            size: o.l + pad
          },
          r: {
            val: xr,
            size: o.r + pad
          },
          b: {
            val: yb,
            size: o.b + pad
          },
          t: {
            val: yt,
            size: o.t + pad
          }
        };
        pushMarginIds[id] = 1;
      }

      if (!fullLayout._replotting) {
        return plots.doAutoMargin(gd);
      }
    }
  };

  plots.doAutoMargin = function (gd) {
    var fullLayout = gd._fullLayout;
    var width = fullLayout.width;
    var height = fullLayout.height;
    if (!fullLayout._size) fullLayout._size = {};
    initMargins(fullLayout);
    var gs = fullLayout._size;
    var margin = fullLayout.margin;
    var oldMargins = lib_1.extendFlat({}, gs); // adjust margins for outside components
    // fullLayout.margin is the requested margin,
    // fullLayout._size has margins and plotsize after adjustment

    var ml = margin.l;
    var mr = margin.r;
    var mt = margin.t;
    var mb = margin.b;
    var pushMargin = fullLayout._pushmargin;
    var pushMarginIds = fullLayout._pushmarginIds;

    if (fullLayout.margin.autoexpand !== false) {
      for (var k in pushMargin) {
        if (!pushMarginIds[k]) delete pushMargin[k];
      } // fill in the requested margins


      pushMargin.base = {
        l: {
          val: 0,
          size: ml
        },
        r: {
          val: 1,
          size: mr
        },
        t: {
          val: 1,
          size: mt
        },
        b: {
          val: 0,
          size: mb
        }
      }; // now cycle through all the combinations of l and r
      // (and t and b) to find the required margins

      for (var k1 in pushMargin) {
        var pushleft = pushMargin[k1].l || {};
        var pushbottom = pushMargin[k1].b || {};
        var fl = pushleft.val;
        var pl = pushleft.size;
        var fb = pushbottom.val;
        var pb = pushbottom.size;

        for (var k2 in pushMargin) {
          if (fastIsnumeric(pl) && pushMargin[k2].r) {
            var fr = pushMargin[k2].r.val;
            var pr = pushMargin[k2].r.size;

            if (fr > fl) {
              var newL = (pl * fr + (pr - width) * fl) / (fr - fl);
              var newR = (pr * (1 - fl) + (pl - width) * (1 - fr)) / (fr - fl);

              if (newL + newR > ml + mr) {
                ml = newL;
                mr = newR;
              }
            }
          }

          if (fastIsnumeric(pb) && pushMargin[k2].t) {
            var ft = pushMargin[k2].t.val;
            var pt = pushMargin[k2].t.size;

            if (ft > fb) {
              var newB = (pb * ft + (pt - height) * fb) / (ft - fb);
              var newT = (pt * (1 - fb) + (pb - height) * (1 - ft)) / (ft - fb);

              if (newB + newT > mb + mt) {
                mb = newB;
                mt = newT;
              }
            }
          }
        }
      }
    }

    var minFinalWidth = lib_1.constrain(width - margin.l - margin.r, MIN_SPECIFIED_WIDTH, MIN_REDUCED_WIDTH);
    var minFinalHeight = lib_1.constrain(height - margin.t - margin.b, MIN_SPECIFIED_HEIGHT, MIN_REDUCED_HEIGHT);
    var maxSpaceW = Math.max(0, width - minFinalWidth);
    var maxSpaceH = Math.max(0, height - minFinalHeight);

    if (maxSpaceW) {
      var rW = (ml + mr) / maxSpaceW;

      if (rW > 1) {
        ml /= rW;
        mr /= rW;
      }
    }

    if (maxSpaceH) {
      var rH = (mb + mt) / maxSpaceH;

      if (rH > 1) {
        mb /= rH;
        mt /= rH;
      }
    }

    gs.l = Math.round(ml);
    gs.r = Math.round(mr);
    gs.t = Math.round(mt);
    gs.b = Math.round(mb);
    gs.p = Math.round(margin.pad);
    gs.w = Math.round(width) - gs.l - gs.r;
    gs.h = Math.round(height) - gs.t - gs.b; // if things changed and we're not already redrawing, trigger a redraw

    if (!fullLayout._replotting && plots.didMarginChange(oldMargins, gs)) {
      if ('_redrawFromAutoMarginCount' in fullLayout) {
        fullLayout._redrawFromAutoMarginCount++;
      } else {
        fullLayout._redrawFromAutoMarginCount = 1;
      } // Always allow at least one redraw and give each margin-push
      // call 3 loops to converge. Of course, for most cases this way too many,
      // but let's keep things on the safe side until we fix our
      // auto-margin pipeline problems:
      // https://github.com/plotly/plotly.js/issues/2704


      var maxNumberOfRedraws = 3 * (1 + Object.keys(pushMarginIds).length);

      if (fullLayout._redrawFromAutoMarginCount < maxNumberOfRedraws) {
        return registry.call('_doPlot', gd);
      } else {
        fullLayout._size = oldMargins;
        lib_1.warn('Too many auto-margin redraws.');
      }
    }

    refineTicks(gd);
  };

  function refineTicks(gd) {
    var axList = axis_ids.list(gd, '', true);
    ['_adjustTickLabelsOverflow', '_hideCounterAxisInsideTickLabels'].forEach(function (k) {
      for (var i = 0; i < axList.length; i++) {
        var hideFn = axList[i][k];
        if (hideFn) hideFn();
      }
    });
  }

  var marginKeys = ['l', 'r', 't', 'b', 'p', 'w', 'h'];

  plots.didMarginChange = function (margin0, margin1) {
    for (var i = 0; i < marginKeys.length; i++) {
      var k = marginKeys[i];
      var m0 = margin0[k];
      var m1 = margin1[k]; // use 1px tolerance in case we old/new differ only
      // by rounding errors, which can lead to infinite loops

      if (!fastIsnumeric(m0) || Math.abs(m1 - m0) > 1) {
        return true;
      }
    }

    return false;
  };
  /**
   * JSONify the graph data and layout
   *
   * This function needs to recurse because some src can be inside
   * sub-objects.
   *
   * It also strips out functions and private (starts with _) elements.
   * Therefore, we can add temporary things to data and layout that don't
   * get saved.
   *
   * @param gd The graphDiv
   * @param {Boolean} dataonly If true, don't return layout.
   * @param {'keepref'|'keepdata'|'keepall'} [mode='keepref'] Filter what's kept
   *      keepref: remove data for which there's a src present
   *          eg if there's xsrc present (and xsrc is well-formed,
   *          ie has : and some chars before it), strip out x
   *      keepdata: remove all src tags, don't remove the data itself
   *      keepall: keep data and src
   * @param {String} output If you specify 'object', the result will not be stringified
   * @param {Boolean} useDefaults If truthy, use _fullLayout and _fullData
   * @param {Boolean} includeConfig If truthy, include _context
   * @returns {Object|String}
   */


  plots.graphJson = function (gd, dataonly, mode, output, useDefaults, includeConfig) {
    // if the defaults aren't supplied yet, we need to do that...
    if (useDefaults && dataonly && !gd._fullData || useDefaults && !dataonly && !gd._fullLayout) {
      plots.supplyDefaults(gd);
    }

    var data = useDefaults ? gd._fullData : gd.data;
    var layout = useDefaults ? gd._fullLayout : gd.layout;
    var frames = (gd._transitionData || {})._frames;

    function stripObj(d, keepFunction) {
      if (typeof d === 'function') {
        return keepFunction ? '_function_' : null;
      }

      if (lib_1.isPlainObject(d)) {
        var o = {};
        var src;
        Object.keys(d).sort().forEach(function (v) {
          // remove private elements and functions
          // _ is for private, [ is a mistake ie [object Object]
          if (['_', '['].indexOf(v.charAt(0)) !== -1) return; // if a function, add if necessary then move on

          if (typeof d[v] === 'function') {
            if (keepFunction) o[v] = '_function';
            return;
          } // look for src/data matches and remove the appropriate one


          if (mode === 'keepdata') {
            // keepdata: remove all ...src tags
            if (v.substr(v.length - 3) === 'src') {
              return;
            }
          } else if (mode === 'keepstream') {
            // keep sourced data if it's being streamed.
            // similar to keepref, but if the 'stream' object exists
            // in a trace, we will keep the data array.
            src = d[v + 'src'];

            if (typeof src === 'string' && src.indexOf(':') > 0) {
              if (!lib_1.isPlainObject(d.stream)) {
                return;
              }
            }
          } else if (mode !== 'keepall') {
            // keepref: remove sourced data but only
            // if the source tag is well-formed
            src = d[v + 'src'];

            if (typeof src === 'string' && src.indexOf(':') > 0) {
              return;
            }
          } // OK, we're including this... recurse into it


          o[v] = stripObj(d[v], keepFunction);
        });
        return o;
      }

      if (Array.isArray(d)) {
        return d.map(function (x) {
          return stripObj(x, keepFunction);
        });
      }

      if (lib_1.isTypedArray(d)) {
        return lib_1.simpleMap(d, lib_1.identity);
      } // convert native dates to date strings...
      // mostly for external users exporting to plotly


      if (lib_1.isJSDate(d)) return lib_1.ms2DateTimeLocal(+d);
      return d;
    }

    var obj = {
      data: (data || []).map(function (v) {
        var d = stripObj(v); // fit has some little arrays in it that don't contain data,
        // just fit params and meta

        if (dataonly) {
          delete d.fit;
        }

        return d;
      })
    };

    if (!dataonly) {
      obj.layout = stripObj(layout);

      if (useDefaults) {
        var gs = layout._size;
        obj.layout.computed = {
          margin: {
            b: gs.b,
            l: gs.l,
            r: gs.r,
            t: gs.t
          }
        };
      }
    }

    if (frames) obj.frames = stripObj(frames);
    if (includeConfig) obj.config = stripObj(gd._context, true);
    return output === 'object' ? obj : JSON.stringify(obj);
  };
  /**
   * Modify a keyframe using a list of operations:
   *
   * @param {array of objects} operations
   *      Sequence of operations to be performed on the keyframes
   */


  plots.modifyFrames = function (gd, operations) {
    var i, op, frame;
    var _frames = gd._transitionData._frames;
    var _frameHash = gd._transitionData._frameHash;

    for (i = 0; i < operations.length; i++) {
      op = operations[i];

      switch (op.type) {
        // No reason this couldn't exist, but is currently unused/untested:

        /* case 'rename':
            frame = _frames[op.index];
            delete _frameHash[frame.name];
            _frameHash[op.name] = frame;
            frame.name = op.name;
            break;*/
        case 'replace':
          frame = op.value;
          var oldName = (_frames[op.index] || {}).name;
          var newName = frame.name;
          _frames[op.index] = _frameHash[newName] = frame;

          if (newName !== oldName) {
            // If name has changed in addition to replacement, then update
            // the lookup table:
            delete _frameHash[oldName];
            _frameHash[newName] = frame;
          }

          break;

        case 'insert':
          frame = op.value;
          _frameHash[frame.name] = frame;

          _frames.splice(op.index, 0, frame);

          break;

        case 'delete':
          frame = _frames[op.index];
          delete _frameHash[frame.name];

          _frames.splice(op.index, 1);

          break;
      }
    }

    return Promise.resolve();
  };
  /*
   * Compute a keyframe. Merge a keyframe into its base frame(s) and
   * expand properties.
   *
   * @param {object} frameLookup
   *      An object containing frames keyed by name (i.e. gd._transitionData._frameHash)
   * @param {string} frame
   *      The name of the keyframe to be computed
   *
   * Returns: a new object with the merged content
   */


  plots.computeFrame = function (gd, frameName) {
    var frameLookup = gd._transitionData._frameHash;
    var i, traceIndices, traceIndex, destIndex; // Null or undefined will fail on .toString(). We'll allow numbers since we
    // make it clear frames must be given string names, but we'll allow numbers
    // here since they're otherwise fine for looking up frames as long as they're
    // properly cast to strings. We really just want to ensure here that this
    // 1) doesn't fail, and
    // 2) doens't give an incorrect answer (which String(frameName) would)

    if (!frameName) {
      throw new Error('computeFrame must be given a string frame name');
    }

    var framePtr = frameLookup[frameName.toString()]; // Return false if the name is invalid:

    if (!framePtr) {
      return false;
    }

    var frameStack = [framePtr];
    var frameNameStack = [framePtr.name]; // Follow frame pointers:

    while (framePtr.baseframe && (framePtr = frameLookup[framePtr.baseframe.toString()])) {
      // Avoid infinite loops:
      if (frameNameStack.indexOf(framePtr.name) !== -1) break;
      frameStack.push(framePtr);
      frameNameStack.push(framePtr.name);
    } // A new object for the merged result:


    var result = {}; // Merge, starting with the last and ending with the desired frame:

    while (framePtr = frameStack.pop()) {
      if (framePtr.layout) {
        result.layout = plots.extendLayout(result.layout, framePtr.layout);
      }

      if (framePtr.data) {
        if (!result.data) {
          result.data = [];
        }

        traceIndices = framePtr.traces;

        if (!traceIndices) {
          // If not defined, assume serial order starting at zero
          traceIndices = [];

          for (i = 0; i < framePtr.data.length; i++) {
            traceIndices[i] = i;
          }
        }

        if (!result.traces) {
          result.traces = [];
        }

        for (i = 0; i < framePtr.data.length; i++) {
          // Loop through this frames data, find out where it should go,
          // and merge it!
          traceIndex = traceIndices[i];

          if (traceIndex === undefined || traceIndex === null) {
            continue;
          }

          destIndex = result.traces.indexOf(traceIndex);

          if (destIndex === -1) {
            destIndex = result.data.length;
            result.traces[destIndex] = traceIndex;
          }

          result.data[destIndex] = plots.extendTrace(result.data[destIndex], framePtr.data[i]);
        }
      }
    }

    return result;
  };
  /*
   * Recompute the lookup table that maps frame name -> frame object. addFrames/
   * deleteFrames already manages this data one at a time, so the only time this
   * is necessary is if you poke around manually in `gd._transitionData._frames`
   * and create and haven't updated the lookup table.
   */


  plots.recomputeFrameHash = function (gd) {
    var hash = gd._transitionData._frameHash = {};
    var frames = gd._transitionData._frames;

    for (var i = 0; i < frames.length; i++) {
      var frame = frames[i];

      if (frame && frame.name) {
        hash[frame.name] = frame;
      }
    }
  };
  /**
   * Extend an object, treating container arrays very differently by extracting
   * their contents and merging them separately.
   *
   * This exists so that we can extendDeepNoArrays and avoid stepping into data
   * arrays without knowledge of the plot schema, but so that we may also manually
   * recurse into known container arrays, such as transforms.
   *
   * See extendTrace and extendLayout below for usage.
   */


  plots.extendObjectWithContainers = function (dest, src, containerPaths) {
    var containerProp, containerVal, i, j, srcProp, destProp, srcContainer, destContainer;
    var copy = lib_1.extendDeepNoArrays({}, src || {});
    var expandedObj = lib_1.expandObjectPaths(copy);
    var containerObj = {}; // Step through and extract any container properties. Otherwise extendDeepNoArrays
    // will clobber any existing properties with an empty array and then supplyDefaults
    // will reset everything to defaults.

    if (containerPaths && containerPaths.length) {
      for (i = 0; i < containerPaths.length; i++) {
        containerProp = lib_1.nestedProperty(expandedObj, containerPaths[i]);
        containerVal = containerProp.get();

        if (containerVal === undefined) {
          lib_1.nestedProperty(containerObj, containerPaths[i]).set(null);
        } else {
          containerProp.set(null);
          lib_1.nestedProperty(containerObj, containerPaths[i]).set(containerVal);
        }
      }
    }

    dest = lib_1.extendDeepNoArrays(dest || {}, expandedObj);

    if (containerPaths && containerPaths.length) {
      for (i = 0; i < containerPaths.length; i++) {
        srcProp = lib_1.nestedProperty(containerObj, containerPaths[i]);
        srcContainer = srcProp.get();
        if (!srcContainer) continue;
        destProp = lib_1.nestedProperty(dest, containerPaths[i]);
        destContainer = destProp.get();

        if (!Array.isArray(destContainer)) {
          destContainer = [];
          destProp.set(destContainer);
        }

        for (j = 0; j < srcContainer.length; j++) {
          var srcObj = srcContainer[j];
          if (srcObj === null) destContainer[j] = null;else {
            destContainer[j] = plots.extendObjectWithContainers(destContainer[j], srcObj);
          }
        }

        destProp.set(destContainer);
      }
    }

    return dest;
  };

  plots.dataArrayContainers = ['transforms', 'dimensions'];
  plots.layoutArrayContainers = registry.layoutArrayContainers;
  /*
   * Extend a trace definition. This method:
   *
   *  1. directly transfers any array references
   *  2. manually recurses into container arrays like transforms
   *
   * The result is the original object reference with the new contents merged in.
   */

  plots.extendTrace = function (destTrace, srcTrace) {
    return plots.extendObjectWithContainers(destTrace, srcTrace, plots.dataArrayContainers);
  };
  /*
   * Extend a layout definition. This method:
   *
   *  1. directly transfers any array references (not critically important for
   *     layout since there aren't really data arrays)
   *  2. manually recurses into container arrays like annotations
   *
   * The result is the original object reference with the new contents merged in.
   */


  plots.extendLayout = function (destLayout, srcLayout) {
    return plots.extendObjectWithContainers(destLayout, srcLayout, plots.layoutArrayContainers);
  };
  /**
   * Transition to a set of new data and layout properties from Plotly.animate
   *
   * @param {DOM element} gd
   * @param {Object[]} data
   *      an array of data objects following the normal Plotly data definition format
   * @param {Object} layout
   *      a layout object, following normal Plotly layout format
   * @param {Number[]} traces
   *      indices of the corresponding traces specified in `data`
   * @param {Object} frameOpts
   *      options for the frame (i.e. whether to redraw post-transition)
   * @param {Object} transitionOpts
   *      options for the transition
   */


  plots.transition = function (gd, data, layout, traces, frameOpts, transitionOpts) {
    var opts = {
      redraw: frameOpts.redraw
    };
    var transitionedTraces = {};
    var axEdits = [];

    opts.prepareFn = function () {
      var dataLength = Array.isArray(data) ? data.length : 0;
      var traceIndices = traces.slice(0, dataLength);

      for (var i = 0; i < traceIndices.length; i++) {
        var traceIdx = traceIndices[i];
        var trace = gd._fullData[traceIdx];
        var _module = trace._module; // There's nothing to do if this module is not defined:

        if (!_module) continue; // Don't register the trace as transitioned if it doesn't know what to do.
        // If it *is* registered, it will receive a callback that it's responsible
        // for calling in order to register the transition as having completed.

        if (_module.animatable) {
          var n = _module.basePlotModule.name;
          if (!transitionedTraces[n]) transitionedTraces[n] = [];
          transitionedTraces[n].push(traceIdx);
        }

        gd.data[traceIndices[i]] = plots.extendTrace(gd.data[traceIndices[i]], data[i]);
      } // Follow the same procedure. Clone it so we don't mangle the input, then
      // expand any object paths so we can merge deep into gd.layout:


      var layoutUpdate = lib_1.expandObjectPaths(lib_1.extendDeepNoArrays({}, layout)); // Before merging though, we need to modify the incoming layout. We only
      // know how to *transition* layout ranges, so it's imperative that a new
      // range not be sent to the layout before the transition has started. So
      // we must remove the things we can transition:

      var axisAttrRe = /^[xy]axis[0-9]*$/;

      for (var attr in layoutUpdate) {
        if (!axisAttrRe.test(attr)) continue;
        delete layoutUpdate[attr].range;
      }

      plots.extendLayout(gd.layout, layoutUpdate); // Supply defaults after applying the incoming properties. Note that any attempt
      // to simplify this step and reduce the amount of work resulted in the reconstruction
      // of essentially the whole supplyDefaults step, so that it seems sensible to just use
      // supplyDefaults even though it's heavier than would otherwise be desired for
      // transitions:
      // first delete calcdata so supplyDefaults knows a calc step is coming

      delete gd.calcdata;
      plots.supplyDefaults(gd);
      plots.doCalcdata(gd);
      var newLayout = lib_1.expandObjectPaths(layout);

      if (newLayout) {
        var subplots = gd._fullLayout._plots;

        for (var k in subplots) {
          var plotinfo = subplots[k];
          var xa = plotinfo.xaxis;
          var ya = plotinfo.yaxis;
          var xr0 = xa.range.slice();
          var yr0 = ya.range.slice();
          var xr1 = null;
          var yr1 = null;
          var editX = null;
          var editY = null;

          if (Array.isArray(newLayout[xa._name + '.range'])) {
            xr1 = newLayout[xa._name + '.range'].slice();
          } else if (Array.isArray((newLayout[xa._name] || {}).range)) {
            xr1 = newLayout[xa._name].range.slice();
          }

          if (Array.isArray(newLayout[ya._name + '.range'])) {
            yr1 = newLayout[ya._name + '.range'].slice();
          } else if (Array.isArray((newLayout[ya._name] || {}).range)) {
            yr1 = newLayout[ya._name].range.slice();
          }

          if (xr0 && xr1 && (xa.r2l(xr0[0]) !== xa.r2l(xr1[0]) || xa.r2l(xr0[1]) !== xa.r2l(xr1[1]))) {
            editX = {
              xr0: xr0,
              xr1: xr1
            };
          }

          if (yr0 && yr1 && (ya.r2l(yr0[0]) !== ya.r2l(yr1[0]) || ya.r2l(yr0[1]) !== ya.r2l(yr1[1]))) {
            editY = {
              yr0: yr0,
              yr1: yr1
            };
          }

          if (editX || editY) {
            axEdits.push(lib_1.extendFlat({
              plotinfo: plotinfo
            }, editX, editY));
          }
        }
      }

      return Promise.resolve();
    };

    opts.runFn = function (makeCallback) {
      var traceTransitionOpts;
      var basePlotModules = gd._fullLayout._basePlotModules;
      var hasAxisTransition = axEdits.length;
      var i;

      if (layout) {
        for (i = 0; i < basePlotModules.length; i++) {
          if (basePlotModules[i].transitionAxes) {
            basePlotModules[i].transitionAxes(gd, axEdits, transitionOpts, makeCallback);
          }
        }
      } // Here handle the exception that we refuse to animate scales and axes at the same
      // time. In other words, if there's an axis transition, then set the data transition
      // to instantaneous.


      if (hasAxisTransition) {
        traceTransitionOpts = lib_1.extendFlat({}, transitionOpts);
        traceTransitionOpts.duration = 0; // This means do not transition cartesian traces,
        // this happens on layout-only (e.g. axis range) animations

        delete transitionedTraces.cartesian;
      } else {
        traceTransitionOpts = transitionOpts;
      } // Note that we pass a callback to *create* the callback that must be invoked on completion.
      // This is since not all traces know about transitions, so it greatly simplifies matters if
      // the trace is responsible for creating a callback, if needed, and then executing it when
      // the time is right.


      for (var n in transitionedTraces) {
        var traceIndices = transitionedTraces[n];
        var _module = gd._fullData[traceIndices[0]]._module;

        _module.basePlotModule.plot(gd, traceIndices, traceTransitionOpts, makeCallback);
      }
    };

    return _transition(gd, transitionOpts, opts);
  };
  /**
   * Transition to a set of new data and layout properties from Plotly.react
   *
   * @param {DOM element} gd
   * @param {object} restyleFlags
   * - anim {'all'|'some'}
   * @param {object} relayoutFlags
   * - anim {'all'|'some'}
   * @param {object} oldFullLayout : old (pre Plotly.react) fullLayout
   */


  plots.transitionFromReact = function (gd, restyleFlags, relayoutFlags, oldFullLayout) {
    var fullLayout = gd._fullLayout;
    var transitionOpts = fullLayout.transition;
    var opts = {};
    var axEdits = [];

    opts.prepareFn = function () {
      var subplots = fullLayout._plots; // no need to redraw at end of transition,
      // if all changes are animatable

      opts.redraw = false;
      if (restyleFlags.anim === 'some') opts.redraw = true;
      if (relayoutFlags.anim === 'some') opts.redraw = true;

      for (var k in subplots) {
        var plotinfo = subplots[k];
        var xa = plotinfo.xaxis;
        var ya = plotinfo.yaxis;

        var xr0 = oldFullLayout[xa._name].range.slice();

        var yr0 = oldFullLayout[ya._name].range.slice();

        var xr1 = xa.range.slice();
        var yr1 = ya.range.slice();
        xa.setScale();
        ya.setScale();
        var editX = null;
        var editY = null;

        if (xa.r2l(xr0[0]) !== xa.r2l(xr1[0]) || xa.r2l(xr0[1]) !== xa.r2l(xr1[1])) {
          editX = {
            xr0: xr0,
            xr1: xr1
          };
        }

        if (ya.r2l(yr0[0]) !== ya.r2l(yr1[0]) || ya.r2l(yr0[1]) !== ya.r2l(yr1[1])) {
          editY = {
            yr0: yr0,
            yr1: yr1
          };
        }

        if (editX || editY) {
          axEdits.push(lib_1.extendFlat({
            plotinfo: plotinfo
          }, editX, editY));
        }
      }

      return Promise.resolve();
    };

    opts.runFn = function (makeCallback) {
      var fullData = gd._fullData;
      var fullLayout = gd._fullLayout;
      var basePlotModules = fullLayout._basePlotModules;
      var axisTransitionOpts;
      var traceTransitionOpts;
      var transitionedTraces;
      var allTraceIndices = [];

      for (var i = 0; i < fullData.length; i++) {
        allTraceIndices.push(i);
      }

      function transitionAxes() {
        if (!gd._fullLayout) return;

        for (var j = 0; j < basePlotModules.length; j++) {
          if (basePlotModules[j].transitionAxes) {
            basePlotModules[j].transitionAxes(gd, axEdits, axisTransitionOpts, makeCallback);
          }
        }
      }

      function transitionTraces() {
        if (!gd._fullLayout) return;

        for (var j = 0; j < basePlotModules.length; j++) {
          basePlotModules[j].plot(gd, transitionedTraces, traceTransitionOpts, makeCallback);
        }
      }

      if (axEdits.length && restyleFlags.anim) {
        if (transitionOpts.ordering === 'traces first') {
          axisTransitionOpts = lib_1.extendFlat({}, transitionOpts, {
            duration: 0
          });
          transitionedTraces = allTraceIndices;
          traceTransitionOpts = transitionOpts;
          setTimeout(transitionAxes, transitionOpts.duration);
          transitionTraces();
        } else {
          axisTransitionOpts = transitionOpts;
          transitionedTraces = null;
          traceTransitionOpts = lib_1.extendFlat({}, transitionOpts, {
            duration: 0
          });
          setTimeout(transitionTraces, axisTransitionOpts.duration);
          transitionAxes();
        }
      } else if (axEdits.length) {
        axisTransitionOpts = transitionOpts;
        transitionAxes();
      } else if (restyleFlags.anim) {
        transitionedTraces = allTraceIndices;
        traceTransitionOpts = transitionOpts;
        transitionTraces();
      }
    };

    return _transition(gd, transitionOpts, opts);
  };
  /**
   * trace/layout transition wrapper that works
   * for transitions initiated by Plotly.animate and Plotly.react.
   *
   * @param {DOM element} gd
   * @param {object} transitionOpts
   * @param {object} opts
   * - redraw {boolean}
   * - prepareFn {function} *should return a Promise*
   * - runFn {function} ran inside executeTransitions
   */


  function _transition(gd, transitionOpts, opts) {
    var aborted = false;

    function executeCallbacks(list) {
      var p = Promise.resolve();
      if (!list) return p;

      while (list.length) {
        p = p.then(list.shift());
      }

      return p;
    }

    function flushCallbacks(list) {
      if (!list) return;

      while (list.length) {
        list.shift();
      }
    }

    function executeTransitions() {
      gd.emit('plotly_transitioning', []);
      return new Promise(function (resolve) {
        // This flag is used to disabled things like autorange:
        gd._transitioning = true; // When instantaneous updates are coming through quickly, it's too much to simply disable
        // all interaction, so store this flag so we can disambiguate whether mouse interactions
        // should be fully disabled or not:

        if (transitionOpts.duration > 0) {
          gd._transitioningWithDuration = true;
        } // If another transition is triggered, this callback will be executed simply because it's
        // in the interruptCallbacks queue. If this transition completes, it will instead flush
        // that queue and forget about this callback.


        gd._transitionData._interruptCallbacks.push(function () {
          aborted = true;
        });

        if (opts.redraw) {
          gd._transitionData._interruptCallbacks.push(function () {
            return registry.call('redraw', gd);
          });
        } // Emit this and make sure it happens last:


        gd._transitionData._interruptCallbacks.push(function () {
          gd.emit('plotly_transitioninterrupted', []);
        }); // Construct callbacks that are executed on transition end. This ensures the d3 transitions
        // are *complete* before anything else is done.


        var numCallbacks = 0;
        var numCompleted = 0;

        function makeCallback() {
          numCallbacks++;
          return function () {
            numCompleted++; // When all are complete, perform a redraw:

            if (!aborted && numCompleted === numCallbacks) {
              completeTransition(resolve);
            }
          };
        }

        opts.runFn(makeCallback); // If nothing else creates a callback, then this will trigger the completion in the next tick:

        setTimeout(makeCallback());
      });
    }

    function completeTransition(callback) {
      // This a simple workaround for tests which purge the graph before animations
      // have completed. That's not a very common case, so this is the simplest
      // fix.
      if (!gd._transitionData) return;
      flushCallbacks(gd._transitionData._interruptCallbacks);
      return Promise.resolve().then(function () {
        if (opts.redraw) {
          return registry.call('redraw', gd);
        }
      }).then(function () {
        // Set transitioning false again once the redraw has occurred. This is used, for example,
        // to prevent the trailing redraw from autoranging:
        gd._transitioning = false;
        gd._transitioningWithDuration = false;
        gd.emit('plotly_transitioned', []);
      }).then(callback);
    }

    function interruptPreviousTransitions() {
      // Fail-safe against purged plot:
      if (!gd._transitionData) return; // If a transition is interrupted, set this to false. At the moment, the only thing that would
      // interrupt a transition is another transition, so that it will momentarily be set to true
      // again, but this determines whether autorange or dragbox work, so it's for the sake of
      // cleanliness:

      gd._transitioning = false;
      return executeCallbacks(gd._transitionData._interruptCallbacks);
    }

    var seq = [plots.previousPromises, interruptPreviousTransitions, opts.prepareFn, plots.rehover, executeTransitions];
    var transitionStarting = lib_1.syncOrAsync(seq, gd);

    if (!transitionStarting || !transitionStarting.then) {
      transitionStarting = Promise.resolve();
    }

    return transitionStarting.then(function () {
      return gd;
    });
  }

  plots.doCalcdata = function (gd, traces) {
    var axList = axis_ids.list(gd);
    var fullData = gd._fullData;
    var fullLayout = gd._fullLayout;

    var trace, _module, i, j; // XXX: Is this correct? Needs a closer look so that *some* traces can be recomputed without
    // *all* needing doCalcdata:


    var calcdata = new Array(fullData.length);
    var oldCalcdata = (gd.calcdata || []).slice();
    gd.calcdata = calcdata; // extra helper variables
    // how many box/violins plots do we have (in case they're grouped)

    fullLayout._numBoxes = 0;
    fullLayout._numViolins = 0; // initialize violin per-scale-group stats container

    fullLayout._violinScaleGroupStats = {}; // for calculating avg luminosity of heatmaps

    gd._hmpixcount = 0;
    gd._hmlumcount = 0; // for sharing colors across pies / sunbursts / treemap / icicle / funnelarea (and for legend)

    fullLayout._piecolormap = {};
    fullLayout._sunburstcolormap = {};
    fullLayout._treemapcolormap = {};
    fullLayout._iciclecolormap = {};
    fullLayout._funnelareacolormap = {}; // If traces were specified and this trace was not included,
    // then transfer it over from the old calcdata:

    for (i = 0; i < fullData.length; i++) {
      if (Array.isArray(traces) && traces.indexOf(i) === -1) {
        calcdata[i] = oldCalcdata[i];
        continue;
      }
    }

    for (i = 0; i < fullData.length; i++) {
      trace = fullData[i];
      trace._arrayAttrs = plot_schema.findArrayAttributes(trace); // keep track of trace extremes (for autorange) in here

      trace._extremes = {};
    } // add polar axes to axis list


    var polarIds = fullLayout._subplots.polar || [];

    for (i = 0; i < polarIds.length; i++) {
      axList.push(fullLayout[polarIds[i]].radialaxis, fullLayout[polarIds[i]].angularaxis);
    } // clear relinked cmin/cmax values in shared axes to start aggregation from scratch


    for (var k in fullLayout._colorAxes) {
      var cOpts = fullLayout[k];

      if (cOpts.cauto !== false) {
        delete cOpts.cmin;
        delete cOpts.cmax;
      }
    }

    var hasCalcTransform = false;

    function transformCalci(i) {
      trace = fullData[i];
      _module = trace._module;

      if (trace.visible === true && trace.transforms) {
        // we need one round of trace module calc before
        // the calc transform to 'fill in' the categories list
        // used for example in the data-to-coordinate method
        if (_module && _module.calc) {
          var cdi = _module.calc(gd, trace); // must clear scene 'batches', so that 2nd
          // _module.calc call starts from scratch


          if (cdi[0] && cdi[0].t && cdi[0].t._scene) {
            delete cdi[0].t._scene.dirty;
          }
        }

        for (j = 0; j < trace.transforms.length; j++) {
          var transform = trace.transforms[j];
          _module = transformsRegistry[transform.type];

          if (_module && _module.calcTransform) {
            trace._hasCalcTransform = true;
            hasCalcTransform = true;

            _module.calcTransform(gd, trace, transform);
          }
        }
      }
    }

    function calci(i, isContainer) {
      trace = fullData[i];
      _module = trace._module;
      if (!!_module.isContainer !== isContainer) return;
      var cd = [];

      if (trace.visible === true && trace._length !== 0) {
        // clear existing ref in case it got relinked
        delete trace._indexToPoints; // keep ref of index-to-points map object of the *last* enabled transform,
        // this index-to-points map object is required to determine the calcdata indices
        // that correspond to input indices (e.g. from 'selectedpoints')

        var transforms = trace.transforms || [];

        for (j = transforms.length - 1; j >= 0; j--) {
          if (transforms[j].enabled) {
            trace._indexToPoints = transforms[j]._indexToPoints;
            break;
          }
        }

        if (_module && _module.calc) {
          cd = _module.calc(gd, trace);
        }
      } // Make sure there is a first point.
      //
      // This ensures there is a calcdata item for every trace,
      // even if cartesian logic doesn't handle it (for things like legends).


      if (!Array.isArray(cd) || !cd[0]) {
        cd = [{
          x: BADNUM,
          y: BADNUM
        }];
      } // add the trace-wide properties to the first point,
      // per point properties to every point
      // t is the holder for trace-wide properties


      if (!cd[0].t) cd[0].t = {};
      cd[0].trace = trace;
      calcdata[i] = cd;
    }

    setupAxisCategories(axList, fullData, fullLayout); // 'transform' loop - must calc container traces first
    // so that if their dependent traces can get transform properly

    for (i = 0; i < fullData.length; i++) calci(i, true);

    for (i = 0; i < fullData.length; i++) transformCalci(i); // clear stuff that should recomputed in 'regular' loop


    if (hasCalcTransform) setupAxisCategories(axList, fullData, fullLayout); // 'regular' loop - make sure container traces (eg carpet) calc before
    // contained traces (eg contourcarpet)

    for (i = 0; i < fullData.length; i++) calci(i, true);

    for (i = 0; i < fullData.length; i++) calci(i, false);

    doCrossTraceCalc(gd); // Sort axis categories per value if specified

    var sorted = sortAxisCategoriesByValue(axList, gd);

    if (sorted.length) {
      // how many box/violins plots do we have (in case they're grouped)
      fullLayout._numBoxes = 0;
      fullLayout._numViolins = 0; // If a sort operation was performed, run calc() again

      for (i = 0; i < sorted.length; i++) calci(sorted[i], true);

      for (i = 0; i < sorted.length; i++) calci(sorted[i], false);

      doCrossTraceCalc(gd);
    }

    registry.getComponentMethod('fx', 'calc')(gd);
    registry.getComponentMethod('errorbars', 'calc')(gd);
  };

  var sortAxisCategoriesByValueRegex = /(total|sum|min|max|mean|median) (ascending|descending)/;

  function sortAxisCategoriesByValue(axList, gd) {
    var affectedTraces = [];
    var i, j, k, l, o;

    function zMapCategory(type, ax, value) {
      var axLetter = ax._id.charAt(0);

      if (type === 'histogram2dcontour') {
        var counterAxLetter = ax._counterAxes[0];
        var counterAx = axis_ids.getFromId(gd, counterAxLetter);
        var xCategorical = axLetter === 'x' || counterAxLetter === 'x' && counterAx.type === 'category';
        var yCategorical = axLetter === 'y' || counterAxLetter === 'y' && counterAx.type === 'category';
        return function (o, l) {
          if (o === 0 || l === 0) return -1; // Skip first row and column

          if (xCategorical && o === value[l].length - 1) return -1;
          if (yCategorical && l === value.length - 1) return -1;
          return (axLetter === 'y' ? l : o) - 1;
        };
      } else {
        return function (o, l) {
          return axLetter === 'y' ? l : o;
        };
      }
    }

    var aggFn = {
      'min': function (values) {
        return lib_1.aggNums(Math.min, null, values);
      },
      'max': function (values) {
        return lib_1.aggNums(Math.max, null, values);
      },
      'sum': function (values) {
        return lib_1.aggNums(function (a, b) {
          return a + b;
        }, null, values);
      },
      'total': function (values) {
        return lib_1.aggNums(function (a, b) {
          return a + b;
        }, null, values);
      },
      'mean': function (values) {
        return lib_1.mean(values);
      },
      'median': function (values) {
        return lib_1.median(values);
      }
    };

    for (i = 0; i < axList.length; i++) {
      var ax = axList[i];
      if (ax.type !== 'category') continue; // Order by value

      var match = ax.categoryorder.match(sortAxisCategoriesByValueRegex);

      if (match) {
        var aggregator = match[1];
        var order = match[2];

        var axLetter = ax._id.charAt(0);

        var isX = axLetter === 'x'; // Store values associated with each category

        var categoriesValue = [];

        for (j = 0; j < ax._categories.length; j++) {
          categoriesValue.push([ax._categories[j], []]);
        } // Collect values across traces


        for (j = 0; j < ax._traceIndices.length; j++) {
          var traceIndex = ax._traceIndices[j];
          var fullTrace = gd._fullData[traceIndex]; // Skip over invisible traces

          if (fullTrace.visible !== true) continue;
          var type = fullTrace.type;

          if (registry.traceIs(fullTrace, 'histogram')) {
            delete fullTrace._xautoBinFinished;
            delete fullTrace._yautoBinFinished;
          }

          var isSplom = type === 'splom';
          var isScattergl = type === 'scattergl';
          var cd = gd.calcdata[traceIndex];

          for (k = 0; k < cd.length; k++) {
            var cdi = cd[k];
            var catIndex, value;

            if (isSplom) {
              // If `splom`, collect values across dimensions
              // Find which dimension the current axis is representing
              var currentDimensionIndex = fullTrace._axesDim[ax._id]; // Apply logic to associated x axis if it's defined

              if (!isX) {
                var associatedXAxisID = fullTrace._diag[currentDimensionIndex][0];
                if (associatedXAxisID) ax = gd._fullLayout[axis_ids.id2name(associatedXAxisID)];
              }

              var categories = cdi.trace.dimensions[currentDimensionIndex].values;

              for (l = 0; l < categories.length; l++) {
                catIndex = ax._categoriesMap[categories[l]]; // Collect associated values at index `l` over all other dimensions

                for (o = 0; o < cdi.trace.dimensions.length; o++) {
                  if (o === currentDimensionIndex) continue;
                  var dimension = cdi.trace.dimensions[o];
                  categoriesValue[catIndex][1].push(dimension.values[l]);
                }
              }
            } else if (isScattergl) {
              // If `scattergl`, collect all values stashed under cdi.t
              for (l = 0; l < cdi.t.x.length; l++) {
                if (isX) {
                  catIndex = cdi.t.x[l];
                  value = cdi.t.y[l];
                } else {
                  catIndex = cdi.t.y[l];
                  value = cdi.t.x[l];
                }

                categoriesValue[catIndex][1].push(value);
              } // must clear scene 'batches', so that 2nd
              // _module.calc call starts from scratch


              if (cdi.t && cdi.t._scene) {
                delete cdi.t._scene.dirty;
              }
            } else if (cdi.hasOwnProperty('z')) {
              // If 2dMap, collect values in `z`
              value = cdi.z;
              var mapping = zMapCategory(fullTrace.type, ax, value);

              for (l = 0; l < value.length; l++) {
                for (o = 0; o < value[l].length; o++) {
                  catIndex = mapping(o, l);
                  if (catIndex + 1) categoriesValue[catIndex][1].push(value[l][o]);
                }
              }
            } else {
              // For all other 2d cartesian traces
              catIndex = cdi.p;
              if (catIndex === undefined) catIndex = cdi[axLetter];
              value = cdi.s;
              if (value === undefined) value = cdi.v;
              if (value === undefined) value = isX ? cdi.y : cdi.x;

              if (!Array.isArray(value)) {
                if (value === undefined) value = [];else value = [value];
              }

              for (l = 0; l < value.length; l++) {
                categoriesValue[catIndex][1].push(value[l]);
              }
            }
          }
        }

        ax._categoriesValue = categoriesValue;
        var categoriesAggregatedValue = [];

        for (j = 0; j < categoriesValue.length; j++) {
          categoriesAggregatedValue.push([categoriesValue[j][0], aggFn[aggregator](categoriesValue[j][1])]);
        } // Sort by aggregated value


        categoriesAggregatedValue.sort(function (a, b) {
          return a[1] - b[1];
        });
        ax._categoriesAggregatedValue = categoriesAggregatedValue; // Set new category order

        ax._initialCategories = categoriesAggregatedValue.map(function (c) {
          return c[0];
        }); // Reverse if descending

        if (order === 'descending') {
          ax._initialCategories.reverse();
        } // Sort all matching axes


        affectedTraces = affectedTraces.concat(ax.sortByInitialCategories());
      }
    }

    return affectedTraces;
  }

  function setupAxisCategories(axList, fullData, fullLayout) {
    var axLookup = {};

    function setupOne(ax) {
      ax.clearCalc();

      if (ax.type === 'multicategory') {
        ax.setupMultiCategory(fullData);
      }

      axLookup[ax._id] = 1;
    }

    lib_1.simpleMap(axList, setupOne); // look into match groups for 'missing' axes

    var matchGroups = fullLayout._axisMatchGroups || [];

    for (var i = 0; i < matchGroups.length; i++) {
      for (var axId in matchGroups[i]) {
        if (!axLookup[axId]) {
          setupOne(fullLayout[axis_ids.id2name(axId)]);
        }
      }
    }
  }

  function doCrossTraceCalc(gd) {
    var fullLayout = gd._fullLayout;
    var modules = fullLayout._visibleModules;
    var hash = {};
    var i, j, k; // position and range calculations for traces that
    // depend on each other ie bars (stacked or grouped)
    // and boxes (grouped) push each other out of the way

    for (j = 0; j < modules.length; j++) {
      var _module = modules[j];
      var fn = _module.crossTraceCalc;

      if (fn) {
        var spType = _module.basePlotModule.name;

        if (hash[spType]) {
          lib_1.pushUnique(hash[spType], fn);
        } else {
          hash[spType] = [fn];
        }
      }
    }

    for (k in hash) {
      var methods = hash[k];
      var subplots = fullLayout._subplots[k];

      if (Array.isArray(subplots)) {
        for (i = 0; i < subplots.length; i++) {
          var sp = subplots[i];
          var spInfo = k === 'cartesian' ? fullLayout._plots[sp] : fullLayout[sp];

          for (j = 0; j < methods.length; j++) {
            methods[j](gd, spInfo, sp);
          }
        }
      } else {
        for (j = 0; j < methods.length; j++) {
          methods[j](gd);
        }
      }
    }
  }

  plots.rehover = function (gd) {
    if (gd._fullLayout._rehover) {
      gd._fullLayout._rehover();
    }
  };

  plots.redrag = function (gd) {
    if (gd._fullLayout._redrag) {
      gd._fullLayout._redrag();
    }
  };

  plots.generalUpdatePerTraceModule = function (gd, subplot, subplotCalcData, subplotLayout) {
    var traceHashOld = subplot.traceHash;
    var traceHash = {};
    var i; // build up moduleName -> calcData hash

    for (i = 0; i < subplotCalcData.length; i++) {
      var calcTraces = subplotCalcData[i];
      var trace = calcTraces[0].trace; // skip over visible === false traces
      // as they don't have `_module` ref

      if (trace.visible) {
        traceHash[trace.type] = traceHash[trace.type] || [];
        traceHash[trace.type].push(calcTraces);
      }
    } // when a trace gets deleted, make sure that its module's
    // plot method is called so that it is properly
    // removed from the DOM.


    for (var moduleNameOld in traceHashOld) {
      if (!traceHash[moduleNameOld]) {
        var fakeCalcTrace = traceHashOld[moduleNameOld][0];
        var fakeTrace = fakeCalcTrace[0].trace;
        fakeTrace.visible = false;
        traceHash[moduleNameOld] = [fakeCalcTrace];
      }
    } // call module plot method


    for (var moduleName in traceHash) {
      var moduleCalcData = traceHash[moduleName];
      var _module = moduleCalcData[0][0].trace._module;

      _module.plot(gd, subplot, lib_1.filterVisible(moduleCalcData), subplotLayout);
    } // update moduleName -> calcData hash


    subplot.traceHash = traceHash;
  };

  plots.plotBasePlot = function (desiredType, gd, traces, transitionOpts, makeOnCompleteCallback) {
    var _module = registry.getModule(desiredType);

    var cdmodule = getModuleCalcData(gd.calcdata, _module)[0];

    _module.plot(gd, cdmodule, transitionOpts, makeOnCompleteCallback);
  };

  plots.cleanBasePlot = function (desiredType, newFullData, newFullLayout, oldFullData, oldFullLayout) {
    var had = oldFullLayout._has && oldFullLayout._has(desiredType);

    var has = newFullLayout._has && newFullLayout._has(desiredType);

    if (had && !has) {
      oldFullLayout['_' + desiredType + 'layer'].selectAll('g.trace').remove();
    }
  };
});

var xmlns_namespaces = createCommonjsModule(function (module, exports) {

  exports.xmlns = 'http://www.w3.org/2000/xmlns/';
  exports.svg = 'http://www.w3.org/2000/svg';
  exports.xlink = 'http://www.w3.org/1999/xlink'; // the 'old' d3 quirk got fix in v3.5.7
  // https://github.com/mbostock/d3/commit/a6f66e9dd37f764403fc7c1f26be09ab4af24fed

  exports.svgAttrs = {
    xmlns: exports.svg,
    'xmlns:xlink': exports.xlink
  };
});

var alignment = {
  // from bottom left: this is the origin of our paper-reference
  // positioning system
  FROM_BL: {
    left: 0,
    center: 0.5,
    right: 1,
    bottom: 0,
    middle: 0.5,
    top: 1
  },
  // from top left: this is the screen pixel positioning origin
  FROM_TL: {
    left: 0,
    center: 0.5,
    right: 1,
    bottom: 1,
    middle: 0.5,
    top: 0
  },
  // from bottom right: sometimes you just need the opposite of ^^
  FROM_BR: {
    left: 1,
    center: 0.5,
    right: 0,
    bottom: 0,
    middle: 0.5,
    top: 1
  },
  // multiple of fontSize to get the vertical offset between lines
  LINE_SPACING: 1.3,
  // multiple of fontSize to shift from the baseline
  // to the cap (captical letter) line
  // (to use when we don't calculate this shift from Drawing.bBox)
  // This is an approximation since in reality cap height can differ
  // from font to font. However, according to Wikipedia
  //   an "average" font might have a cap height of 70% of the em
  // https://en.wikipedia.org/wiki/Em_(typography)#History
  CAP_SHIFT: 0.70,
  // half the cap height (distance between baseline and cap line)
  // of an "average" font (for more info see above).
  MID_SHIFT: 0.35,
  OPPOSITE_SIDE: {
    left: 'right',
    right: 'left',
    top: 'bottom',
    bottom: 'top'
  }
};

var svg_text_utils = createCommonjsModule(function (module, exports) {
  /* global MathJax:false */

  var strTranslate = lib_1.strTranslate;
  var LINE_SPACING = alignment.LINE_SPACING; // text converter

  var FIND_TEX = /([^$]*)([$]+[^$]*[$]+)([^$]*)/;

  exports.convertToTspans = function (_context, gd, _callback) {
    var str = _context.text(); // Until we get tex integrated more fully (so it can be used along with non-tex)
    // allow some elements to prohibit it by attaching 'data-notex' to the original


    var tex = !_context.attr('data-notex') && gd && gd._context.typesetMath && typeof MathJax !== 'undefined' && str.match(FIND_TEX);
    var parent = d3.select(_context.node().parentNode);
    if (parent.empty()) return;
    var svgClass = _context.attr('class') ? _context.attr('class').split(' ')[0] : 'text';
    svgClass += '-math';
    parent.selectAll('svg.' + svgClass).remove();
    parent.selectAll('g.' + svgClass + '-group').remove();

    _context.style('display', null).attr({
      // some callers use data-unformatted *from the <text> element* in 'cancel'
      // so we need it here even if we're going to turn it into math
      // these two (plus style and text-anchor attributes) form the key we're
      // going to use for Drawing.bBox
      'data-unformatted': str,
      'data-math': 'N'
    });

    function showText() {
      if (!parent.empty()) {
        svgClass = _context.attr('class') + '-math';
        parent.select('svg.' + svgClass).remove();
      }

      _context.text('').style('white-space', 'pre');

      var hasLink = buildSVGText(_context.node(), str);

      if (hasLink) {
        // at least in Chrome, pointer-events does not seem
        // to be honored in children of <text> elements
        // so if we have an anchor, we have to make the
        // whole element respond
        _context.style('pointer-events', 'all');
      }

      exports.positionText(_context);
      if (_callback) _callback.call(_context);
    }

    if (tex) {
      (gd && gd._promises || []).push(new Promise(function (resolve) {
        _context.style('display', 'none');

        var fontSize = parseInt(_context.node().style.fontSize, 10);
        var config = {
          fontSize: fontSize
        };
        texToSVG(tex[2], config, function (_svgEl, _glyphDefs, _svgBBox) {
          parent.selectAll('svg.' + svgClass).remove();
          parent.selectAll('g.' + svgClass + '-group').remove();

          var newSvg = _svgEl && _svgEl.select('svg');

          if (!newSvg || !newSvg.node()) {
            showText();
            resolve();
            return;
          }

          var mathjaxGroup = parent.append('g').classed(svgClass + '-group', true).attr({
            'pointer-events': 'none',
            'data-unformatted': str,
            'data-math': 'Y'
          });
          mathjaxGroup.node().appendChild(newSvg.node()); // stitch the glyph defs

          if (_glyphDefs && _glyphDefs.node()) {
            newSvg.node().insertBefore(_glyphDefs.node().cloneNode(true), newSvg.node().firstChild);
          }

          var w0 = _svgBBox.width;
          var h0 = _svgBBox.height;
          newSvg.attr({
            'class': svgClass,
            height: h0,
            preserveAspectRatio: 'xMinYMin meet'
          }).style({
            overflow: 'visible',
            'pointer-events': 'none'
          });
          var fill = _context.node().style.fill || 'black';
          var g = newSvg.select('g');
          g.attr({
            fill: fill,
            stroke: fill
          });
          var bb = g.node().getBoundingClientRect();
          var w = bb.width;
          var h = bb.height;

          if (w > w0 || h > h0) {
            // this happen in firefox v82+ | see https://bugzilla.mozilla.org/show_bug.cgi?id=1709251 addressed
            // temporary fix:
            newSvg.style('overflow', 'hidden');
            bb = newSvg.node().getBoundingClientRect();
            w = bb.width;
            h = bb.height;
          }

          var x = +_context.attr('x');
          var y = +_context.attr('y'); // font baseline is about 1/4 fontSize below centerline

          var textHeight = fontSize || _context.node().getBoundingClientRect().height;

          var dy = -textHeight / 4;

          if (svgClass[0] === 'y') {
            mathjaxGroup.attr({
              transform: 'rotate(' + [-90, x, y] + ')' + strTranslate(-w / 2, dy - h / 2)
            });
          } else if (svgClass[0] === 'l') {
            y = dy - h / 2;
          } else if (svgClass[0] === 'a' && svgClass.indexOf('atitle') !== 0) {
            x = 0;
            y = dy;
          } else {
            var anchor = _context.attr('text-anchor');

            x = x - w * (anchor === 'middle' ? 0.5 : anchor === 'end' ? 1 : 0);
            y = y + dy - h / 2;
          }

          newSvg.attr({
            x: x,
            y: y
          });
          if (_callback) _callback.call(_context, mathjaxGroup);
          resolve(mathjaxGroup);
        });
      }));
    } else showText();

    return _context;
  }; // MathJax


  var LT_MATCH = /(<|&lt;|&#60;)/g;
  var GT_MATCH = /(>|&gt;|&#62;)/g;

  function cleanEscapesForTex(s) {
    return s.replace(LT_MATCH, '\\lt ').replace(GT_MATCH, '\\gt ');
  }

  var inlineMath = [['$', '$'], ['\\(', '\\)']];

  function texToSVG(_texString, _config, _callback) {
    var MathJaxVersion = parseInt((MathJax.version || '').split('.')[0]);

    if (MathJaxVersion !== 2 && MathJaxVersion !== 3) {
      lib_1.warn('No MathJax version:', MathJax.version);
      return;
    }

    var originalRenderer, originalConfig, originalProcessSectionDelay, tmpDiv;

    var setConfig2 = function () {
      originalConfig = lib_1.extendDeepAll({}, MathJax.Hub.config);
      originalProcessSectionDelay = MathJax.Hub.processSectionDelay;

      if (MathJax.Hub.processSectionDelay !== undefined) {
        // MathJax 2.5+ but not 3+
        MathJax.Hub.processSectionDelay = 0;
      }

      return MathJax.Hub.Config({
        messageStyle: 'none',
        tex2jax: {
          inlineMath: inlineMath
        },
        displayAlign: 'left'
      });
    };

    var setConfig3 = function () {
      originalConfig = lib_1.extendDeepAll({}, MathJax.config);

      if (!MathJax.config.tex) {
        MathJax.config.tex = {};
      }

      MathJax.config.tex.inlineMath = inlineMath;
    };

    var setRenderer2 = function () {
      originalRenderer = MathJax.Hub.config.menuSettings.renderer;

      if (originalRenderer !== 'SVG') {
        return MathJax.Hub.setRenderer('SVG');
      }
    };

    var setRenderer3 = function () {
      originalRenderer = MathJax.config.startup.output;

      if (originalRenderer !== 'svg') {
        MathJax.config.startup.output = 'svg';
      }
    };

    var initiateMathJax = function () {
      var randomID = 'math-output-' + lib_1.randstr({}, 64);
      tmpDiv = d3.select('body').append('div').attr({
        id: randomID
      }).style({
        visibility: 'hidden',
        position: 'absolute',
        'font-size': _config.fontSize + 'px'
      }).text(cleanEscapesForTex(_texString));
      var tmpNode = tmpDiv.node();
      return MathJaxVersion === 2 ? MathJax.Hub.Typeset(tmpNode) : MathJax.typeset([tmpNode]);
    };

    var finalizeMathJax = function () {
      var sel = tmpDiv.select(MathJaxVersion === 2 ? '.MathJax_SVG' : '.MathJax');
      var node = !sel.empty() && tmpDiv.select('svg').node();

      if (!node) {
        lib_1.log('There was an error in the tex syntax.', _texString);

        _callback();
      } else {
        var nodeBBox = node.getBoundingClientRect();
        var glyphDefs;

        if (MathJaxVersion === 2) {
          glyphDefs = d3.select('body').select('#MathJax_SVG_glyphs');
        } else {
          glyphDefs = sel.select('defs');
        }

        _callback(sel, glyphDefs, nodeBBox);
      }

      tmpDiv.remove();
    };

    var resetRenderer2 = function () {
      if (originalRenderer !== 'SVG') {
        return MathJax.Hub.setRenderer(originalRenderer);
      }
    };

    var resetRenderer3 = function () {
      if (originalRenderer !== 'svg') {
        MathJax.config.startup.output = originalRenderer;
      }
    };

    var resetConfig2 = function () {
      if (originalProcessSectionDelay !== undefined) {
        MathJax.Hub.processSectionDelay = originalProcessSectionDelay;
      }

      return MathJax.Hub.Config(originalConfig);
    };

    var resetConfig3 = function () {
      MathJax.config = originalConfig;
    };

    if (MathJaxVersion === 2) {
      MathJax.Hub.Queue(setConfig2, setRenderer2, initiateMathJax, finalizeMathJax, resetRenderer2, resetConfig2);
    } else if (MathJaxVersion === 3) {
      setConfig3();
      setRenderer3();
      MathJax.startup.defaultReady();
      MathJax.startup.promise.then(function () {
        initiateMathJax();
        finalizeMathJax();
        resetRenderer3();
        resetConfig3();
      });
    }
  }

  var TAG_STYLES = {
    // would like to use baseline-shift for sub/sup but FF doesn't support it
    // so we need to use dy along with the uber hacky shift-back-to
    // baseline below
    sup: 'font-size:70%',
    sub: 'font-size:70%',
    b: 'font-weight:bold',
    i: 'font-style:italic',
    a: 'cursor:pointer',
    span: '',
    em: 'font-style:italic;font-weight:bold'
  }; // baseline shifts for sub and sup

  var SHIFT_DY = {
    sub: '0.3em',
    sup: '-0.6em'
  }; // reset baseline by adding a tspan (empty except for a zero-width space)
  // with dy of -70% * SHIFT_DY (because font-size=70%)

  var RESET_DY = {
    sub: '-0.21em',
    sup: '0.42em'
  };
  var ZERO_WIDTH_SPACE = '\u200b';
  /*
   * Whitelist of protocols in user-supplied urls. Mostly we want to avoid javascript
   * and related attack vectors. The empty items are there for IE, that in various
   * versions treats relative paths as having different flavors of no protocol, while
   * other browsers have these explicitly inherit the protocol of the page they're in.
   */

  var PROTOCOLS = ['http:', 'https:', 'mailto:', '', undefined, ':'];
  var NEWLINES = exports.NEWLINES = /(\r\n?|\n)/g;
  var SPLIT_TAGS = /(<[^<>]*>)/;
  var ONE_TAG = /<(\/?)([^ >]*)(\s+(.*))?>/i;
  var BR_TAG = /<br(\s+.*)?>/i;
  exports.BR_TAG_ALL = /<br(\s+.*)?>/gi;
  /*
   * style and href: pull them out of either single or double quotes. Also
   * - target: (_blank|_self|_parent|_top|framename)
   *     note that you can't use target to get a popup but if you use popup,
   *     a `framename` will be passed along as the name of the popup window.
   *     per the spec, cannot contain whitespace.
   *     for backward compatibility we default to '_blank'
   * - popup: a custom one for us to enable popup (new window) links. String
   *     for window.open -> strWindowFeatures, like 'menubar=yes,width=500,height=550'
   *     note that at least in Chrome, you need to give at least one property
   *     in this string or the page will open in a new tab anyway. We follow this
   *     convention and will not make a popup if this string is empty.
   *     per the spec, cannot contain whitespace.
   *
   * Because we hack in other attributes with style (sub & sup), drop any trailing
   * semicolon in user-supplied styles so we can consistently append the tag-dependent style
   *
   * These are for tag attributes; Chrome anyway will convert entities in
   * attribute values, but not in attribute names
   * you can test this by for example:
   * > p = document.createElement('p')
   * > p.innerHTML = '<span styl&#x65;="font-color:r&#x65;d;">Hi</span>'
   * > p.innerHTML
   * <- '<span styl&#x65;="font-color:red;">Hi</span>'
   */

  var STYLEMATCH = /(^|[\s"'])style\s*=\s*("([^"]*);?"|'([^']*);?')/i;
  var HREFMATCH = /(^|[\s"'])href\s*=\s*("([^"]*)"|'([^']*)')/i;
  var TARGETMATCH = /(^|[\s"'])target\s*=\s*("([^"\s]*)"|'([^'\s]*)')/i;
  var POPUPMATCH = /(^|[\s"'])popup\s*=\s*("([\w=,]*)"|'([\w=,]*)')/i; // dedicated matcher for these quoted regexes, that can return their results
  // in two different places

  function getQuotedMatch(_str, re) {
    if (!_str) return null;

    var match = _str.match(re);

    var result = match && (match[3] || match[4]);
    return result && convertEntities(result);
  }

  var COLORMATCH = /(^|;)\s*color:/;
  /**
   * Strip string of tags
   *
   * @param {string} _str : input string
   * @param {object} opts :
   * - len {number} max length of output string
   * - allowedTags {array} list of pseudo-html tags to NOT strip
   * @return {string}
   */

  exports.plainText = function (_str, opts) {
    opts = opts || {};
    var len = opts.len !== undefined && opts.len !== -1 ? opts.len : Infinity;
    var allowedTags = opts.allowedTags !== undefined ? opts.allowedTags : ['br'];
    var ellipsis = '...';
    var eLen = ellipsis.length;

    var oldParts = _str.split(SPLIT_TAGS);

    var newParts = [];
    var prevTag = '';
    var l = 0;

    for (var i = 0; i < oldParts.length; i++) {
      var p = oldParts[i];
      var match = p.match(ONE_TAG);
      var tagType = match && match[2].toLowerCase();

      if (tagType) {
        // N.B. tags do not count towards string length
        if (allowedTags.indexOf(tagType) !== -1) {
          newParts.push(p);
          prevTag = tagType;
        }
      } else {
        var pLen = p.length;

        if (l + pLen < len) {
          newParts.push(p);
          l += pLen;
        } else if (l < len) {
          var pLen2 = len - l;

          if (prevTag && (prevTag !== 'br' || pLen2 <= eLen || pLen <= eLen)) {
            newParts.pop();
          }

          if (len > eLen) {
            newParts.push(p.substr(0, pLen2 - eLen) + ellipsis);
          } else {
            newParts.push(p.substr(0, pLen2));
          }

          break;
        }

        prevTag = '';
      }
    }

    return newParts.join('');
  };
  /*
   * N.B. HTML entities are listed without the leading '&' and trailing ';'
   * https://www.freeformatter.com/html-entities.html
   *
   * FWIW if we wanted to support the full set, it has 2261 entries:
   * https://www.w3.org/TR/html5/entities.json
   * though I notice that some of these are duplicates and/or are missing ";"
   * eg: "&amp;", "&amp", "&AMP;", and "&AMP" all map to "&"
   * We no longer need to include numeric entities here, these are now handled
   * by String.fromCodePoint/fromCharCode
   *
   * Anyway the only ones that are really important to allow are the HTML special
   * chars <, >, and &, because these ones can trigger special processing if not
   * replaced by the corresponding entity.
   */


  var entityToUnicode = {
    mu: 'Î¼',
    amp: '&',
    lt: '<',
    gt: '>',
    nbsp: 'Â ',
    times: 'Ã',
    plusmn: 'Â±',
    deg: 'Â°'
  }; // NOTE: in general entities can contain uppercase too (so [a-zA-Z]) but all the
  // ones we support use only lowercase. If we ever change that, update the regex.

  var ENTITY_MATCH = /&(#\d+|#x[\da-fA-F]+|[a-z]+);/g;

  function convertEntities(_str) {
    return _str.replace(ENTITY_MATCH, function (fullMatch, innerMatch) {
      var outChar;

      if (innerMatch.charAt(0) === '#') {
        // cannot use String.fromCodePoint in IE
        outChar = fromCodePoint(innerMatch.charAt(1) === 'x' ? parseInt(innerMatch.substr(2), 16) : parseInt(innerMatch.substr(1), 10));
      } else outChar = entityToUnicode[innerMatch]; // as in regular HTML, if we didn't decode the entity just
      // leave the raw text in place.


      return outChar || fullMatch;
    });
  }

  exports.convertEntities = convertEntities;

  function fromCodePoint(code) {
    // Don't allow overflow. In Chrome this turns into ï¿½ but I feel like it's
    // more useful to just not convert it at all.
    if (code > 0x10FFFF) return;
    var stringFromCodePoint = String.fromCodePoint;
    if (stringFromCodePoint) return stringFromCodePoint(code); // IE doesn't have String.fromCodePoint
    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint

    var stringFromCharCode = String.fromCharCode;
    if (code <= 0xFFFF) return stringFromCharCode(code);
    return stringFromCharCode((code >> 10) + 0xD7C0, code % 0x400 + 0xDC00);
  }
  /*
   * buildSVGText: convert our pseudo-html into SVG tspan elements, and attach these
   * to containerNode
   *
   * @param {svg text element} containerNode: the <text> node to insert this text into
   * @param {string} str: the pseudo-html string to convert to svg
   *
   * @returns {bool}: does the result contain any links? We need to handle the text element
   *   somewhat differently if it does, so just keep track of this when it happens.
   */


  function buildSVGText(containerNode, str) {
    /*
     * Normalize behavior between IE and others wrt newlines and whitespace:pre
     * this combination makes IE barf https://github.com/plotly/plotly.js/issues/746
     * Chrome and FF display \n, \r, or \r\n as a space in this mode.
     * I feel like at some point we turned these into <br> but currently we don't so
     * I'm just going to cement what we do now in Chrome and FF
     */
    str = str.replace(NEWLINES, ' ');
    var hasLink = false; // as we're building the text, keep track of what elements we're nested inside
    // nodeStack will be an array of {node, type, style, href, target, popup}
    // where only type: 'a' gets the last 3 and node is only added when it's created

    var nodeStack = [];
    var currentNode;
    var currentLine = -1;

    function newLine() {
      currentLine++;
      var lineNode = document.createElementNS(xmlns_namespaces.svg, 'tspan');
      d3.select(lineNode).attr({
        class: 'line',
        dy: currentLine * LINE_SPACING + 'em'
      });
      containerNode.appendChild(lineNode);
      currentNode = lineNode;
      var oldNodeStack = nodeStack;
      nodeStack = [{
        node: lineNode
      }];

      if (oldNodeStack.length > 1) {
        for (var i = 1; i < oldNodeStack.length; i++) {
          enterNode(oldNodeStack[i]);
        }
      }
    }

    function enterNode(nodeSpec) {
      var type = nodeSpec.type;
      var nodeAttrs = {};
      var nodeType;

      if (type === 'a') {
        nodeType = 'a';
        var target = nodeSpec.target;
        var href = nodeSpec.href;
        var popup = nodeSpec.popup;

        if (href) {
          nodeAttrs = {
            'xlink:xlink:show': target === '_blank' || target.charAt(0) !== '_' ? 'new' : 'replace',
            target: target,
            'xlink:xlink:href': href
          };

          if (popup) {
            // security: href and target are not inserted as code but
            // as attributes. popup is, but limited to /[A-Za-z0-9_=,]/
            nodeAttrs.onclick = 'window.open(this.href.baseVal,this.target.baseVal,"' + popup + '");return false;';
          }
        }
      } else nodeType = 'tspan';

      if (nodeSpec.style) nodeAttrs.style = nodeSpec.style;
      var newNode = document.createElementNS(xmlns_namespaces.svg, nodeType);

      if (type === 'sup' || type === 'sub') {
        addTextNode(currentNode, ZERO_WIDTH_SPACE);
        currentNode.appendChild(newNode);
        var resetter = document.createElementNS(xmlns_namespaces.svg, 'tspan');
        addTextNode(resetter, ZERO_WIDTH_SPACE);
        d3.select(resetter).attr('dy', RESET_DY[type]);
        nodeAttrs.dy = SHIFT_DY[type];
        currentNode.appendChild(newNode);
        currentNode.appendChild(resetter);
      } else {
        currentNode.appendChild(newNode);
      }

      d3.select(newNode).attr(nodeAttrs);
      currentNode = nodeSpec.node = newNode;
      nodeStack.push(nodeSpec);
    }

    function addTextNode(node, text) {
      node.appendChild(document.createTextNode(text));
    }

    function exitNode(type) {
      // A bare closing tag can't close the root node. If we encounter this it
      // means there's an extra closing tag that can just be ignored:
      if (nodeStack.length === 1) {
        lib_1.log('Ignoring unexpected end tag </' + type + '>.', str);
        return;
      }

      var innerNode = nodeStack.pop();

      if (type !== innerNode.type) {
        lib_1.log('Start tag <' + innerNode.type + '> doesnt match end tag <' + type + '>. Pretending it did match.', str);
      }

      currentNode = nodeStack[nodeStack.length - 1].node;
    }

    var hasLines = BR_TAG.test(str);
    if (hasLines) newLine();else {
      currentNode = containerNode;
      nodeStack = [{
        node: containerNode
      }];
    }
    var parts = str.split(SPLIT_TAGS);

    for (var i = 0; i < parts.length; i++) {
      var parti = parts[i];
      var match = parti.match(ONE_TAG);
      var tagType = match && match[2].toLowerCase();
      var tagStyle = TAG_STYLES[tagType];

      if (tagType === 'br') {
        newLine();
      } else if (tagStyle === undefined) {
        addTextNode(currentNode, convertEntities(parti));
      } else {
        // tag - open or close
        if (match[1]) {
          exitNode(tagType);
        } else {
          var extra = match[4];
          var nodeSpec = {
            type: tagType
          }; // now add style, from both the tag name and any extra css
          // Most of the svg css that users will care about is just like html,
          // but font color is different (uses fill). Let our users ignore this.

          var css = getQuotedMatch(extra, STYLEMATCH);

          if (css) {
            css = css.replace(COLORMATCH, '$1 fill:');
            if (tagStyle) css += ';' + tagStyle;
          } else if (tagStyle) css = tagStyle;

          if (css) nodeSpec.style = css;

          if (tagType === 'a') {
            hasLink = true;
            var href = getQuotedMatch(extra, HREFMATCH);

            if (href) {
              var safeHref = sanitizeHref(href);

              if (safeHref) {
                nodeSpec.href = safeHref;
                nodeSpec.target = getQuotedMatch(extra, TARGETMATCH) || '_blank';
                nodeSpec.popup = getQuotedMatch(extra, POPUPMATCH);
              }
            }
          }

          enterNode(nodeSpec);
        }
      }
    }

    return hasLink;
  }

  function sanitizeHref(href) {
    var decodedHref = encodeURI(decodeURI(href));
    var dummyAnchor1 = document.createElement('a');
    var dummyAnchor2 = document.createElement('a');
    dummyAnchor1.href = href;
    dummyAnchor2.href = decodedHref;
    var p1 = dummyAnchor1.protocol;
    var p2 = dummyAnchor2.protocol; // check safe protocols

    if (PROTOCOLS.indexOf(p1) !== -1 && PROTOCOLS.indexOf(p2) !== -1) {
      return decodedHref;
    } else {
      return '';
    }
  }
  /*
   * sanitizeHTML: port of buildSVGText aimed at providing a clean subset of HTML
   * @param {string} str: the html string to clean
   * @returns {string}: a cleaned and normalized version of the input,
   *     supporting only a small subset of html
   */


  exports.sanitizeHTML = function sanitizeHTML(str) {
    str = str.replace(NEWLINES, ' ');
    var rootNode = document.createElement('p');
    var currentNode = rootNode;
    var nodeStack = [];
    var parts = str.split(SPLIT_TAGS);

    for (var i = 0; i < parts.length; i++) {
      var parti = parts[i];
      var match = parti.match(ONE_TAG);
      var tagType = match && match[2].toLowerCase();

      if (tagType in TAG_STYLES) {
        if (match[1]) {
          if (nodeStack.length) {
            currentNode = nodeStack.pop();
          }
        } else {
          var extra = match[4];
          var css = getQuotedMatch(extra, STYLEMATCH);
          var nodeAttrs = css ? {
            style: css
          } : {};

          if (tagType === 'a') {
            var href = getQuotedMatch(extra, HREFMATCH);

            if (href) {
              var safeHref = sanitizeHref(href);

              if (safeHref) {
                nodeAttrs.href = safeHref;
                var target = getQuotedMatch(extra, TARGETMATCH);

                if (target) {
                  nodeAttrs.target = target;
                }
              }
            }
          }

          var newNode = document.createElement(tagType);
          currentNode.appendChild(newNode);
          d3.select(newNode).attr(nodeAttrs);
          currentNode = newNode;
          nodeStack.push(newNode);
        }
      } else {
        currentNode.appendChild(document.createTextNode(convertEntities(parti)));
      }
    }

    var key = 'innerHTML'; // i.e. to avoid pass test-syntax

    return rootNode[key];
  };

  exports.lineCount = function lineCount(s) {
    return s.selectAll('tspan.line').size() || 1;
  };

  exports.positionText = function positionText(s, x, y) {
    return s.each(function () {
      var text = d3.select(this);

      function setOrGet(attr, val) {
        if (val === undefined) {
          val = text.attr(attr);

          if (val === null) {
            text.attr(attr, 0);
            val = 0;
          }
        } else text.attr(attr, val);

        return val;
      }

      var thisX = setOrGet('x', x);
      var thisY = setOrGet('y', y);

      if (this.nodeName === 'text') {
        text.selectAll('tspan.line').attr({
          x: thisX,
          y: thisY
        });
      }
    });
  };

  function alignHTMLWith(_base, container, options) {
    var alignH = options.horizontalAlign;
    var alignV = options.verticalAlign || 'top';

    var bRect = _base.node().getBoundingClientRect();

    var cRect = container.node().getBoundingClientRect();
    var thisRect;
    var getTop;
    var getLeft;

    if (alignV === 'bottom') {
      getTop = function () {
        return bRect.bottom - thisRect.height;
      };
    } else if (alignV === 'middle') {
      getTop = function () {
        return bRect.top + (bRect.height - thisRect.height) / 2;
      };
    } else {
      // default: top
      getTop = function () {
        return bRect.top;
      };
    }

    if (alignH === 'right') {
      getLeft = function () {
        return bRect.right - thisRect.width;
      };
    } else if (alignH === 'center') {
      getLeft = function () {
        return bRect.left + (bRect.width - thisRect.width) / 2;
      };
    } else {
      // default: left
      getLeft = function () {
        return bRect.left;
      };
    }

    return function () {
      thisRect = this.node().getBoundingClientRect();
      var x0 = getLeft() - cRect.left;
      var y0 = getTop() - cRect.top;
      var gd = options.gd || {};

      if (options.gd) {
        gd._fullLayout._calcInverseTransform(gd);

        var transformedCoords = lib_1.apply3DTransform(gd._fullLayout._invTransform)(x0, y0);
        x0 = transformedCoords[0];
        y0 = transformedCoords[1];
      }

      this.style({
        top: y0 + 'px',
        left: x0 + 'px',
        'z-index': 1000
      });
      return this;
    };
  }

  var onePx = '1px ';

  exports.makeTextShadow = function (color) {
    var x = onePx;
    var y = onePx;
    var b = onePx;
    return x + y + b + color + ', ' + '-' + x + '-' + y + b + color + ', ' + x + '-' + y + b + color + ', ' + '-' + x + y + b + color;
  };
  /*
   * Editable title
   * @param {d3.selection} context: the element being edited. Normally text,
   *   but if it isn't, you should provide the styling options
   * @param {object} options:
   *   @param {div} options.gd: graphDiv
   *   @param {d3.selection} options.delegate: item to bind events to if not this
   *   @param {boolean} options.immediate: start editing now (true) or on click (false, default)
   *   @param {string} options.fill: font color if not as shown
   *   @param {string} options.background: background color if not as shown
   *   @param {string} options.text: initial text, if not as shown
   *   @param {string} options.horizontalAlign: alignment of the edit box wrt. the bound element
   *   @param {string} options.verticalAlign: alignment of the edit box wrt. the bound element
   */


  exports.makeEditable = function (context, options) {
    var gd = options.gd;
    var _delegate = options.delegate;
    var dispatch = d3.dispatch('edit', 'input', 'cancel');
    var handlerElement = _delegate || context;
    context.style({
      'pointer-events': _delegate ? 'none' : 'all'
    });
    if (context.size() !== 1) throw new Error('boo');

    function handleClick() {
      appendEditable();
      context.style({
        opacity: 0
      }); // also hide any mathjax svg

      var svgClass = handlerElement.attr('class');
      var mathjaxClass;
      if (svgClass) mathjaxClass = '.' + svgClass.split(' ')[0] + '-math-group';else mathjaxClass = '[class*=-math-group]';

      if (mathjaxClass) {
        d3.select(context.node().parentNode).select(mathjaxClass).style({
          opacity: 0
        });
      }
    }

    function selectElementContents(_el) {
      var el = _el.node();

      var range = document.createRange();
      range.selectNodeContents(el);
      var sel = window.getSelection();
      sel.removeAllRanges();
      sel.addRange(range);
      el.focus();
    }

    function appendEditable() {
      var plotDiv = d3.select(gd);
      var container = plotDiv.select('.svg-container');
      var div = container.append('div');
      var cStyle = context.node().style;
      var fontSize = parseFloat(cStyle.fontSize || 12);
      var initialText = options.text;
      if (initialText === undefined) initialText = context.attr('data-unformatted');
      div.classed('plugin-editable editable', true).style({
        position: 'absolute',
        'font-family': cStyle.fontFamily || 'Arial',
        'font-size': fontSize,
        color: options.fill || cStyle.fill || 'black',
        opacity: 1,
        'background-color': options.background || 'transparent',
        outline: '#ffffff33 1px solid',
        margin: [-fontSize / 8 + 1, 0, 0, -1].join('px ') + 'px',
        padding: '0',
        'box-sizing': 'border-box'
      }).attr({
        contenteditable: true
      }).text(initialText).call(alignHTMLWith(context, container, options)).on('blur', function () {
        gd._editing = false;
        context.text(this.textContent).style({
          opacity: 1
        });
        var svgClass = d3.select(this).attr('class');
        var mathjaxClass;
        if (svgClass) mathjaxClass = '.' + svgClass.split(' ')[0] + '-math-group';else mathjaxClass = '[class*=-math-group]';

        if (mathjaxClass) {
          d3.select(context.node().parentNode).select(mathjaxClass).style({
            opacity: 0
          });
        }

        var text = this.textContent;
        d3.select(this).transition().duration(0).remove();
        d3.select(document).on('mouseup', null);
        dispatch.edit.call(context, text);
      }).on('focus', function () {
        var editDiv = this;
        gd._editing = true;
        d3.select(document).on('mouseup', function () {
          if (d3.event.target === editDiv) return false;
          if (document.activeElement === div.node()) div.node().blur();
        });
      }).on('keyup', function () {
        if (d3.event.which === 27) {
          gd._editing = false;
          context.style({
            opacity: 1
          });
          d3.select(this).style({
            opacity: 0
          }).on('blur', function () {
            return false;
          }).transition().remove();
          dispatch.cancel.call(context, this.textContent);
        } else {
          dispatch.input.call(context, this.textContent);
          d3.select(this).call(alignHTMLWith(context, container, options));
        }
      }).on('keydown', function () {
        if (d3.event.which === 13) this.blur();
      }).call(selectElementContents);
    }

    if (options.immediate) handleClick();else handlerElement.on('click', handleClick);
    return d3.rebind(context, dispatch, 'on');
  };
});

var isValidScale$1 = scales_1.isValid;

function hasColorscale$4(trace, containerStr, colorKey) {
  var container = containerStr ? lib_1.nestedProperty(trace, containerStr).get() || {} : trace;
  var color = container[colorKey || 'color'];
  var isArrayWithOneNumber = false;

  if (lib_1.isArrayOrTypedArray(color)) {
    for (var i = 0; i < color.length; i++) {
      if (fastIsnumeric(color[i])) {
        isArrayWithOneNumber = true;
        break;
      }
    }
  }

  return lib_1.isPlainObject(container) && (isArrayWithOneNumber || container.showscale === true || fastIsnumeric(container.cmin) && fastIsnumeric(container.cmax) || isValidScale$1(container.colorscale) || lib_1.isPlainObject(container.colorbar));
}

var constantAttrs = ['showscale', 'autocolorscale', 'colorscale', 'reversescale', 'colorbar'];
var letterAttrs = ['min', 'max', 'mid', 'auto'];
/**
 * Extract 'c' / 'z', trace / color axis colorscale options
 *
 * Note that it would be nice to replace all z* with c* equivalents in v3
 *
 * @param {object} cont : attribute container
 * @return {object}:
 *  - min: cmin or zmin
 *  - max: cmax or zmax
 *  - mid: cmid or zmid
 *  - auto: cauto or zauto
 *  - *scale: *scale attrs
 *  - colorbar: colorbar
 *  - _sync: function syncing attr and underscore dual (useful when calc'ing min/max)
 */

function extractOpts$3(cont) {
  var colorAx = cont._colorAx;
  var cont2 = colorAx ? colorAx : cont;
  var out = {};
  var cLetter;
  var i, k;

  for (i = 0; i < constantAttrs.length; i++) {
    k = constantAttrs[i];
    out[k] = cont2[k];
  }

  if (colorAx) {
    cLetter = 'c';

    for (i = 0; i < letterAttrs.length; i++) {
      k = letterAttrs[i];
      out[k] = cont2['c' + k];
    }
  } else {
    var k2;

    for (i = 0; i < letterAttrs.length; i++) {
      k = letterAttrs[i];
      k2 = 'c' + k;

      if (k2 in cont2) {
        out[k] = cont2[k2];
        continue;
      }

      k2 = 'z' + k;

      if (k2 in cont2) {
        out[k] = cont2[k2];
      }
    }

    cLetter = k2.charAt(0);
  }

  out._sync = function (k, v) {
    var k2 = letterAttrs.indexOf(k) !== -1 ? cLetter + k : k;
    cont2[k2] = cont2['_' + k2] = v;
  };

  return out;
}
/**
 * Extract colorscale into numeric domain and color range.
 *
 * @param {object} cont colorscale container (e.g. trace, marker)
 *  - colorscale {array of arrays}
 *  - cmin/zmin {number}
 *  - cmax/zmax {number}
 *  - reversescale {boolean}
 *
 * @return {object}
 *  - domain {array}
 *  - range {array}
 */


function extractScale(cont) {
  var cOpts = extractOpts$3(cont);
  var cmin = cOpts.min;
  var cmax = cOpts.max;
  var scl = cOpts.reversescale ? flipScale$1(cOpts.colorscale) : cOpts.colorscale;
  var N = scl.length;
  var domain = new Array(N);
  var range = new Array(N);

  for (var i = 0; i < N; i++) {
    var si = scl[i];
    domain[i] = cmin + si[0] * (cmax - cmin);
    range[i] = si[1];
  }

  return {
    domain: domain,
    range: range
  };
}

function flipScale$1(scl) {
  var N = scl.length;
  var sclNew = new Array(N);

  for (var i = N - 1, j = 0; i >= 0; i--, j++) {
    var si = scl[i];
    sclNew[j] = [1 - si[0], si[1]];
  }

  return sclNew;
}
/**
 * General colorscale function generator.
 *
 * @param {object} specs output of Colorscale.extractScale or precomputed domain, range.
 *  - domain {array}
 *  - range {array}
 *
 * @param {object} opts
 *  - noNumericCheck {boolean} if true, scale func bypasses numeric checks
 *  - returnArray {boolean} if true, scale func return 4-item array instead of color strings
 *
 * @return {function}
 */


function makeColorScaleFunc(specs, opts) {
  opts = opts || {};
  var domain = specs.domain;
  var range = specs.range;
  var N = range.length;

  var _range = new Array(N);

  for (var i = 0; i < N; i++) {
    var rgba = tinycolor(range[i]).toRgb();
    _range[i] = [rgba.r, rgba.g, rgba.b, rgba.a];
  }

  var _sclFunc = d3.scale.linear().domain(domain).range(_range).clamp(true);

  var noNumericCheck = opts.noNumericCheck;
  var returnArray = opts.returnArray;
  var sclFunc;

  if (noNumericCheck && returnArray) {
    sclFunc = _sclFunc;
  } else if (noNumericCheck) {
    sclFunc = function (v) {
      return colorArray2rbga(_sclFunc(v));
    };
  } else if (returnArray) {
    sclFunc = function (v) {
      if (fastIsnumeric(v)) return _sclFunc(v);else if (tinycolor(v).isValid()) return v;else return color_1.defaultLine;
    };
  } else {
    sclFunc = function (v) {
      if (fastIsnumeric(v)) return colorArray2rbga(_sclFunc(v));else if (tinycolor(v).isValid()) return v;else return color_1.defaultLine;
    };
  } // colorbar draw looks into the d3 scale closure for domain and range


  sclFunc.domain = _sclFunc.domain;

  sclFunc.range = function () {
    return range;
  };

  return sclFunc;
}

function makeColorScaleFuncFromTrace(trace, opts) {
  return makeColorScaleFunc(extractScale(trace), opts);
}

function colorArray2rbga(colorArray) {
  var colorObj = {
    r: colorArray[0],
    g: colorArray[1],
    b: colorArray[2],
    a: colorArray[3]
  };
  return tinycolor(colorObj).toRgbString();
}

var helpers$a = {
  hasColorscale: hasColorscale$4,
  extractOpts: extractOpts$3,
  extractScale: extractScale,
  flipScale: flipScale$1,
  makeColorScaleFunc: makeColorScaleFunc,
  makeColorScaleFuncFromTrace: makeColorScaleFuncFromTrace
};

var docs = {
  FORMAT_LINK: 'https://github.com/d3/d3-format/tree/v1.4.5#d3-format',
  DATE_FORMAT_LINK: 'https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format'
};

var FORMAT_LINK$1 = docs.FORMAT_LINK;
var DATE_FORMAT_LINK$1 = docs.DATE_FORMAT_LINK;

function axisHoverFormat$1(x, noDates) {
  return {
    valType: 'string',
    dflt: '',
    editType: 'none',
    description: (noDates ? descriptionOnlyNumbers : descriptionWithDates$1)('hover text', x) + ['By default the values are formatted using ' + (noDates ? 'generic number format' : '`' + x + 'axis.hoverformat`') + '.'].join(' ')
  };
}

function descriptionOnlyNumbers(label, x) {
  return ['Sets the ' + label + ' formatting rule' + (x ? 'for `' + x + '` ' : ''), 'using d3 formatting mini-languages', 'which are very similar to those in Python. For numbers, see: ' + FORMAT_LINK$1 + '.'].join(' ');
}

function descriptionWithDates$1(label, x) {
  return descriptionOnlyNumbers(label, x) + [' And for dates see: ' + DATE_FORMAT_LINK$1 + '.', 'We add two items to d3\'s date formatter:', '*%h* for half of the year as a decimal number as well as', '*%{n}f* for fractional seconds', 'with n digits. For example, *2016-10-13 09:15:23.456* with tickformat', '*%H~%M~%S.%2f* would display *09~15~23.46*'].join(' ');
}

var axis_format_attributes = {
  axisHoverFormat: axisHoverFormat$1,
  descriptionOnlyNumbers: descriptionOnlyNumbers,
  descriptionWithDates: descriptionWithDates$1
};

var dash$2 = attributes$i.dash;
var extendFlat$8 = extend.extendFlat;
var templatedArray$7 = plot_template.templatedArray;
var descriptionWithDates = axis_format_attributes.descriptionWithDates;
var ONEDAY$2 = numerical.ONEDAY;
var HOUR$1 = constants$a.HOUR_PATTERN;
var DAY_OF_WEEK$1 = constants$a.WEEKDAY_PATTERN;
var layout_attributes$1 = {
  visible: {
    valType: 'boolean',
    editType: 'plot',
    description: ['A single toggle to hide the axis while preserving interaction like dragging.', 'Default is true when a cheater plot is present on the axis, otherwise', 'false'].join(' ')
  },
  color: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'ticks',
    description: ['Sets default for all colors associated with this axis', 'all at once: line, font, tick, and grid colors.', 'Grid color is lightened by blending this with the plot background', 'Individual pieces can override this.'].join(' ')
  },
  title: {
    text: {
      valType: 'string',
      editType: 'ticks',
      description: ['Sets the title of this axis.', 'Note that before the existence of `title.text`, the title\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')
    },
    font: font_attributes({
      editType: 'ticks',
      description: ['Sets this axis\' title font.', 'Note that the title\'s font used to be customized', 'by the now deprecated `titlefont` attribute.'].join(' ')
    }),
    standoff: {
      valType: 'number',
      min: 0,
      editType: 'ticks',
      description: ['Sets the standoff distance (in px) between the axis labels and the title text', 'The default value is a function of the axis tick labels, the title `font.size`', 'and the axis `linewidth`.', 'Note that the axis title position is always constrained within the margins,', 'so the actual standoff distance is always less than the set or default value.', 'By setting `standoff` and turning on `automargin`, plotly.js will push the', 'margins to fit the axis title at given standoff distance.'].join(' ')
    },
    editType: 'ticks'
  },
  type: {
    valType: 'enumerated',
    // '-' means we haven't yet run autotype or couldn't find any data
    // it gets turned into linear in gd._fullLayout but not copied back
    // to gd.data like the others are.
    values: ['-', 'linear', 'log', 'date', 'category', 'multicategory'],
    dflt: '-',
    editType: 'calc',
    // we forget when an axis has been autotyped, just writing the auto
    // value back to the input - so it doesn't make sense to template this.
    // Note: we do NOT prohibit this in `coerce`, so if someone enters a
    // type in the template explicitly it will be honored as the default.
    _noTemplating: true,
    description: ['Sets the axis type.', 'By default, plotly attempts to determined the axis type', 'by looking into the data of the traces that referenced', 'the axis in question.'].join(' ')
  },
  autotypenumbers: {
    valType: 'enumerated',
    values: ['convert types', 'strict'],
    dflt: 'convert types',
    editType: 'calc',
    description: ['Using *strict* a numeric string in trace data is not converted to a number.', 'Using *convert types* a numeric string in trace data may be', 'treated as a number during automatic axis `type` detection.', 'Defaults to layout.autotypenumbers.'].join(' ')
  },
  autorange: {
    valType: 'enumerated',
    values: [true, false, 'reversed'],
    dflt: true,
    editType: 'axrange',
    impliedEdits: {
      'range[0]': undefined,
      'range[1]': undefined
    },
    description: ['Determines whether or not the range of this axis is', 'computed in relation to the input data.', 'See `rangemode` for more info.', 'If `range` is provided, then `autorange` is set to *false*.'].join(' ')
  },
  rangemode: {
    valType: 'enumerated',
    values: ['normal', 'tozero', 'nonnegative'],
    dflt: 'normal',
    editType: 'plot',
    description: ['If *normal*, the range is computed in relation to the extrema', 'of the input data.', 'If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.', 'Applies only to linear axes.'].join(' ')
  },
  range: {
    valType: 'info_array',
    items: [{
      valType: 'any',
      editType: 'axrange',
      impliedEdits: {
        '^autorange': false
      },
      anim: true
    }, {
      valType: 'any',
      editType: 'axrange',
      impliedEdits: {
        '^autorange': false
      },
      anim: true
    }],
    editType: 'axrange',
    impliedEdits: {
      'autorange': false
    },
    anim: true,
    description: ['Sets the range of this axis.', 'If the axis `type` is *log*, then you must take the log of your', 'desired range (e.g. to set the range from 1 to 100,', 'set the range from 0 to 2).', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')
  },
  fixedrange: {
    valType: 'boolean',
    dflt: false,
    editType: 'calc',
    description: ['Determines whether or not this axis is zoom-able.', 'If true, then zoom is disabled.'].join(' ')
  },
  // scaleanchor: not used directly, just put here for reference
  // values are any opposite-letter axis id
  scaleanchor: {
    valType: 'enumerated',
    values: [constants$a.idRegex.x.toString(), constants$a.idRegex.y.toString()],
    editType: 'plot',
    description: ['If set to another axis id (e.g. `x2`, `y`), the range of this axis', 'changes together with the range of the corresponding axis', 'such that the scale of pixels per unit is in a constant ratio.', 'Both axes are still zoomable, but when you zoom one, the other will', 'zoom the same amount, keeping a fixed midpoint.', '`constrain` and `constraintoward` determine how we enforce the constraint.', 'You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}`', 'but you can only link axes of the same `type`.', 'The linked axis can have the opposite letter (to constrain the aspect ratio)', 'or the same letter (to match scales across subplots).', 'Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant', 'and the last constraint encountered will be ignored to avoid possible', 'inconsistent constraints via `scaleratio`.', 'Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint', 'is currently forbidden.'].join(' ')
  },
  scaleratio: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'plot',
    description: ['If this axis is linked to another by `scaleanchor`, this determines the pixel', 'to unit scale ratio. For example, if this value is 10, then every unit on', 'this axis spans 10 times the number of pixels as a unit on the linked axis.', 'Use this for example to create an elevation profile where the vertical scale', 'is exaggerated a fixed amount with respect to the horizontal.'].join(' ')
  },
  constrain: {
    valType: 'enumerated',
    values: ['range', 'domain'],
    editType: 'plot',
    description: ['If this axis needs to be compressed (either due to its own `scaleanchor` and', '`scaleratio` or those of the other axis), determines how that happens:', 'by increasing the *range*, or by decreasing the *domain*.', 'Default is *domain* for axes containing image traces, *range* otherwise.'].join(' ')
  },
  // constraintoward: not used directly, just put here for reference
  constraintoward: {
    valType: 'enumerated',
    values: ['left', 'center', 'right', 'top', 'middle', 'bottom'],
    editType: 'plot',
    description: ['If this axis needs to be compressed (either due to its own `scaleanchor` and', '`scaleratio` or those of the other axis), determines which direction we push', 'the originally specified plot area. Options are *left*, *center* (default),', 'and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.'].join(' ')
  },
  matches: {
    valType: 'enumerated',
    values: [constants$a.idRegex.x.toString(), constants$a.idRegex.y.toString()],
    editType: 'calc',
    description: ['If set to another axis id (e.g. `x2`, `y`), the range of this axis', 'will match the range of the corresponding axis in data-coordinates space.', 'Moreover, matching axes share auto-range values, category lists and', 'histogram auto-bins.', 'Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint', 'is currently forbidden.', 'Moreover, note that matching axes must have the same `type`.'].join(' ')
  },
  rangebreaks: templatedArray$7('rangebreak', {
    enabled: {
      valType: 'boolean',
      dflt: true,
      editType: 'calc',
      description: ['Determines whether this axis rangebreak is enabled or disabled.', 'Please note that `rangebreaks` only work for *date* axis type.'].join(' ')
    },
    bounds: {
      valType: 'info_array',
      items: [{
        valType: 'any',
        editType: 'calc'
      }, {
        valType: 'any',
        editType: 'calc'
      }],
      editType: 'calc',
      description: ['Sets the lower and upper bounds of this axis rangebreak.', 'Can be used with `pattern`.'].join(' ')
    },
    pattern: {
      valType: 'enumerated',
      values: [DAY_OF_WEEK$1, HOUR$1, ''],
      editType: 'calc',
      description: ['Determines a pattern on the time line that generates breaks.', 'If *' + DAY_OF_WEEK$1 + '* - days of the week in English e.g. \'Sunday\' or `\sun\`', '(matching is case-insensitive and considers only the first three characters),', 'as well as Sunday-based integers between 0 and 6.', 'If *' + HOUR$1 + '* - hour (24-hour clock) as decimal numbers between 0 and 24.', 'for more info.', 'Examples:', '- { pattern: \'' + DAY_OF_WEEK$1 + '\', bounds: [6, 1] }', ' or simply { bounds: [\'sat\', \'mon\'] }', '  breaks from Saturday to Monday (i.e. skips the weekends).', '- { pattern: \'' + HOUR$1 + '\', bounds: [17, 8] }', '  breaks from 5pm to 8am (i.e. skips non-work hours).'].join(' ')
    },
    values: {
      valType: 'info_array',
      freeLength: true,
      editType: 'calc',
      items: {
        valType: 'any',
        editType: 'calc'
      },
      description: ['Sets the coordinate values corresponding to the rangebreaks.', 'An alternative to `bounds`.', 'Use `dvalue` to set the size of the values along the axis.'].join(' ')
    },
    dvalue: {
      // TODO could become 'any' to add support for 'months', 'years'
      valType: 'number',
      editType: 'calc',
      min: 0,
      dflt: ONEDAY$2,
      description: ['Sets the size of each `values` item.', 'The default is one day in milliseconds.'].join(' ')
    },

    /*
    gap: {
        valType: 'number',
        min: 0,
        dflt: 0, // for *date* axes, maybe something else for *linear*
        editType: 'calc',
        description: [
            'Sets the gap distance between the start and the end of this rangebreak.',
            'Use with `gapmode` to set the unit of measurement.'
        ].join(' ')
    },
    gapmode: {
        valType: 'enumerated',
        values: ['pixels', 'fraction'],
        dflt: 'pixels',
        editType: 'calc',
        description: [
            'Determines if the `gap` value corresponds to a pixel length',
            'or a fraction of the plot area.'
        ].join(' ')
    },
    */
    // To complete https://github.com/plotly/plotly.js/issues/4210
    // we additionally need `gap` and make this work on *linear*, and
    // possibly all other cartesian axis types. We possibly would also need
    // some style attributes controlling the zig-zag on the corresponding
    // axis.
    editType: 'calc'
  }),
  // ticks
  tickmode: {
    valType: 'enumerated',
    values: ['auto', 'linear', 'array'],
    editType: 'ticks',
    impliedEdits: {
      tick0: undefined,
      dtick: undefined
    },
    description: ['Sets the tick mode for this axis.', 'If *auto*, the number of ticks is set via `nticks`.', 'If *linear*, the placement of the ticks is determined by', 'a starting position `tick0` and a tick step `dtick`', '(*linear* is the default value if `tick0` and `dtick` are provided).', 'If *array*, the placement of the ticks is set via `tickvals`', 'and the tick text is `ticktext`.', '(*array* is the default value if `tickvals` is provided).'].join(' ')
  },
  nticks: {
    valType: 'integer',
    min: 0,
    dflt: 0,
    editType: 'ticks',
    description: ['Specifies the maximum number of ticks for the particular axis.', 'The actual number of ticks will be chosen automatically to be', 'less than or equal to `nticks`.', 'Has an effect only if `tickmode` is set to *auto*.'].join(' ')
  },
  tick0: {
    valType: 'any',
    editType: 'ticks',
    impliedEdits: {
      tickmode: 'linear'
    },
    description: ['Sets the placement of the first tick on this axis.', 'Use with `dtick`.', 'If the axis `type` is *log*, then you must take the log of your starting tick', '(e.g. to set the starting tick to 100, set the `tick0` to 2)', 'except when `dtick`=*L<f>* (see `dtick` for more info).', 'If the axis `type` is *date*, it should be a date string, like date data.', 'If the axis `type` is *category*, it should be a number, using the scale where', 'each category is assigned a serial number from zero in the order it appears.'].join(' ')
  },
  dtick: {
    valType: 'any',
    editType: 'ticks',
    impliedEdits: {
      tickmode: 'linear'
    },
    description: ['Sets the step in-between ticks on this axis. Use with `tick0`.', 'Must be a positive number, or special strings available to *log* and *date* axes.', 'If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n', 'is the tick number. For example,', 'to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1.', 'To set tick marks at 1, 100, 10000, ... set dtick to 2.', 'To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433.', '*log* has several special values; *L<f>*, where `f` is a positive number,', 'gives ticks linearly spaced in value (but not position).', 'For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc.', 'To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5).', '`tick0` is ignored for *D1* and *D2*.', 'If the axis `type` is *date*, then you must convert the time to milliseconds.', 'For example, to set the interval between ticks to one day,', 'set `dtick` to 86400000.0.', '*date* also has special values *M<n>* gives ticks spaced by a number of months.', '`n` must be a positive integer.', 'To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*.', 'To set ticks every 4 years, set `dtick` to *M48*'].join(' ')
  },
  ticklabelstep: {
    valType: 'integer',
    min: 1,
    dflt: 1,
    editType: 'ticks',
    description: ['Sets the spacing between tick labels as compared to the spacing between ticks.', 'A value of 1 (default) means each tick gets a label.', 'A value of 2 means shows every 2nd label.', 'A larger value n means only every nth tick is labeled.', '`tick0` determines which labels are shown.', 'Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.'].join(' ')
  },
  tickvals: {
    valType: 'data_array',
    editType: 'ticks',
    description: ['Sets the values at which ticks on this axis appear.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `ticktext`.'].join(' ')
  },
  ticktext: {
    valType: 'data_array',
    editType: 'ticks',
    description: ['Sets the text displayed at the ticks position via `tickvals`.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `tickvals`.'].join(' ')
  },
  ticks: {
    valType: 'enumerated',
    values: ['outside', 'inside', ''],
    editType: 'ticks',
    description: ['Determines whether ticks are drawn or not.', 'If **, this axis\' ticks are not drawn.', 'If *outside* (*inside*), this axis\' are drawn outside (inside)', 'the axis lines.'].join(' ')
  },
  tickson: {
    valType: 'enumerated',
    values: ['labels', 'boundaries'],
    dflt: 'labels',
    editType: 'ticks',
    description: ['Determines where ticks and grid lines are drawn with respect to their', 'corresponding tick labels.', 'Only has an effect for axes of `type` *category* or *multicategory*.', 'When set to *boundaries*, ticks and grid lines are drawn half a category', 'to the left/bottom of labels.'].join(' ')
  },
  ticklabelmode: {
    valType: 'enumerated',
    values: ['instant', 'period'],
    dflt: 'instant',
    editType: 'ticks',
    description: ['Determines where tick labels are drawn with respect to their', 'corresponding ticks and grid lines.', 'Only has an effect for axes of `type` *date*', 'When set to *period*, tick labels are drawn in the middle of the period', 'between ticks.'].join(' ')
  },
  // ticklabelposition: not used directly, as values depend on direction (similar to side)
  // left/right options are for x axes, and top/bottom options are for y axes
  ticklabelposition: {
    valType: 'enumerated',
    values: ['outside', 'inside', 'outside top', 'inside top', 'outside left', 'inside left', 'outside right', 'inside right', 'outside bottom', 'inside bottom'],
    dflt: 'outside',
    editType: 'calc',
    description: ['Determines where tick labels are drawn with respect to the axis', 'Please note that', 'top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*.', 'Similarly', 'left or right has no effect on y axes or when `ticklabelmode` is set to *period*.', 'Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*.', 'When used on axes linked by `matches` or `scaleanchor`,', 'no extra padding for inside labels would be added by autorange,', 'so that the scales could match.'].join(' ')
  },
  ticklabeloverflow: {
    valType: 'enumerated',
    values: ['allow', 'hide past div', 'hide past domain'],
    editType: 'calc',
    description: ['Determines how we handle tick labels that would overflow either the graph div or the domain of the axis.', 'The default value for inside tick labels is *hide past domain*.', 'Otherwise on *category* and *multicategory* axes the default is *allow*.', 'In other cases the default is *hide past div*.'].join(' ')
  },
  mirror: {
    valType: 'enumerated',
    values: [true, 'ticks', false, 'all', 'allticks'],
    dflt: false,
    editType: 'ticks+layoutstyle',
    description: ['Determines if the axis lines or/and ticks are mirrored to', 'the opposite side of the plotting area.', 'If *true*, the axis lines are mirrored.', 'If *ticks*, the axis lines and ticks are mirrored.', 'If *false*, mirroring is disable.', 'If *all*, axis lines are mirrored on all shared-axes subplots.', 'If *allticks*, axis lines and ticks are mirrored', 'on all shared-axes subplots.'].join(' ')
  },
  ticklen: {
    valType: 'number',
    min: 0,
    dflt: 5,
    editType: 'ticks',
    description: 'Sets the tick length (in px).'
  },
  tickwidth: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'ticks',
    description: 'Sets the tick width (in px).'
  },
  tickcolor: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'ticks',
    description: 'Sets the tick color.'
  },
  showticklabels: {
    valType: 'boolean',
    dflt: true,
    editType: 'ticks',
    description: 'Determines whether or not the tick labels are drawn.'
  },
  automargin: {
    valType: 'boolean',
    dflt: false,
    editType: 'ticks',
    description: ['Determines whether long tick labels automatically grow the figure', 'margins.'].join(' ')
  },
  showspikes: {
    valType: 'boolean',
    dflt: false,
    editType: 'modebar',
    description: ['Determines whether or not spikes (aka droplines) are drawn for this axis.', 'Note: This only takes affect when hovermode = closest'].join(' ')
  },
  spikecolor: {
    valType: 'color',
    dflt: null,
    editType: 'none',
    description: 'Sets the spike color. If undefined, will use the series color'
  },
  spikethickness: {
    valType: 'number',
    dflt: 3,
    editType: 'none',
    description: 'Sets the width (in px) of the zero line.'
  },
  spikedash: extendFlat$8({}, dash$2, {
    dflt: 'dash',
    editType: 'none'
  }),
  spikemode: {
    valType: 'flaglist',
    flags: ['toaxis', 'across', 'marker'],
    dflt: 'toaxis',
    editType: 'none',
    description: ['Determines the drawing mode for the spike line', 'If *toaxis*, the line is drawn from the data point to the axis the ', 'series is plotted on.', 'If *across*, the line is drawn across the entire plot area, and', 'supercedes *toaxis*.', 'If *marker*, then a marker dot is drawn on the axis the series is', 'plotted on'].join(' ')
  },
  spikesnap: {
    valType: 'enumerated',
    values: ['data', 'cursor', 'hovered data'],
    dflt: 'hovered data',
    editType: 'none',
    description: 'Determines whether spikelines are stuck to the cursor or to the closest datapoints.'
  },
  tickfont: font_attributes({
    editType: 'ticks',
    description: 'Sets the tick font.'
  }),
  tickangle: {
    valType: 'angle',
    dflt: 'auto',
    editType: 'ticks',
    description: ['Sets the angle of the tick labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the tick labels', 'vertically.'].join(' ')
  },
  tickprefix: {
    valType: 'string',
    dflt: '',
    editType: 'ticks',
    description: 'Sets a tick label prefix.'
  },
  showtickprefix: {
    valType: 'enumerated',
    values: ['all', 'first', 'last', 'none'],
    dflt: 'all',
    editType: 'ticks',
    description: ['If *all*, all tick labels are displayed with a prefix.', 'If *first*, only the first tick is displayed with a prefix.', 'If *last*, only the last tick is displayed with a suffix.', 'If *none*, tick prefixes are hidden.'].join(' ')
  },
  ticksuffix: {
    valType: 'string',
    dflt: '',
    editType: 'ticks',
    description: 'Sets a tick label suffix.'
  },
  showticksuffix: {
    valType: 'enumerated',
    values: ['all', 'first', 'last', 'none'],
    dflt: 'all',
    editType: 'ticks',
    description: 'Same as `showtickprefix` but for tick suffixes.'
  },
  showexponent: {
    valType: 'enumerated',
    values: ['all', 'first', 'last', 'none'],
    dflt: 'all',
    editType: 'ticks',
    description: ['If *all*, all exponents are shown besides their significands.', 'If *first*, only the exponent of the first tick is shown.', 'If *last*, only the exponent of the last tick is shown.', 'If *none*, no exponents appear.'].join(' ')
  },
  exponentformat: {
    valType: 'enumerated',
    values: ['none', 'e', 'E', 'power', 'SI', 'B'],
    dflt: 'B',
    editType: 'ticks',
    description: ['Determines a formatting rule for the tick exponents.', 'For example, consider the number 1,000,000,000.', 'If *none*, it appears as 1,000,000,000.', 'If *e*, 1e+9.', 'If *E*, 1E+9.', 'If *power*, 1x10^9 (with 9 in a super script).', 'If *SI*, 1G.', 'If *B*, 1B.'].join(' ')
  },
  minexponent: {
    valType: 'number',
    dflt: 3,
    min: 0,
    editType: 'ticks',
    description: ['Hide SI prefix for 10^n if |n| is below this number.', 'This only has an effect when `tickformat` is *SI* or *B*.'].join(' ')
  },
  separatethousands: {
    valType: 'boolean',
    dflt: false,
    editType: 'ticks',
    description: ['If "true", even 4-digit integers are separated'].join(' ')
  },
  tickformat: {
    valType: 'string',
    dflt: '',
    editType: 'ticks',
    description: descriptionWithDates('tick label')
  },
  tickformatstops: templatedArray$7('tickformatstop', {
    enabled: {
      valType: 'boolean',
      dflt: true,
      editType: 'ticks',
      description: ['Determines whether or not this stop is used.', 'If `false`, this stop is ignored even within its `dtickrange`.'].join(' ')
    },
    dtickrange: {
      valType: 'info_array',
      items: [{
        valType: 'any',
        editType: 'ticks'
      }, {
        valType: 'any',
        editType: 'ticks'
      }],
      editType: 'ticks',
      description: ['range [*min*, *max*], where *min*, *max* - dtick values', 'which describe some zoom level, it is possible to omit *min*', 'or *max* value by passing *null*'].join(' ')
    },
    value: {
      valType: 'string',
      dflt: '',
      editType: 'ticks',
      description: ['string - dtickformat for described zoom level, the same as *tickformat*'].join(' ')
    },
    editType: 'ticks'
  }),
  hoverformat: {
    valType: 'string',
    dflt: '',
    editType: 'none',
    description: descriptionWithDates('hover text')
  },
  // lines and grids
  showline: {
    valType: 'boolean',
    dflt: false,
    editType: 'ticks+layoutstyle',
    description: ['Determines whether or not a line bounding this axis is drawn.'].join(' ')
  },
  linecolor: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'layoutstyle',
    description: 'Sets the axis line color.'
  },
  linewidth: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'ticks+layoutstyle',
    description: 'Sets the width (in px) of the axis line.'
  },
  showgrid: {
    valType: 'boolean',
    editType: 'ticks',
    description: ['Determines whether or not grid lines are drawn.', 'If *true*, the grid lines are drawn at every tick mark.'].join(' ')
  },
  gridcolor: {
    valType: 'color',
    dflt: attributes$j.lightLine,
    editType: 'ticks',
    description: 'Sets the color of the grid lines.'
  },
  gridwidth: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'ticks',
    description: 'Sets the width (in px) of the grid lines.'
  },
  zeroline: {
    valType: 'boolean',
    editType: 'ticks',
    description: ['Determines whether or not a line is drawn at along the 0 value', 'of this axis.', 'If *true*, the zero line is drawn on top of the grid lines.'].join(' ')
  },
  zerolinecolor: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'ticks',
    description: 'Sets the line color of the zero line.'
  },
  zerolinewidth: {
    valType: 'number',
    dflt: 1,
    editType: 'ticks',
    description: 'Sets the width (in px) of the zero line.'
  },
  showdividers: {
    valType: 'boolean',
    dflt: true,
    editType: 'ticks',
    description: ['Determines whether or not a dividers are drawn', 'between the category levels of this axis.', 'Only has an effect on *multicategory* axes.'].join(' ')
  },
  dividercolor: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'ticks',
    description: ['Sets the color of the dividers', 'Only has an effect on *multicategory* axes.'].join(' ')
  },
  dividerwidth: {
    valType: 'number',
    dflt: 1,
    editType: 'ticks',
    description: ['Sets the width (in px) of the dividers', 'Only has an effect on *multicategory* axes.'].join(' ')
  },
  // TODO dividerlen: that would override "to label base" length?
  // positioning attributes
  // anchor: not used directly, just put here for reference
  // values are any opposite-letter axis id
  anchor: {
    valType: 'enumerated',
    values: ['free', constants$a.idRegex.x.toString(), constants$a.idRegex.y.toString()],
    editType: 'plot',
    description: ['If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to', 'the corresponding opposite-letter axis.', 'If set to *free*, this axis\' position is determined by `position`.'].join(' ')
  },
  // side: not used directly, as values depend on direction
  // values are top, bottom for x axes, and left, right for y
  side: {
    valType: 'enumerated',
    values: ['top', 'bottom', 'left', 'right'],
    editType: 'plot',
    description: ['Determines whether a x (y) axis is positioned', 'at the *bottom* (*left*) or *top* (*right*)', 'of the plotting area.'].join(' ')
  },
  // overlaying: not used directly, just put here for reference
  // values are false and any other same-letter axis id that's not
  // itself overlaying anything
  overlaying: {
    valType: 'enumerated',
    values: ['free', constants$a.idRegex.x.toString(), constants$a.idRegex.y.toString()],
    editType: 'plot',
    description: ['If set a same-letter axis id, this axis is overlaid on top of', 'the corresponding same-letter axis, with traces and axes visible for both', 'axes.', 'If *false*, this axis does not overlay any same-letter axes.', 'In this case, for axes with overlapping domains only the highest-numbered', 'axis will be visible.'].join(' ')
  },
  layer: {
    valType: 'enumerated',
    values: ['above traces', 'below traces'],
    dflt: 'above traces',
    editType: 'plot',
    description: ['Sets the layer on which this axis is displayed.', 'If *above traces*, this axis is displayed above all the subplot\'s traces', 'If *below traces*, this axis is displayed below all the subplot\'s traces,', 'but above the grid lines.', 'Useful when used together with scatter-like traces with `cliponaxis`', 'set to *false* to show markers and/or text nodes above this axis.'].join(' ')
  },
  domain: {
    valType: 'info_array',
    items: [{
      valType: 'number',
      min: 0,
      max: 1,
      editType: 'plot'
    }, {
      valType: 'number',
      min: 0,
      max: 1,
      editType: 'plot'
    }],
    dflt: [0, 1],
    editType: 'plot',
    description: ['Sets the domain of this axis (in plot fraction).'].join(' ')
  },
  position: {
    valType: 'number',
    min: 0,
    max: 1,
    dflt: 0,
    editType: 'plot',
    description: ['Sets the position of this axis in the plotting space', '(in normalized coordinates).', 'Only has an effect if `anchor` is set to *free*.'].join(' ')
  },
  categoryorder: {
    valType: 'enumerated',
    values: ['trace', 'category ascending', 'category descending', 'array', 'total ascending', 'total descending', 'min ascending', 'min descending', 'max ascending', 'max descending', 'sum ascending', 'sum descending', 'mean ascending', 'mean descending', 'median ascending', 'median descending'],
    dflt: 'trace',
    editType: 'calc',
    description: ['Specifies the ordering logic for the case of categorical variables.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.', 'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.', 'Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the', 'numerical order of the values.', 'Similarly, the order can be determined by the min, max, sum, mean or median of all the values.'].join(' ')
  },
  categoryarray: {
    valType: 'data_array',
    editType: 'calc',
    description: ['Sets the order in which categories on this axis appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')
  },
  uirevision: {
    valType: 'any',
    editType: 'none',
    description: ['Controls persistence of user-driven changes in axis `range`,', '`autorange`, and `title` if in `editable: true` configuration.', 'Defaults to `layout.uirevision`.'].join(' ')
  },
  editType: 'calc',
  _deprecated: {
    autotick: {
      valType: 'boolean',
      editType: 'ticks',
      description: ['Obsolete.', 'Set `tickmode` to *auto* for old `autotick` *true* behavior.', 'Set `tickmode` to *linear* for `autotick` *false*.'].join(' ')
    },
    title: {
      valType: 'string',
      editType: 'ticks',
      description: ['Value of `title` is no longer a simple *string* but a set of sub-attributes.', 'To set the axis\' title, please use `title.text` now.'].join(' ')
    },
    titlefont: font_attributes({
      editType: 'ticks',
      description: ['Former `titlefont` is now the sub-attribute `font` of `title`.', 'To customize title font properties, please use `title.font` now.'].join(' ')
    })
  }
};

var extendFlat$7 = extend.extendFlat;
var overrideAll$4 = edit_types.overrideAll;
var attributes$g = overrideAll$4({
  orientation: {
    valType: 'enumerated',
    values: ['h', 'v'],
    dflt: 'v',
    description: 'Sets the orientation of the colorbar.'
  },
  thicknessmode: {
    valType: 'enumerated',
    values: ['fraction', 'pixels'],
    dflt: 'pixels',
    description: ['Determines whether this color bar\'s thickness', '(i.e. the measure in the constant color direction)', 'is set in units of plot *fraction* or in *pixels*.', 'Use `thickness` to set the value.'].join(' ')
  },
  thickness: {
    valType: 'number',
    min: 0,
    dflt: 30,
    description: ['Sets the thickness of the color bar', 'This measure excludes the size of the padding, ticks and labels.'].join(' ')
  },
  lenmode: {
    valType: 'enumerated',
    values: ['fraction', 'pixels'],
    dflt: 'fraction',
    description: ['Determines whether this color bar\'s length', '(i.e. the measure in the color variation direction)', 'is set in units of plot *fraction* or in *pixels.', 'Use `len` to set the value.'].join(' ')
  },
  len: {
    valType: 'number',
    min: 0,
    dflt: 1,
    description: ['Sets the length of the color bar', 'This measure excludes the padding of both ends.', 'That is, the color bar length is this length minus the', 'padding on both ends.'].join(' ')
  },
  x: {
    valType: 'number',
    min: -2,
    max: 3,
    description: ['Sets the x position of the color bar (in plot fraction).', 'Defaults to 1.02 when `orientation` is *v* and', '0.5 when `orientation` is *h*.'].join(' ')
  },
  xanchor: {
    valType: 'enumerated',
    values: ['left', 'center', 'right'],
    description: ['Sets this color bar\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the color bar.', 'Defaults to *left* when `orientation` is *v* and', '*center* when `orientation` is *h*.'].join(' ')
  },
  xpad: {
    valType: 'number',
    min: 0,
    dflt: 10,
    description: 'Sets the amount of padding (in px) along the x direction.'
  },
  y: {
    valType: 'number',
    min: -2,
    max: 3,
    description: ['Sets the y position of the color bar (in plot fraction).', 'Defaults to 0.5 when `orientation` is *v* and', '1.02 when `orientation` is *h*.'].join(' ')
  },
  yanchor: {
    valType: 'enumerated',
    values: ['top', 'middle', 'bottom'],
    description: ['Sets this color bar\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the color bar.', 'Defaults to *middle* when `orientation` is *v* and', '*bottom* when `orientation` is *h*.'].join(' ')
  },
  ypad: {
    valType: 'number',
    min: 0,
    dflt: 10,
    description: 'Sets the amount of padding (in px) along the y direction.'
  },
  // a possible line around the bar itself
  outlinecolor: layout_attributes$1.linecolor,
  outlinewidth: layout_attributes$1.linewidth,
  // Should outlinewidth have {dflt: 0} ?
  // another possible line outside the padding and tick labels
  bordercolor: layout_attributes$1.linecolor,
  borderwidth: {
    valType: 'number',
    min: 0,
    dflt: 0,
    description: ['Sets the width (in px) or the border enclosing this color bar.'].join(' ')
  },
  bgcolor: {
    valType: 'color',
    dflt: 'rgba(0,0,0,0)',
    description: 'Sets the color of padded area.'
  },
  // tick and title properties named and function exactly as in axes
  tickmode: layout_attributes$1.tickmode,
  nticks: layout_attributes$1.nticks,
  tick0: layout_attributes$1.tick0,
  dtick: layout_attributes$1.dtick,
  tickvals: layout_attributes$1.tickvals,
  ticktext: layout_attributes$1.ticktext,
  ticks: extendFlat$7({}, layout_attributes$1.ticks, {
    dflt: ''
  }),
  ticklabeloverflow: extendFlat$7({}, layout_attributes$1.ticklabeloverflow, {
    description: ['Determines how we handle tick labels that would overflow either the graph div or the domain of the axis.', 'The default value for inside tick labels is *hide past domain*.', 'In other cases the default is *hide past div*.'].join(' ')
  }),
  // ticklabelposition: not used directly, as values depend on orientation
  // left/right options are for x axes, and top/bottom options are for y axes
  ticklabelposition: {
    valType: 'enumerated',
    values: ['outside', 'inside', 'outside top', 'inside top', 'outside left', 'inside left', 'outside right', 'inside right', 'outside bottom', 'inside bottom'],
    dflt: 'outside',
    description: ['Determines where tick labels are drawn relative to the ticks.', 'Left and right options are used when `orientation` is *h*,', 'top and bottom when `orientation` is *v*.'].join(' ')
  },
  ticklen: layout_attributes$1.ticklen,
  tickwidth: layout_attributes$1.tickwidth,
  tickcolor: layout_attributes$1.tickcolor,
  ticklabelstep: layout_attributes$1.ticklabelstep,
  showticklabels: layout_attributes$1.showticklabels,
  tickfont: font_attributes({
    description: 'Sets the color bar\'s tick label font'
  }),
  tickangle: layout_attributes$1.tickangle,
  tickformat: layout_attributes$1.tickformat,
  tickformatstops: layout_attributes$1.tickformatstops,
  tickprefix: layout_attributes$1.tickprefix,
  showtickprefix: layout_attributes$1.showtickprefix,
  ticksuffix: layout_attributes$1.ticksuffix,
  showticksuffix: layout_attributes$1.showticksuffix,
  separatethousands: layout_attributes$1.separatethousands,
  exponentformat: layout_attributes$1.exponentformat,
  minexponent: layout_attributes$1.minexponent,
  showexponent: layout_attributes$1.showexponent,
  title: {
    text: {
      valType: 'string',
      description: ['Sets the title of the color bar.', 'Note that before the existence of `title.text`, the title\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')
    },
    font: font_attributes({
      description: ['Sets this color bar\'s title font.', 'Note that the title\'s font used to be set', 'by the now deprecated `titlefont` attribute.'].join(' ')
    }),
    side: {
      valType: 'enumerated',
      values: ['right', 'top', 'bottom'],
      description: ['Determines the location of color bar\'s title', 'with respect to the color bar.', 'Defaults to *top* when `orientation` if *v* and ', 'defaults to *right* when `orientation` if *h*.', 'Note that the title\'s location used to be set', 'by the now deprecated `titleside` attribute.'].join(' ')
    }
  },
  _deprecated: {
    title: {
      valType: 'string',
      description: ['Deprecated in favor of color bar\'s `title.text`.', 'Note that value of color bar\'s `title` is no longer a simple', '*string* but a set of sub-attributes.'].join(' ')
    },
    titlefont: font_attributes({
      description: 'Deprecated in favor of color bar\'s `title.font`.'
    }),
    titleside: {
      valType: 'enumerated',
      values: ['right', 'top', 'bottom'],
      dflt: 'top',
      description: 'Deprecated in favor of color bar\'s `title.side`.'
    }
  }
}, 'colorbars', 'from-root');

var counterRegex$1 = regex.counter;
var palettes = scales_1.scales;
var paletteStr = sort_object_keys(palettes);

function code(s) {
  return '`' + s + '`';
}
/**
 * Make colorscale attribute declarations for
 *
 * - colorscale,
 * - (c|z)auto, (c|z)min, (c|z)max,
 * - autocolorscale, reversescale,
 * - showscale (optionally)
 * - color (optionally)
 *
 * @param {string} context (dflt: '', i.e. from trace root):
 *     the container this is in ('', *marker*, *marker.line* etc)
 *
 * @param {object} opts:
 *   - cLetter {string} (dflt: 'c'):
 *     leading letter for 'min', 'max and 'auto' attribute (either 'z' or 'c')
 *
 *   - colorAttr {string} (dflt: 'z' if `cLetter: 'z'`, 'color' if `cLetter: 'c'`):
 *     (for descriptions) sets the name of the color attribute that maps to the colorscale.
 *
 *     N.B. if `colorAttr: 'color'`, we include the `color` declaration here.
 *
 *   - onlyIfNumerical {string} (dflt: false' if `cLetter: 'z'`, true if `cLetter: 'c'`):
 *     (for descriptions) set to true if colorscale attribute only
 *
 *   - colorscaleDflt {string}:
 *     overrides the colorscale dflt
 *
 *   - autoColorDflt {boolean} (dflt true):
 *     normally autocolorscale.dflt is `true`, but pass `false` to override
 *
 *   - noScale {boolean} (dflt: true if `context: 'marker.line'`, false otherwise):
 *     set to `false` to not include showscale attribute (e.g. for 'marker.line')
 *
 *   - showScaleDflt {boolean} (dflt: true if `cLetter: 'z'`, false otherwise)
 *
 *   - editTypeOverride {boolean} (dflt: ''):
 *     most of these attributes already require a recalc, but the ones that do not
 *     have editType *style* or *plot* unless you override (presumably with *calc*)
 *
 *   - anim {boolean) (dflt: undefined): is 'color' animatable?
 *
 * @return {object}
 */


var attributes$f = function colorScaleAttrs(context, opts) {
  context = context || '';
  opts = opts || {};
  var cLetter = opts.cLetter || 'c';
  var onlyIfNumerical = 'onlyIfNumerical' in opts ? opts.onlyIfNumerical : Boolean(context);
  var noScale = 'noScale' in opts ? opts.noScale : context === 'marker.line';
  var showScaleDflt = 'showScaleDflt' in opts ? opts.showScaleDflt : cLetter === 'z';
  var colorscaleDflt = typeof opts.colorscaleDflt === 'string' ? palettes[opts.colorscaleDflt] : null;
  var editTypeOverride = opts.editTypeOverride || '';
  var contextHead = context ? context + '.' : '';
  var colorAttr, colorAttrFull;

  if ('colorAttr' in opts) {
    colorAttr = opts.colorAttr;
    colorAttrFull = opts.colorAttr;
  } else {
    colorAttr = {
      z: 'z',
      c: 'color'
    }[cLetter];
    colorAttrFull = 'in ' + code(contextHead + colorAttr);
  }

  var effectDesc = onlyIfNumerical ? ' Has an effect only if ' + colorAttrFull + 'is set to a numerical array.' : '';
  var auto = cLetter + 'auto';
  var min = cLetter + 'min';
  var max = cLetter + 'max';
  var mid = cLetter + 'mid';
  var autoFull = code(contextHead + auto);
  var minFull = code(contextHead + min);
  var maxFull = code(contextHead + max);
  var minmaxFull = minFull + ' and ' + maxFull;
  var autoImpliedEdits = {};
  autoImpliedEdits[min] = autoImpliedEdits[max] = undefined;
  var minmaxImpliedEdits = {};
  minmaxImpliedEdits[auto] = false;
  var attrs = {};

  if (colorAttr === 'color') {
    attrs.color = {
      valType: 'color',
      arrayOk: true,
      editType: editTypeOverride || 'style',
      description: ['Sets the', context, 'color.', ' It accepts either a specific color', ' or an array of numbers that are mapped to the colorscale', ' relative to the max and min values of the array or relative to', ' ' + minmaxFull + ' if set.'].join('')
    };

    if (opts.anim) {
      attrs.color.anim = true;
    }
  }

  attrs[auto] = {
    valType: 'boolean',
    dflt: true,
    editType: 'calc',
    impliedEdits: autoImpliedEdits,
    description: ['Determines whether or not the color domain is computed', ' with respect to the input data (here ' + colorAttrFull + ') or the bounds set in', ' ', minmaxFull, ' ', effectDesc, ' Defaults to `false` when ', minmaxFull, ' are set by the user.'].join('')
  };
  attrs[min] = {
    valType: 'number',
    dflt: null,
    editType: editTypeOverride || 'plot',
    impliedEdits: minmaxImpliedEdits,
    description: ['Sets the lower bound of the color domain.', effectDesc, ' Value should have the same units as ', colorAttrFull, ' and if set, ', maxFull, ' must be set as well.'].join('')
  };
  attrs[max] = {
    valType: 'number',
    dflt: null,
    editType: editTypeOverride || 'plot',
    impliedEdits: minmaxImpliedEdits,
    description: ['Sets the upper bound of the color domain.', effectDesc, ' Value should have the same units as ', colorAttrFull, ' and if set, ', minFull, ' must be set as well.'].join('')
  };
  attrs[mid] = {
    valType: 'number',
    dflt: null,
    editType: 'calc',
    impliedEdits: autoImpliedEdits,
    description: ['Sets the mid-point of the color domain by scaling ', minFull, ' and/or ', maxFull, ' to be equidistant to this point.', effectDesc, ' Value should have the same units as ', colorAttrFull, '. ', 'Has no effect when ', autoFull, ' is `false`.'].join('')
  };
  attrs.colorscale = {
    valType: 'colorscale',
    editType: 'calc',
    dflt: colorscaleDflt,
    impliedEdits: {
      autocolorscale: false
    },
    description: ['Sets the colorscale.', effectDesc, ' The colorscale must be an array containing', ' arrays mapping a normalized value to an', ' rgb, rgba, hex, hsl, hsv, or named color string.', ' At minimum, a mapping for the lowest (0) and highest (1)', ' values are required. For example,', ' `[[0, \'rgb(0,0,255)\'], [1, \'rgb(255,0,0)\']]`.', ' To control the bounds of the colorscale in color space,', ' use', minmaxFull, '.', ' Alternatively, `colorscale` may be a palette name string', ' of the following list: ' + paletteStr + '.'].join('')
  };
  attrs.autocolorscale = {
    valType: 'boolean',
    // gets overrode in 'heatmap' & 'surface' for backwards comp.
    dflt: opts.autoColorDflt === false ? false : true,
    editType: 'calc',
    impliedEdits: {
      colorscale: undefined
    },
    description: ['Determines whether the colorscale is a default palette (`autocolorscale: true`)', ' or the palette determined by ', code(contextHead + 'colorscale'), '.', effectDesc, ' In case `colorscale` is unspecified or `autocolorscale` is true, the default ', ' palette will be chosen according to whether numbers in the `color` array are', ' all positive, all negative or mixed.'].join('')
  };
  attrs.reversescale = {
    valType: 'boolean',
    dflt: false,
    editType: 'plot',
    description: ['Reverses the color mapping if true.', effectDesc, ' If true, ', minFull, ' will correspond to the last color', ' in the array and ', maxFull, ' will correspond to the first color.'].join('')
  };

  if (!noScale) {
    attrs.showscale = {
      valType: 'boolean',
      dflt: showScaleDflt,
      editType: 'calc',
      description: ['Determines whether or not a colorbar is displayed for this trace.', effectDesc].join('')
    };
    attrs.colorbar = attributes$g;
  }

  if (!opts.noColorAxis) {
    attrs.coloraxis = {
      valType: 'subplotid',
      regex: counterRegex$1('coloraxis'),
      dflt: null,
      editType: 'calc',
      description: ['Sets a reference to a shared color axis.', 'References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc.', 'Settings for these shared color axes are set in the layout, under', '`layout.coloraxis`, `layout.coloraxis2`, etc.', 'Note that multiple color scales can be linked to the same color axis.'].join(' ')
    };
  }

  return attrs;
};

var extendFlat$6 = extend.extendFlat;
var scales = scales_1.scales;
var msg = 'Note that `autocolorscale` must be true for this attribute to work.';
var layout_attributes = {
  editType: 'calc',
  colorscale: {
    editType: 'calc',
    sequential: {
      valType: 'colorscale',
      dflt: scales.Reds,
      editType: 'calc',
      description: ['Sets the default sequential colorscale for positive values.', msg].join(' ')
    },
    sequentialminus: {
      valType: 'colorscale',
      dflt: scales.Blues,
      editType: 'calc',
      description: ['Sets the default sequential colorscale for negative values.', msg].join(' ')
    },
    diverging: {
      valType: 'colorscale',
      dflt: scales.RdBu,
      editType: 'calc',
      description: ['Sets the default diverging colorscale.', msg].join(' ')
    }
  },
  coloraxis: extendFlat$6({
    // not really a 'subplot' attribute container,
    // but this is the flag we use to denote attributes that
    // support yaxis, yaxis2, yaxis3, ... counters
    _isSubplotObj: true,
    editType: 'calc',
    description: [''].join(' ')
  }, attributes$f('', {
    colorAttr: 'corresponding trace color array(s)',
    noColorAxis: true,
    showScaleDflt: true
  }))
};

var has_colorbar = function hasColorbar(container) {
  return lib_1.isPlainObject(container.colorbar);
};

var ONEDAY$1 = numerical.ONEDAY;
var ONEWEEK$2 = numerical.ONEWEEK;
/**
 * Return a validated dtick value for this axis
 *
 * @param {any} dtick: the candidate dtick. valid values are numbers and strings,
 *     and further constrained depending on the axis type.
 * @param {string} axType: the axis type
 */

var dtick = function (dtick, axType) {
  var isLog = axType === 'log';
  var isDate = axType === 'date';
  var isCat = axType === 'category';
  var dtickDflt = isDate ? ONEDAY$1 : 1;
  if (!dtick) return dtickDflt;

  if (fastIsnumeric(dtick)) {
    dtick = Number(dtick);
    if (dtick <= 0) return dtickDflt;

    if (isCat) {
      // category dtick must be positive integers
      return Math.max(1, Math.round(dtick));
    }

    if (isDate) {
      // date dtick must be at least 0.1ms (our current precision)
      return Math.max(0.1, dtick);
    }

    return dtick;
  }

  if (typeof dtick !== 'string' || !(isDate || isLog)) {
    return dtickDflt;
  }

  var prefix = dtick.charAt(0);
  var dtickNum = dtick.substr(1);
  dtickNum = fastIsnumeric(dtickNum) ? Number(dtickNum) : 0;

  if (dtickNum <= 0 || !( // "M<n>" gives ticks every (integer) n months
  isDate && prefix === 'M' && dtickNum === Math.round(dtickNum) || // "L<f>" gives ticks linearly spaced in data (not in position) every (float) f
  isLog && prefix === 'L' || // "D1" gives powers of 10 with all small digits between, "D2" gives only 2 and 5
  isLog && prefix === 'D' && (dtickNum === 1 || dtickNum === 2))) {
    return dtickDflt;
  }

  return dtick;
};
/**
 * Return a validated tick0 for this axis
 *
 * @param {any} tick0: the candidate tick0. Valid values are numbers and strings,
 *     further constrained depending on the axis type
 * @param {string} axType: the axis type
 * @param {string} calendar: for date axes, the calendar to validate/convert with
 * @param {any} dtick: an already valid dtick. Only used for D1 and D2 log dticks,
 *     which do not support tick0 at all.
 */


var tick0 = function (tick0, axType, calendar, dtick) {
  if (axType === 'date') {
    return lib_1.cleanDate(tick0, lib_1.dateTick0(calendar, dtick % ONEWEEK$2 === 0 ? 1 : 0));
  }

  if (dtick === 'D1' || dtick === 'D2') {
    // D1 and D2 modes ignore tick0 entirely
    return undefined;
  } // Aside from date axes, tick0 must be numeric


  return fastIsnumeric(tick0) ? Number(tick0) : 0;
};

var clean_ticks = {
  dtick: dtick,
  tick0: tick0
};

var isArrayOrTypedArray$5 = lib_1.isArrayOrTypedArray;

var tick_value_defaults = function handleTickValueDefaults(containerIn, containerOut, coerce, axType) {
  function readInput(attr) {
    var v = containerIn[attr];
    return v !== undefined ? v : (containerOut._template || {})[attr];
  }

  var _tick0 = readInput('tick0');

  var _dtick = readInput('dtick');

  var _tickvals = readInput('tickvals');

  var tickmodeDefault = isArrayOrTypedArray$5(_tickvals) ? 'array' : _dtick ? 'linear' : 'auto';
  var tickmode = coerce('tickmode', tickmodeDefault);
  if (tickmode === 'auto') coerce('nticks');else if (tickmode === 'linear') {
    // dtick is usually a positive number, but there are some
    // special strings available for log or date axes
    // tick0 also has special logic
    var dtick = containerOut.dtick = clean_ticks.dtick(_dtick, axType);
    containerOut.tick0 = clean_ticks.tick0(_tick0, axType, containerOut.calendar, dtick);
  } else if (axType !== 'multicategory') {
    var tickvals = coerce('tickvals');
    if (tickvals === undefined) containerOut.tickmode = 'auto';else coerce('ticktext');
  }
};

/**
 * options: inherits outerTicks from axes.handleAxisDefaults
 */


var tick_mark_defaults = function handleTickMarkDefaults(containerIn, containerOut, coerce, options) {
  var tickLen = lib_1.coerce2(containerIn, containerOut, layout_attributes$1, 'ticklen');
  var tickWidth = lib_1.coerce2(containerIn, containerOut, layout_attributes$1, 'tickwidth');
  var tickColor = lib_1.coerce2(containerIn, containerOut, layout_attributes$1, 'tickcolor', containerOut.color);
  var showTicks = coerce('ticks', options.outerTicks || tickLen || tickWidth || tickColor ? 'outside' : '');

  if (!showTicks) {
    delete containerOut.ticklen;
    delete containerOut.tickwidth;
    delete containerOut.tickcolor;
  }
};

/*
 * Attributes 'showexponent', 'showtickprefix' and 'showticksuffix'
 * share values.
 *
 * If only 1 attribute is set,
 * the remaining attributes inherit that value.
 *
 * If 2 attributes are set to the same value,
 * the remaining attribute inherits that value.
 *
 * If 2 attributes are set to different values,
 * the remaining is set to its dflt value.
 *
 */

var show_dflt = function getShowAttrDflt(containerIn) {
  var showAttrsAll = ['showexponent', 'showtickprefix', 'showticksuffix'];
  var showAttrs = showAttrsAll.filter(function (a) {
    return containerIn[a] !== undefined;
  });

  var sameVal = function (a) {
    return containerIn[a] === containerIn[showAttrs[0]];
  };

  if (showAttrs.every(sameVal) || showAttrs.length === 1) {
    return containerIn[showAttrs[0]];
  }
};

/** Convenience wrapper for making array container logic DRY and consistent
 *
 * @param {object} parentObjIn
 *  user input object where the container in question is linked
 *  (i.e. either a user trace object or the user layout object)
 *
 * @param {object} parentObjOut
 *  full object where the coerced container will be linked
 *  (i.e. either a full trace object or the full layout object)
 *
 * @param {object} opts
 *  options object:
 *   - name {string}
 *      name of the key linking the container in question
 *   - inclusionAttr {string}
 *      name of the item attribute for inclusion/exclusion. Default is 'visible'.
 *      Since inclusion is true, use eg 'enabled' instead of 'disabled'.
 *   - handleItemDefaults {function}
 *      defaults method to be called on each item in the array container in question
 *
 *      Its arguments are:
 *          - itemIn {object} item in user layout
 *          - itemOut {object} item in full layout
 *          - parentObj {object} (as in closure)
 *          - opts {object} (as in closure)
 * N.B.
 *
 *  - opts is passed to handleItemDefaults so it can also store
 *    links to supplementary data (e.g. fullData for layout components)
 *
 */


var array_container_defaults = function handleArrayContainerDefaults(parentObjIn, parentObjOut, opts) {
  var name = opts.name;
  var inclusionAttr = opts.inclusionAttr || 'visible';
  var previousContOut = parentObjOut[name];
  var contIn = lib_1.isArrayOrTypedArray(parentObjIn[name]) ? parentObjIn[name] : [];
  var contOut = parentObjOut[name] = [];
  var templater = plot_template.arrayTemplater(parentObjOut, name, inclusionAttr);
  var i, itemOut;

  for (i = 0; i < contIn.length; i++) {
    var itemIn = contIn[i];

    if (!lib_1.isPlainObject(itemIn)) {
      itemOut = templater.newItem({});
      itemOut[inclusionAttr] = false;
    } else {
      itemOut = templater.newItem(itemIn);
    }

    itemOut._index = i;

    if (itemOut[inclusionAttr] !== false) {
      opts.handleItemDefaults(itemIn, itemOut, parentObjOut, opts);
    }

    contOut.push(itemOut);
  }

  var defaultItems = templater.defaultItems();

  for (i = 0; i < defaultItems.length; i++) {
    itemOut = defaultItems[i];
    itemOut._index = contOut.length;
    opts.handleItemDefaults({}, itemOut, parentObjOut, opts, {});
    contOut.push(itemOut);
  } // in case this array gets its defaults rebuilt independent of the whole layout,
  // relink the private keys just for this array.


  if (lib_1.isArrayOrTypedArray(previousContOut)) {
    var len = Math.min(previousContOut.length, contOut.length);

    for (i = 0; i < len; i++) {
      lib_1.relinkPrivateKeys(contOut[i], previousContOut[i]);
    }
  }

  return contOut;
};

var contrast = color_1.contrast;

var tick_label_defaults = function handleTickLabelDefaults(containerIn, containerOut, coerce, axType, options) {
  if (!options) options = {};
  var showAttrDflt = show_dflt(containerIn);
  var showTickLabels = coerce('showticklabels');

  if (showTickLabels) {
    var font = options.font || {};
    var contColor = containerOut.color;
    var position = containerOut.ticklabelposition || '';
    var dfltFontColor = position.indexOf('inside') !== -1 ? contrast(options.bgColor) : // as with titlefont.color, inherit axis.color only if one was
    // explicitly provided
    contColor && contColor !== layout_attributes$1.color.dflt ? contColor : font.color;
    lib_1.coerceFont(coerce, 'tickfont', {
      family: font.family,
      size: font.size,
      color: dfltFontColor
    });

    if (!options.noTicklabelstep && axType !== 'multicategory' && axType !== 'log') {
      coerce('ticklabelstep');
    }

    if (!options.noAng) coerce('tickangle');

    if (axType !== 'category') {
      var tickFormat = coerce('tickformat');
      array_container_defaults(containerIn, containerOut, {
        name: 'tickformatstops',
        inclusionAttr: 'enabled',
        handleItemDefaults: tickformatstopDefaults
      });

      if (!containerOut.tickformatstops.length) {
        delete containerOut.tickformatstops;
      }

      if (!options.noExp && !tickFormat && axType !== 'date') {
        coerce('showexponent', showAttrDflt);
        coerce('exponentformat');
        coerce('minexponent');
        coerce('separatethousands');
      }
    }
  }
};

function tickformatstopDefaults(valueIn, valueOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(valueIn, valueOut, layout_attributes$1.tickformatstops, attr, dflt);
  }

  var enabled = coerce('enabled');

  if (enabled) {
    coerce('dtickrange');
    coerce('value');
  }
}

var prefix_suffix_defaults = function handlePrefixSuffixDefaults(containerIn, containerOut, coerce, axType, options) {
  if (!options) options = {};
  var tickSuffixDflt = options.tickSuffixDflt;
  var showAttrDflt = show_dflt(containerIn);
  var tickPrefix = coerce('tickprefix');
  if (tickPrefix) coerce('showtickprefix', showAttrDflt);
  var tickSuffix = coerce('ticksuffix', tickSuffixDflt);
  if (tickSuffix) coerce('showticksuffix', showAttrDflt);
};

var defaults$g = function colorbarDefaults(containerIn, containerOut, layout) {
  var colorbarOut = plot_template.newContainer(containerOut, 'colorbar');
  var colorbarIn = containerIn.colorbar || {};

  function coerce(attr, dflt) {
    return lib_1.coerce(colorbarIn, colorbarOut, attributes$g, attr, dflt);
  }

  var margin = layout.margin || {
    t: 0,
    b: 0,
    l: 0,
    r: 0
  };
  var w = layout.width - margin.l - margin.r;
  var h = layout.height - margin.t - margin.b;
  var orientation = coerce('orientation');
  var isVertical = orientation === 'v';
  var thicknessmode = coerce('thicknessmode');
  coerce('thickness', thicknessmode === 'fraction' ? 30 / (isVertical ? w : h) : 30);
  var lenmode = coerce('lenmode');
  coerce('len', lenmode === 'fraction' ? 1 : isVertical ? h : w);
  coerce('x', isVertical ? 1.02 : 0.5);
  coerce('xanchor', isVertical ? 'left' : 'center');
  coerce('xpad');
  coerce('y', isVertical ? 0.5 : 1.02);
  coerce('yanchor', isVertical ? 'middle' : 'bottom');
  coerce('ypad');
  lib_1.noneOrAll(colorbarIn, colorbarOut, ['x', 'y']);
  coerce('outlinecolor');
  coerce('outlinewidth');
  coerce('bordercolor');
  coerce('borderwidth');
  coerce('bgcolor');
  var ticklabelposition = lib_1.coerce(colorbarIn, colorbarOut, {
    ticklabelposition: {
      valType: 'enumerated',
      dflt: 'outside',
      values: isVertical ? ['outside', 'inside', 'outside top', 'inside top', 'outside bottom', 'inside bottom'] : ['outside', 'inside', 'outside left', 'inside left', 'outside right', 'inside right']
    }
  }, 'ticklabelposition');
  coerce('ticklabeloverflow', ticklabelposition.indexOf('inside') !== -1 ? 'hide past domain' : 'hide past div');
  tick_value_defaults(colorbarIn, colorbarOut, coerce, 'linear');
  var font = layout.font;
  var opts = {
    outerTicks: false,
    font: font
  };

  if (ticklabelposition.indexOf('inside') !== -1) {
    opts.bgColor = 'black'; // could we instead use the average of colors in the scale?
  }

  prefix_suffix_defaults(colorbarIn, colorbarOut, coerce, 'linear', opts);
  tick_label_defaults(colorbarIn, colorbarOut, coerce, 'linear', opts);
  tick_mark_defaults(colorbarIn, colorbarOut, coerce, 'linear');
  coerce('title.text', layout._dfltTitle.colorbar);
  var tickFont = colorbarOut.tickfont;
  var dfltTitleFont = lib_1.extendFlat({}, tickFont, {
    color: font.color,
    size: lib_1.bigFont(tickFont.size)
  });
  lib_1.coerceFont(coerce, 'title.font', dfltTitleFont);
  coerce('title.side', isVertical ? 'top' : 'right');
};

var isValidScale = scales_1.isValid;
var traceIs$2 = registry.traceIs;

function npMaybe(parentCont, prefix) {
  var containerStr = prefix.slice(0, prefix.length - 1);
  return prefix ? lib_1.nestedProperty(parentCont, containerStr).get() || {} : parentCont;
}
/**
 * Colorscale / colorbar default handler
 *
 * @param {object} parentContIn : user (input) parent container (e.g. trace or layout coloraxis object)
 * @param {object} parentContOut : full parent container
 * @param {object} layout : (full) layout object
 * @param {fn} coerce : Lib.coerce wrapper
 * @param {object} opts :
 * - prefix {string} : attr string prefix to colorscale container from parent root
 * - cLetter {string} : 'c or 'z' color letter
 */


var defaults$f = function colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts) {
  var prefix = opts.prefix;
  var cLetter = opts.cLetter;
  var inTrace = ('_module' in parentContOut);
  var containerIn = npMaybe(parentContIn, prefix);
  var containerOut = npMaybe(parentContOut, prefix);
  var template = npMaybe(parentContOut._template || {}, prefix) || {}; // colorScaleDefaults wrapper called if-ever we need to reset the colorscale
  // attributes for containers that were linked to invalid color axes

  var thisFn = function () {
    delete parentContIn.coloraxis;
    delete parentContOut.coloraxis;
    return colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts);
  };

  if (inTrace) {
    var colorAxes = layout._colorAxes || {};
    var colorAx = coerce(prefix + 'coloraxis');

    if (colorAx) {
      var colorbarVisuals = traceIs$2(parentContOut, 'contour') && lib_1.nestedProperty(parentContOut, 'contours.coloring').get() || 'heatmap';
      var stash = colorAxes[colorAx];

      if (stash) {
        stash[2].push(thisFn);

        if (stash[0] !== colorbarVisuals) {
          stash[0] = false;
          lib_1.warn(['Ignoring coloraxis:', colorAx, 'setting', 'as it is linked to incompatible colorscales.'].join(' '));
        }
      } else {
        // stash:
        // - colorbar visual 'type'
        // - colorbar options to help in Colorbar.draw
        // - list of colorScaleDefaults wrapper functions
        colorAxes[colorAx] = [colorbarVisuals, parentContOut, [thisFn]];
      }

      return;
    }
  }

  var minIn = containerIn[cLetter + 'min'];
  var maxIn = containerIn[cLetter + 'max'];
  var validMinMax = fastIsnumeric(minIn) && fastIsnumeric(maxIn) && minIn < maxIn;
  var auto = coerce(prefix + cLetter + 'auto', !validMinMax);

  if (auto) {
    coerce(prefix + cLetter + 'mid');
  } else {
    coerce(prefix + cLetter + 'min');
    coerce(prefix + cLetter + 'max');
  } // handles both the trace case (autocolorscale is false by default) and
  // the marker and marker.line case (autocolorscale is true by default)


  var sclIn = containerIn.colorscale;
  var sclTemplate = template.colorscale;
  var autoColorscaleDflt;
  if (sclIn !== undefined) autoColorscaleDflt = !isValidScale(sclIn);
  if (sclTemplate !== undefined) autoColorscaleDflt = !isValidScale(sclTemplate);
  coerce(prefix + 'autocolorscale', autoColorscaleDflt);
  coerce(prefix + 'colorscale');
  coerce(prefix + 'reversescale');

  if (prefix !== 'marker.line.') {
    // handles both the trace case where the dflt is listed in attributes and
    // the marker case where the dflt is determined by hasColorbar
    var showScaleDflt;
    if (prefix && inTrace) showScaleDflt = has_colorbar(containerIn);
    var showScale = coerce(prefix + 'showscale', showScaleDflt);

    if (showScale) {
      if (prefix && template) containerOut._template = template;
      defaults$g(containerIn, containerOut, layout);
    }
  }
};

var layout_defaults$2 = function supplyLayoutDefaults(layoutIn, layoutOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(layoutIn, layoutOut, layout_attributes, attr, dflt);
  }

  coerce('colorscale.sequential');
  coerce('colorscale.sequentialminus');
  coerce('colorscale.diverging');
  var colorAxes = layoutOut._colorAxes;
  var colorAxIn, colorAxOut;

  function coerceAx(attr, dflt) {
    return lib_1.coerce(colorAxIn, colorAxOut, layout_attributes.coloraxis, attr, dflt);
  }

  for (var k in colorAxes) {
    var stash = colorAxes[k];

    if (stash[0]) {
      colorAxIn = layoutIn[k] || {};
      colorAxOut = plot_template.newContainer(layoutOut, k, 'coloraxis');
      colorAxOut._name = k;
      defaults$f(colorAxIn, colorAxOut, layoutOut, coerceAx, {
        prefix: '',
        cLetter: 'c'
      });
    } else {
      // re-coerce colorscale attributes w/o coloraxis
      for (var i = 0; i < stash[2].length; i++) {
        stash[2][i]();
      }

      delete layoutOut._colorAxes[k];
    }
  }
};

var hasColorscale$3 = helpers$a.hasColorscale;
var extractOpts$2 = helpers$a.extractOpts;

var cross_trace_defaults$1 = function crossTraceDefaults(fullData, fullLayout) {
  function replace(cont, k) {
    var val = cont['_' + k];

    if (val !== undefined) {
      cont[k] = val;
    }
  }

  function relinkColorAttrs(outerCont, cbOpt) {
    var cont = cbOpt.container ? lib_1.nestedProperty(outerCont, cbOpt.container).get() : outerCont;

    if (cont) {
      if (cont.coloraxis) {
        // stash ref to color axis
        cont._colorAx = fullLayout[cont.coloraxis];
      } else {
        var cOpts = extractOpts$2(cont);
        var isAuto = cOpts.auto;

        if (isAuto || cOpts.min === undefined) {
          replace(cont, cbOpt.min);
        }

        if (isAuto || cOpts.max === undefined) {
          replace(cont, cbOpt.max);
        }

        if (cOpts.autocolorscale) {
          replace(cont, 'colorscale');
        }
      }
    }
  }

  for (var i = 0; i < fullData.length; i++) {
    var trace = fullData[i];
    var cbOpts = trace._module.colorbar;

    if (cbOpts) {
      if (Array.isArray(cbOpts)) {
        for (var j = 0; j < cbOpts.length; j++) {
          relinkColorAttrs(trace, cbOpts[j]);
        }
      } else {
        relinkColorAttrs(trace, cbOpts);
      }
    }

    if (hasColorscale$3(trace, 'marker.line')) {
      relinkColorAttrs(trace, {
        container: 'marker.line',
        min: 'cmin',
        max: 'cmax'
      });
    }
  }

  for (var k in fullLayout._colorAxes) {
    relinkColorAttrs(fullLayout[k], {
      min: 'cmin',
      max: 'cmax'
    });
  }
};

var extractOpts$1 = helpers$a.extractOpts;

var calc$3 = function calc(gd, trace, opts) {
  var fullLayout = gd._fullLayout;
  var vals = opts.vals;
  var containerStr = opts.containerStr;
  var container = containerStr ? lib_1.nestedProperty(trace, containerStr).get() : trace;
  var cOpts = extractOpts$1(container);
  var auto = cOpts.auto !== false;
  var min = cOpts.min;
  var max = cOpts.max;
  var mid = cOpts.mid;

  var minVal = function () {
    return lib_1.aggNums(Math.min, null, vals);
  };

  var maxVal = function () {
    return lib_1.aggNums(Math.max, null, vals);
  };

  if (min === undefined) {
    min = minVal();
  } else if (auto) {
    if (container._colorAx && fastIsnumeric(min)) {
      min = Math.min(min, minVal());
    } else {
      min = minVal();
    }
  }

  if (max === undefined) {
    max = maxVal();
  } else if (auto) {
    if (container._colorAx && fastIsnumeric(max)) {
      max = Math.max(max, maxVal());
    } else {
      max = maxVal();
    }
  }

  if (auto && mid !== undefined) {
    if (max - mid > mid - min) {
      min = mid - (max - mid);
    } else if (max - mid < mid - min) {
      max = mid + (mid - min);
    }
  }

  if (min === max) {
    min -= 0.5;
    max += 0.5;
  }

  cOpts._sync('min', min);

  cOpts._sync('max', max);

  if (cOpts.autocolorscale) {
    var scl;
    if (min * max < 0) scl = fullLayout.colorscale.diverging;else if (min >= 0) scl = fullLayout.colorscale.sequential;else scl = fullLayout.colorscale.sequentialminus;

    cOpts._sync('colorscale', scl);
  }
};

var colorscale = {
  moduleType: 'component',
  name: 'colorscale',
  attributes: attributes$f,
  layoutAttributes: layout_attributes,
  supplyLayoutDefaults: layout_defaults$2,
  handleDefaults: defaults$f,
  crossTraceDefaults: cross_trace_defaults$1,
  calc: calc$3,
  // ./scales.js is required in lib/coerce.js ;
  // it needs to be a separate module to avoid circular a dependency
  scales: scales_1.scales,
  defaultScale: scales_1.defaultScale,
  getScale: scales_1.get,
  isValidScale: scales_1.isValid,
  hasColorscale: helpers$a.hasColorscale,
  extractOpts: helpers$a.extractOpts,
  extractScale: helpers$a.extractScale,
  flipScale: helpers$a.flipScale,
  makeColorScaleFunc: helpers$a.makeColorScaleFunc,
  makeColorScaleFuncFromTrace: helpers$a.makeColorScaleFuncFromTrace
};

var subtypes = {
  hasLines: function (trace) {
    return trace.visible && trace.mode && trace.mode.indexOf('lines') !== -1;
  },
  hasMarkers: function (trace) {
    return trace.visible && (trace.mode && trace.mode.indexOf('markers') !== -1 || // until splom implements 'mode'
    trace.type === 'splom');
  },
  hasText: function (trace) {
    return trace.visible && trace.mode && trace.mode.indexOf('text') !== -1;
  },
  isBubble: function (trace) {
    return lib_1.isPlainObject(trace.marker) && lib_1.isArrayOrTypedArray(trace.marker.size);
  }
};

// in the convert step for 'scatter3d'


var make_bubble_size_func = function makeBubbleSizeFn(trace, factor) {
  if (!factor) {
    factor = 2;
  }

  var marker = trace.marker;
  var sizeRef = marker.sizeref || 1;
  var sizeMin = marker.sizemin || 0; // for bubble charts, allow scaling the provided value linearly
  // and by area or diameter.
  // Note this only applies to the array-value sizes

  var baseFn = marker.sizemode === 'area' ? function (v) {
    return Math.sqrt(v / sizeRef);
  } : function (v) {
    return v / sizeRef;
  }; // TODO add support for position/negative bubbles?
  // TODO add 'sizeoffset' attribute?

  return function (v) {
    var baseSize = baseFn(v / factor); // don't show non-numeric and negative sizes

    return fastIsnumeric(baseSize) && baseSize > 0 ? Math.max(baseSize, sizeMin) : 0;
  };
};

var helpers$9 = createCommonjsModule(function (module, exports) {
  // does not handle splom case

  exports.getSubplot = function (trace) {
    return trace.subplot || trace.xaxis + trace.yaxis || trace.geo;
  }; // is trace in given list of subplots?
  // does handle splom case


  exports.isTraceInSubplots = function (trace, subplots) {
    if (trace.type === 'splom') {
      var xaxes = trace.xaxes || [];
      var yaxes = trace.yaxes || [];

      for (var i = 0; i < xaxes.length; i++) {
        for (var j = 0; j < yaxes.length; j++) {
          if (subplots.indexOf(xaxes[i] + yaxes[j]) !== -1) {
            return true;
          }
        }
      }

      return false;
    }

    return subplots.indexOf(exports.getSubplot(trace)) !== -1;
  }; // convenience functions for mapping all relevant axes


  exports.flat = function (subplots, v) {
    var out = new Array(subplots.length);

    for (var i = 0; i < subplots.length; i++) {
      out[i] = v;
    }

    return out;
  };

  exports.p2c = function (axArray, v) {
    var out = new Array(axArray.length);

    for (var i = 0; i < axArray.length; i++) {
      out[i] = axArray[i].p2c(v);
    }

    return out;
  };

  exports.getDistanceFunction = function (mode, dx, dy, dxy) {
    if (mode === 'closest') return dxy || exports.quadrature(dx, dy);
    return mode.charAt(0) === 'x' ? dx : dy;
  };

  exports.getClosest = function (cd, distfn, pointData) {
    // do we already have a point number? (array mode only)
    if (pointData.index !== false) {
      if (pointData.index >= 0 && pointData.index < cd.length) {
        pointData.distance = 0;
      } else pointData.index = false;
    } else {
      // apply the distance function to each data point
      // this is the longest loop... if this bogs down, we may need
      // to create pre-sorted data (by x or y), not sure how to
      // do this for 'closest'
      for (var i = 0; i < cd.length; i++) {
        var newDistance = distfn(cd[i]);

        if (newDistance <= pointData.distance) {
          pointData.index = i;
          pointData.distance = newDistance;
        }
      }
    }

    return pointData;
  };
  /*
   * pseudo-distance function for hover effects on areas: inside the region
   * distance is finite (`passVal`), outside it's Infinity.
   *
   * @param {number} v0: signed difference between the current position and the left edge
   * @param {number} v1: signed difference between the current position and the right edge
   * @param {number} passVal: the value to return on success
   */


  exports.inbox = function (v0, v1, passVal) {
    return v0 * v1 < 0 || v0 === 0 ? passVal : Infinity;
  };

  exports.quadrature = function (dx, dy) {
    return function (di) {
      var x = dx(di);
      var y = dy(di);
      return Math.sqrt(x * x + y * y);
    };
  };
  /** Fill event data point object for hover and selection.
   *  Invokes _module.eventData if present.
   *
   * N.B. note that point 'index' corresponds to input data array index
   *  whereas 'number' is its post-transform version.
   *
   * If the hovered/selected pt corresponds to an multiple input points
   * (e.g. for histogram and transformed traces), 'pointNumbers` and 'pointIndices'
   * are include in the event data.
   *
   * @param {object} pt
   * @param {object} trace
   * @param {object} cd
   * @return {object}
   */


  exports.makeEventData = function (pt, trace, cd) {
    // hover uses 'index', select uses 'pointNumber'
    var pointNumber = 'index' in pt ? pt.index : pt.pointNumber;
    var out = {
      data: trace._input,
      fullData: trace,
      curveNumber: trace.index,
      pointNumber: pointNumber
    };

    if (trace._indexToPoints) {
      var pointIndices = trace._indexToPoints[pointNumber];

      if (pointIndices.length === 1) {
        out.pointIndex = pointIndices[0];
      } else {
        out.pointIndices = pointIndices;
      }
    } else {
      out.pointIndex = pointNumber;
    }

    if (trace._module.eventData) {
      out = trace._module.eventData(out, pt, trace, cd, pointNumber);
    } else {
      if ('xVal' in pt) out.x = pt.xVal;else if ('x' in pt) out.x = pt.x;
      if ('yVal' in pt) out.y = pt.yVal;else if ('y' in pt) out.y = pt.y;
      if (pt.xa) out.xaxis = pt.xa;
      if (pt.ya) out.yaxis = pt.ya;
      if (pt.zLabelVal !== undefined) out.z = pt.zLabelVal;
    }

    exports.appendArrayPointValue(out, trace, pointNumber);
    return out;
  };
  /** Appends values inside array attributes corresponding to given point number
   *
   * @param {object} pointData : point data object (gets mutated here)
   * @param {object} trace : full trace object
   * @param {number|Array(number)} pointNumber : point number. May be a length-2 array
   *     [row, col] to dig into 2D arrays
   */


  exports.appendArrayPointValue = function (pointData, trace, pointNumber) {
    var arrayAttrs = trace._arrayAttrs;

    if (!arrayAttrs) {
      return;
    }

    for (var i = 0; i < arrayAttrs.length; i++) {
      var astr = arrayAttrs[i];
      var key = getPointKey(astr);

      if (pointData[key] === undefined) {
        var val = lib_1.nestedProperty(trace, astr).get();
        var pointVal = getPointData(val, pointNumber);
        if (pointVal !== undefined) pointData[key] = pointVal;
      }
    }
  };
  /**
   * Appends values inside array attributes corresponding to given point number array
   * For use when pointData references a plot entity that arose (or potentially arose)
   * from multiple points in the input data
   *
   * @param {object} pointData : point data object (gets mutated here)
   * @param {object} trace : full trace object
   * @param {Array(number)|Array(Array(number))} pointNumbers : Array of point numbers.
   *     Each entry in the array may itself be a length-2 array [row, col] to dig into 2D arrays
   */


  exports.appendArrayMultiPointValues = function (pointData, trace, pointNumbers) {
    var arrayAttrs = trace._arrayAttrs;

    if (!arrayAttrs) {
      return;
    }

    for (var i = 0; i < arrayAttrs.length; i++) {
      var astr = arrayAttrs[i];
      var key = getPointKey(astr);

      if (pointData[key] === undefined) {
        var val = lib_1.nestedProperty(trace, astr).get();
        var keyVal = new Array(pointNumbers.length);

        for (var j = 0; j < pointNumbers.length; j++) {
          keyVal[j] = getPointData(val, pointNumbers[j]);
        }

        pointData[key] = keyVal;
      }
    }
  };

  var pointKeyMap = {
    ids: 'id',
    locations: 'location',
    labels: 'label',
    values: 'value',
    'marker.colors': 'color',
    parents: 'parent'
  };

  function getPointKey(astr) {
    return pointKeyMap[astr] || astr;
  }

  function getPointData(val, pointNumber) {
    if (Array.isArray(pointNumber)) {
      if (Array.isArray(val) && Array.isArray(val[pointNumber[0]])) {
        return val[pointNumber[0]][pointNumber[1]];
      }
    } else {
      return val[pointNumber];
    }
  }

  var xyHoverMode = {
    x: true,
    y: true
  };
  var unifiedHoverMode = {
    'x unified': true,
    'y unified': true
  };

  exports.isUnifiedHover = function (hovermode) {
    if (typeof hovermode !== 'string') return false;
    return !!unifiedHoverMode[hovermode];
  };

  exports.isXYhover = function (hovermode) {
    if (typeof hovermode !== 'string') return false;
    return !!xyHoverMode[hovermode];
  };
});

/** Marker symbol definitions
 * users can specify markers either by number or name
 * add 100 (or '-open') and you get an open marker
 *  open markers have no fill and use line color as the stroke color
 * add 200 (or '-dot') and you get a dot in the middle
 * add both and you get both
 */


var symbol_defs = {
  circle: {
    n: 0,
    f: function (r) {
      var rs = d3.round(r, 2);
      return 'M' + rs + ',0A' + rs + ',' + rs + ' 0 1,1 0,-' + rs + 'A' + rs + ',' + rs + ' 0 0,1 ' + rs + ',0Z';
    }
  },
  square: {
    n: 1,
    f: function (r) {
      var rs = d3.round(r, 2);
      return 'M' + rs + ',' + rs + 'H-' + rs + 'V-' + rs + 'H' + rs + 'Z';
    }
  },
  diamond: {
    n: 2,
    f: function (r) {
      var rd = d3.round(r * 1.3, 2);
      return 'M' + rd + ',0L0,' + rd + 'L-' + rd + ',0L0,-' + rd + 'Z';
    }
  },
  cross: {
    n: 3,
    f: function (r) {
      var rc = d3.round(r * 0.4, 2);
      var rc2 = d3.round(r * 1.2, 2);
      return 'M' + rc2 + ',' + rc + 'H' + rc + 'V' + rc2 + 'H-' + rc + 'V' + rc + 'H-' + rc2 + 'V-' + rc + 'H-' + rc + 'V-' + rc2 + 'H' + rc + 'V-' + rc + 'H' + rc2 + 'Z';
    }
  },
  x: {
    n: 4,
    f: function (r) {
      var rx = d3.round(r * 0.8 / Math.sqrt(2), 2);
      var ne = 'l' + rx + ',' + rx;
      var se = 'l' + rx + ',-' + rx;
      var sw = 'l-' + rx + ',-' + rx;
      var nw = 'l-' + rx + ',' + rx;
      return 'M0,' + rx + ne + se + sw + se + sw + nw + sw + nw + ne + nw + ne + 'Z';
    }
  },
  'triangle-up': {
    n: 5,
    f: function (r) {
      var rt = d3.round(r * 2 / Math.sqrt(3), 2);
      var r2 = d3.round(r / 2, 2);
      var rs = d3.round(r, 2);
      return 'M-' + rt + ',' + r2 + 'H' + rt + 'L0,-' + rs + 'Z';
    }
  },
  'triangle-down': {
    n: 6,
    f: function (r) {
      var rt = d3.round(r * 2 / Math.sqrt(3), 2);
      var r2 = d3.round(r / 2, 2);
      var rs = d3.round(r, 2);
      return 'M-' + rt + ',-' + r2 + 'H' + rt + 'L0,' + rs + 'Z';
    }
  },
  'triangle-left': {
    n: 7,
    f: function (r) {
      var rt = d3.round(r * 2 / Math.sqrt(3), 2);
      var r2 = d3.round(r / 2, 2);
      var rs = d3.round(r, 2);
      return 'M' + r2 + ',-' + rt + 'V' + rt + 'L-' + rs + ',0Z';
    }
  },
  'triangle-right': {
    n: 8,
    f: function (r) {
      var rt = d3.round(r * 2 / Math.sqrt(3), 2);
      var r2 = d3.round(r / 2, 2);
      var rs = d3.round(r, 2);
      return 'M-' + r2 + ',-' + rt + 'V' + rt + 'L' + rs + ',0Z';
    }
  },
  'triangle-ne': {
    n: 9,
    f: function (r) {
      var r1 = d3.round(r * 0.6, 2);
      var r2 = d3.round(r * 1.2, 2);
      return 'M-' + r2 + ',-' + r1 + 'H' + r1 + 'V' + r2 + 'Z';
    }
  },
  'triangle-se': {
    n: 10,
    f: function (r) {
      var r1 = d3.round(r * 0.6, 2);
      var r2 = d3.round(r * 1.2, 2);
      return 'M' + r1 + ',-' + r2 + 'V' + r1 + 'H-' + r2 + 'Z';
    }
  },
  'triangle-sw': {
    n: 11,
    f: function (r) {
      var r1 = d3.round(r * 0.6, 2);
      var r2 = d3.round(r * 1.2, 2);
      return 'M' + r2 + ',' + r1 + 'H-' + r1 + 'V-' + r2 + 'Z';
    }
  },
  'triangle-nw': {
    n: 12,
    f: function (r) {
      var r1 = d3.round(r * 0.6, 2);
      var r2 = d3.round(r * 1.2, 2);
      return 'M-' + r1 + ',' + r2 + 'V-' + r1 + 'H' + r2 + 'Z';
    }
  },
  pentagon: {
    n: 13,
    f: function (r) {
      var x1 = d3.round(r * 0.951, 2);
      var x2 = d3.round(r * 0.588, 2);
      var y0 = d3.round(-r, 2);
      var y1 = d3.round(r * -0.309, 2);
      var y2 = d3.round(r * 0.809, 2);
      return 'M' + x1 + ',' + y1 + 'L' + x2 + ',' + y2 + 'H-' + x2 + 'L-' + x1 + ',' + y1 + 'L0,' + y0 + 'Z';
    }
  },
  hexagon: {
    n: 14,
    f: function (r) {
      var y0 = d3.round(r, 2);
      var y1 = d3.round(r / 2, 2);
      var x = d3.round(r * Math.sqrt(3) / 2, 2);
      return 'M' + x + ',-' + y1 + 'V' + y1 + 'L0,' + y0 + 'L-' + x + ',' + y1 + 'V-' + y1 + 'L0,-' + y0 + 'Z';
    }
  },
  hexagon2: {
    n: 15,
    f: function (r) {
      var x0 = d3.round(r, 2);
      var x1 = d3.round(r / 2, 2);
      var y = d3.round(r * Math.sqrt(3) / 2, 2);
      return 'M-' + x1 + ',' + y + 'H' + x1 + 'L' + x0 + ',0L' + x1 + ',-' + y + 'H-' + x1 + 'L-' + x0 + ',0Z';
    }
  },
  octagon: {
    n: 16,
    f: function (r) {
      var a = d3.round(r * 0.924, 2);
      var b = d3.round(r * 0.383, 2);
      return 'M-' + b + ',-' + a + 'H' + b + 'L' + a + ',-' + b + 'V' + b + 'L' + b + ',' + a + 'H-' + b + 'L-' + a + ',' + b + 'V-' + b + 'Z';
    }
  },
  star: {
    n: 17,
    f: function (r) {
      var rs = r * 1.4;
      var x1 = d3.round(rs * 0.225, 2);
      var x2 = d3.round(rs * 0.951, 2);
      var x3 = d3.round(rs * 0.363, 2);
      var x4 = d3.round(rs * 0.588, 2);
      var y0 = d3.round(-rs, 2);
      var y1 = d3.round(rs * -0.309, 2);
      var y3 = d3.round(rs * 0.118, 2);
      var y4 = d3.round(rs * 0.809, 2);
      var y5 = d3.round(rs * 0.382, 2);
      return 'M' + x1 + ',' + y1 + 'H' + x2 + 'L' + x3 + ',' + y3 + 'L' + x4 + ',' + y4 + 'L0,' + y5 + 'L-' + x4 + ',' + y4 + 'L-' + x3 + ',' + y3 + 'L-' + x2 + ',' + y1 + 'H-' + x1 + 'L0,' + y0 + 'Z';
    }
  },
  hexagram: {
    n: 18,
    f: function (r) {
      var y = d3.round(r * 0.66, 2);
      var x1 = d3.round(r * 0.38, 2);
      var x2 = d3.round(r * 0.76, 2);
      return 'M-' + x2 + ',0l-' + x1 + ',-' + y + 'h' + x2 + 'l' + x1 + ',-' + y + 'l' + x1 + ',' + y + 'h' + x2 + 'l-' + x1 + ',' + y + 'l' + x1 + ',' + y + 'h-' + x2 + 'l-' + x1 + ',' + y + 'l-' + x1 + ',-' + y + 'h-' + x2 + 'Z';
    }
  },
  'star-triangle-up': {
    n: 19,
    f: function (r) {
      var x = d3.round(r * Math.sqrt(3) * 0.8, 2);
      var y1 = d3.round(r * 0.8, 2);
      var y2 = d3.round(r * 1.6, 2);
      var rc = d3.round(r * 4, 2);
      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';
      return 'M-' + x + ',' + y1 + aPart + x + ',' + y1 + aPart + '0,-' + y2 + aPart + '-' + x + ',' + y1 + 'Z';
    }
  },
  'star-triangle-down': {
    n: 20,
    f: function (r) {
      var x = d3.round(r * Math.sqrt(3) * 0.8, 2);
      var y1 = d3.round(r * 0.8, 2);
      var y2 = d3.round(r * 1.6, 2);
      var rc = d3.round(r * 4, 2);
      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';
      return 'M' + x + ',-' + y1 + aPart + '-' + x + ',-' + y1 + aPart + '0,' + y2 + aPart + x + ',-' + y1 + 'Z';
    }
  },
  'star-square': {
    n: 21,
    f: function (r) {
      var rp = d3.round(r * 1.1, 2);
      var rc = d3.round(r * 2, 2);
      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';
      return 'M-' + rp + ',-' + rp + aPart + '-' + rp + ',' + rp + aPart + rp + ',' + rp + aPart + rp + ',-' + rp + aPart + '-' + rp + ',-' + rp + 'Z';
    }
  },
  'star-diamond': {
    n: 22,
    f: function (r) {
      var rp = d3.round(r * 1.4, 2);
      var rc = d3.round(r * 1.9, 2);
      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';
      return 'M-' + rp + ',0' + aPart + '0,' + rp + aPart + rp + ',0' + aPart + '0,-' + rp + aPart + '-' + rp + ',0' + 'Z';
    }
  },
  'diamond-tall': {
    n: 23,
    f: function (r) {
      var x = d3.round(r * 0.7, 2);
      var y = d3.round(r * 1.4, 2);
      return 'M0,' + y + 'L' + x + ',0L0,-' + y + 'L-' + x + ',0Z';
    }
  },
  'diamond-wide': {
    n: 24,
    f: function (r) {
      var x = d3.round(r * 1.4, 2);
      var y = d3.round(r * 0.7, 2);
      return 'M0,' + y + 'L' + x + ',0L0,-' + y + 'L-' + x + ',0Z';
    }
  },
  hourglass: {
    n: 25,
    f: function (r) {
      var rs = d3.round(r, 2);
      return 'M' + rs + ',' + rs + 'H-' + rs + 'L' + rs + ',-' + rs + 'H-' + rs + 'Z';
    },
    noDot: true
  },
  bowtie: {
    n: 26,
    f: function (r) {
      var rs = d3.round(r, 2);
      return 'M' + rs + ',' + rs + 'V-' + rs + 'L-' + rs + ',' + rs + 'V-' + rs + 'Z';
    },
    noDot: true
  },
  'circle-cross': {
    n: 27,
    f: function (r) {
      var rs = d3.round(r, 2);
      return 'M0,' + rs + 'V-' + rs + 'M' + rs + ',0H-' + rs + 'M' + rs + ',0A' + rs + ',' + rs + ' 0 1,1 0,-' + rs + 'A' + rs + ',' + rs + ' 0 0,1 ' + rs + ',0Z';
    },
    needLine: true,
    noDot: true
  },
  'circle-x': {
    n: 28,
    f: function (r) {
      var rs = d3.round(r, 2);
      var rc = d3.round(r / Math.sqrt(2), 2);
      return 'M' + rc + ',' + rc + 'L-' + rc + ',-' + rc + 'M' + rc + ',-' + rc + 'L-' + rc + ',' + rc + 'M' + rs + ',0A' + rs + ',' + rs + ' 0 1,1 0,-' + rs + 'A' + rs + ',' + rs + ' 0 0,1 ' + rs + ',0Z';
    },
    needLine: true,
    noDot: true
  },
  'square-cross': {
    n: 29,
    f: function (r) {
      var rs = d3.round(r, 2);
      return 'M0,' + rs + 'V-' + rs + 'M' + rs + ',0H-' + rs + 'M' + rs + ',' + rs + 'H-' + rs + 'V-' + rs + 'H' + rs + 'Z';
    },
    needLine: true,
    noDot: true
  },
  'square-x': {
    n: 30,
    f: function (r) {
      var rs = d3.round(r, 2);
      return 'M' + rs + ',' + rs + 'L-' + rs + ',-' + rs + 'M' + rs + ',-' + rs + 'L-' + rs + ',' + rs + 'M' + rs + ',' + rs + 'H-' + rs + 'V-' + rs + 'H' + rs + 'Z';
    },
    needLine: true,
    noDot: true
  },
  'diamond-cross': {
    n: 31,
    f: function (r) {
      var rd = d3.round(r * 1.3, 2);
      return 'M' + rd + ',0L0,' + rd + 'L-' + rd + ',0L0,-' + rd + 'Z' + 'M0,-' + rd + 'V' + rd + 'M-' + rd + ',0H' + rd;
    },
    needLine: true,
    noDot: true
  },
  'diamond-x': {
    n: 32,
    f: function (r) {
      var rd = d3.round(r * 1.3, 2);
      var r2 = d3.round(r * 0.65, 2);
      return 'M' + rd + ',0L0,' + rd + 'L-' + rd + ',0L0,-' + rd + 'Z' + 'M-' + r2 + ',-' + r2 + 'L' + r2 + ',' + r2 + 'M-' + r2 + ',' + r2 + 'L' + r2 + ',-' + r2;
    },
    needLine: true,
    noDot: true
  },
  'cross-thin': {
    n: 33,
    f: function (r) {
      var rc = d3.round(r * 1.4, 2);
      return 'M0,' + rc + 'V-' + rc + 'M' + rc + ',0H-' + rc;
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'x-thin': {
    n: 34,
    f: function (r) {
      var rx = d3.round(r, 2);
      return 'M' + rx + ',' + rx + 'L-' + rx + ',-' + rx + 'M' + rx + ',-' + rx + 'L-' + rx + ',' + rx;
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  asterisk: {
    n: 35,
    f: function (r) {
      var rc = d3.round(r * 1.2, 2);
      var rs = d3.round(r * 0.85, 2);
      return 'M0,' + rc + 'V-' + rc + 'M' + rc + ',0H-' + rc + 'M' + rs + ',' + rs + 'L-' + rs + ',-' + rs + 'M' + rs + ',-' + rs + 'L-' + rs + ',' + rs;
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  hash: {
    n: 36,
    f: function (r) {
      var r1 = d3.round(r / 2, 2);
      var r2 = d3.round(r, 2);
      return 'M' + r1 + ',' + r2 + 'V-' + r2 + 'm-' + r2 + ',0V' + r2 + 'M' + r2 + ',' + r1 + 'H-' + r2 + 'm0,-' + r2 + 'H' + r2;
    },
    needLine: true,
    noFill: true
  },
  'y-up': {
    n: 37,
    f: function (r) {
      var x = d3.round(r * 1.2, 2);
      var y0 = d3.round(r * 1.6, 2);
      var y1 = d3.round(r * 0.8, 2);
      return 'M-' + x + ',' + y1 + 'L0,0M' + x + ',' + y1 + 'L0,0M0,-' + y0 + 'L0,0';
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'y-down': {
    n: 38,
    f: function (r) {
      var x = d3.round(r * 1.2, 2);
      var y0 = d3.round(r * 1.6, 2);
      var y1 = d3.round(r * 0.8, 2);
      return 'M-' + x + ',-' + y1 + 'L0,0M' + x + ',-' + y1 + 'L0,0M0,' + y0 + 'L0,0';
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'y-left': {
    n: 39,
    f: function (r) {
      var y = d3.round(r * 1.2, 2);
      var x0 = d3.round(r * 1.6, 2);
      var x1 = d3.round(r * 0.8, 2);
      return 'M' + x1 + ',' + y + 'L0,0M' + x1 + ',-' + y + 'L0,0M-' + x0 + ',0L0,0';
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'y-right': {
    n: 40,
    f: function (r) {
      var y = d3.round(r * 1.2, 2);
      var x0 = d3.round(r * 1.6, 2);
      var x1 = d3.round(r * 0.8, 2);
      return 'M-' + x1 + ',' + y + 'L0,0M-' + x1 + ',-' + y + 'L0,0M' + x0 + ',0L0,0';
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'line-ew': {
    n: 41,
    f: function (r) {
      var rc = d3.round(r * 1.4, 2);
      return 'M' + rc + ',0H-' + rc;
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'line-ns': {
    n: 42,
    f: function (r) {
      var rc = d3.round(r * 1.4, 2);
      return 'M0,' + rc + 'V-' + rc;
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'line-ne': {
    n: 43,
    f: function (r) {
      var rx = d3.round(r, 2);
      return 'M' + rx + ',-' + rx + 'L-' + rx + ',' + rx;
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'line-nw': {
    n: 44,
    f: function (r) {
      var rx = d3.round(r, 2);
      return 'M' + rx + ',' + rx + 'L-' + rx + ',-' + rx;
    },
    needLine: true,
    noDot: true,
    noFill: true
  },
  'arrow-up': {
    n: 45,
    f: function (r) {
      var rx = d3.round(r, 2);
      var ry = d3.round(r * 2, 2);
      return 'M0,0L-' + rx + ',' + ry + 'H' + rx + 'Z';
    },
    noDot: true
  },
  'arrow-down': {
    n: 46,
    f: function (r) {
      var rx = d3.round(r, 2);
      var ry = d3.round(r * 2, 2);
      return 'M0,0L-' + rx + ',-' + ry + 'H' + rx + 'Z';
    },
    noDot: true
  },
  'arrow-left': {
    n: 47,
    f: function (r) {
      var rx = d3.round(r * 2, 2);
      var ry = d3.round(r, 2);
      return 'M0,0L' + rx + ',-' + ry + 'V' + ry + 'Z';
    },
    noDot: true
  },
  'arrow-right': {
    n: 48,
    f: function (r) {
      var rx = d3.round(r * 2, 2);
      var ry = d3.round(r, 2);
      return 'M0,0L-' + rx + ',-' + ry + 'V' + ry + 'Z';
    },
    noDot: true
  },
  'arrow-bar-up': {
    n: 49,
    f: function (r) {
      var rx = d3.round(r, 2);
      var ry = d3.round(r * 2, 2);
      return 'M-' + rx + ',0H' + rx + 'M0,0L-' + rx + ',' + ry + 'H' + rx + 'Z';
    },
    needLine: true,
    noDot: true
  },
  'arrow-bar-down': {
    n: 50,
    f: function (r) {
      var rx = d3.round(r, 2);
      var ry = d3.round(r * 2, 2);
      return 'M-' + rx + ',0H' + rx + 'M0,0L-' + rx + ',-' + ry + 'H' + rx + 'Z';
    },
    needLine: true,
    noDot: true
  },
  'arrow-bar-left': {
    n: 51,
    f: function (r) {
      var rx = d3.round(r * 2, 2);
      var ry = d3.round(r, 2);
      return 'M0,-' + ry + 'V' + ry + 'M0,0L' + rx + ',-' + ry + 'V' + ry + 'Z';
    },
    needLine: true,
    noDot: true
  },
  'arrow-bar-right': {
    n: 52,
    f: function (r) {
      var rx = d3.round(r * 2, 2);
      var ry = d3.round(r, 2);
      return 'M0,-' + ry + 'V' + ry + 'M0,0L-' + rx + ',-' + ry + 'V' + ry + 'Z';
    },
    needLine: true,
    noDot: true
  }
};

var drawing_1 = createCommonjsModule(function (module) {

  var numberFormat = lib_1.numberFormat;
  var strTranslate = lib_1.strTranslate;
  var LINE_SPACING = alignment.LINE_SPACING;
  var DESELECTDIM = interactions.DESELECTDIM;
  var appendArrayPointValue = helpers$9.appendArrayPointValue;
  var drawing = module.exports = {}; // -----------------------------------------------------
  // styling functions for plot elements
  // -----------------------------------------------------

  drawing.font = function (s, family, size, color) {
    // also allow the form font(s, {family, size, color})
    if (lib_1.isPlainObject(family)) {
      color = family.color;
      size = family.size;
      family = family.family;
    }

    if (family) s.style('font-family', family);
    if (size + 1) s.style('font-size', size + 'px');
    if (color) s.call(color_1.fill, color);
  };
  /*
   * Positioning helpers
   * Note: do not use `setPosition` with <text> nodes modified by
   * `svgTextUtils.convertToTspans`. Use `svgTextUtils.positionText`
   * instead, so that <tspan.line> elements get updated to match.
   */


  drawing.setPosition = function (s, x, y) {
    s.attr('x', x).attr('y', y);
  };

  drawing.setSize = function (s, w, h) {
    s.attr('width', w).attr('height', h);
  };

  drawing.setRect = function (s, x, y, w, h) {
    s.call(drawing.setPosition, x, y).call(drawing.setSize, w, h);
  };
  /** Translate node
   *
   * @param {object} d : calcdata point item
   * @param {sel} sel : d3 selction of node to translate
   * @param {object} xa : corresponding full xaxis object
   * @param {object} ya : corresponding full yaxis object
   *
   * @return {boolean} :
   *  true if selection got translated
   *  false if selection could not get translated
   */


  drawing.translatePoint = function (d, sel, xa, ya) {
    var x = xa.c2p(d.x);
    var y = ya.c2p(d.y);

    if (fastIsnumeric(x) && fastIsnumeric(y) && sel.node()) {
      // for multiline text this works better
      if (sel.node().nodeName === 'text') {
        sel.attr('x', x).attr('y', y);
      } else {
        sel.attr('transform', strTranslate(x, y));
      }
    } else {
      return false;
    }

    return true;
  };

  drawing.translatePoints = function (s, xa, ya) {
    s.each(function (d) {
      var sel = d3.select(this);
      drawing.translatePoint(d, sel, xa, ya);
    });
  };

  drawing.hideOutsideRangePoint = function (d, sel, xa, ya, xcalendar, ycalendar) {
    sel.attr('display', xa.isPtWithinRange(d, xcalendar) && ya.isPtWithinRange(d, ycalendar) ? null : 'none');
  };

  drawing.hideOutsideRangePoints = function (traceGroups, subplot) {
    if (!subplot._hasClipOnAxisFalse) return;
    var xa = subplot.xaxis;
    var ya = subplot.yaxis;
    traceGroups.each(function (d) {
      var trace = d[0].trace;
      var xcalendar = trace.xcalendar;
      var ycalendar = trace.ycalendar;
      var selector = registry.traceIs(trace, 'bar-like') ? '.bartext' : '.point,.textpoint';
      traceGroups.selectAll(selector).each(function (d) {
        drawing.hideOutsideRangePoint(d, d3.select(this), xa, ya, xcalendar, ycalendar);
      });
    });
  };

  drawing.crispRound = function (gd, lineWidth, dflt) {
    // for lines that disable antialiasing we want to
    // make sure the width is an integer, and at least 1 if it's nonzero
    if (!lineWidth || !fastIsnumeric(lineWidth)) return dflt || 0; // but not for static plots - these don't get antialiased anyway.

    if (gd._context.staticPlot) return lineWidth;
    if (lineWidth < 1) return 1;
    return Math.round(lineWidth);
  };

  drawing.singleLineStyle = function (d, s, lw, lc, ld) {
    s.style('fill', 'none');
    var line = (((d || [])[0] || {}).trace || {}).line || {};
    var lw1 = lw || line.width || 0;
    var dash = ld || line.dash || '';
    color_1.stroke(s, lc || line.color);
    drawing.dashLine(s, dash, lw1);
  };

  drawing.lineGroupStyle = function (s, lw, lc, ld) {
    s.style('fill', 'none').each(function (d) {
      var line = (((d || [])[0] || {}).trace || {}).line || {};
      var lw1 = lw || line.width || 0;
      var dash = ld || line.dash || '';
      d3.select(this).call(color_1.stroke, lc || line.color).call(drawing.dashLine, dash, lw1);
    });
  };

  drawing.dashLine = function (s, dash, lineWidth) {
    lineWidth = +lineWidth || 0;
    dash = drawing.dashStyle(dash, lineWidth);
    s.style({
      'stroke-dasharray': dash,
      'stroke-width': lineWidth + 'px'
    });
  };

  drawing.dashStyle = function (dash, lineWidth) {
    lineWidth = +lineWidth || 1;
    var dlw = Math.max(lineWidth, 3);
    if (dash === 'solid') dash = '';else if (dash === 'dot') dash = dlw + 'px,' + dlw + 'px';else if (dash === 'dash') dash = 3 * dlw + 'px,' + 3 * dlw + 'px';else if (dash === 'longdash') dash = 5 * dlw + 'px,' + 5 * dlw + 'px';else if (dash === 'dashdot') {
      dash = 3 * dlw + 'px,' + dlw + 'px,' + dlw + 'px,' + dlw + 'px';
    } else if (dash === 'longdashdot') {
      dash = 5 * dlw + 'px,' + 2 * dlw + 'px,' + dlw + 'px,' + 2 * dlw + 'px';
    } // otherwise user wrote the dasharray themselves - leave it be

    return dash;
  };

  function setFillStyle(sel, trace, gd) {
    var markerPattern = trace.fillpattern;
    var patternShape = markerPattern && drawing.getPatternAttr(markerPattern.shape, 0, '');

    if (patternShape) {
      var patternBGColor = drawing.getPatternAttr(markerPattern.bgcolor, 0, null);
      var patternFGColor = drawing.getPatternAttr(markerPattern.fgcolor, 0, null);
      var patternFGOpacity = markerPattern.fgopacity;
      var patternSize = drawing.getPatternAttr(markerPattern.size, 0, 8);
      var patternSolidity = drawing.getPatternAttr(markerPattern.solidity, 0, 0.3);
      var patternID = trace.uid;
      drawing.pattern(sel, 'point', gd, patternID, patternShape, patternSize, patternSolidity, undefined, markerPattern.fillmode, patternBGColor, patternFGColor, patternFGOpacity);
    } else if (trace.fillcolor) {
      sel.call(color_1.fill, trace.fillcolor);
    }
  } // Same as fillGroupStyle, except in this case the selection may be a transition


  drawing.singleFillStyle = function (sel, gd) {
    var node = d3.select(sel.node());
    var data = node.data();
    var trace = ((data[0] || [])[0] || {}).trace || {};
    setFillStyle(sel, trace, gd);
  };

  drawing.fillGroupStyle = function (s, gd) {
    s.style('stroke-width', 0).each(function (d) {
      var shape = d3.select(this); // N.B. 'd' won't be a calcdata item when
      // fill !== 'none' on a segment-less and marker-less trace

      if (d[0].trace) {
        setFillStyle(shape, d[0].trace, gd);
      }
    });
  };

  drawing.symbolNames = [];
  drawing.symbolFuncs = [];
  drawing.symbolNeedLines = {};
  drawing.symbolNoDot = {};
  drawing.symbolNoFill = {};
  drawing.symbolList = [];
  Object.keys(symbol_defs).forEach(function (k) {
    var symDef = symbol_defs[k];
    var n = symDef.n;
    drawing.symbolList.push(n, String(n), k, n + 100, String(n + 100), k + '-open');
    drawing.symbolNames[n] = k;
    drawing.symbolFuncs[n] = symDef.f;

    if (symDef.needLine) {
      drawing.symbolNeedLines[n] = true;
    }

    if (symDef.noDot) {
      drawing.symbolNoDot[n] = true;
    } else {
      drawing.symbolList.push(n + 200, String(n + 200), k + '-dot', n + 300, String(n + 300), k + '-open-dot');
    }

    if (symDef.noFill) {
      drawing.symbolNoFill[n] = true;
    }
  });
  var MAXSYMBOL = drawing.symbolNames.length; // add a dot in the middle of the symbol

  var DOTPATH = 'M0,0.5L0.5,0L0,-0.5L-0.5,0Z';

  drawing.symbolNumber = function (v) {
    if (fastIsnumeric(v)) {
      v = +v;
    } else if (typeof v === 'string') {
      var vbase = 0;

      if (v.indexOf('-open') > 0) {
        vbase = 100;
        v = v.replace('-open', '');
      }

      if (v.indexOf('-dot') > 0) {
        vbase += 200;
        v = v.replace('-dot', '');
      }

      v = drawing.symbolNames.indexOf(v);

      if (v >= 0) {
        v += vbase;
      }
    }

    return v % 100 >= MAXSYMBOL || v >= 400 ? 0 : Math.floor(Math.max(v, 0));
  };

  function makePointPath(symbolNumber, r) {
    var base = symbolNumber % 100;
    return drawing.symbolFuncs[base](r) + (symbolNumber >= 200 ? DOTPATH : '');
  }

  var HORZGRADIENT = {
    x1: 1,
    x2: 0,
    y1: 0,
    y2: 0
  };
  var VERTGRADIENT = {
    x1: 0,
    x2: 0,
    y1: 1,
    y2: 0
  };
  var stopFormatter = numberFormat('~f');
  var gradientInfo = {
    radial: {
      node: 'radialGradient'
    },
    radialreversed: {
      node: 'radialGradient',
      reversed: true
    },
    horizontal: {
      node: 'linearGradient',
      attrs: HORZGRADIENT
    },
    horizontalreversed: {
      node: 'linearGradient',
      attrs: HORZGRADIENT,
      reversed: true
    },
    vertical: {
      node: 'linearGradient',
      attrs: VERTGRADIENT
    },
    verticalreversed: {
      node: 'linearGradient',
      attrs: VERTGRADIENT,
      reversed: true
    }
  };
  /**
   * gradient: create and apply a gradient fill
   *
   * @param {object} sel: d3 selection to apply this gradient to
   *     You can use `selection.call(Drawing.gradient, ...)`
   * @param {DOM element} gd: the graph div `sel` is part of
   * @param {string} gradientID: a unique (within this plot) identifier
   *     for this gradient, so that we don't create unnecessary definitions
   * @param {string} type: 'radial', 'horizontal', or 'vertical', optionally with
   *     'reversed' at the end. Normally radial goes center to edge,
   *     horizontal goes right to left, and vertical goes bottom to top
   * @param {array} colorscale: as in attribute values, [[fraction, color], ...]
   * @param {string} prop: the property to apply to, 'fill' or 'stroke'
   */

  drawing.gradient = function (sel, gd, gradientID, type, colorscale, prop) {
    var len = colorscale.length;
    var info = gradientInfo[type];
    var colorStops = new Array(len);

    for (var i = 0; i < len; i++) {
      if (info.reversed) {
        colorStops[len - 1 - i] = [stopFormatter((1 - colorscale[i][0]) * 100), colorscale[i][1]];
      } else {
        colorStops[i] = [stopFormatter(colorscale[i][0] * 100), colorscale[i][1]];
      }
    }

    var fullLayout = gd._fullLayout;
    var fullID = 'g' + fullLayout._uid + '-' + gradientID;

    var gradient = fullLayout._defs.select('.gradients').selectAll('#' + fullID).data([type + colorStops.join(';')], lib_1.identity);

    gradient.exit().remove();
    gradient.enter().append(info.node).each(function () {
      var el = d3.select(this);
      if (info.attrs) el.attr(info.attrs);
      el.attr('id', fullID);
      var stops = el.selectAll('stop').data(colorStops);
      stops.exit().remove();
      stops.enter().append('stop');
      stops.each(function (d) {
        var tc = tinycolor(d[1]);
        d3.select(this).attr({
          offset: d[0] + '%',
          'stop-color': color_1.tinyRGB(tc),
          'stop-opacity': tc.getAlpha()
        });
      });
    });
    sel.style(prop, getFullUrl(fullID, gd)).style(prop + '-opacity', null);
    sel.classed('gradient_filled', true);
  };
  /**
   * pattern: create and apply a pattern fill
   *
   * @param {object} sel: d3 selection to apply this pattern to
   *     You can use `selection.call(Drawing.pattern, ...)`
   * @param {string} calledBy: option to know the caller component
   * @param {DOM element} gd: the graph div `sel` is part of
   * @param {string} patternID: a unique (within this plot) identifier
   *     for this pattern, so that we don't create unnecessary definitions
   * @param {number} size: size of unit squares for repetition of this pattern
   * @param {number} solidity: how solid lines of this pattern are
   * @param {string} mcc: color when painted with colorscale
   * @param {string} fillmode: fillmode for this pattern
   * @param {string} bgcolor: background color for this pattern
   * @param {string} fgcolor: foreground color for this pattern
   * @param {number} fgopacity: foreground opacity for this pattern
   */


  drawing.pattern = function (sel, calledBy, gd, patternID, shape, size, solidity, mcc, fillmode, bgcolor, fgcolor, fgopacity) {
    var isLegend = calledBy === 'legend';

    if (mcc) {
      if (fillmode === 'overlay') {
        bgcolor = mcc;
        fgcolor = color_1.contrast(bgcolor);
      } else {
        bgcolor = undefined;
        fgcolor = mcc;
      }
    }

    var fullLayout = gd._fullLayout;
    var fullID = 'p' + fullLayout._uid + '-' + patternID;
    var width, height; // linear interpolation

    var linearFn = function (x, x0, x1, y0, y1) {
      return y0 + (y1 - y0) * (x - x0) / (x1 - x0);
    };

    var path, linewidth, radius;
    var patternTag;
    var patternAttrs = {};

    switch (shape) {
      case '/':
        width = size * Math.sqrt(2);
        height = size * Math.sqrt(2);
        path = 'M-' + width / 4 + ',' + height / 4 + 'l' + width / 2 + ',-' + height / 2 + 'M0,' + height + 'L' + width + ',0' + 'M' + width / 4 * 3 + ',' + height / 4 * 5 + 'l' + width / 2 + ',-' + height / 2;
        linewidth = solidity * size;
        patternTag = 'path';
        patternAttrs = {
          'd': path,
          'opacity': fgopacity,
          'stroke': fgcolor,
          'stroke-width': linewidth + 'px'
        };
        break;

      case '\\':
        width = size * Math.sqrt(2);
        height = size * Math.sqrt(2);
        path = 'M' + width / 4 * 3 + ',-' + height / 4 + 'l' + width / 2 + ',' + height / 2 + 'M0,0L' + width + ',' + height + 'M-' + width / 4 + ',' + height / 4 * 3 + 'l' + width / 2 + ',' + height / 2;
        linewidth = solidity * size;
        patternTag = 'path';
        patternAttrs = {
          'd': path,
          'opacity': fgopacity,
          'stroke': fgcolor,
          'stroke-width': linewidth + 'px'
        };
        break;

      case 'x':
        width = size * Math.sqrt(2);
        height = size * Math.sqrt(2);
        path = 'M-' + width / 4 + ',' + height / 4 + 'l' + width / 2 + ',-' + height / 2 + 'M0,' + height + 'L' + width + ',0' + 'M' + width / 4 * 3 + ',' + height / 4 * 5 + 'l' + width / 2 + ',-' + height / 2 + 'M' + width / 4 * 3 + ',-' + height / 4 + 'l' + width / 2 + ',' + height / 2 + 'M0,0L' + width + ',' + height + 'M-' + width / 4 + ',' + height / 4 * 3 + 'l' + width / 2 + ',' + height / 2;
        linewidth = size - size * Math.sqrt(1.0 - solidity);
        patternTag = 'path';
        patternAttrs = {
          'd': path,
          'opacity': fgopacity,
          'stroke': fgcolor,
          'stroke-width': linewidth + 'px'
        };
        break;

      case '|':
        width = size;
        height = size;
        patternTag = 'path';
        path = 'M' + width / 2 + ',0L' + width / 2 + ',' + height;
        linewidth = solidity * size;
        patternTag = 'path';
        patternAttrs = {
          'd': path,
          'opacity': fgopacity,
          'stroke': fgcolor,
          'stroke-width': linewidth + 'px'
        };
        break;

      case '-':
        width = size;
        height = size;
        patternTag = 'path';
        path = 'M0,' + height / 2 + 'L' + width + ',' + height / 2;
        linewidth = solidity * size;
        patternTag = 'path';
        patternAttrs = {
          'd': path,
          'opacity': fgopacity,
          'stroke': fgcolor,
          'stroke-width': linewidth + 'px'
        };
        break;

      case '+':
        width = size;
        height = size;
        patternTag = 'path';
        path = 'M' + width / 2 + ',0L' + width / 2 + ',' + height + 'M0,' + height / 2 + 'L' + width + ',' + height / 2;
        linewidth = size - size * Math.sqrt(1.0 - solidity);
        patternTag = 'path';
        patternAttrs = {
          'd': path,
          'opacity': fgopacity,
          'stroke': fgcolor,
          'stroke-width': linewidth + 'px'
        };
        break;

      case '.':
        width = size;
        height = size;

        if (solidity < Math.PI / 4) {
          radius = Math.sqrt(solidity * size * size / Math.PI);
        } else {
          radius = linearFn(solidity, Math.PI / 4, 1.0, size / 2, size / Math.sqrt(2));
        }

        patternTag = 'circle';
        patternAttrs = {
          'cx': width / 2,
          'cy': height / 2,
          'r': radius,
          'opacity': fgopacity,
          'fill': fgcolor
        };
        break;
    }

    var str = [shape || 'noSh', bgcolor || 'noBg', fgcolor || 'noFg', size, solidity].join(';');

    var pattern = fullLayout._defs.select('.patterns').selectAll('#' + fullID).data([str], lib_1.identity);

    pattern.exit().remove();
    pattern.enter().append('pattern').each(function () {
      var el = d3.select(this);
      el.attr({
        'id': fullID,
        'width': width + 'px',
        'height': height + 'px',
        'patternUnits': 'userSpaceOnUse',
        // for legends scale down patterns just a bit so that default size (i.e 8) nicely fit in small icons
        'patternTransform': isLegend ? 'scale(0.8)' : ''
      });

      if (bgcolor) {
        var rects = el.selectAll('rect').data([0]);
        rects.exit().remove();
        rects.enter().append('rect').attr({
          'width': width + 'px',
          'height': height + 'px',
          'fill': bgcolor
        });
      }

      var patterns = el.selectAll(patternTag).data([0]);
      patterns.exit().remove();
      patterns.enter().append(patternTag).attr(patternAttrs);
    });
    sel.style('fill', getFullUrl(fullID, gd)).style('fill-opacity', null);
    sel.classed('pattern_filled', true);
  };
  /*
   * Make the gradients container and clear out any previous gradients.
   * We never collect all the gradients we need in one place,
   * so we can't ever remove gradients that have stopped being useful,
   * except all at once before a full redraw.
   * The upside of this is arbitrary points can share gradient defs
   */


  drawing.initGradients = function (gd) {
    var fullLayout = gd._fullLayout;
    var gradientsGroup = lib_1.ensureSingle(fullLayout._defs, 'g', 'gradients');
    gradientsGroup.selectAll('linearGradient,radialGradient').remove();
    d3.select(gd).selectAll('.gradient_filled').classed('gradient_filled', false);
  };

  drawing.initPatterns = function (gd) {
    var fullLayout = gd._fullLayout;
    var patternsGroup = lib_1.ensureSingle(fullLayout._defs, 'g', 'patterns');
    patternsGroup.selectAll('pattern').remove();
    d3.select(gd).selectAll('.pattern_filled').classed('pattern_filled', false);
  };

  drawing.getPatternAttr = function (mp, i, dflt) {
    if (mp && lib_1.isArrayOrTypedArray(mp)) {
      return i < mp.length ? mp[i] : dflt;
    }

    return mp;
  };

  drawing.pointStyle = function (s, trace, gd) {
    if (!s.size()) return;
    var fns = drawing.makePointStyleFns(trace);
    s.each(function (d) {
      drawing.singlePointStyle(d, d3.select(this), trace, fns, gd);
    });
  };

  drawing.singlePointStyle = function (d, sel, trace, fns, gd) {
    var marker = trace.marker;
    var markerLine = marker.line;
    sel.style('opacity', fns.selectedOpacityFn ? fns.selectedOpacityFn(d) : d.mo === undefined ? marker.opacity : d.mo);

    if (fns.ms2mrc) {
      var r; // handle multi-trace graph edit case

      if (d.ms === 'various' || marker.size === 'various') {
        r = 3;
      } else {
        r = fns.ms2mrc(d.ms);
      } // store the calculated size so hover can use it


      d.mrc = r;

      if (fns.selectedSizeFn) {
        r = d.mrc = fns.selectedSizeFn(d);
      } // turn the symbol into a sanitized number


      var x = drawing.symbolNumber(d.mx || marker.symbol) || 0; // save if this marker is open
      // because that impacts how to handle colors

      d.om = x % 200 >= 100;
      sel.attr('d', makePointPath(x, r));
    }

    var perPointGradient = false;
    var fillColor, lineColor, lineWidth; // 'so' is suspected outliers, for box plots

    if (d.so) {
      lineWidth = markerLine.outlierwidth;
      lineColor = markerLine.outliercolor;
      fillColor = marker.outliercolor;
    } else {
      var markerLineWidth = (markerLine || {}).width;
      lineWidth = (d.mlw + 1 || markerLineWidth + 1 || // TODO: we need the latter for legends... can we get rid of it?
      (d.trace ? (d.trace.marker.line || {}).width : 0) + 1) - 1 || 0;
      if ('mlc' in d) lineColor = d.mlcc = fns.lineScale(d.mlc); // weird case: array wasn't long enough to apply to every point
      else if (lib_1.isArrayOrTypedArray(markerLine.color)) lineColor = color_1.defaultLine;else lineColor = markerLine.color;

      if (lib_1.isArrayOrTypedArray(marker.color)) {
        fillColor = color_1.defaultLine;
        perPointGradient = true;
      }

      if ('mc' in d) {
        fillColor = d.mcc = fns.markerScale(d.mc);
      } else {
        fillColor = marker.color || 'rgba(0,0,0,0)';
      }

      if (fns.selectedColorFn) {
        fillColor = fns.selectedColorFn(d);
      }
    }

    if (d.om) {
      // open markers can't have zero linewidth, default to 1px,
      // and use fill color as stroke color
      sel.call(color_1.stroke, fillColor).style({
        'stroke-width': (lineWidth || 1) + 'px',
        fill: 'none'
      });
    } else {
      sel.style('stroke-width', (d.isBlank ? 0 : lineWidth) + 'px');
      var markerGradient = marker.gradient;
      var gradientType = d.mgt;
      if (gradientType) perPointGradient = true;else gradientType = markerGradient && markerGradient.type; // for legend - arrays will propagate through here, but we don't need
      // to treat it as per-point.

      if (lib_1.isArrayOrTypedArray(gradientType)) {
        gradientType = gradientType[0];
        if (!gradientInfo[gradientType]) gradientType = 0;
      }

      var markerPattern = marker.pattern;
      var patternShape = markerPattern && drawing.getPatternAttr(markerPattern.shape, d.i, '');

      if (gradientType && gradientType !== 'none') {
        var gradientColor = d.mgc;
        if (gradientColor) perPointGradient = true;else gradientColor = markerGradient.color;
        var gradientID = trace.uid;
        if (perPointGradient) gradientID += '-' + d.i;
        drawing.gradient(sel, gd, gradientID, gradientType, [[0, gradientColor], [1, fillColor]], 'fill');
      } else if (patternShape) {
        var patternBGColor = drawing.getPatternAttr(markerPattern.bgcolor, d.i, null);
        var patternFGColor = drawing.getPatternAttr(markerPattern.fgcolor, d.i, null);
        var patternFGOpacity = markerPattern.fgopacity;
        var patternSize = drawing.getPatternAttr(markerPattern.size, d.i, 8);
        var patternSolidity = drawing.getPatternAttr(markerPattern.solidity, d.i, 0.3);
        var perPointPattern = d.mcc || lib_1.isArrayOrTypedArray(markerPattern.shape) || lib_1.isArrayOrTypedArray(markerPattern.bgcolor) || lib_1.isArrayOrTypedArray(markerPattern.size) || lib_1.isArrayOrTypedArray(markerPattern.solidity);
        var patternID = trace.uid;
        if (perPointPattern) patternID += '-' + d.i;
        drawing.pattern(sel, 'point', gd, patternID, patternShape, patternSize, patternSolidity, d.mcc, markerPattern.fillmode, patternBGColor, patternFGColor, patternFGOpacity);
      } else {
        color_1.fill(sel, fillColor);
      }

      if (lineWidth) {
        color_1.stroke(sel, lineColor);
      }
    }
  };

  drawing.makePointStyleFns = function (trace) {
    var out = {};
    var marker = trace.marker; // allow array marker and marker line colors to be
    // scaled by given max and min to colorscales

    out.markerScale = drawing.tryColorscale(marker, '');
    out.lineScale = drawing.tryColorscale(marker, 'line');

    if (registry.traceIs(trace, 'symbols')) {
      out.ms2mrc = subtypes.isBubble(trace) ? make_bubble_size_func(trace) : function () {
        return (marker.size || 6) / 2;
      };
    }

    if (trace.selectedpoints) {
      lib_1.extendFlat(out, drawing.makeSelectedPointStyleFns(trace));
    }

    return out;
  };

  drawing.makeSelectedPointStyleFns = function (trace) {
    var out = {};
    var selectedAttrs = trace.selected || {};
    var unselectedAttrs = trace.unselected || {};
    var marker = trace.marker || {};
    var selectedMarker = selectedAttrs.marker || {};
    var unselectedMarker = unselectedAttrs.marker || {};
    var mo = marker.opacity;
    var smo = selectedMarker.opacity;
    var usmo = unselectedMarker.opacity;
    var smoIsDefined = smo !== undefined;
    var usmoIsDefined = usmo !== undefined;

    if (lib_1.isArrayOrTypedArray(mo) || smoIsDefined || usmoIsDefined) {
      out.selectedOpacityFn = function (d) {
        var base = d.mo === undefined ? marker.opacity : d.mo;

        if (d.selected) {
          return smoIsDefined ? smo : base;
        } else {
          return usmoIsDefined ? usmo : DESELECTDIM * base;
        }
      };
    }

    var mc = marker.color;
    var smc = selectedMarker.color;
    var usmc = unselectedMarker.color;

    if (smc || usmc) {
      out.selectedColorFn = function (d) {
        var base = d.mcc || mc;

        if (d.selected) {
          return smc || base;
        } else {
          return usmc || base;
        }
      };
    }

    var ms = marker.size;
    var sms = selectedMarker.size;
    var usms = unselectedMarker.size;
    var smsIsDefined = sms !== undefined;
    var usmsIsDefined = usms !== undefined;

    if (registry.traceIs(trace, 'symbols') && (smsIsDefined || usmsIsDefined)) {
      out.selectedSizeFn = function (d) {
        var base = d.mrc || ms / 2;

        if (d.selected) {
          return smsIsDefined ? sms / 2 : base;
        } else {
          return usmsIsDefined ? usms / 2 : base;
        }
      };
    }

    return out;
  };

  drawing.makeSelectedTextStyleFns = function (trace) {
    var out = {};
    var selectedAttrs = trace.selected || {};
    var unselectedAttrs = trace.unselected || {};
    var textFont = trace.textfont || {};
    var selectedTextFont = selectedAttrs.textfont || {};
    var unselectedTextFont = unselectedAttrs.textfont || {};
    var tc = textFont.color;
    var stc = selectedTextFont.color;
    var utc = unselectedTextFont.color;

    out.selectedTextColorFn = function (d) {
      var base = d.tc || tc;

      if (d.selected) {
        return stc || base;
      } else {
        if (utc) return utc;else return stc ? base : color_1.addOpacity(base, DESELECTDIM);
      }
    };

    return out;
  };

  drawing.selectedPointStyle = function (s, trace) {
    if (!s.size() || !trace.selectedpoints) return;
    var fns = drawing.makeSelectedPointStyleFns(trace);
    var marker = trace.marker || {};
    var seq = [];

    if (fns.selectedOpacityFn) {
      seq.push(function (pt, d) {
        pt.style('opacity', fns.selectedOpacityFn(d));
      });
    }

    if (fns.selectedColorFn) {
      seq.push(function (pt, d) {
        color_1.fill(pt, fns.selectedColorFn(d));
      });
    }

    if (fns.selectedSizeFn) {
      seq.push(function (pt, d) {
        var mx = d.mx || marker.symbol || 0;
        var mrc2 = fns.selectedSizeFn(d);
        pt.attr('d', makePointPath(drawing.symbolNumber(mx), mrc2)); // save for Drawing.selectedTextStyle

        d.mrc2 = mrc2;
      });
    }

    if (seq.length) {
      s.each(function (d) {
        var pt = d3.select(this);

        for (var i = 0; i < seq.length; i++) {
          seq[i](pt, d);
        }
      });
    }
  };

  drawing.tryColorscale = function (marker, prefix) {
    var cont = prefix ? lib_1.nestedProperty(marker, prefix).get() : marker;

    if (cont) {
      var colorArray = cont.color;

      if ((cont.colorscale || cont._colorAx) && lib_1.isArrayOrTypedArray(colorArray)) {
        return colorscale.makeColorScaleFuncFromTrace(cont);
      }
    }

    return lib_1.identity;
  };

  var TEXTOFFSETSIGN = {
    start: 1,
    end: -1,
    middle: 0,
    bottom: 1,
    top: -1
  };

  function textPointPosition(s, textPosition, fontSize, markerRadius, dontTouchParent) {
    var group = d3.select(s.node().parentNode);
    var v = textPosition.indexOf('top') !== -1 ? 'top' : textPosition.indexOf('bottom') !== -1 ? 'bottom' : 'middle';
    var h = textPosition.indexOf('left') !== -1 ? 'end' : textPosition.indexOf('right') !== -1 ? 'start' : 'middle'; // if markers are shown, offset a little more than
    // the nominal marker size
    // ie 2/1.6 * nominal, bcs some markers are a bit bigger

    var r = markerRadius ? markerRadius / 0.8 + 1 : 0;
    var numLines = (svg_text_utils.lineCount(s) - 1) * LINE_SPACING + 1;
    var dx = TEXTOFFSETSIGN[h] * r;
    var dy = fontSize * 0.75 + TEXTOFFSETSIGN[v] * r + (TEXTOFFSETSIGN[v] - 1) * numLines * fontSize / 2; // fix the overall text group position

    s.attr('text-anchor', h);

    if (!dontTouchParent) {
      group.attr('transform', strTranslate(dx, dy));
    }
  }

  function extracTextFontSize(d, trace) {
    var fontSize = d.ts || trace.textfont.size;
    return fastIsnumeric(fontSize) && fontSize > 0 ? fontSize : 0;
  } // draw text at points


  drawing.textPointStyle = function (s, trace, gd) {
    if (!s.size()) return;
    var selectedTextColorFn;

    if (trace.selectedpoints) {
      var fns = drawing.makeSelectedTextStyleFns(trace);
      selectedTextColorFn = fns.selectedTextColorFn;
    }

    var texttemplate = trace.texttemplate;
    var fullLayout = gd._fullLayout;
    s.each(function (d) {
      var p = d3.select(this);
      var text = texttemplate ? lib_1.extractOption(d, trace, 'txt', 'texttemplate') : lib_1.extractOption(d, trace, 'tx', 'text');

      if (!text && text !== 0) {
        p.remove();
        return;
      }

      if (texttemplate) {
        var fn = trace._module.formatLabels;
        var labels = fn ? fn(d, trace, fullLayout) : {};
        var pointValues = {};
        appendArrayPointValue(pointValues, trace, d.i);
        var meta = trace._meta || {};
        text = lib_1.texttemplateString(text, labels, fullLayout._d3locale, pointValues, d, meta);
      }

      var pos = d.tp || trace.textposition;
      var fontSize = extracTextFontSize(d, trace);
      var fontColor = selectedTextColorFn ? selectedTextColorFn(d) : d.tc || trace.textfont.color;
      p.call(drawing.font, d.tf || trace.textfont.family, fontSize, fontColor).text(text).call(svg_text_utils.convertToTspans, gd).call(textPointPosition, pos, fontSize, d.mrc);
    });
  };

  drawing.selectedTextStyle = function (s, trace) {
    if (!s.size() || !trace.selectedpoints) return;
    var fns = drawing.makeSelectedTextStyleFns(trace);
    s.each(function (d) {
      var tx = d3.select(this);
      var tc = fns.selectedTextColorFn(d);
      var tp = d.tp || trace.textposition;
      var fontSize = extracTextFontSize(d, trace);
      color_1.fill(tx, tc);
      var dontTouchParent = registry.traceIs(trace, 'bar-like');
      textPointPosition(tx, tp, fontSize, d.mrc2 || d.mrc, dontTouchParent);
    });
  }; // generalized Catmull-Rom splines, per
  // http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf


  var CatmullRomExp = 0.5;

  drawing.smoothopen = function (pts, smoothness) {
    if (pts.length < 3) {
      return 'M' + pts.join('L');
    }

    var path = 'M' + pts[0];
    var tangents = [];
    var i;

    for (i = 1; i < pts.length - 1; i++) {
      tangents.push(makeTangent(pts[i - 1], pts[i], pts[i + 1], smoothness));
    }

    path += 'Q' + tangents[0][0] + ' ' + pts[1];

    for (i = 2; i < pts.length - 1; i++) {
      path += 'C' + tangents[i - 2][1] + ' ' + tangents[i - 1][0] + ' ' + pts[i];
    }

    path += 'Q' + tangents[pts.length - 3][1] + ' ' + pts[pts.length - 1];
    return path;
  };

  drawing.smoothclosed = function (pts, smoothness) {
    if (pts.length < 3) {
      return 'M' + pts.join('L') + 'Z';
    }

    var path = 'M' + pts[0];
    var pLast = pts.length - 1;
    var tangents = [makeTangent(pts[pLast], pts[0], pts[1], smoothness)];
    var i;

    for (i = 1; i < pLast; i++) {
      tangents.push(makeTangent(pts[i - 1], pts[i], pts[i + 1], smoothness));
    }

    tangents.push(makeTangent(pts[pLast - 1], pts[pLast], pts[0], smoothness));

    for (i = 1; i <= pLast; i++) {
      path += 'C' + tangents[i - 1][1] + ' ' + tangents[i][0] + ' ' + pts[i];
    }

    path += 'C' + tangents[pLast][1] + ' ' + tangents[0][0] + ' ' + pts[0] + 'Z';
    return path;
  };

  function makeTangent(prevpt, thispt, nextpt, smoothness) {
    var d1x = prevpt[0] - thispt[0];
    var d1y = prevpt[1] - thispt[1];
    var d2x = nextpt[0] - thispt[0];
    var d2y = nextpt[1] - thispt[1];
    var d1a = Math.pow(d1x * d1x + d1y * d1y, CatmullRomExp / 2);
    var d2a = Math.pow(d2x * d2x + d2y * d2y, CatmullRomExp / 2);
    var numx = (d2a * d2a * d1x - d1a * d1a * d2x) * smoothness;
    var numy = (d2a * d2a * d1y - d1a * d1a * d2y) * smoothness;
    var denom1 = 3 * d2a * (d1a + d2a);
    var denom2 = 3 * d1a * (d1a + d2a);
    return [[d3.round(thispt[0] + (denom1 && numx / denom1), 2), d3.round(thispt[1] + (denom1 && numy / denom1), 2)], [d3.round(thispt[0] - (denom2 && numx / denom2), 2), d3.round(thispt[1] - (denom2 && numy / denom2), 2)]];
  } // step paths - returns a generator function for paths
  // with the given step shape


  var STEPPATH = {
    hv: function (p0, p1) {
      return 'H' + d3.round(p1[0], 2) + 'V' + d3.round(p1[1], 2);
    },
    vh: function (p0, p1) {
      return 'V' + d3.round(p1[1], 2) + 'H' + d3.round(p1[0], 2);
    },
    hvh: function (p0, p1) {
      return 'H' + d3.round((p0[0] + p1[0]) / 2, 2) + 'V' + d3.round(p1[1], 2) + 'H' + d3.round(p1[0], 2);
    },
    vhv: function (p0, p1) {
      return 'V' + d3.round((p0[1] + p1[1]) / 2, 2) + 'H' + d3.round(p1[0], 2) + 'V' + d3.round(p1[1], 2);
    }
  };

  var STEPLINEAR = function (p0, p1) {
    return 'L' + d3.round(p1[0], 2) + ',' + d3.round(p1[1], 2);
  };

  drawing.steps = function (shape) {
    var onestep = STEPPATH[shape] || STEPLINEAR;
    return function (pts) {
      var path = 'M' + d3.round(pts[0][0], 2) + ',' + d3.round(pts[0][1], 2);

      for (var i = 1; i < pts.length; i++) {
        path += onestep(pts[i - 1], pts[i]);
      }

      return path;
    };
  }; // off-screen svg render testing element, shared by the whole page
  // uses the id 'js-plotly-tester' and stores it in drawing.tester


  drawing.makeTester = function () {
    var tester = lib_1.ensureSingleById(d3.select('body'), 'svg', 'js-plotly-tester', function (s) {
      s.attr(xmlns_namespaces.svgAttrs).style({
        position: 'absolute',
        left: '-10000px',
        top: '-10000px',
        width: '9000px',
        height: '9000px',
        'z-index': '1'
      });
    }); // browsers differ on how they describe the bounding rect of
    // the svg if its contents spill over... so make a 1x1px
    // reference point we can measure off of.

    var testref = lib_1.ensureSingle(tester, 'path', 'js-reference-point', function (s) {
      s.attr('d', 'M0,0H1V1H0Z').style({
        'stroke-width': 0,
        fill: 'black'
      });
    });
    drawing.tester = tester;
    drawing.testref = testref;
  };
  /*
   * use our offscreen tester to get a clientRect for an element,
   * in a reference frame where it isn't translated (or transformed) and
   * its anchor point is at (0,0)
   * always returns a copy of the bbox, so the caller can modify it safely
   *
   * @param {SVGElement} node: the element to measure. If possible this should be
   *   a <text> or MathJax <g> element that's already passed through
   *   `convertToTspans` because in that case we can cache the results, but it's
   *   possible to pass in any svg element.
   *
   * @param {boolean} inTester: is this element already in `drawing.tester`?
   *   If you are measuring a dummy element, rather than one you really intend
   *   to use on the plot, making it in `drawing.tester` in the first place
   *   allows us to test faster because it cuts out cloning and appending it.
   *
   * @param {string} hash: for internal use only, if we already know the cache key
   *   for this element beforehand.
   *
   * @return {object}: a plain object containing the width, height, left, right,
   *   top, and bottom of `node`
   */


  drawing.savedBBoxes = {};
  var savedBBoxesCount = 0;
  var maxSavedBBoxes = 10000;

  drawing.bBox = function (node, inTester, hash) {
    /*
     * Cache elements we've already measured so we don't have to
     * remeasure the same thing many times
     * We have a few bBox callers though who pass a node larger than
     * a <text> or a MathJax <g>, such as an axis group containing many labels.
     * These will not generate a hash (unless we figure out an appropriate
     * hash key for them) and thus we will not hash them.
     */
    if (!hash) hash = nodeHash(node);
    var out;

    if (hash) {
      out = drawing.savedBBoxes[hash];
      if (out) return lib_1.extendFlat({}, out);
    } else if (node.childNodes.length === 1) {
      /*
       * If we have only one child element, which is itself hashable, make
       * a new hash from this element plus its x,y,transform
       * These bounding boxes *include* x,y,transform - mostly for use by
       * callers trying to avoid overlaps (ie titles)
       */
      var innerNode = node.childNodes[0];
      hash = nodeHash(innerNode);

      if (hash) {
        var x = +innerNode.getAttribute('x') || 0;
        var y = +innerNode.getAttribute('y') || 0;
        var transform = innerNode.getAttribute('transform');

        if (!transform) {
          // in this case, just varying x and y, don't bother caching
          // the final bBox because the alteration is quick.
          var innerBB = drawing.bBox(innerNode, false, hash);

          if (x) {
            innerBB.left += x;
            innerBB.right += x;
          }

          if (y) {
            innerBB.top += y;
            innerBB.bottom += y;
          }

          return innerBB;
        }
        /*
         * else we have a transform - rather than make a complicated
         * (and error-prone and probably slow) transform parser/calculator,
         * just continue on calculating the boundingClientRect of the group
         * and use the new composite hash to cache it.
         * That said, `innerNode.transform.baseVal` is an array of
         * `SVGTransform` objects, that *do* seem to have a nice matrix
         * multiplication interface that we could use to avoid making
         * another getBoundingClientRect call...
         */


        hash += '~' + x + '~' + y + '~' + transform;
        out = drawing.savedBBoxes[hash];
        if (out) return lib_1.extendFlat({}, out);
      }
    }

    var testNode, tester;

    if (inTester) {
      testNode = node;
    } else {
      tester = drawing.tester.node(); // copy the node to test into the tester

      testNode = node.cloneNode(true);
      tester.appendChild(testNode);
    } // standardize its position (and newline tspans if any)


    d3.select(testNode).attr('transform', null).call(svg_text_utils.positionText, 0, 0);
    var testRect = testNode.getBoundingClientRect();
    var refRect = drawing.testref.node().getBoundingClientRect();
    if (!inTester) tester.removeChild(testNode);
    var bb = {
      height: testRect.height,
      width: testRect.width,
      left: testRect.left - refRect.left,
      top: testRect.top - refRect.top,
      right: testRect.right - refRect.left,
      bottom: testRect.bottom - refRect.top
    }; // make sure we don't have too many saved boxes,
    // or a long session could overload on memory
    // by saving boxes for long-gone elements

    if (savedBBoxesCount >= maxSavedBBoxes) {
      drawing.savedBBoxes = {};
      savedBBoxesCount = 0;
    } // cache this bbox


    if (hash) drawing.savedBBoxes[hash] = bb;
    savedBBoxesCount++;
    return lib_1.extendFlat({}, bb);
  }; // capture everything about a node (at least in our usage) that
  // impacts its bounding box, given that bBox clears x, y, and transform


  function nodeHash(node) {
    var inputText = node.getAttribute('data-unformatted');
    if (inputText === null) return;
    return inputText + node.getAttribute('data-math') + node.getAttribute('text-anchor') + node.getAttribute('style');
  }
  /**
   * Set clipPath URL in a way that work for all situations.
   *
   * In details, graphs on pages with <base> HTML tags need to prepend
   * the clip path ids with the page's base url EXCEPT during toImage exports.
   *
   * @param {d3 selection} s : node to add clip-path attribute
   * @param {string} localId : local clip-path (w/o base url) id
   * @param {DOM element || object} gd
   * - context._baseUrl {string}
   * - context._exportedPlot {boolean}
   */


  drawing.setClipUrl = function (s, localId, gd) {
    s.attr('clip-path', getFullUrl(localId, gd));
  };

  function getFullUrl(localId, gd) {
    if (!localId) return null;
    var context = gd._context;
    var baseUrl = context._exportedPlot ? '' : context._baseUrl || '';
    return baseUrl ? 'url(\'' + baseUrl + '#' + localId + '\')' : 'url(#' + localId + ')';
  }

  drawing.getTranslate = function (element) {
    // Note the separator [^\d] between x and y in this regex
    // We generally use ',' but IE will convert it to ' '
    var re = /.*\btranslate\((-?\d*\.?\d*)[^-\d]*(-?\d*\.?\d*)[^\d].*/;
    var getter = element.attr ? 'attr' : 'getAttribute';
    var transform = element[getter]('transform') || '';
    var translate = transform.replace(re, function (match, p1, p2) {
      return [p1, p2].join(' ');
    }).split(' ');
    return {
      x: +translate[0] || 0,
      y: +translate[1] || 0
    };
  };

  drawing.setTranslate = function (element, x, y) {
    var re = /(\btranslate\(.*?\);?)/;
    var getter = element.attr ? 'attr' : 'getAttribute';
    var setter = element.attr ? 'attr' : 'setAttribute';
    var transform = element[getter]('transform') || '';
    x = x || 0;
    y = y || 0;
    transform = transform.replace(re, '').trim();
    transform += strTranslate(x, y);
    transform = transform.trim();
    element[setter]('transform', transform);
    return transform;
  };

  drawing.getScale = function (element) {
    var re = /.*\bscale\((\d*\.?\d*)[^\d]*(\d*\.?\d*)[^\d].*/;
    var getter = element.attr ? 'attr' : 'getAttribute';
    var transform = element[getter]('transform') || '';
    var translate = transform.replace(re, function (match, p1, p2) {
      return [p1, p2].join(' ');
    }).split(' ');
    return {
      x: +translate[0] || 1,
      y: +translate[1] || 1
    };
  };

  drawing.setScale = function (element, x, y) {
    var re = /(\bscale\(.*?\);?)/;
    var getter = element.attr ? 'attr' : 'getAttribute';
    var setter = element.attr ? 'attr' : 'setAttribute';
    var transform = element[getter]('transform') || '';
    x = x || 1;
    y = y || 1;
    transform = transform.replace(re, '').trim();
    transform += 'scale(' + x + ',' + y + ')';
    transform = transform.trim();
    element[setter]('transform', transform);
    return transform;
  };

  var SCALE_RE = /\s*sc.*/;

  drawing.setPointGroupScale = function (selection, xScale, yScale) {
    xScale = xScale || 1;
    yScale = yScale || 1;
    if (!selection) return; // The same scale transform for every point:

    var scale = xScale === 1 && yScale === 1 ? '' : 'scale(' + xScale + ',' + yScale + ')';
    selection.each(function () {
      var t = (this.getAttribute('transform') || '').replace(SCALE_RE, '');
      t += scale;
      t = t.trim();
      this.setAttribute('transform', t);
    });
  };

  var TEXT_POINT_LAST_TRANSLATION_RE = /translate\([^)]*\)\s*$/;

  drawing.setTextPointsScale = function (selection, xScale, yScale) {
    if (!selection) return;
    selection.each(function () {
      var transforms;
      var el = d3.select(this);
      var text = el.select('text');
      if (!text.node()) return;
      var x = parseFloat(text.attr('x') || 0);
      var y = parseFloat(text.attr('y') || 0);
      var existingTransform = (el.attr('transform') || '').match(TEXT_POINT_LAST_TRANSLATION_RE);

      if (xScale === 1 && yScale === 1) {
        transforms = [];
      } else {
        transforms = [strTranslate(x, y), 'scale(' + xScale + ',' + yScale + ')', strTranslate(-x, -y)];
      }

      if (existingTransform) {
        transforms.push(existingTransform);
      }

      el.attr('transform', transforms.join(''));
    });
  };
});

var strTranslate$a = lib_1.strTranslate;
var OPPOSITE_SIDE = alignment.OPPOSITE_SIDE;
var numStripRE = / [XY][0-9]* /;
/**
 * Titles - (re)draw titles on the axes and plot:
 * @param {DOM element} gd - the graphDiv
 * @param {string} titleClass - the css class of this title
 * @param {object} options - how and what to draw
 *      propContainer - the layout object containing `title` and `titlefont`
 *          attributes that apply to this title
 *      propName - the full name of the title property (for Plotly.relayout)
 *      [traceIndex] - include only if this property applies to one trace
 *          (such as a colorbar title) - then editing pipes to Plotly.restyle
 *          instead of Plotly.relayout
 *      placeholder - placeholder text for an empty editable title
 *      [avoid] {object} - include if this title should move to avoid other elements
 *          selection - d3 selection of elements to avoid
 *          side - which direction to move if there is a conflict
 *          [offsetLeft] - if these elements are subject to a translation
 *              wrt the title element
 *          [offsetTop]
 *      attributes {object} - position and alignment attributes
 *          x - pixels
 *          y - pixels
 *          text-anchor - start|middle|end
 *      transform {object} - how to transform the title after positioning
 *          rotate - degrees
 *          offset - shift up/down in the rotated frame (unused?)
 *      containerGroup - if an svg <g> element already exists to hold this
 *          title, include here. Otherwise it will go in fullLayout._infolayer
 *      _meta {object (optional} - meta key-value to for title with
 *          Lib.templateString, default to fullLayout._meta, if not provided
 *
 *  @return {selection} d3 selection of title container group
 */

function draw$b(gd, titleClass, options) {
  var cont = options.propContainer;
  var prop = options.propName;
  var placeholder = options.placeholder;
  var traceIndex = options.traceIndex;
  var avoid = options.avoid || {};
  var attributes = options.attributes;
  var transform = options.transform;
  var group = options.containerGroup;
  var fullLayout = gd._fullLayout;
  var opacity = 1;
  var isplaceholder = false;
  var title = cont.title;
  var txt = (title && title.text ? title.text : '').trim();
  var font = title && title.font ? title.font : {};
  var fontFamily = font.family;
  var fontSize = font.size;
  var fontColor = font.color; // only make this title editable if we positively identify its property
  // as one that has editing enabled.

  var editAttr;
  if (prop === 'title.text') editAttr = 'titleText';else if (prop.indexOf('axis') !== -1) editAttr = 'axisTitleText';else if (prop.indexOf('colorbar' !== -1)) editAttr = 'colorbarTitleText';
  var editable = gd._context.edits[editAttr];
  if (txt === '') opacity = 0; // look for placeholder text while stripping out numbers from eg X2, Y3
  // this is just for backward compatibility with the old version that had
  // "Click to enter X2 title" and may have gotten saved in some old plots,
  // we don't want this to show up when these are displayed.
  else if (txt.replace(numStripRE, ' % ') === placeholder.replace(numStripRE, ' % ')) {
    opacity = 0.2;
    isplaceholder = true;
    if (!editable) txt = '';
  }

  if (options._meta) {
    txt = lib_1.templateString(txt, options._meta);
  } else if (fullLayout._meta) {
    txt = lib_1.templateString(txt, fullLayout._meta);
  }

  var elShouldExist = txt || editable;
  var hColorbarMoveTitle;

  if (!group) {
    group = lib_1.ensureSingle(fullLayout._infolayer, 'g', 'g-' + titleClass);
    hColorbarMoveTitle = fullLayout._hColorbarMoveTitle;
  }

  var el = group.selectAll('text').data(elShouldExist ? [0] : []);
  el.enter().append('text');
  el.text(txt) // this is hacky, but convertToTspans uses the class
  // to determine whether to rotate mathJax...
  // so we need to clear out any old class and put the
  // correct one (only relevant for colorbars, at least
  // for now) - ie don't use .classed
  .attr('class', titleClass);
  el.exit().remove();
  if (!elShouldExist) return group;

  function titleLayout(titleEl) {
    lib_1.syncOrAsync([drawTitle, scootTitle], titleEl);
  }

  function drawTitle(titleEl) {
    var transformVal;

    if (!transform && hColorbarMoveTitle) {
      transform = {};
    }

    if (transform) {
      transformVal = '';

      if (transform.rotate) {
        transformVal += 'rotate(' + [transform.rotate, attributes.x, attributes.y] + ')';
      }

      if (transform.offset || hColorbarMoveTitle) {
        transformVal += strTranslate$a(0, (transform.offset || 0) - (hColorbarMoveTitle || 0));
      }
    } else {
      transformVal = null;
    }

    titleEl.attr('transform', transformVal);
    titleEl.style({
      'font-family': fontFamily,
      'font-size': d3.round(fontSize, 2) + 'px',
      fill: color_1.rgb(fontColor),
      opacity: opacity * color_1.opacity(fontColor),
      'font-weight': plots_1.fontWeight
    }).attr(attributes).call(svg_text_utils.convertToTspans, gd);
    return plots_1.previousPromises(gd);
  }

  function scootTitle(titleElIn) {
    var titleGroup = d3.select(titleElIn.node().parentNode);

    if (avoid && avoid.selection && avoid.side && txt) {
      titleGroup.attr('transform', null); // move toward avoid.side (= left, right, top, bottom) if needed
      // can include pad (pixels, default 2)

      var backside = OPPOSITE_SIDE[avoid.side];
      var shiftSign = avoid.side === 'left' || avoid.side === 'top' ? -1 : 1;
      var pad = fastIsnumeric(avoid.pad) ? avoid.pad : 2;
      var titlebb = drawing_1.bBox(titleGroup.node());
      var paperbb = {
        left: 0,
        top: 0,
        right: fullLayout.width,
        bottom: fullLayout.height
      };
      var maxshift = avoid.maxShift || shiftSign * (paperbb[avoid.side] - titlebb[avoid.side]);
      var shift = 0; // Prevent the title going off the paper

      if (maxshift < 0) {
        shift = maxshift;
      } else {
        // so we don't have to offset each avoided element,
        // give the title the opposite offset
        var offsetLeft = avoid.offsetLeft || 0;
        var offsetTop = avoid.offsetTop || 0;
        titlebb.left -= offsetLeft;
        titlebb.right -= offsetLeft;
        titlebb.top -= offsetTop;
        titlebb.bottom -= offsetTop; // iterate over a set of elements (avoid.selection)
        // to avoid collisions with

        avoid.selection.each(function () {
          var avoidbb = drawing_1.bBox(this);

          if (lib_1.bBoxIntersect(titlebb, avoidbb, pad)) {
            shift = Math.max(shift, shiftSign * (avoidbb[avoid.side] - titlebb[backside]) + pad);
          }
        });
        shift = Math.min(maxshift, shift);
      }

      if (shift > 0 || maxshift < 0) {
        var shiftTemplate = {
          left: [-shift, 0],
          right: [shift, 0],
          top: [0, -shift],
          bottom: [0, shift]
        }[avoid.side];
        titleGroup.attr('transform', strTranslate$a(shiftTemplate[0], shiftTemplate[1]));
      }
    }
  }

  el.call(titleLayout);

  function setPlaceholder() {
    opacity = 0;
    isplaceholder = true;
    el.text(placeholder).on('mouseover.opacity', function () {
      d3.select(this).transition().duration(interactions.SHOW_PLACEHOLDER).style('opacity', 1);
    }).on('mouseout.opacity', function () {
      d3.select(this).transition().duration(interactions.HIDE_PLACEHOLDER).style('opacity', 0);
    });
  }

  if (editable) {
    if (!txt) setPlaceholder();else el.on('.opacity', null);
    el.call(svg_text_utils.makeEditable, {
      gd: gd
    }).on('edit', function (text) {
      if (traceIndex !== undefined) {
        registry.call('_guiRestyle', gd, prop, text, traceIndex);
      } else {
        registry.call('_guiRelayout', gd, prop, text);
      }
    }).on('cancel', function () {
      this.text(this.attr('data-unformatted')).call(titleLayout);
    }).on('input', function (d) {
      this.text(d || ' ').call(svg_text_utils.positionText, attributes.x, attributes.y);
    });
  }

  el.classed('js-placeholder', isplaceholder);
  return group;
}

var titles = {
  draw: draw$b
};

var utcFormat = require$$0.utcFormat;
var numberFormat$1 = lib_1.numberFormat;
var cleanNumber$1 = lib_1.cleanNumber;
var ms2DateTime = lib_1.ms2DateTime;
var dateTime2ms$1 = lib_1.dateTime2ms;
var ensureNumber = lib_1.ensureNumber;
var isArrayOrTypedArray$4 = lib_1.isArrayOrTypedArray;
var FP_SAFE$1 = numerical.FP_SAFE;
var BADNUM$3 = numerical.BADNUM;
var LOG_CLIP$1 = numerical.LOG_CLIP;
var ONEWEEK$1 = numerical.ONEWEEK;
var ONEDAY = numerical.ONEDAY;
var ONEHOUR = numerical.ONEHOUR;
var ONEMIN = numerical.ONEMIN;
var ONESEC = numerical.ONESEC;
var HOUR_PATTERN = constants$a.HOUR_PATTERN;
var WEEKDAY_PATTERN = constants$a.WEEKDAY_PATTERN;

function fromLog(v) {
  return Math.pow(10, v);
}

function isValidCategory(v) {
  return v !== null && v !== undefined;
}
/**
 * Define the conversion functions for an axis data is used in 5 ways:
 *
 *  d: data, in whatever form it's provided
 *  c: calcdata: turned into numbers, but not linearized
 *  l: linearized - same as c except for log axes (and other nonlinear
 *      mappings later?) this is used when we need to know if it's
 *      *possible* to show some data on this axis, without caring about
 *      the current range
 *  p: pixel value - mapped to the screen with current size and zoom
 *  r: ranges, tick0, and annotation positions match one of the above
 *     but are handled differently for different types:
 *     - linear and date: data format (d)
 *     - category: calcdata format (c), and will stay that way because
 *       the data format has no continuous mapping
 *     - log: linearized (l) format
 *       TODO: in v3.0 we plan to change it to data format. At that point
 *       shapes will work the same way as ranges, tick0, and annotations
 *       so they can use this conversion too.
 *
 * Creates/updates these conversion functions, and a few more utilities
 * like cleanRange, and makeCalcdata
 *
 * also clears the autotick constraints ._minDtick, ._forceTick0
 */


var set_convert = function setConvert(ax, fullLayout) {
  fullLayout = fullLayout || {};
  var axId = ax._id || 'x';
  var axLetter = axId.charAt(0);

  function toLog(v, clip) {
    if (v > 0) return Math.log(v) / Math.LN10;else if (v <= 0 && clip && ax.range && ax.range.length === 2) {
      // clip NaN (ie past negative infinity) to LOG_CLIP axis
      // length past the negative edge
      var r0 = ax.range[0];
      var r1 = ax.range[1];
      return 0.5 * (r0 + r1 - 2 * LOG_CLIP$1 * Math.abs(r0 - r1));
    } else return BADNUM$3;
  }
  /*
   * wrapped dateTime2ms that:
   * - accepts ms numbers for backward compatibility
   * - inserts a dummy arg so calendar is the 3rd arg (see notes below).
   * - defaults to ax.calendar
   */


  function dt2ms(v, _, calendar, opts) {
    if ((opts || {}).msUTC && fastIsnumeric(v)) {
      // For now it is only used
      // to fix bar length in milliseconds & gl3d ticks
      // It could be applied in other places in v3
      return +v;
    } // NOTE: Changed this behavior: previously we took any numeric value
    // to be a ms, even if it was a string that could be a bare year.
    // Now we convert it as a date if at all possible, and only try
    // as (local) ms if that fails.


    var ms = dateTime2ms$1(v, calendar || ax.calendar);

    if (ms === BADNUM$3) {
      if (fastIsnumeric(v)) {
        v = +v; // keep track of tenths of ms, that `new Date` will drop
        // same logic as in Lib.ms2DateTime

        var msecTenths = Math.floor(lib_1.mod(v + 0.05, 1) * 10);
        var msRounded = Math.round(v - msecTenths / 10);
        ms = dateTime2ms$1(new Date(msRounded)) + msecTenths / 10;
      } else return BADNUM$3;
    }

    return ms;
  } // wrapped ms2DateTime to insert default ax.calendar


  function ms2dt(v, r, calendar) {
    return ms2DateTime(v, r, calendar || ax.calendar);
  }

  function getCategoryName(v) {
    return ax._categories[Math.round(v)];
  }
  /*
   * setCategoryIndex: return the index of category v,
   * inserting it in the list if it's not already there
   *
   * this will enter the categories in the order it
   * encounters them, ie all the categories from the
   * first data set, then all the ones from the second
   * that aren't in the first etc.
   *
   * it is assumed that this function is being invoked in the
   * already sorted category order; otherwise there would be
   * a disconnect between the array and the index returned
   */


  function setCategoryIndex(v) {
    if (isValidCategory(v)) {
      if (ax._categoriesMap === undefined) {
        ax._categoriesMap = {};
      }

      if (ax._categoriesMap[v] !== undefined) {
        return ax._categoriesMap[v];
      } else {
        ax._categories.push(typeof v === 'number' ? String(v) : v);

        var curLength = ax._categories.length - 1;
        ax._categoriesMap[v] = curLength;
        return curLength;
      }
    }

    return BADNUM$3;
  }

  function setMultiCategoryIndex(arrayIn, len) {
    var arrayOut = new Array(len);

    for (var i = 0; i < len; i++) {
      var v0 = (arrayIn[0] || [])[i];
      var v1 = (arrayIn[1] || [])[i];
      arrayOut[i] = getCategoryIndex([v0, v1]);
    }

    return arrayOut;
  }

  function getCategoryIndex(v) {
    if (ax._categoriesMap) {
      return ax._categoriesMap[v];
    }
  }

  function getCategoryPosition(v) {
    // d2l/d2c variant that that won't add categories but will also
    // allow numbers to be mapped to the linearized axis positions
    var index = getCategoryIndex(v);
    if (index !== undefined) return index;
    if (fastIsnumeric(v)) return +v;
  }

  function getRangePosition(v) {
    return fastIsnumeric(v) ? +v : getCategoryIndex(v);
  } // include 2 fractional digits on pixel, for PDF zooming etc


  function _l2p(v, m, b) {
    return d3.round(b + m * v, 2);
  }

  function _p2l(px, m, b) {
    return (px - b) / m;
  }

  var l2p = function l2p(v) {
    if (!fastIsnumeric(v)) return BADNUM$3;
    return _l2p(v, ax._m, ax._b);
  };

  var p2l = function (px) {
    return _p2l(px, ax._m, ax._b);
  };

  if (ax.rangebreaks) {
    var isY = axLetter === 'y';

    l2p = function (v) {
      if (!fastIsnumeric(v)) return BADNUM$3;
      var len = ax._rangebreaks.length;
      if (!len) return _l2p(v, ax._m, ax._b);
      var flip = isY;
      if (ax.range[0] > ax.range[1]) flip = !flip;
      var signAx = flip ? -1 : 1;
      var pos = signAx * v;
      var q = 0;

      for (var i = 0; i < len; i++) {
        var min = signAx * ax._rangebreaks[i].min;
        var max = signAx * ax._rangebreaks[i].max;
        if (pos < min) break;
        if (pos > max) q = i + 1;else {
          // when falls into break, pick 'closest' offset
          q = pos < (min + max) / 2 ? i : i + 1;
          break;
        }
      }

      var b2 = ax._B[q] || 0;
      if (!isFinite(b2)) return 0; // avoid NaN translate e.g. in positionLabels if one keep zooming exactly into a break

      return _l2p(v, ax._m2, b2);
    };

    p2l = function (px) {
      var len = ax._rangebreaks.length;
      if (!len) return _p2l(px, ax._m, ax._b);
      var q = 0;

      for (var i = 0; i < len; i++) {
        if (px < ax._rangebreaks[i].pmin) break;
        if (px > ax._rangebreaks[i].pmax) q = i + 1;
      }

      return _p2l(px, ax._m2, ax._B[q]);
    };
  } // conversions among c/l/p are fairly simple - do them together for all axis types


  ax.c2l = ax.type === 'log' ? toLog : ensureNumber;
  ax.l2c = ax.type === 'log' ? fromLog : ensureNumber;
  ax.l2p = l2p;
  ax.p2l = p2l;
  ax.c2p = ax.type === 'log' ? function (v, clip) {
    return l2p(toLog(v, clip));
  } : l2p;
  ax.p2c = ax.type === 'log' ? function (px) {
    return fromLog(p2l(px));
  } : p2l;
  /*
   * now type-specific conversions for **ALL** other combinations
   * they're all written out, instead of being combinations of each other, for
   * both clarity and speed.
   */

  if (['linear', '-'].indexOf(ax.type) !== -1) {
    // all are data vals, but d and r need cleaning
    ax.d2r = ax.r2d = ax.d2c = ax.r2c = ax.d2l = ax.r2l = cleanNumber$1;
    ax.c2d = ax.c2r = ax.l2d = ax.l2r = ensureNumber;

    ax.d2p = ax.r2p = function (v) {
      return ax.l2p(cleanNumber$1(v));
    };

    ax.p2d = ax.p2r = p2l;
    ax.cleanPos = ensureNumber;
  } else if (ax.type === 'log') {
    // d and c are data vals, r and l are logged (but d and r need cleaning)
    ax.d2r = ax.d2l = function (v, clip) {
      return toLog(cleanNumber$1(v), clip);
    };

    ax.r2d = ax.r2c = function (v) {
      return fromLog(cleanNumber$1(v));
    };

    ax.d2c = ax.r2l = cleanNumber$1;
    ax.c2d = ax.l2r = ensureNumber;
    ax.c2r = toLog;
    ax.l2d = fromLog;

    ax.d2p = function (v, clip) {
      return ax.l2p(ax.d2r(v, clip));
    };

    ax.p2d = function (px) {
      return fromLog(p2l(px));
    };

    ax.r2p = function (v) {
      return ax.l2p(cleanNumber$1(v));
    };

    ax.p2r = p2l;
    ax.cleanPos = ensureNumber;
  } else if (ax.type === 'date') {
    // r and d are date strings, l and c are ms

    /*
     * Any of these functions with r and d on either side, calendar is the
     * **3rd** argument. log has reserved the second argument.
     *
     * Unless you need the special behavior of the second arg (ms2DateTime
     * uses this to limit precision, toLog uses true to clip negatives
     * to offscreen low rather than undefined), it's safe to pass 0.
     */
    ax.d2r = ax.r2d = lib_1.identity;
    ax.d2c = ax.r2c = ax.d2l = ax.r2l = dt2ms;
    ax.c2d = ax.c2r = ax.l2d = ax.l2r = ms2dt;

    ax.d2p = ax.r2p = function (v, _, calendar) {
      return ax.l2p(dt2ms(v, 0, calendar));
    };

    ax.p2d = ax.p2r = function (px, r, calendar) {
      return ms2dt(p2l(px), r, calendar);
    };

    ax.cleanPos = function (v) {
      return lib_1.cleanDate(v, BADNUM$3, ax.calendar);
    };
  } else if (ax.type === 'category') {
    // d is categories (string)
    // c and l are indices (numbers)
    // r is categories or numbers
    ax.d2c = ax.d2l = setCategoryIndex;
    ax.r2d = ax.c2d = ax.l2d = getCategoryName;
    ax.d2r = ax.d2l_noadd = getCategoryPosition;

    ax.r2c = function (v) {
      var index = getRangePosition(v);
      return index !== undefined ? index : ax.fraction2r(0.5);
    };

    ax.l2r = ax.c2r = ensureNumber;
    ax.r2l = getRangePosition;

    ax.d2p = function (v) {
      return ax.l2p(ax.r2c(v));
    };

    ax.p2d = function (px) {
      return getCategoryName(p2l(px));
    };

    ax.r2p = ax.d2p;
    ax.p2r = p2l;

    ax.cleanPos = function (v) {
      if (typeof v === 'string' && v !== '') return v;
      return ensureNumber(v);
    };
  } else if (ax.type === 'multicategory') {
    // N.B. multicategory axes don't define d2c and d2l,
    // as 'data-to-calcdata' conversion needs to take into
    // account all data array items as in ax.makeCalcdata.
    ax.r2d = ax.c2d = ax.l2d = getCategoryName;
    ax.d2r = ax.d2l_noadd = getCategoryPosition;

    ax.r2c = function (v) {
      var index = getCategoryPosition(v);
      return index !== undefined ? index : ax.fraction2r(0.5);
    };

    ax.r2c_just_indices = getCategoryIndex;
    ax.l2r = ax.c2r = ensureNumber;
    ax.r2l = getCategoryPosition;

    ax.d2p = function (v) {
      return ax.l2p(ax.r2c(v));
    };

    ax.p2d = function (px) {
      return getCategoryName(p2l(px));
    };

    ax.r2p = ax.d2p;
    ax.p2r = p2l;

    ax.cleanPos = function (v) {
      if (Array.isArray(v) || typeof v === 'string' && v !== '') return v;
      return ensureNumber(v);
    };

    ax.setupMultiCategory = function (fullData) {
      var traceIndices = ax._traceIndices;
      var i, j;
      var group = ax._matchGroup;

      if (group && ax._categories.length === 0) {
        for (var axId2 in group) {
          if (axId2 !== axId) {
            var ax2 = fullLayout[axis_ids.id2name(axId2)];
            traceIndices = traceIndices.concat(ax2._traceIndices);
          }
        }
      } // [ [cnt, {$cat: index}], for 1,2 ]


      var seen = [[0, {}], [0, {}]]; // [ [arrayIn[0][i], arrayIn[1][i]], for i .. N ]

      var list = [];

      for (i = 0; i < traceIndices.length; i++) {
        var trace = fullData[traceIndices[i]];

        if (axLetter in trace) {
          var arrayIn = trace[axLetter];
          var len = trace._length || lib_1.minRowLength(arrayIn);

          if (isArrayOrTypedArray$4(arrayIn[0]) && isArrayOrTypedArray$4(arrayIn[1])) {
            for (j = 0; j < len; j++) {
              var v0 = arrayIn[0][j];
              var v1 = arrayIn[1][j];

              if (isValidCategory(v0) && isValidCategory(v1)) {
                list.push([v0, v1]);

                if (!(v0 in seen[0][1])) {
                  seen[0][1][v0] = seen[0][0]++;
                }

                if (!(v1 in seen[1][1])) {
                  seen[1][1][v1] = seen[1][0]++;
                }
              }
            }
          }
        }
      }

      list.sort(function (a, b) {
        var ind0 = seen[0][1];
        var d = ind0[a[0]] - ind0[b[0]];
        if (d) return d;
        var ind1 = seen[1][1];
        return ind1[a[1]] - ind1[b[1]];
      });

      for (i = 0; i < list.length; i++) {
        setCategoryIndex(list[i]);
      }
    };
  } // find the range value at the specified (linear) fraction of the axis


  ax.fraction2r = function (v) {
    var rl0 = ax.r2l(ax.range[0]);
    var rl1 = ax.r2l(ax.range[1]);
    return ax.l2r(rl0 + v * (rl1 - rl0));
  }; // find the fraction of the range at the specified range value


  ax.r2fraction = function (v) {
    var rl0 = ax.r2l(ax.range[0]);
    var rl1 = ax.r2l(ax.range[1]);
    return (ax.r2l(v) - rl0) / (rl1 - rl0);
  };
  /*
   * cleanRange: make sure range is a couplet of valid & distinct values
   * keep numbers away from the limits of floating point numbers,
   * and dates away from the ends of our date system (+/- 9999 years)
   *
   * optional param rangeAttr: operate on a different attribute, like
   * ax._r, rather than ax.range
   */


  ax.cleanRange = function (rangeAttr, opts) {
    if (!opts) opts = {};
    if (!rangeAttr) rangeAttr = 'range';
    var range = lib_1.nestedProperty(ax, rangeAttr).get();
    var i, dflt;
    if (ax.type === 'date') dflt = lib_1.dfltRange(ax.calendar);else if (axLetter === 'y') dflt = constants$a.DFLTRANGEY;else if (ax._name === 'realaxis') dflt = [0, 1];else dflt = opts.dfltRange || constants$a.DFLTRANGEX; // make sure we don't later mutate the defaults

    dflt = dflt.slice();

    if (ax.rangemode === 'tozero' || ax.rangemode === 'nonnegative') {
      dflt[0] = 0;
    }

    if (!range || range.length !== 2) {
      lib_1.nestedProperty(ax, rangeAttr).set(dflt);
      return;
    }

    if (ax.type === 'date' && !ax.autorange) {
      // check if milliseconds or js date objects are provided for range
      // and convert to date strings
      range[0] = lib_1.cleanDate(range[0], BADNUM$3, ax.calendar);
      range[1] = lib_1.cleanDate(range[1], BADNUM$3, ax.calendar);
    }

    for (i = 0; i < 2; i++) {
      if (ax.type === 'date') {
        if (!lib_1.isDateTime(range[i], ax.calendar)) {
          ax[rangeAttr] = dflt;
          break;
        }

        if (ax.r2l(range[0]) === ax.r2l(range[1])) {
          // split by +/- 1 second
          var linCenter = lib_1.constrain(ax.r2l(range[0]), lib_1.MIN_MS + 1000, lib_1.MAX_MS - 1000);
          range[0] = ax.l2r(linCenter - 1000);
          range[1] = ax.l2r(linCenter + 1000);
          break;
        }
      } else {
        if (!fastIsnumeric(range[i])) {
          if (fastIsnumeric(range[1 - i])) {
            range[i] = range[1 - i] * (i ? 10 : 0.1);
          } else {
            ax[rangeAttr] = dflt;
            break;
          }
        }

        if (range[i] < -FP_SAFE$1) range[i] = -FP_SAFE$1;else if (range[i] > FP_SAFE$1) range[i] = FP_SAFE$1;

        if (range[0] === range[1]) {
          // somewhat arbitrary: split by 1 or 1ppm, whichever is bigger
          var inc = Math.max(1, Math.abs(range[0] * 1e-6));
          range[0] -= inc;
          range[1] += inc;
        }
      }
    }
  }; // set scaling to pixels


  ax.setScale = function (usePrivateRange) {
    var gs = fullLayout._size; // make sure we have a domain (pull it in from the axis
    // this one is overlaying if necessary)

    if (ax.overlaying) {
      var ax2 = axis_ids.getFromId({
        _fullLayout: fullLayout
      }, ax.overlaying);
      ax.domain = ax2.domain;
    } // While transitions are occurring, we get a double-transform
    // issue if we transform the drawn layer *and* use the new axis range to
    // draw the data. This allows us to construct setConvert using the pre-
    // interaction values of the range:


    var rangeAttr = usePrivateRange && ax._r ? '_r' : 'range';
    var calendar = ax.calendar;
    ax.cleanRange(rangeAttr);
    var rl0 = ax.r2l(ax[rangeAttr][0], calendar);
    var rl1 = ax.r2l(ax[rangeAttr][1], calendar);
    var isY = axLetter === 'y';

    if (isY) {
      ax._offset = gs.t + (1 - ax.domain[1]) * gs.h;
      ax._length = gs.h * (ax.domain[1] - ax.domain[0]);
      ax._m = ax._length / (rl0 - rl1);
      ax._b = -ax._m * rl1;
    } else {
      ax._offset = gs.l + ax.domain[0] * gs.w;
      ax._length = gs.w * (ax.domain[1] - ax.domain[0]);
      ax._m = ax._length / (rl1 - rl0);
      ax._b = -ax._m * rl0;
    } // set of "N" disjoint rangebreaks inside the range


    ax._rangebreaks = []; // length of these rangebreaks in value space - negative on reversed axes

    ax._lBreaks = 0; // l2p slope (same for all intervals)

    ax._m2 = 0; // set of l2p offsets (one for each of the (N+1) piecewise intervals)

    ax._B = [];

    if (ax.rangebreaks) {
      var i, brk;
      ax._rangebreaks = ax.locateBreaks(Math.min(rl0, rl1), Math.max(rl0, rl1));

      if (ax._rangebreaks.length) {
        for (i = 0; i < ax._rangebreaks.length; i++) {
          brk = ax._rangebreaks[i];
          ax._lBreaks += Math.abs(brk.max - brk.min);
        }

        var flip = isY;
        if (rl0 > rl1) flip = !flip;
        if (flip) ax._rangebreaks.reverse();
        var sign = flip ? -1 : 1;
        ax._m2 = sign * ax._length / (Math.abs(rl1 - rl0) - ax._lBreaks);

        ax._B.push(-ax._m2 * (isY ? rl1 : rl0));

        for (i = 0; i < ax._rangebreaks.length; i++) {
          brk = ax._rangebreaks[i];

          ax._B.push(ax._B[ax._B.length - 1] - sign * ax._m2 * (brk.max - brk.min));
        } // fill pixel (i.e. 'p') min/max here,
        // to not have to loop through the _rangebreaks twice during `p2l`


        for (i = 0; i < ax._rangebreaks.length; i++) {
          brk = ax._rangebreaks[i];
          brk.pmin = l2p(brk.min);
          brk.pmax = l2p(brk.max);
        }
      }
    }

    if (!isFinite(ax._m) || !isFinite(ax._b) || ax._length < 0) {
      fullLayout._replotting = false;
      throw new Error('Something went wrong with axis scaling');
    }
  };

  ax.maskBreaks = function (v) {
    var rangebreaksIn = ax.rangebreaks || [];
    var bnds, b0, b1, vb, vDate;

    if (!rangebreaksIn._cachedPatterns) {
      rangebreaksIn._cachedPatterns = rangebreaksIn.map(function (brk) {
        return brk.enabled && brk.bounds ? lib_1.simpleMap(brk.bounds, brk.pattern ? cleanNumber$1 : ax.d2c // case of pattern: ''
        ) : null;
      });
    }

    if (!rangebreaksIn._cachedValues) {
      rangebreaksIn._cachedValues = rangebreaksIn.map(function (brk) {
        return brk.enabled && brk.values ? lib_1.simpleMap(brk.values, ax.d2c).sort(lib_1.sorterAsc) : null;
      });
    }

    for (var i = 0; i < rangebreaksIn.length; i++) {
      var brk = rangebreaksIn[i];

      if (brk.enabled) {
        if (brk.bounds) {
          var pattern = brk.pattern;
          bnds = rangebreaksIn._cachedPatterns[i];
          b0 = bnds[0];
          b1 = bnds[1];

          switch (pattern) {
            case WEEKDAY_PATTERN:
              vDate = new Date(v);
              vb = vDate.getUTCDay();

              if (b0 > b1) {
                b1 += 7;
                if (vb < b0) vb += 7;
              }

              break;

            case HOUR_PATTERN:
              vDate = new Date(v);
              var hours = vDate.getUTCHours();
              var minutes = vDate.getUTCMinutes();
              var seconds = vDate.getUTCSeconds();
              var milliseconds = vDate.getUTCMilliseconds();
              vb = hours + (minutes / 60 + seconds / 3600 + milliseconds / 3600000);

              if (b0 > b1) {
                b1 += 24;
                if (vb < b0) vb += 24;
              }

              break;

            case '':
              // N.B. should work on date axes as well!
              // e.g. { bounds: ['2020-01-04', '2020-01-05 23:59'] }
              // TODO should work with reversed-range axes
              vb = v;
              break;
          }

          if (vb >= b0 && vb < b1) return BADNUM$3;
        } else {
          var vals = rangebreaksIn._cachedValues[i];

          for (var j = 0; j < vals.length; j++) {
            b0 = vals[j];
            b1 = b0 + brk.dvalue;
            if (v >= b0 && v < b1) return BADNUM$3;
          }
        }
      }
    }

    return v;
  };

  ax.locateBreaks = function (r0, r1) {
    var i, bnds, b0, b1;
    var rangebreaksOut = [];
    if (!ax.rangebreaks) return rangebreaksOut;
    var rangebreaksIn = ax.rangebreaks.slice().sort(function (a, b) {
      if (a.pattern === WEEKDAY_PATTERN && b.pattern === HOUR_PATTERN) return -1;
      if (b.pattern === WEEKDAY_PATTERN && a.pattern === HOUR_PATTERN) return 1;
      return 0;
    });

    var addBreak = function (min, max) {
      min = lib_1.constrain(min, r0, r1);
      max = lib_1.constrain(max, r0, r1);
      if (min === max) return;
      var isNewBreak = true;

      for (var j = 0; j < rangebreaksOut.length; j++) {
        var brkj = rangebreaksOut[j];

        if (min < brkj.max && max >= brkj.min) {
          if (min < brkj.min) {
            brkj.min = min;
          }

          if (max > brkj.max) {
            brkj.max = max;
          }

          isNewBreak = false;
        }
      }

      if (isNewBreak) {
        rangebreaksOut.push({
          min: min,
          max: max
        });
      }
    };

    for (i = 0; i < rangebreaksIn.length; i++) {
      var brk = rangebreaksIn[i];

      if (brk.enabled) {
        if (brk.bounds) {
          var t0 = r0;
          var t1 = r1;

          if (brk.pattern) {
            // to remove decimal (most often found in auto ranges)
            t0 = Math.floor(t0);
          }

          bnds = lib_1.simpleMap(brk.bounds, brk.pattern ? cleanNumber$1 : ax.r2l);
          b0 = bnds[0];
          b1 = bnds[1]; // r0 value as date

          var t0Date = new Date(t0); // r0 value for break pattern

          var bndDelta; // step in ms between rangebreaks

          var step;

          switch (brk.pattern) {
            case WEEKDAY_PATTERN:
              step = ONEWEEK$1;
              bndDelta = ((b1 < b0 ? 7 : 0) + (b1 - b0)) * ONEDAY;
              t0 += b0 * ONEDAY - (t0Date.getUTCDay() * ONEDAY + t0Date.getUTCHours() * ONEHOUR + t0Date.getUTCMinutes() * ONEMIN + t0Date.getUTCSeconds() * ONESEC + t0Date.getUTCMilliseconds());
              break;

            case HOUR_PATTERN:
              step = ONEDAY;
              bndDelta = ((b1 < b0 ? 24 : 0) + (b1 - b0)) * ONEHOUR;
              t0 += b0 * ONEHOUR - (t0Date.getUTCHours() * ONEHOUR + t0Date.getUTCMinutes() * ONEMIN + t0Date.getUTCSeconds() * ONESEC + t0Date.getUTCMilliseconds());
              break;

            default:
              t0 = Math.min(bnds[0], bnds[1]);
              t1 = Math.max(bnds[0], bnds[1]);
              step = t1 - t0;
              bndDelta = step;
          }

          for (var t = t0; t < t1; t += step) {
            addBreak(t, t + bndDelta);
          }
        } else {
          var vals = lib_1.simpleMap(brk.values, ax.d2c);

          for (var j = 0; j < vals.length; j++) {
            b0 = vals[j];
            b1 = b0 + brk.dvalue;
            addBreak(b0, b1);
          }
        }
      }
    }

    rangebreaksOut.sort(function (a, b) {
      return a.min - b.min;
    });
    return rangebreaksOut;
  }; // makeCalcdata: takes an x or y array and converts it
  // to a position on the axis object "ax"
  // inputs:
  //      trace - a data object from gd.data
  //      axLetter - a string, either 'x' or 'y', for which item
  //          to convert (TODO: is this now always the same as
  //          the first letter of ax._id?)
  // in case the expected data isn't there, make a list of
  // integers based on the opposite data


  ax.makeCalcdata = function (trace, axLetter, opts) {
    var arrayIn, arrayOut, i, len;
    var axType = ax.type;
    var cal = axType === 'date' && trace[axLetter + 'calendar'];

    if (axLetter in trace) {
      arrayIn = trace[axLetter];
      len = trace._length || lib_1.minRowLength(arrayIn);

      if (lib_1.isTypedArray(arrayIn) && (axType === 'linear' || axType === 'log')) {
        if (len === arrayIn.length) {
          return arrayIn;
        } else if (arrayIn.subarray) {
          return arrayIn.subarray(0, len);
        }
      }

      if (axType === 'multicategory') {
        return setMultiCategoryIndex(arrayIn, len);
      }

      arrayOut = new Array(len);

      for (i = 0; i < len; i++) {
        arrayOut[i] = ax.d2c(arrayIn[i], 0, cal, opts);
      }
    } else {
      var v0 = axLetter + '0' in trace ? ax.d2c(trace[axLetter + '0'], 0, cal) : 0;
      var dv = trace['d' + axLetter] ? Number(trace['d' + axLetter]) : 1; // the opposing data, for size if we have x and dx etc

      arrayIn = trace[{
        x: 'y',
        y: 'x'
      }[axLetter]];
      len = trace._length || arrayIn.length;
      arrayOut = new Array(len);

      for (i = 0; i < len; i++) {
        arrayOut[i] = v0 + i * dv;
      }
    } // mask (i.e. set to BADNUM) coords that fall inside rangebreaks


    if (ax.rangebreaks) {
      for (i = 0; i < len; i++) {
        arrayOut[i] = ax.maskBreaks(arrayOut[i]);
      }
    }

    return arrayOut;
  };

  ax.isValidRange = function (range) {
    return Array.isArray(range) && range.length === 2 && fastIsnumeric(ax.r2l(range[0])) && fastIsnumeric(ax.r2l(range[1]));
  };

  ax.isPtWithinRange = function (d, calendar) {
    var coord = ax.c2l(d[axLetter], null, calendar);
    var r0 = ax.r2l(ax.range[0]);
    var r1 = ax.r2l(ax.range[1]);

    if (r0 < r1) {
      return r0 <= coord && coord <= r1;
    } else {
      // Reversed axis case.
      return r1 <= coord && coord <= r0;
    }
  };

  ax._emptyCategories = function () {
    ax._categories = [];
    ax._categoriesMap = {};
  }; // should skip if not category nor multicategory


  ax.clearCalc = function () {
    var group = ax._matchGroup;

    if (group) {
      var categories = null;
      var categoriesMap = null;

      for (var axId2 in group) {
        var ax2 = fullLayout[axis_ids.id2name(axId2)];

        if (ax2._categories) {
          categories = ax2._categories;
          categoriesMap = ax2._categoriesMap;
          break;
        }
      }

      if (categories && categoriesMap) {
        ax._categories = categories;
        ax._categoriesMap = categoriesMap;
      } else {
        ax._emptyCategories();
      }
    } else {
      ax._emptyCategories();
    }

    if (ax._initialCategories) {
      for (var j = 0; j < ax._initialCategories.length; j++) {
        setCategoryIndex(ax._initialCategories[j]);
      }
    }
  }; // sort the axis (and all the matching ones) by _initialCategories
  // returns the indices of the traces affected by the reordering


  ax.sortByInitialCategories = function () {
    var affectedTraces = [];

    ax._emptyCategories();

    if (ax._initialCategories) {
      for (var j = 0; j < ax._initialCategories.length; j++) {
        setCategoryIndex(ax._initialCategories[j]);
      }
    }

    affectedTraces = affectedTraces.concat(ax._traceIndices); // Propagate to matching axes

    var group = ax._matchGroup;

    for (var axId2 in group) {
      if (axId === axId2) continue;
      var ax2 = fullLayout[axis_ids.id2name(axId2)];
      ax2._categories = ax._categories;
      ax2._categoriesMap = ax._categoriesMap;
      affectedTraces = affectedTraces.concat(ax2._traceIndices);
    }

    return affectedTraces;
  }; // Propagate localization into the axis so that
  // methods in Axes can use it w/o having to pass fullLayout
  // Default (non-d3) number formatting uses separators directly
  // dates and d3-formatted numbers use the d3 locale
  // Fall back on default format for dummy axes that don't care about formatting


  var locale = fullLayout._d3locale;

  if (ax.type === 'date') {
    ax._dateFormat = locale ? locale.timeFormat : utcFormat;
    ax._extraFormat = fullLayout._extraFormat;
  } // occasionally we need _numFormat to pass through
  // even though it won't be needed by this axis


  ax._separators = fullLayout.separators;
  ax._numFormat = locale ? locale.numberFormat : numberFormat$1; // and for bar charts and box plots: reset forced minimum tick spacing

  delete ax._minDtick;
  delete ax._forceTick0;
};

var BADNUM$2 = numerical.BADNUM;
var isArrayOrTypedArray$3 = lib_1.isArrayOrTypedArray;
var isDateTime = lib_1.isDateTime;
var cleanNumber = lib_1.cleanNumber;
var round = Math.round;

var axis_autotype = function autoType(array, calendar, opts) {
  var a = array;
  var noMultiCategory = opts.noMultiCategory;
  if (isArrayOrTypedArray$3(a) && !a.length) return '-';
  if (!noMultiCategory && multiCategory(a)) return 'multicategory';

  if (noMultiCategory && Array.isArray(a[0])) {
    // no need to flat typed arrays here
    var b = [];

    for (var i = 0; i < a.length; i++) {
      if (isArrayOrTypedArray$3(a[i])) {
        for (var j = 0; j < a[i].length; j++) {
          b.push(a[i][j]);
        }
      }
    }

    a = b;
  }

  if (moreDates(a, calendar)) return 'date';
  var convertNumeric = opts.autotypenumbers !== 'strict'; // compare against strict, just in case autotypenumbers was not provided in opts

  if (category(a, convertNumeric)) return 'category';
  if (linearOK(a, convertNumeric)) return 'linear';
  return '-';
};

function hasTypeNumber(v, convertNumeric) {
  return convertNumeric ? fastIsnumeric(v) : typeof v === 'number';
} // is there at least one number in array? If not, we should leave
// ax.type empty so it can be autoset later


function linearOK(a, convertNumeric) {
  var len = a.length;

  for (var i = 0; i < len; i++) {
    if (hasTypeNumber(a[i], convertNumeric)) return true;
  }

  return false;
} // does the array a have mostly dates rather than numbers?
// note: some values can be neither (such as blanks, text)
// 2- or 4-digit integers can be both, so require twice as many
// dates as non-dates, to exclude cases with mostly 2 & 4 digit
// numbers and a few dates
// as with categories, consider DISTINCT values only.


function moreDates(a, calendar) {
  var len = a.length;
  var inc = getIncrement(len);
  var dats = 0;
  var nums = 0;
  var seen = {};

  for (var f = 0; f < len; f += inc) {
    var i = round(f);
    var ai = a[i];
    var stri = String(ai);
    if (seen[stri]) continue;
    seen[stri] = 1;
    if (isDateTime(ai, calendar)) dats++;
    if (fastIsnumeric(ai)) nums++;
  }

  return dats > nums * 2;
} // return increment to test at most 1000 points, evenly spaced


function getIncrement(len) {
  return Math.max(1, (len - 1) / 1000);
} // are the (x,y)-values in gd.data mostly text?
// require twice as many DISTINCT categories as distinct numbers


function category(a, convertNumeric) {
  var len = a.length;
  var inc = getIncrement(len);
  var nums = 0;
  var cats = 0;
  var seen = {};

  for (var f = 0; f < len; f += inc) {
    var i = round(f);
    var ai = a[i];
    var stri = String(ai);
    if (seen[stri]) continue;
    seen[stri] = 1;
    var t = typeof ai;
    if (t === 'boolean') cats++;else if (convertNumeric ? cleanNumber(ai) !== BADNUM$2 : t === 'number') nums++;else if (t === 'string') cats++;
  }

  return cats > nums * 2;
} // very-loose requirements for multicategory,
// trace modules that should never auto-type to multicategory
// should be declared with 'noMultiCategory'


function multiCategory(a) {
  return isArrayOrTypedArray$3(a[0]) && isArrayOrTypedArray$3(a[1]);
}

var FP_SAFE = numerical.FP_SAFE;
var getFromId$2 = axis_ids.getFromId;
var isLinked = axis_ids.isLinked;
var autorange = {
  getAutoRange: getAutoRange$1,
  makePadFn: makePadFn,
  doAutoRange: doAutoRange,
  findExtremes: findExtremes,
  concatExtremes: concatExtremes
};
/**
 * getAutoRange
 *
 * Collects all _extremes values corresponding to a given axis
 * and computes its auto range.
 *
 * Note that getAutoRange uses return values from findExtremes.
 *
 * @param {object} gd:
 *   graph div object with filled-in fullData and fullLayout, in particular
 *   with filled-in '_extremes' containers:
 *   {
 *      val: calcdata value,
 *      pad: extra pixels beyond this value,
 *      extrapad: bool, does this point want 5% extra padding
 *   }
 * @param {object} ax:
 *   full axis object, in particular with filled-in '_traceIndices'
 *   and '_annIndices' / '_shapeIndices' if applicable
 * @return {array}
 *   an array of [min, max]. These are calcdata for log and category axes
 *   and data for linear and date axes.
 *
 * TODO: we want to change log to data as well, but it's hard to do this
 * maintaining backward compatibility. category will always have to use calcdata
 * though, because otherwise values between categories (or outside all categories)
 * would be impossible.
 */

function getAutoRange$1(gd, ax) {
  var i, j;
  var newRange = [];
  var fullLayout = gd._fullLayout;
  var getPadMin = makePadFn(fullLayout, ax, 0);
  var getPadMax = makePadFn(fullLayout, ax, 1);
  var extremes = concatExtremes(gd, ax);
  var minArray = extremes.min;
  var maxArray = extremes.max;

  if (minArray.length === 0 || maxArray.length === 0) {
    return lib_1.simpleMap(ax.range, ax.r2l);
  }

  var minmin = minArray[0].val;
  var maxmax = maxArray[0].val;

  for (i = 1; i < minArray.length; i++) {
    if (minmin !== maxmax) break;
    minmin = Math.min(minmin, minArray[i].val);
  }

  for (i = 1; i < maxArray.length; i++) {
    if (minmin !== maxmax) break;
    maxmax = Math.max(maxmax, maxArray[i].val);
  }

  var axReverse = false;

  if (ax.range) {
    var rng = lib_1.simpleMap(ax.range, ax.r2l);
    axReverse = rng[1] < rng[0];
  } // one-time setting to easily reverse the axis
  // when plotting from code


  if (ax.autorange === 'reversed') {
    axReverse = true;
    ax.autorange = true;
  }

  var rangeMode = ax.rangemode;
  var toZero = rangeMode === 'tozero';
  var nonNegative = rangeMode === 'nonnegative';
  var axLen = ax._length; // don't allow padding to reduce the data to < 10% of the length

  var minSpan = axLen / 10;
  var mbest = 0;
  var minpt, maxpt, minbest, maxbest, dp, dv;

  for (i = 0; i < minArray.length; i++) {
    minpt = minArray[i];

    for (j = 0; j < maxArray.length; j++) {
      maxpt = maxArray[j];
      dv = maxpt.val - minpt.val - calcBreaksLength(ax, minpt.val, maxpt.val);

      if (dv > 0) {
        dp = axLen - getPadMin(minpt) - getPadMax(maxpt);

        if (dp > minSpan) {
          if (dv / dp > mbest) {
            minbest = minpt;
            maxbest = maxpt;
            mbest = dv / dp;
          }
        } else if (dv / axLen > mbest) {
          // in case of padding longer than the axis
          // at least include the unpadded data values.
          minbest = {
            val: minpt.val,
            nopad: 1
          };
          maxbest = {
            val: maxpt.val,
            nopad: 1
          };
          mbest = dv / axLen;
        }
      }
    }
  }

  function maximumPad(prev, pt) {
    return Math.max(prev, getPadMax(pt));
  }

  if (minmin === maxmax) {
    var lower = minmin - 1;
    var upper = minmin + 1;

    if (toZero) {
      if (minmin === 0) {
        // The only value we have on this axis is 0, and we want to
        // autorange so zero is one end.
        // In principle this could be [0, 1] or [-1, 0] but usually
        // 'tozero' pins 0 to the low end, so follow that.
        newRange = [0, 1];
      } else {
        var maxPad = (minmin > 0 ? maxArray : minArray).reduce(maximumPad, 0); // we're pushing a single value away from the edge due to its
        // padding, with the other end clamped at zero
        // 0.5 means don't push it farther than the center.

        var rangeEnd = minmin / (1 - Math.min(0.5, maxPad / axLen));
        newRange = minmin > 0 ? [0, rangeEnd] : [rangeEnd, 0];
      }
    } else if (nonNegative) {
      newRange = [Math.max(0, lower), Math.max(1, upper)];
    } else {
      newRange = [lower, upper];
    }
  } else {
    if (toZero) {
      if (minbest.val >= 0) {
        minbest = {
          val: 0,
          nopad: 1
        };
      }

      if (maxbest.val <= 0) {
        maxbest = {
          val: 0,
          nopad: 1
        };
      }
    } else if (nonNegative) {
      if (minbest.val - mbest * getPadMin(minbest) < 0) {
        minbest = {
          val: 0,
          nopad: 1
        };
      }

      if (maxbest.val <= 0) {
        maxbest = {
          val: 1,
          nopad: 1
        };
      }
    } // in case it changed again...


    mbest = (maxbest.val - minbest.val - calcBreaksLength(ax, minpt.val, maxpt.val)) / (axLen - getPadMin(minbest) - getPadMax(maxbest));
    newRange = [minbest.val - mbest * getPadMin(minbest), maxbest.val + mbest * getPadMax(maxbest)];
  } // maintain reversal


  if (axReverse) newRange.reverse();
  return lib_1.simpleMap(newRange, ax.l2r || Number);
} // find axis rangebreaks in [v0,v1] and compute its length in value space


function calcBreaksLength(ax, v0, v1) {
  var lBreaks = 0;

  if (ax.rangebreaks) {
    var rangebreaksOut = ax.locateBreaks(v0, v1);

    for (var i = 0; i < rangebreaksOut.length; i++) {
      var brk = rangebreaksOut[i];
      lBreaks += brk.max - brk.min;
    }
  }

  return lBreaks;
}
/*
 * calculate the pixel padding for ax._min and ax._max entries with
 * optional extrapad as 5% of the total axis length
 */


function makePadFn(fullLayout, ax, max) {
  // 5% padding for points that specify extrapad: true
  var extrappad = 0.05 * ax._length;
  var anchorAxis = ax._anchorAxis || {};

  if ((ax.ticklabelposition || '').indexOf('inside') !== -1 || (anchorAxis.ticklabelposition || '').indexOf('inside') !== -1) {
    var axReverse = ax.autorange === 'reversed';

    if (!axReverse) {
      var rng = lib_1.simpleMap(ax.range, ax.r2l);
      axReverse = rng[1] < rng[0];
    }

    if (axReverse) max = !max;
  }

  var zero = 0;

  if (!isLinked(fullLayout, ax._id)) {
    zero = padInsideLabelsOnAnchorAxis(fullLayout, ax, max);
  }

  extrappad = Math.max(zero, extrappad); // domain-constrained axes: base extrappad on the unconstrained
  // domain so it's consistent as the domain changes

  if (ax.constrain === 'domain' && ax._inputDomain) {
    extrappad *= (ax._inputDomain[1] - ax._inputDomain[0]) / (ax.domain[1] - ax.domain[0]);
  }

  return function getPad(pt) {
    if (pt.nopad) return 0;
    return pt.pad + (pt.extrapad ? extrappad : zero);
  };
}

var TEXTPAD = 3;

function padInsideLabelsOnAnchorAxis(fullLayout, ax, max) {
  var pad = 0;
  var isX = ax._id.charAt(0) === 'x';

  for (var subplot in fullLayout._plots) {
    var plotinfo = fullLayout._plots[subplot];
    if (ax._id !== plotinfo.xaxis._id && ax._id !== plotinfo.yaxis._id) continue;
    var anchorAxis = (isX ? plotinfo.yaxis : plotinfo.xaxis) || {};

    if ((anchorAxis.ticklabelposition || '').indexOf('inside') !== -1) {
      // increase padding to make more room for inside tick labels of the counter axis
      if (!max && (anchorAxis.side === 'left' || anchorAxis.side === 'bottom') || max && (anchorAxis.side === 'top' || anchorAxis.side === 'right')) {
        if (anchorAxis._vals) {
          var rad = lib_1.deg2rad(anchorAxis._tickAngles[anchorAxis._id + 'tick'] || 0);
          var cosA = Math.abs(Math.cos(rad));
          var sinA = Math.abs(Math.sin(rad)); // no stashed bounding boxes - stash bounding boxes

          if (!anchorAxis._vals[0].bb) {
            var cls = anchorAxis._id + 'tick';
            var tickLabels = anchorAxis._selections[cls];
            tickLabels.each(function (d) {
              var thisLabel = d3.select(this);
              var mathjaxGroup = thisLabel.select('.text-math-group');

              if (mathjaxGroup.empty()) {
                d.bb = drawing_1.bBox(thisLabel.node());
              }
            });
          } // use bounding boxes


          for (var i = 0; i < anchorAxis._vals.length; i++) {
            var t = anchorAxis._vals[i];
            var bb = t.bb;

            if (bb) {
              var w = 2 * TEXTPAD + bb.width;
              var h = 2 * TEXTPAD + bb.height;
              pad = Math.max(pad, isX ? Math.max(w * cosA, h * sinA) : Math.max(h * cosA, w * sinA));
            }
          }
        }

        if (anchorAxis.ticks === 'inside' && anchorAxis.ticklabelposition === 'inside') {
          pad += anchorAxis.ticklen || 0;
        }
      }
    }
  }

  return pad;
}

function concatExtremes(gd, ax, noMatch) {
  var axId = ax._id;
  var fullData = gd._fullData;
  var fullLayout = gd._fullLayout;
  var minArray = [];
  var maxArray = [];
  var i, j, d;

  function _concat(cont, indices) {
    for (i = 0; i < indices.length; i++) {
      var item = cont[indices[i]];
      var extremes = (item._extremes || {})[axId];

      if (item.visible === true && extremes) {
        for (j = 0; j < extremes.min.length; j++) {
          d = extremes.min[j];
          collapseMinArray(minArray, d.val, d.pad, {
            extrapad: d.extrapad
          });
        }

        for (j = 0; j < extremes.max.length; j++) {
          d = extremes.max[j];
          collapseMaxArray(maxArray, d.val, d.pad, {
            extrapad: d.extrapad
          });
        }
      }
    }
  }

  _concat(fullData, ax._traceIndices);

  _concat(fullLayout.annotations || [], ax._annIndices || []);

  _concat(fullLayout.shapes || [], ax._shapeIndices || []); // Include the extremes from other matched axes with this one


  if (ax._matchGroup && !noMatch) {
    for (var axId2 in ax._matchGroup) {
      if (axId2 !== ax._id) {
        var ax2 = getFromId$2(gd, axId2);
        var extremes2 = concatExtremes(gd, ax2, true); // convert padding on the second axis to the first with lenRatio

        var lenRatio = ax._length / ax2._length;

        for (j = 0; j < extremes2.min.length; j++) {
          d = extremes2.min[j];
          collapseMinArray(minArray, d.val, d.pad * lenRatio, {
            extrapad: d.extrapad
          });
        }

        for (j = 0; j < extremes2.max.length; j++) {
          d = extremes2.max[j];
          collapseMaxArray(maxArray, d.val, d.pad * lenRatio, {
            extrapad: d.extrapad
          });
        }
      }
    }
  }

  return {
    min: minArray,
    max: maxArray
  };
}

function doAutoRange(gd, ax, presetRange) {
  ax.setScale();

  if (ax.autorange) {
    ax.range = presetRange ? presetRange.slice() : getAutoRange$1(gd, ax);
    ax._r = ax.range.slice();
    ax._rl = lib_1.simpleMap(ax._r, ax.r2l); // doAutoRange will get called on fullLayout,
    // but we want to report its results back to layout

    var axIn = ax._input; // before we edit _input, store preGUI values

    var edits = {};
    edits[ax._attr + '.range'] = ax.range;
    edits[ax._attr + '.autorange'] = ax.autorange;
    registry.call('_storeDirectGUIEdit', gd.layout, gd._fullLayout._preGUI, edits);
    axIn.range = ax.range.slice();
    axIn.autorange = ax.autorange;
  }

  var anchorAx = ax._anchorAxis;

  if (anchorAx && anchorAx.rangeslider) {
    var axeRangeOpts = anchorAx.rangeslider[ax._name];

    if (axeRangeOpts) {
      if (axeRangeOpts.rangemode === 'auto') {
        axeRangeOpts.range = getAutoRange$1(gd, ax);
      }
    }

    anchorAx._input.rangeslider[ax._name] = lib_1.extendFlat({}, axeRangeOpts);
  }
}
/**
 * findExtremes
 *
 * Find min/max extremes of an array of coordinates on a given axis.
 *
 * Note that findExtremes is called during `calc`, when we don't yet know the axis
 * length; all the inputs should be based solely on the trace data, nothing
 * about the axis layout.
 *
 * Note that `ppad` and `vpad` as well as their asymmetric variants refer to
 * the before and after padding of the passed `data` array, not to the whole axis.
 *
 * @param {object} ax: full axis object
 *   relies on
 *   - ax.type
 *   - ax._m (just its sign)
 *   - ax.d2l
 * @param {array} data:
 *  array of numbers (i.e. already run though ax.d2c)
 * @param {object} opts:
 *  available keys are:
 *      vpad: (number or number array) pad values (data value +-vpad)
 *      ppad: (number or number array) pad pixels (pixel location +-ppad)
 *      ppadplus, ppadminus, vpadplus, vpadminus:
 *          separate padding for each side, overrides symmetric
 *      padded: (boolean) add 5% padding to both ends
 *          (unless one end is overridden by tozero)
 *      tozero: (boolean) make sure to include zero if axis is linear,
 *          and make it a tight bound if possible
 *      vpadLinearized: (boolean) whether or not vpad (or vpadplus/vpadminus)
 *          is linearized (for log scale axes)
 *
 * @return {object}
 *  - min {array of objects}
 *  - max {array of objects}
 *  each object item has fields:
 *    - val {number}
 *    - pad {number}
 *    - extrappad {number}
 *  - opts {object}: a ref to the passed "options" object
 */


function findExtremes(ax, data, opts) {
  if (!opts) opts = {};
  if (!ax._m) ax.setScale();
  var minArray = [];
  var maxArray = [];
  var len = data.length;
  var extrapad = opts.padded || false;
  var tozero = opts.tozero && (ax.type === 'linear' || ax.type === '-');
  var isLog = ax.type === 'log';
  var hasArrayOption = false;
  var vpadLinearized = opts.vpadLinearized || false;
  var i, v, di, dmin, dmax, ppadiplus, ppadiminus, vmin, vmax;

  function makePadAccessor(item) {
    if (Array.isArray(item)) {
      hasArrayOption = true;
      return function (i) {
        return Math.max(Number(item[i] || 0), 0);
      };
    } else {
      var v = Math.max(Number(item || 0), 0);
      return function () {
        return v;
      };
    }
  }

  var ppadplus = makePadAccessor((ax._m > 0 ? opts.ppadplus : opts.ppadminus) || opts.ppad || 0);
  var ppadminus = makePadAccessor((ax._m > 0 ? opts.ppadminus : opts.ppadplus) || opts.ppad || 0);
  var vpadplus = makePadAccessor(opts.vpadplus || opts.vpad);
  var vpadminus = makePadAccessor(opts.vpadminus || opts.vpad);

  if (!hasArrayOption) {
    // with no arrays other than `data` we don't need to consider
    // every point, only the extreme data points
    vmin = Infinity;
    vmax = -Infinity;

    if (isLog) {
      for (i = 0; i < len; i++) {
        v = data[i]; // data is not linearized yet so we still have to filter out negative logs

        if (v < vmin && v > 0) vmin = v;
        if (v > vmax && v < FP_SAFE) vmax = v;
      }
    } else {
      for (i = 0; i < len; i++) {
        v = data[i];
        if (v < vmin && v > -FP_SAFE) vmin = v;
        if (v > vmax && v < FP_SAFE) vmax = v;
      }
    }

    data = [vmin, vmax];
    len = 2;
  }

  var collapseOpts = {
    tozero: tozero,
    extrapad: extrapad
  };

  function addItem(i) {
    di = data[i];
    if (!fastIsnumeric(di)) return;
    ppadiplus = ppadplus(i);
    ppadiminus = ppadminus(i);

    if (vpadLinearized) {
      dmin = ax.c2l(di) - vpadminus(i);
      dmax = ax.c2l(di) + vpadplus(i);
    } else {
      vmin = di - vpadminus(i);
      vmax = di + vpadplus(i); // special case for log axes: if vpad makes this object span
      // more than an order of mag, clip it to one order. This is so
      // we don't have non-positive errors or absurdly large lower
      // range due to rounding errors

      if (isLog && vmin < vmax / 10) vmin = vmax / 10;
      dmin = ax.c2l(vmin);
      dmax = ax.c2l(vmax);
    }

    if (tozero) {
      dmin = Math.min(0, dmin);
      dmax = Math.max(0, dmax);
    }

    if (goodNumber(dmin)) {
      collapseMinArray(minArray, dmin, ppadiminus, collapseOpts);
    }

    if (goodNumber(dmax)) {
      collapseMaxArray(maxArray, dmax, ppadiplus, collapseOpts);
    }
  } // For efficiency covering monotonic or near-monotonic data,
  // check a few points at both ends first and then sweep
  // through the middle


  var iMax = Math.min(6, len);

  for (i = 0; i < iMax; i++) addItem(i);

  for (i = len - 1; i >= iMax; i--) addItem(i);

  return {
    min: minArray,
    max: maxArray,
    opts: opts
  };
}

function collapseMinArray(array, newVal, newPad, opts) {
  collapseArray(array, newVal, newPad, opts, lessOrEqual);
}

function collapseMaxArray(array, newVal, newPad, opts) {
  collapseArray(array, newVal, newPad, opts, greaterOrEqual);
}
/**
 * collapseArray
 *
 * Takes items from 'array' and compares them to 'newVal', 'newPad'.
 *
 * @param {array} array:
 *  current set of min or max extremes
 * @param {number} newVal:
 *  new value to compare against
 * @param {number} newPad:
 *  pad value associated with 'newVal'
 * @param {object} opts:
 *  - tozero {boolean}
 *  - extrapad {number}
 * @param {function} atLeastAsExtreme:
 *  comparison function, use
 *  - lessOrEqual for min 'array' and
 *  - greaterOrEqual for max 'array'
 *
 * In practice, 'array' is either
 *  - 'extremes[ax._id].min' or
 *  - 'extremes[ax._id].max
 *  found in traces and layout items that affect autorange.
 *
 * Since we don't yet know the relationship between pixels and values
 * (that's what we're trying to figure out!) AND we don't yet know how
 * many pixels `extrapad` represents (it's going to be 5% of the length,
 * but we don't want to have to redo calc just because length changed)
 * two point must satisfy three criteria simultaneously for one to supersede the other:
 *  - at least as extreme a `val`
 *  - at least as big a `pad`
 *  - an unpadded point cannot supersede a padded point, but any other combination can
 *
 * Then:
 * - If the item supersedes the new point, set includeThis false
 * - If the new pt supersedes the item, delete it from 'array'
 */


function collapseArray(array, newVal, newPad, opts, atLeastAsExtreme) {
  var tozero = opts.tozero;
  var extrapad = opts.extrapad;
  var includeThis = true;

  for (var j = 0; j < array.length && includeThis; j++) {
    var v = array[j];

    if (atLeastAsExtreme(v.val, newVal) && v.pad >= newPad && (v.extrapad || !extrapad)) {
      includeThis = false;
      break;
    } else if (atLeastAsExtreme(newVal, v.val) && v.pad <= newPad && (extrapad || !v.extrapad)) {
      array.splice(j, 1);
      j--;
    }
  }

  if (includeThis) {
    var clipAtZero = tozero && newVal === 0;
    array.push({
      val: newVal,
      pad: clipAtZero ? 0 : newPad,
      extrapad: clipAtZero ? false : extrapad
    });
  }
} // In order to stop overflow errors, don't consider points
// too close to the limits of js floating point


function goodNumber(v) {
  return fastIsnumeric(v) && Math.abs(v) < FP_SAFE;
}

function lessOrEqual(v0, v1) {
  return v0 <= v1;
}

function greaterOrEqual(v0, v1) {
  return v0 >= v1;
}

var axes_1 = createCommonjsModule(function (module) {

  var strTranslate = lib_1.strTranslate;
  var ONEMAXYEAR = numerical.ONEMAXYEAR;
  var ONEAVGYEAR = numerical.ONEAVGYEAR;
  var ONEMINYEAR = numerical.ONEMINYEAR;
  var ONEMAXQUARTER = numerical.ONEMAXQUARTER;
  var ONEAVGQUARTER = numerical.ONEAVGQUARTER;
  var ONEMINQUARTER = numerical.ONEMINQUARTER;
  var ONEMAXMONTH = numerical.ONEMAXMONTH;
  var ONEAVGMONTH = numerical.ONEAVGMONTH;
  var ONEMINMONTH = numerical.ONEMINMONTH;
  var ONEWEEK = numerical.ONEWEEK;
  var ONEDAY = numerical.ONEDAY;
  var HALFDAY = ONEDAY / 2;
  var ONEHOUR = numerical.ONEHOUR;
  var ONEMIN = numerical.ONEMIN;
  var ONESEC = numerical.ONESEC;
  var MINUS_SIGN = numerical.MINUS_SIGN;
  var BADNUM = numerical.BADNUM;
  var ZERO_PATH = {
    K: 'zeroline'
  };
  var GRID_PATH = {
    K: 'gridline',
    L: 'path'
  };
  var TICK_PATH = {
    K: 'tick',
    L: 'path'
  };
  var TICK_TEXT = {
    K: 'tick',
    L: 'text'
  };
  var MID_SHIFT = alignment.MID_SHIFT;
  var CAP_SHIFT = alignment.CAP_SHIFT;
  var LINE_SPACING = alignment.LINE_SPACING;
  var OPPOSITE_SIDE = alignment.OPPOSITE_SIDE;
  var TEXTPAD = 3;
  var axes = module.exports = {};
  axes.setConvert = set_convert;
  var idSort = axis_ids.idSort;
  var isLinked = axis_ids.isLinked; // tight coupling to chart studio

  axes.id2name = axis_ids.id2name;
  axes.name2id = axis_ids.name2id;
  axes.cleanId = axis_ids.cleanId;
  axes.list = axis_ids.list;
  axes.listIds = axis_ids.listIds;
  axes.getFromId = axis_ids.getFromId;
  axes.getFromTrace = axis_ids.getFromTrace;
  axes.getAutoRange = autorange.getAutoRange;
  axes.findExtremes = autorange.findExtremes;
  var epsilon = 0.0001;

  function expandRange(range) {
    var delta = (range[1] - range[0]) * epsilon;
    return [range[0] - delta, range[1] + delta];
  }
  /*
   * find the list of possible axes to reference with an xref or yref attribute
   * and coerce it to that list
   *
   * attr: the attribute we're generating a reference for. Should end in 'x' or 'y'
   *     but can be prefixed, like 'ax' for annotation's arrow x
   * dflt: the default to coerce to, or blank to use the first axis (falling back on
   *     extraOption if there is no axis)
   * extraOption: aside from existing axes with this letter, what non-axis value is allowed?
   *     Only required if it's different from `dflt`
   */


  axes.coerceRef = function (containerIn, containerOut, gd, attr, dflt, extraOption) {
    var axLetter = attr.charAt(attr.length - 1);
    var axlist = gd._fullLayout._subplots[axLetter + 'axis'];
    var refAttr = attr + 'ref';
    var attrDef = {};
    if (!dflt) dflt = axlist[0] || (typeof extraOption === 'string' ? extraOption : extraOption[0]);
    if (!extraOption) extraOption = dflt;
    axlist = axlist.concat(axlist.map(function (x) {
      return x + ' domain';
    })); // data-ref annotations are not supported in gl2d yet

    attrDef[refAttr] = {
      valType: 'enumerated',
      values: axlist.concat(extraOption ? typeof extraOption === 'string' ? [extraOption] : extraOption : []),
      dflt: dflt
    }; // xref, yref

    return lib_1.coerce(containerIn, containerOut, attrDef, refAttr);
  };
  /*
   * Get the type of an axis reference. This can be 'range', 'domain', or 'paper'.
   * This assumes ar is a valid axis reference and returns 'range' if it doesn't
   * match the patterns for 'paper' or 'domain'.
   *
   * ar: the axis reference string
   *
   */


  axes.getRefType = function (ar) {
    if (ar === undefined) {
      return ar;
    }

    if (ar === 'paper') {
      return 'paper';
    }

    if (ar === 'pixel') {
      return 'pixel';
    }

    if (/( domain)$/.test(ar)) {
      return 'domain';
    } else {
      return 'range';
    }
  };
  /*
   * coerce position attributes (range-type) that can be either on axes or absolute
   * (paper or pixel) referenced. The biggest complication here is that we don't know
   * before looking at the axis whether the value must be a number or not (it may be
   * a date string), so we can't use the regular valType='number' machinery
   *
   * axRef (string): the axis this position is referenced to, or:
   *     paper: fraction of the plot area
   *     pixel: pixels relative to some starting position
   * attr (string): the attribute in containerOut we are coercing
   * dflt (number): the default position, as a fraction or pixels. If the attribute
   *     is to be axis-referenced, this will be converted to an axis data value
   *
   * Also cleans the values, since the attribute definition itself has to say
   * valType: 'any' to handle date axes. This allows us to accept:
   * - for category axes: category names, and convert them here into serial numbers.
   *   Note that this will NOT work for axis range endpoints, because we don't know
   *   the category list yet (it's set by ax.makeCalcdata during calc)
   *   but it works for component (note, shape, images) positions.
   * - for date axes: JS Dates or milliseconds, and convert to date strings
   * - for other types: coerce them to numbers
   */


  axes.coercePosition = function (containerOut, gd, coerce, axRef, attr, dflt) {
    var cleanPos, pos;
    var axRefType = axes.getRefType(axRef);

    if (axRefType !== 'range') {
      cleanPos = lib_1.ensureNumber;
      pos = coerce(attr, dflt);
    } else {
      var ax = axes.getFromId(gd, axRef);
      dflt = ax.fraction2r(dflt);
      pos = coerce(attr, dflt);
      cleanPos = ax.cleanPos;
    }

    containerOut[attr] = cleanPos(pos);
  };

  axes.cleanPosition = function (pos, gd, axRef) {
    var cleanPos = axRef === 'paper' || axRef === 'pixel' ? lib_1.ensureNumber : axes.getFromId(gd, axRef).cleanPos;
    return cleanPos(pos);
  };

  axes.redrawComponents = function (gd, axIds) {
    axIds = axIds ? axIds : axes.listIds(gd);
    var fullLayout = gd._fullLayout;

    function _redrawOneComp(moduleName, methodName, stashName, shortCircuit) {
      var method = registry.getComponentMethod(moduleName, methodName);
      var stash = {};

      for (var i = 0; i < axIds.length; i++) {
        var ax = fullLayout[axes.id2name(axIds[i])];
        var indices = ax[stashName];

        for (var j = 0; j < indices.length; j++) {
          var ind = indices[j];

          if (!stash[ind]) {
            method(gd, ind);
            stash[ind] = 1; // once is enough for images (which doesn't use the `i` arg anyway)

            if (shortCircuit) return;
          }
        }
      }
    } // annotations and shapes 'draw' method is slow,
    // use the finer-grained 'drawOne' method instead


    _redrawOneComp('annotations', 'drawOne', '_annIndices');

    _redrawOneComp('shapes', 'drawOne', '_shapeIndices');

    _redrawOneComp('images', 'draw', '_imgIndices', true);
  };

  var getDataConversions = axes.getDataConversions = function (gd, trace, target, targetArray) {
    var ax; // If target points to an axis, use the type we already have for that
    // axis to find the data type. Otherwise use the values to autotype.

    var d2cTarget = target === 'x' || target === 'y' || target === 'z' ? target : targetArray; // In the case of an array target, make a mock data array
    // and call supplyDefaults to the data type and
    // setup the data-to-calc method.

    if (Array.isArray(d2cTarget)) {
      ax = {
        type: axis_autotype(targetArray, undefined, {
          autotypenumbers: gd._fullLayout.autotypenumbers
        }),
        _categories: []
      };
      axes.setConvert(ax); // build up ax._categories (usually done during ax.makeCalcdata()

      if (ax.type === 'category') {
        for (var i = 0; i < targetArray.length; i++) {
          ax.d2c(targetArray[i]);
        }
      } // TODO what to do for transforms?

    } else {
      ax = axes.getFromTrace(gd, trace, d2cTarget);
    } // if 'target' has corresponding axis
    // -> use setConvert method


    if (ax) return {
      d2c: ax.d2c,
      c2d: ax.c2d
    }; // special case for 'ids'
    // -> cast to String

    if (d2cTarget === 'ids') return {
      d2c: toString,
      c2d: toString
    }; // otherwise (e.g. numeric-array of 'marker.color' or 'marker.size')
    // -> cast to Number

    return {
      d2c: toNum,
      c2d: toNum
    };
  };

  function toNum(v) {
    return +v;
  }

  function toString(v) {
    return String(v);
  }

  axes.getDataToCoordFunc = function (gd, trace, target, targetArray) {
    return getDataConversions(gd, trace, target, targetArray).d2c;
  }; // get counteraxis letter for this axis (name or id)
  // this can also be used as the id for default counter axis


  axes.counterLetter = function (id) {
    var axLetter = id.charAt(0);
    if (axLetter === 'x') return 'y';
    if (axLetter === 'y') return 'x';
  }; // incorporate a new minimum difference and first tick into
  // forced
  // note that _forceTick0 is linearized, so needs to be turned into
  // a range value for setting tick0


  axes.minDtick = function (ax, newDiff, newFirst, allow) {
    // doesn't make sense to do forced min dTick on log or category axes,
    // and the plot itself may decide to cancel (ie non-grouped bars)
    if (['log', 'category', 'multicategory'].indexOf(ax.type) !== -1 || !allow) {
      ax._minDtick = 0;
    } else if (ax._minDtick === undefined) {
      // undefined means there's nothing there yet
      ax._minDtick = newDiff;
      ax._forceTick0 = newFirst;
    } else if (ax._minDtick) {
      if ((ax._minDtick / newDiff + 1e-6) % 1 < 2e-6 && // existing minDtick is an integer multiple of newDiff
      // (within rounding err)
      // and forceTick0 can be shifted to newFirst
      ((newFirst - ax._forceTick0) / newDiff % 1 + 1.000001) % 1 < 2e-6) {
        ax._minDtick = newDiff;
        ax._forceTick0 = newFirst;
      } else if ((newDiff / ax._minDtick + 1e-6) % 1 > 2e-6 || // if the converse is true (newDiff is a multiple of minDtick and
      // newFirst can be shifted to forceTick0) then do nothing - same
      // forcing stands. Otherwise, cancel forced minimum
      ((newFirst - ax._forceTick0) / ax._minDtick % 1 + 1.000001) % 1 > 2e-6) {
        ax._minDtick = 0;
      }
    }
  }; // save a copy of the initial axis ranges in fullLayout
  // use them in mode bar and dblclick events


  axes.saveRangeInitial = function (gd, overwrite) {
    var axList = axes.list(gd, '', true);
    var hasOneAxisChanged = false;

    for (var i = 0; i < axList.length; i++) {
      var ax = axList[i];
      var isNew = ax._rangeInitial === undefined;
      var hasChanged = isNew || !(ax.range[0] === ax._rangeInitial[0] && ax.range[1] === ax._rangeInitial[1]);

      if (isNew && ax.autorange === false || overwrite && hasChanged) {
        ax._rangeInitial = ax.range.slice();
        hasOneAxisChanged = true;
      }
    }

    return hasOneAxisChanged;
  }; // save a copy of the initial spike visibility


  axes.saveShowSpikeInitial = function (gd, overwrite) {
    var axList = axes.list(gd, '', true);
    var hasOneAxisChanged = false;
    var allSpikesEnabled = 'on';

    for (var i = 0; i < axList.length; i++) {
      var ax = axList[i];
      var isNew = ax._showSpikeInitial === undefined;
      var hasChanged = isNew || !(ax.showspikes === ax._showspikes);

      if (isNew || overwrite && hasChanged) {
        ax._showSpikeInitial = ax.showspikes;
        hasOneAxisChanged = true;
      }

      if (allSpikesEnabled === 'on' && !ax.showspikes) {
        allSpikesEnabled = 'off';
      }
    }

    gd._fullLayout._cartesianSpikesEnabled = allSpikesEnabled;
    return hasOneAxisChanged;
  };

  axes.autoBin = function (data, ax, nbins, is2d, calendar, size) {
    var dataMin = lib_1.aggNums(Math.min, null, data);
    var dataMax = lib_1.aggNums(Math.max, null, data);

    if (ax.type === 'category' || ax.type === 'multicategory') {
      return {
        start: dataMin - 0.5,
        end: dataMax + 0.5,
        size: Math.max(1, Math.round(size) || 1),
        _dataSpan: dataMax - dataMin
      };
    }

    if (!calendar) calendar = ax.calendar; // piggyback off tick code to make "nice" bin sizes and edges

    var dummyAx;

    if (ax.type === 'log') {
      dummyAx = {
        type: 'linear',
        range: [dataMin, dataMax]
      };
    } else {
      dummyAx = {
        type: ax.type,
        range: lib_1.simpleMap([dataMin, dataMax], ax.c2r, 0, calendar),
        calendar: calendar
      };
    }

    axes.setConvert(dummyAx);
    size = size && clean_ticks.dtick(size, dummyAx.type);

    if (size) {
      dummyAx.dtick = size;
      dummyAx.tick0 = clean_ticks.tick0(undefined, dummyAx.type, calendar);
    } else {
      var size0;
      if (nbins) size0 = (dataMax - dataMin) / nbins;else {
        // totally auto: scale off std deviation so the highest bin is
        // somewhat taller than the total number of bins, but don't let
        // the size get smaller than the 'nice' rounded down minimum
        // difference between values
        var distinctData = lib_1.distinctVals(data);
        var msexp = Math.pow(10, Math.floor(Math.log(distinctData.minDiff) / Math.LN10));
        var minSize = msexp * lib_1.roundUp(distinctData.minDiff / msexp, [0.9, 1.9, 4.9, 9.9], true);
        size0 = Math.max(minSize, 2 * lib_1.stdev(data) / Math.pow(data.length, is2d ? 0.25 : 0.4)); // fallback if ax.d2c output BADNUMs
        // e.g. when user try to plot categorical bins
        // on a layout.xaxis.type: 'linear'

        if (!fastIsnumeric(size0)) size0 = 1;
      }
      axes.autoTicks(dummyAx, size0);
    }

    var finalSize = dummyAx.dtick;
    var binStart = axes.tickIncrement(axes.tickFirst(dummyAx), finalSize, 'reverse', calendar);
    var binEnd, bincount; // check for too many data points right at the edges of bins
    // (>50% within 1% of bin edges) or all data points integral
    // and offset the bins accordingly

    if (typeof finalSize === 'number') {
      binStart = autoShiftNumericBins(binStart, data, dummyAx, dataMin, dataMax);
      bincount = 1 + Math.floor((dataMax - binStart) / finalSize);
      binEnd = binStart + bincount * finalSize;
    } else {
      // month ticks - should be the only nonlinear kind we have at this point.
      // dtick (as supplied by axes.autoTick) only has nonlinear values on
      // date and log axes, but even if you display a histogram on a log axis
      // we bin it on a linear axis (which one could argue against, but that's
      // a separate issue)
      if (dummyAx.dtick.charAt(0) === 'M') {
        binStart = autoShiftMonthBins(binStart, data, finalSize, dataMin, calendar);
      } // calculate the endpoint for nonlinear ticks - you have to
      // just increment until you're done


      binEnd = binStart;
      bincount = 0;

      while (binEnd <= dataMax) {
        binEnd = axes.tickIncrement(binEnd, finalSize, false, calendar);
        bincount++;
      }
    }

    return {
      start: ax.c2r(binStart, 0, calendar),
      end: ax.c2r(binEnd, 0, calendar),
      size: finalSize,
      _dataSpan: dataMax - dataMin
    };
  };

  function autoShiftNumericBins(binStart, data, ax, dataMin, dataMax) {
    var edgecount = 0;
    var midcount = 0;
    var intcount = 0;
    var blankCount = 0;

    function nearEdge(v) {
      // is a value within 1% of a bin edge?
      return (1 + (v - binStart) * 100 / ax.dtick) % 100 < 2;
    }

    for (var i = 0; i < data.length; i++) {
      if (data[i] % 1 === 0) intcount++;else if (!fastIsnumeric(data[i])) blankCount++;
      if (nearEdge(data[i])) edgecount++;
      if (nearEdge(data[i] + ax.dtick / 2)) midcount++;
    }

    var dataCount = data.length - blankCount;

    if (intcount === dataCount && ax.type !== 'date') {
      if (ax.dtick < 1) {
        // all integers: if bin size is <1, it's because
        // that was specifically requested (large nbins)
        // so respect that... but center the bins containing
        // integers on those integers
        binStart = dataMin - 0.5 * ax.dtick;
      } else {
        // otherwise start half an integer down regardless of
        // the bin size, just enough to clear up endpoint
        // ambiguity about which integers are in which bins.
        binStart -= 0.5;
        if (binStart + ax.dtick < dataMin) binStart += ax.dtick;
      }
    } else if (midcount < dataCount * 0.1) {
      if (edgecount > dataCount * 0.3 || nearEdge(dataMin) || nearEdge(dataMax)) {
        // lots of points at the edge, not many in the middle
        // shift half a bin
        var binshift = ax.dtick / 2;
        binStart += binStart + binshift < dataMin ? binshift : -binshift;
      }
    }

    return binStart;
  }

  function autoShiftMonthBins(binStart, data, dtick, dataMin, calendar) {
    var stats = lib_1.findExactDates(data, calendar); // number of data points that needs to be an exact value
    // to shift that increment to (near) the bin center

    var threshold = 0.8;

    if (stats.exactDays > threshold) {
      var numMonths = Number(dtick.substr(1));

      if (stats.exactYears > threshold && numMonths % 12 === 0) {
        // The exact middle of a non-leap-year is 1.5 days into July
        // so if we start the bins here, all but leap years will
        // get hover-labeled as exact years.
        binStart = axes.tickIncrement(binStart, 'M6', 'reverse') + ONEDAY * 1.5;
      } else if (stats.exactMonths > threshold) {
        // Months are not as clean, but if we shift half the *longest*
        // month (31/2 days) then 31-day months will get labeled exactly
        // and shorter months will get labeled with the correct month
        // but shifted 12-36 hours into it.
        binStart = axes.tickIncrement(binStart, 'M1', 'reverse') + ONEDAY * 15.5;
      } else {
        // Shifting half a day is exact, but since these are month bins it
        // will always give a somewhat odd-looking label, until we do something
        // smarter like showing the bin boundaries (or the bounds of the actual
        // data in each bin)
        binStart -= HALFDAY;
      }

      var nextBinStart = axes.tickIncrement(binStart, dtick);
      if (nextBinStart <= dataMin) return nextBinStart;
    }

    return binStart;
  } // ----------------------------------------------------
  // Ticks and grids
  // ----------------------------------------------------
  // ensure we have tick0, dtick, and tick rounding calculated


  axes.prepTicks = function (ax, opts) {
    var rng = lib_1.simpleMap(ax.range, ax.r2l, undefined, undefined, opts);
    ax._dtickInit = ax.dtick;
    ax._tick0Init = ax.tick0; // calculate max number of (auto) ticks to display based on plot size

    if (ax.tickmode === 'auto' || !ax.dtick) {
      var nt = ax.nticks;
      var minPx;

      if (!nt) {
        if (ax.type === 'category' || ax.type === 'multicategory') {
          minPx = ax.tickfont ? lib_1.bigFont(ax.tickfont.size || 12) : 15;
          nt = ax._length / minPx;
        } else {
          minPx = ax._id.charAt(0) === 'y' ? 40 : 80;
          nt = lib_1.constrain(ax._length / minPx, 4, 9) + 1;
        } // radial axes span half their domain,
        // multiply nticks value by two to get correct number of auto ticks.


        if (ax._name === 'radialaxis') nt *= 2;
      } // add a couple of extra digits for filling in ticks when we
      // have explicit tickvals without tick text


      if (ax.tickmode === 'array') nt *= 100;
      ax._roughDTick = Math.abs(rng[1] - rng[0]) / nt;
      axes.autoTicks(ax, ax._roughDTick); // check for a forced minimum dtick

      if (ax._minDtick > 0 && ax.dtick < ax._minDtick * 2) {
        ax.dtick = ax._minDtick;
        ax.tick0 = ax.l2r(ax._forceTick0);
      }
    }

    if (ax.ticklabelmode === 'period') {
      adjustPeriodDelta(ax);
    } // check for missing tick0


    if (!ax.tick0) {
      ax.tick0 = ax.type === 'date' ? '2000-01-01' : 0;
    } // ensure we don't try to make ticks below our minimum precision
    // see https://github.com/plotly/plotly.js/issues/2892


    if (ax.type === 'date' && ax.dtick < 0.1) ax.dtick = 0.1; // now figure out rounding of tick values

    autoTickRound(ax);
  };

  function nMonths(dtick) {
    return +dtick.substring(1);
  }

  function adjustPeriodDelta(ax) {
    // adjusts ax.dtick and sets ax._definedDelta
    var definedDelta;

    function mDate() {
      return !(fastIsnumeric(ax.dtick) || ax.dtick.charAt(0) !== 'M');
    }

    var isMDate = mDate();
    var tickformat = axes.getTickFormat(ax);

    if (tickformat) {
      var noDtick = ax._dtickInit !== ax.dtick;

      if (!/%[fLQsSMX]/.test(tickformat) // %f: microseconds as a decimal number [000000, 999999]
      // %L: milliseconds as a decimal number [000, 999]
      // %Q: milliseconds since UNIX epoch
      // %s: seconds since UNIX epoch
      // %S: second as a decimal number [00,61]
      // %M: minute as a decimal number [00,59]
      // %X: the localeâs time, such as %-I:%M:%S %p
      ) {
        if (/%[HI]/.test(tickformat) // %H: hour (24-hour clock) as a decimal number [00,23]
        // %I: hour (12-hour clock) as a decimal number [01,12]
        ) {
          definedDelta = ONEHOUR;
          if (noDtick && !isMDate && ax.dtick < ONEHOUR) ax.dtick = ONEHOUR;
        } else if (/%p/.test(tickformat) // %p: either AM or PM
        ) {
          definedDelta = HALFDAY;
          if (noDtick && !isMDate && ax.dtick < HALFDAY) ax.dtick = HALFDAY;
        } else if (/%[Aadejuwx]/.test(tickformat) // %A: full weekday name
        // %a: abbreviated weekday name
        // %d: zero-padded day of the month as a decimal number [01,31]
        // %e: space-padded day of the month as a decimal number [ 1,31]
        // %j: day of the year as a decimal number [001,366]
        // %u: Monday-based (ISO 8601) weekday as a decimal number [1,7]
        // %w: Sunday-based weekday as a decimal number [0,6]
        // %x: the localeâs date, such as %-m/%-d/%Y
        ) {
          definedDelta = ONEDAY;
          if (noDtick && !isMDate && ax.dtick < ONEDAY) ax.dtick = ONEDAY;
        } else if (/%[UVW]/.test(tickformat) // %U: Sunday-based week of the year as a decimal number [00,53]
        // %V: ISO 8601 week of the year as a decimal number [01, 53]
        // %W: Monday-based week of the year as a decimal number [00,53]
        ) {
          definedDelta = ONEWEEK;
          if (noDtick && !isMDate && ax.dtick < ONEWEEK) ax.dtick = ONEWEEK;
        } else if (/%[Bbm]/.test(tickformat) // %B: full month name
        // %b: abbreviated month name
        // %m: month as a decimal number [01,12]
        ) {
          definedDelta = ONEAVGMONTH;
          if (noDtick && (isMDate ? nMonths(ax.dtick) < 1 : ax.dtick < ONEMINMONTH)) ax.dtick = 'M1';
        } else if (/%[q]/.test(tickformat) // %q: quarter of the year as a decimal number [1,4]
        ) {
          definedDelta = ONEAVGQUARTER;
          if (noDtick && (isMDate ? nMonths(ax.dtick) < 3 : ax.dtick < ONEMINQUARTER)) ax.dtick = 'M3';
        } else if (/%[Yy]/.test(tickformat) // %Y: year with century as a decimal number, such as 1999
        // %y: year without century as a decimal number [00,99]
        ) {
          definedDelta = ONEAVGYEAR;
          if (noDtick && (isMDate ? nMonths(ax.dtick) < 12 : ax.dtick < ONEMINYEAR)) ax.dtick = 'M12';
        }
      }
    }

    isMDate = mDate();

    if (isMDate && ax.tick0 === ax._dowTick0) {
      // discard Sunday/Monday tweaks
      ax.tick0 = ax._rawTick0;
    }

    ax._definedDelta = definedDelta;
  }

  function positionPeriodTicks(tickVals, ax, definedDelta) {
    for (var i = 0; i < tickVals.length; i++) {
      var v = tickVals[i].value;
      var a = i;
      var b = i + 1;

      if (i < tickVals.length - 1) {
        a = i;
        b = i + 1;
      } else if (i > 0) {
        a = i - 1;
        b = i;
      } else {
        a = i;
        b = i;
      }

      var A = tickVals[a].value;
      var B = tickVals[b].value;
      var actualDelta = Math.abs(B - A);
      var delta = definedDelta || actualDelta;
      var periodLength = 0;

      if (delta >= ONEMINYEAR) {
        if (actualDelta >= ONEMINYEAR && actualDelta <= ONEMAXYEAR) {
          periodLength = actualDelta;
        } else {
          periodLength = ONEAVGYEAR;
        }
      } else if (definedDelta === ONEAVGQUARTER && delta >= ONEMINQUARTER) {
        if (actualDelta >= ONEMINQUARTER && actualDelta <= ONEMAXQUARTER) {
          periodLength = actualDelta;
        } else {
          periodLength = ONEAVGQUARTER;
        }
      } else if (delta >= ONEMINMONTH) {
        if (actualDelta >= ONEMINMONTH && actualDelta <= ONEMAXMONTH) {
          periodLength = actualDelta;
        } else {
          periodLength = ONEAVGMONTH;
        }
      } else if (definedDelta === ONEWEEK && delta >= ONEWEEK) {
        periodLength = ONEWEEK;
      } else if (delta >= ONEDAY) {
        periodLength = ONEDAY;
      } else if (definedDelta === HALFDAY && delta >= HALFDAY) {
        periodLength = HALFDAY;
      } else if (definedDelta === ONEHOUR && delta >= ONEHOUR) {
        periodLength = ONEHOUR;
      }

      var inBetween;

      if (periodLength >= actualDelta) {
        // ensure new label positions remain between ticks
        periodLength = actualDelta;
        inBetween = true;
      }

      var endPeriod = v + periodLength;

      if (ax.rangebreaks && periodLength > 0) {
        var nAll = 84; // highly divisible 7 * 12

        var n = 0;

        for (var c = 0; c < nAll; c++) {
          var r = (c + 0.5) / nAll;
          if (ax.maskBreaks(v * (1 - r) + r * endPeriod) !== BADNUM) n++;
        }

        periodLength *= n / nAll;

        if (!periodLength) {
          tickVals[i].drop = true;
        }

        if (inBetween && actualDelta > ONEWEEK) periodLength = actualDelta; // center monthly & longer periods
      }

      if (periodLength > 0 || // not instant
      i === 0 // taking care first tick added
      ) {
        tickVals[i].periodX = v + periodLength / 2;
      }
    }
  } // calculate the ticks: text, values, positioning
  // if ticks are set to automatic, determine the right values (tick0,dtick)
  // in any case, set tickround to # of digits to round tick labels to,
  // or codes to this effect for log and date scales


  axes.calcTicks = function calcTicks(ax, opts) {
    axes.prepTicks(ax, opts);
    var rng = lib_1.simpleMap(ax.range, ax.r2l, undefined, undefined, opts); // now that we've figured out the auto values for formatting
    // in case we're missing some ticktext, we can break out for array ticks

    if (ax.tickmode === 'array') return arrayTicks(ax); // add a tiny bit so we get ticks which may have rounded out

    var exRng = expandRange(rng);
    var startTick = exRng[0];
    var endTick = exRng[1]; // check for reversed axis

    var axrev = rng[1] < rng[0];
    var minRange = Math.min(rng[0], rng[1]);
    var maxRange = Math.max(rng[0], rng[1]);
    var numDtick = fastIsnumeric(ax.dtick);
    var isDLog = ax.type === 'log' && !(numDtick || ax.dtick.charAt(0) === 'L');
    var isPeriod = ax.ticklabelmode === 'period'; // find the first tick

    ax._tmin = axes.tickFirst(ax, opts); // No visible ticks? Quit.
    // I've only seen this on category axes with all categories off the edge.

    if (ax._tmin < startTick !== axrev) return []; // return the full set of tick vals

    if (ax.type === 'category' || ax.type === 'multicategory') {
      endTick = axrev ? Math.max(-0.5, endTick) : Math.min(ax._categories.length - 0.5, endTick);
    }

    var x = ax._tmin;

    if (ax.rangebreaks && ax._tick0Init !== ax.tick0) {
      // adjust tick0
      x = moveOutsideBreak(x, ax);

      if (!axrev) {
        x = axes.tickIncrement(x, ax.dtick, !axrev, ax.calendar);
      }
    }

    if (isPeriod) {
      // add one item to label period before tick0
      x = axes.tickIncrement(x, ax.dtick, !axrev, ax.calendar);
    }

    var ticklabelstep = ax.ticklabelstep;
    var maxTicks = Math.max(1000, ax._length || 0);
    var tickVals = [];
    var xPrevious = null;
    var dTick;

    if (numDtick) {
      dTick = ax.dtick;
    } else {
      if (ax.type === 'date') {
        if (typeof ax.dtick === 'string' && ax.dtick.charAt(0) === 'M') {
          dTick = ONEAVGMONTH * ax.dtick.substring(1);
        }
      } else {
        dTick = ax._roughDTick;
      }
    }

    var id = Math.round((ax.r2l(x) - ax.r2l(ax.tick0)) / dTick) - 1;

    for (; axrev ? x >= endTick : x <= endTick; x = axes.tickIncrement(x, ax.dtick, axrev, ax.calendar)) {
      id++;

      if (ax.rangebreaks) {
        if (!axrev) {
          if (x < startTick) continue;
          if (ax.maskBreaks(x) === BADNUM && moveOutsideBreak(x, ax) >= maxRange) break;
        }
      } // prevent infinite loops - no more than one tick per pixel,
      // and make sure each value is different from the previous


      if (tickVals.length > maxTicks || x === xPrevious) break;
      xPrevious = x;
      var minor = false;

      if (isDLog && x !== (x | 0)) {
        minor = true;
      }

      var obj = {
        minor: minor,
        value: x
      };

      if (ticklabelstep > 1 && id % ticklabelstep) {
        obj.skipLabel = true;
      }

      tickVals.push(obj);
    }

    if (isPeriod) positionPeriodTicks(tickVals, ax, ax._definedDelta);
    var i;

    if (ax.rangebreaks) {
      var flip = ax._id.charAt(0) === 'y';
      var fontSize = 1; // one pixel minimum

      if (ax.tickmode === 'auto') {
        fontSize = ax.tickfont ? ax.tickfont.size : 12;
      }

      var prevL = NaN;

      for (i = tickVals.length - 1; i > -1; i--) {
        if (tickVals[i].drop) {
          tickVals.splice(i, 1);
          continue;
        }

        tickVals[i].value = moveOutsideBreak(tickVals[i].value, ax); // avoid overlaps

        var l = ax.c2p(tickVals[i].value);

        if (flip ? prevL > l - fontSize : prevL < l + fontSize) {
          // ensure one pixel minimum
          tickVals.splice(axrev ? i + 1 : i, 1);
        } else {
          prevL = l;
        }
      }
    } // If same angle over a full circle, the last tick vals is a duplicate.
    // TODO must do something similar for angular date axes.


    if (isAngular(ax) && Math.abs(rng[1] - rng[0]) === 360) {
      tickVals.pop();
    } // save the last tick as well as first, so we can
    // show the exponent only on the last one


    ax._tmax = (tickVals[tickVals.length - 1] || {}).value; // for showing the rest of a date when the main tick label is only the
    // latter part: ax._prevDateHead holds what we showed most recently.
    // Start with it cleared and mark that we're in calcTicks (ie calculating a
    // whole string of these so we should care what the previous date head was!)

    ax._prevDateHead = '';
    ax._inCalcTicks = true;
    var lastVisibleHead;

    var hideLabel = function (tick) {
      tick.text = ' '; // don't use an empty string here which can confuse automargin (issue 5132)

      ax._prevDateHead = lastVisibleHead;
    };

    var ticksOut = [];
    var t, p;

    for (i = 0; i < tickVals.length; i++) {
      var _minor = tickVals[i].minor;
      var _value = tickVals[i].value;
      lastVisibleHead = ax._prevDateHead;
      t = axes.tickText(ax, _value, false, // hover
      _minor // noSuffixPrefix
      );
      p = tickVals[i].periodX;

      if (p !== undefined) {
        t.periodX = p;

        if (p > maxRange || p < minRange) {
          // hide label if outside the range
          if (p > maxRange) t.periodX = maxRange;
          if (p < minRange) t.periodX = minRange;
          hideLabel(t);
        }
      }

      if (tickVals[i].skipLabel) {
        hideLabel(t);
      }

      ticksOut.push(t);
    }

    ax._inCalcTicks = false;
    return ticksOut;
  };

  function arrayTicks(ax) {
    var vals = ax.tickvals;
    var text = ax.ticktext;
    var ticksOut = new Array(vals.length);
    var rng = lib_1.simpleMap(ax.range, ax.r2l);
    var exRng = expandRange(rng);
    var tickMin = Math.min(exRng[0], exRng[1]);
    var tickMax = Math.max(exRng[0], exRng[1]);
    var j = 0; // without a text array, just format the given values as any other ticks
    // except with more precision to the numbers

    if (!Array.isArray(text)) text = []; // make sure showing ticks doesn't accidentally add new categories
    // TODO multicategory, if we allow ticktext / tickvals

    var tickVal2l = ax.type === 'category' ? ax.d2l_noadd : ax.d2l; // array ticks on log axes always show the full number
    // (if no explicit ticktext overrides it)

    if (ax.type === 'log' && String(ax.dtick).charAt(0) !== 'L') {
      ax.dtick = 'L' + Math.pow(10, Math.floor(Math.min(ax.range[0], ax.range[1])) - 1);
    }

    for (var i = 0; i < vals.length; i++) {
      var vali = tickVal2l(vals[i]);

      if (vali > tickMin && vali < tickMax) {
        if (text[i] === undefined) ticksOut[j] = axes.tickText(ax, vali);else ticksOut[j] = tickTextObj(ax, vali, String(text[i]));
        j++;
      }
    }

    if (j < vals.length) ticksOut.splice(j, vals.length - j);

    if (ax.rangebreaks) {
      // remove ticks falling inside rangebreaks
      ticksOut = ticksOut.filter(function (d) {
        return ax.maskBreaks(d.x) !== BADNUM;
      });
    }

    return ticksOut;
  }

  var roundBase10 = [2, 5, 10];
  var roundBase24 = [1, 2, 3, 6, 12];
  var roundBase60 = [1, 2, 5, 10, 15, 30]; // 2&3 day ticks are weird, but need something btwn 1&7

  var roundDays = [1, 2, 3, 7, 14]; // approx. tick positions for log axes, showing all (1) and just 1, 2, 5 (2)
  // these don't have to be exact, just close enough to round to the right value

  var roundLog1 = [-0.046, 0, 0.301, 0.477, 0.602, 0.699, 0.778, 0.845, 0.903, 0.954, 1];
  var roundLog2 = [-0.301, 0, 0.301, 0.699, 1]; // N.B. `thetaunit; 'radians' angular axes must be converted to degrees

  var roundAngles = [15, 30, 45, 90, 180];

  function roundDTick(roughDTick, base, roundingSet) {
    return base * lib_1.roundUp(roughDTick / base, roundingSet);
  } // autoTicks: calculate best guess at pleasant ticks for this axis
  // inputs:
  //      ax - an axis object
  //      roughDTick - rough tick spacing (to be turned into a nice round number)
  // outputs (into ax):
  //   tick0: starting point for ticks (not necessarily on the graph)
  //      usually 0 for numeric (=10^0=1 for log) or jan 1, 2000 for dates
  //   dtick: the actual, nice round tick spacing, usually a little larger than roughDTick
  //      if the ticks are spaced linearly (linear scale, categories,
  //          log with only full powers, date ticks < month),
  //          this will just be a number
  //      months: M#
  //      years: M# where # is 12*number of years
  //      log with linear ticks: L# where # is the linear tick spacing
  //      log showing powers plus some intermediates:
  //          D1 shows all digits, D2 shows 2 and 5


  axes.autoTicks = function (ax, roughDTick) {
    var base;

    function getBase(v) {
      return Math.pow(v, Math.floor(Math.log(roughDTick) / Math.LN10));
    }

    if (ax.type === 'date') {
      ax.tick0 = lib_1.dateTick0(ax.calendar, 0); // the criteria below are all based on the rough spacing we calculate
      // being > half of the final unit - so precalculate twice the rough val

      var roughX2 = 2 * roughDTick;

      if (roughX2 > ONEAVGYEAR) {
        roughDTick /= ONEAVGYEAR;
        base = getBase(10);
        ax.dtick = 'M' + 12 * roundDTick(roughDTick, base, roundBase10);
      } else if (roughX2 > ONEAVGMONTH) {
        roughDTick /= ONEAVGMONTH;
        ax.dtick = 'M' + roundDTick(roughDTick, 1, roundBase24);
      } else if (roughX2 > ONEDAY) {
        ax.dtick = roundDTick(roughDTick, ONEDAY, ax._hasDayOfWeekBreaks ? [1, 2, 7, 14] : roundDays); // get week ticks on sunday
        // this will also move the base tick off 2000-01-01 if dtick is
        // 2 or 3 days... but that's a weird enough case that we'll ignore it.

        var tickformat = axes.getTickFormat(ax);
        var isPeriod = ax.ticklabelmode === 'period';
        if (isPeriod) ax._rawTick0 = ax.tick0;

        if (/%[uVW]/.test(tickformat)) {
          ax.tick0 = lib_1.dateTick0(ax.calendar, 2); // Monday
        } else {
          ax.tick0 = lib_1.dateTick0(ax.calendar, 1); // Sunday
        }

        if (isPeriod) ax._dowTick0 = ax.tick0;
      } else if (roughX2 > ONEHOUR) {
        ax.dtick = roundDTick(roughDTick, ONEHOUR, roundBase24);
      } else if (roughX2 > ONEMIN) {
        ax.dtick = roundDTick(roughDTick, ONEMIN, roundBase60);
      } else if (roughX2 > ONESEC) {
        ax.dtick = roundDTick(roughDTick, ONESEC, roundBase60);
      } else {
        // milliseconds
        base = getBase(10);
        ax.dtick = roundDTick(roughDTick, base, roundBase10);
      }
    } else if (ax.type === 'log') {
      ax.tick0 = 0;
      var rng = lib_1.simpleMap(ax.range, ax.r2l);

      if (roughDTick > 0.7) {
        // only show powers of 10
        ax.dtick = Math.ceil(roughDTick);
      } else if (Math.abs(rng[1] - rng[0]) < 1) {
        // span is less than one power of 10
        var nt = 1.5 * Math.abs((rng[1] - rng[0]) / roughDTick); // ticks on a linear scale, labeled fully

        roughDTick = Math.abs(Math.pow(10, rng[1]) - Math.pow(10, rng[0])) / nt;
        base = getBase(10);
        ax.dtick = 'L' + roundDTick(roughDTick, base, roundBase10);
      } else {
        // include intermediates between powers of 10,
        // labeled with small digits
        // ax.dtick = "D2" (show 2 and 5) or "D1" (show all digits)
        ax.dtick = roughDTick > 0.3 ? 'D2' : 'D1';
      }
    } else if (ax.type === 'category' || ax.type === 'multicategory') {
      ax.tick0 = 0;
      ax.dtick = Math.ceil(Math.max(roughDTick, 1));
    } else if (isAngular(ax)) {
      ax.tick0 = 0;
      base = 1;
      ax.dtick = roundDTick(roughDTick, base, roundAngles);
    } else {
      // auto ticks always start at 0
      ax.tick0 = 0;
      base = getBase(10);
      ax.dtick = roundDTick(roughDTick, base, roundBase10);
    } // prevent infinite loops


    if (ax.dtick === 0) ax.dtick = 1; // TODO: this is from log axis histograms with autorange off

    if (!fastIsnumeric(ax.dtick) && typeof ax.dtick !== 'string') {
      var olddtick = ax.dtick;
      ax.dtick = 1;
      throw 'ax.dtick error: ' + String(olddtick);
    }
  }; // after dtick is already known, find tickround = precision
  // to display in tick labels
  //   for numeric ticks, integer # digits after . to round to
  //   for date ticks, the last date part to show (y,m,d,H,M,S)
  //      or an integer # digits past seconds


  function autoTickRound(ax) {
    var dtick = ax.dtick;
    ax._tickexponent = 0;

    if (!fastIsnumeric(dtick) && typeof dtick !== 'string') {
      dtick = 1;
    }

    if (ax.type === 'category' || ax.type === 'multicategory') {
      ax._tickround = null;
    }

    if (ax.type === 'date') {
      // If tick0 is unusual, give tickround a bit more information
      // not necessarily *all* the information in tick0 though, if it's really odd
      // minimal string length for tick0: 'd' is 10, 'M' is 16, 'S' is 19
      // take off a leading minus (year < 0) and i (intercalary month) so length is consistent
      var tick0ms = ax.r2l(ax.tick0);
      var tick0str = ax.l2r(tick0ms).replace(/(^-|i)/g, '');
      var tick0len = tick0str.length;

      if (String(dtick).charAt(0) === 'M') {
        // any tick0 more specific than a year: alway show the full date
        if (tick0len > 10 || tick0str.substr(5) !== '01-01') ax._tickround = 'd'; // show the month unless ticks are full multiples of a year
        else ax._tickround = +dtick.substr(1) % 12 === 0 ? 'y' : 'm';
      } else if (dtick >= ONEDAY && tick0len <= 10 || dtick >= ONEDAY * 15) ax._tickround = 'd';else if (dtick >= ONEMIN && tick0len <= 16 || dtick >= ONEHOUR) ax._tickround = 'M';else if (dtick >= ONESEC && tick0len <= 19 || dtick >= ONEMIN) ax._tickround = 'S';else {
        // tickround is a number of digits of fractional seconds
        // of any two adjacent ticks, at least one will have the maximum fractional digits
        // of all possible ticks - so take the max. length of tick0 and the next one
        var tick1len = ax.l2r(tick0ms + dtick).replace(/^-/, '').length;
        ax._tickround = Math.max(tick0len, tick1len) - 20; // We shouldn't get here... but in case there's a situation I'm
        // not thinking of where tick0str and tick1str are identical or
        // something, fall back on maximum precision

        if (ax._tickround < 0) ax._tickround = 4;
      }
    } else if (fastIsnumeric(dtick) || dtick.charAt(0) === 'L') {
      // linear or log (except D1, D2)
      var rng = ax.range.map(ax.r2d || Number);
      if (!fastIsnumeric(dtick)) dtick = Number(dtick.substr(1)); // 2 digits past largest digit of dtick

      ax._tickround = 2 - Math.floor(Math.log(dtick) / Math.LN10 + 0.01);
      var maxend = Math.max(Math.abs(rng[0]), Math.abs(rng[1]));
      var rangeexp = Math.floor(Math.log(maxend) / Math.LN10 + 0.01);
      var minexponent = ax.minexponent === undefined ? 3 : ax.minexponent;

      if (Math.abs(rangeexp) > minexponent) {
        if (isSIFormat(ax.exponentformat) && !beyondSI(rangeexp)) {
          ax._tickexponent = 3 * Math.round((rangeexp - 1) / 3);
        } else ax._tickexponent = rangeexp;
      }
    } else {
      // D1 or D2 (log)
      ax._tickround = null;
    }
  } // months and years don't have constant millisecond values
  // (but a year is always 12 months so we only need months)
  // log-scale ticks are also not consistently spaced, except
  // for pure powers of 10
  // numeric ticks always have constant differences, other datetime ticks
  // can all be calculated as constant number of milliseconds


  axes.tickIncrement = function (x, dtick, axrev, calendar) {
    var axSign = axrev ? -1 : 1; // includes linear, all dates smaller than month, and pure 10^n in log

    if (fastIsnumeric(dtick)) return lib_1.increment(x, axSign * dtick); // everything else is a string, one character plus a number

    var tType = dtick.charAt(0);
    var dtSigned = axSign * Number(dtick.substr(1)); // Dates: months (or years - see Lib.incrementMonth)

    if (tType === 'M') return lib_1.incrementMonth(x, dtSigned, calendar); // Log scales: Linear, Digits

    if (tType === 'L') return Math.log(Math.pow(10, x) + dtSigned) / Math.LN10; // log10 of 2,5,10, or all digits (logs just have to be
    // close enough to round)

    if (tType === 'D') {
      var tickset = dtick === 'D2' ? roundLog2 : roundLog1;
      var x2 = x + axSign * 0.01;
      var frac = lib_1.roundUp(lib_1.mod(x2, 1), tickset, axrev);
      return Math.floor(x2) + Math.log(d3.round(Math.pow(10, frac), 1)) / Math.LN10;
    }

    throw 'unrecognized dtick ' + String(dtick);
  }; // calculate the first tick on an axis


  axes.tickFirst = function (ax, opts) {
    var r2l = ax.r2l || Number;
    var rng = lib_1.simpleMap(ax.range, r2l, undefined, undefined, opts);
    var axrev = rng[1] < rng[0];
    var sRound = axrev ? Math.floor : Math.ceil; // add a tiny extra bit to make sure we get ticks
    // that may have been rounded out

    var r0 = expandRange(rng)[0];
    var dtick = ax.dtick;
    var tick0 = r2l(ax.tick0);

    if (fastIsnumeric(dtick)) {
      var tmin = sRound((r0 - tick0) / dtick) * dtick + tick0; // make sure no ticks outside the category list

      if (ax.type === 'category' || ax.type === 'multicategory') {
        tmin = lib_1.constrain(tmin, 0, ax._categories.length - 1);
      }

      return tmin;
    }

    var tType = dtick.charAt(0);
    var dtNum = Number(dtick.substr(1)); // Dates: months (or years)

    if (tType === 'M') {
      var cnt = 0;
      var t0 = tick0;
      var t1, mult, newDTick; // This algorithm should work for *any* nonlinear (but close to linear!)
      // tick spacing. Limit to 10 iterations, for gregorian months it's normally <=3.

      while (cnt < 10) {
        t1 = axes.tickIncrement(t0, dtick, axrev, ax.calendar);

        if ((t1 - r0) * (t0 - r0) <= 0) {
          // t1 and t0 are on opposite sides of r0! we've succeeded!
          if (axrev) return Math.min(t0, t1);
          return Math.max(t0, t1);
        }

        mult = (r0 - (t0 + t1) / 2) / (t1 - t0);
        newDTick = tType + (Math.abs(Math.round(mult)) || 1) * dtNum;
        t0 = axes.tickIncrement(t0, newDTick, mult < 0 ? !axrev : axrev, ax.calendar);
        cnt++;
      }

      lib_1.error('tickFirst did not converge', ax);
      return t0;
    } else if (tType === 'L') {
      // Log scales: Linear, Digits
      return Math.log(sRound((Math.pow(10, r0) - tick0) / dtNum) * dtNum + tick0) / Math.LN10;
    } else if (tType === 'D') {
      var tickset = dtick === 'D2' ? roundLog2 : roundLog1;
      var frac = lib_1.roundUp(lib_1.mod(r0, 1), tickset, axrev);
      return Math.floor(r0) + Math.log(d3.round(Math.pow(10, frac), 1)) / Math.LN10;
    } else throw 'unrecognized dtick ' + String(dtick);
  }; // draw the text for one tick.
  // px,py are the location on gd.paper
  // prefix is there so the x axis ticks can be dropped a line
  // ax is the axis layout, x is the tick value
  // hover is a (truthy) flag for whether to show numbers with a bit
  // more precision for hovertext


  axes.tickText = function (ax, x, hover, noSuffixPrefix) {
    var out = tickTextObj(ax, x);
    var arrayMode = ax.tickmode === 'array';
    var extraPrecision = hover || arrayMode;
    var axType = ax.type; // TODO multicategory, if we allow ticktext / tickvals

    var tickVal2l = axType === 'category' ? ax.d2l_noadd : ax.d2l;
    var i;

    if (arrayMode && Array.isArray(ax.ticktext)) {
      var rng = lib_1.simpleMap(ax.range, ax.r2l);
      var minDiff = (Math.abs(rng[1] - rng[0]) - (ax._lBreaks || 0)) / 10000;

      for (i = 0; i < ax.ticktext.length; i++) {
        if (Math.abs(x - tickVal2l(ax.tickvals[i])) < minDiff) break;
      }

      if (i < ax.ticktext.length) {
        out.text = String(ax.ticktext[i]);
        return out;
      }
    }

    function isHidden(showAttr) {
      if (showAttr === undefined) return true;
      if (hover) return showAttr === 'none';
      var firstOrLast = {
        first: ax._tmin,
        last: ax._tmax
      }[showAttr];
      return showAttr !== 'all' && x !== firstOrLast;
    }

    var hideexp = hover ? 'never' : ax.exponentformat !== 'none' && isHidden(ax.showexponent) ? 'hide' : '';
    if (axType === 'date') formatDate(ax, out, hover, extraPrecision);else if (axType === 'log') formatLog(ax, out, hover, extraPrecision, hideexp);else if (axType === 'category') formatCategory(ax, out);else if (axType === 'multicategory') formatMultiCategory(ax, out, hover);else if (isAngular(ax)) formatAngle(ax, out, hover, extraPrecision, hideexp);else formatLinear(ax, out, hover, extraPrecision, hideexp); // add prefix and suffix

    if (!noSuffixPrefix) {
      if (ax.tickprefix && !isHidden(ax.showtickprefix)) out.text = ax.tickprefix + out.text;
      if (ax.ticksuffix && !isHidden(ax.showticksuffix)) out.text += ax.ticksuffix;
    } // Setup ticks and grid lines boundaries
    // at 1/2 a 'category' to the left/bottom


    if (ax.tickson === 'boundaries' || ax.showdividers) {
      var inbounds = function (v) {
        var p = ax.l2p(v);
        return p >= 0 && p <= ax._length ? v : null;
      };

      out.xbnd = [inbounds(out.x - 0.5), inbounds(out.x + ax.dtick - 0.5)];
    }

    return out;
  };
  /**
   * create text for a hover label on this axis, with special handling of
   * log axes (where negative values can't be displayed but can appear in hover text)
   *
   * @param {object} ax: the axis to format text for
   * @param {number or array of numbers} values: calcdata value(s) to format
   * @param {Optional(string)} hoverformat: trace (x|y)hoverformat to override axis.hoverformat
   *
   * @returns {string} `val` formatted as a string appropriate to this axis, or
   *     first value and second value as a range (ie '<val1> - <val2>') if the second value is provided and
   *     it's different from the first value.
   */


  axes.hoverLabelText = function (ax, values, hoverformat) {
    if (hoverformat) ax = lib_1.extendFlat({}, ax, {
      hoverformat: hoverformat
    });
    var val = Array.isArray(values) ? values[0] : values;
    var val2 = Array.isArray(values) ? values[1] : undefined;

    if (val2 !== undefined && val2 !== val) {
      return axes.hoverLabelText(ax, val, hoverformat) + ' - ' + axes.hoverLabelText(ax, val2, hoverformat);
    }

    var logOffScale = ax.type === 'log' && val <= 0;
    var tx = axes.tickText(ax, ax.c2l(logOffScale ? -val : val), 'hover').text;

    if (logOffScale) {
      return val === 0 ? '0' : MINUS_SIGN + tx;
    } // TODO: should we do something special if the axis calendar and
    // the data calendar are different? Somehow display both dates with
    // their system names? Right now it will just display in the axis calendar
    // but users could add the other one as text.


    return tx;
  };

  function tickTextObj(ax, x, text) {
    var tf = ax.tickfont || {};
    return {
      x: x,
      dx: 0,
      dy: 0,
      text: text || '',
      fontSize: tf.size,
      font: tf.family,
      fontColor: tf.color
    };
  }

  function formatDate(ax, out, hover, extraPrecision) {
    var tr = ax._tickround;
    var fmt = hover && ax.hoverformat || axes.getTickFormat(ax);

    if (extraPrecision) {
      // second or sub-second precision: extra always shows max digits.
      // for other fields, extra precision just adds one field.
      if (fastIsnumeric(tr)) tr = 4;else tr = {
        y: 'm',
        m: 'd',
        d: 'M',
        M: 'S',
        S: 4
      }[tr];
    }

    var dateStr = lib_1.formatDate(out.x, fmt, tr, ax._dateFormat, ax.calendar, ax._extraFormat);
    var headStr;
    var splitIndex = dateStr.indexOf('\n');

    if (splitIndex !== -1) {
      headStr = dateStr.substr(splitIndex + 1);
      dateStr = dateStr.substr(0, splitIndex);
    }

    if (extraPrecision) {
      // if extraPrecision led to trailing zeros, strip them off
      // actually, this can lead to removing even more zeros than
      // in the original rounding, but that's fine because in these
      // contexts uniformity is not so important (if there's even
      // anything to be uniform with!)
      // can we remove the whole time part?
      if (dateStr === '00:00:00' || dateStr === '00:00') {
        dateStr = headStr;
        headStr = '';
      } else if (dateStr.length === 8) {
        // strip off seconds if they're zero (zero fractional seconds
        // are already omitted)
        // but we never remove minutes and leave just hours
        dateStr = dateStr.replace(/:00$/, '');
      }
    }

    if (headStr) {
      if (hover) {
        // hover puts it all on one line, so headPart works best up front
        // except for year headPart: turn this into "Jan 1, 2000" etc.
        if (tr === 'd') dateStr += ', ' + headStr;else dateStr = headStr + (dateStr ? ', ' + dateStr : '');
      } else {
        if (!ax._inCalcTicks || ax._prevDateHead !== headStr) {
          ax._prevDateHead = headStr;
          dateStr += '<br>' + headStr;
        } else {
          var isInside = insideTicklabelposition(ax);
          var side = ax._trueSide || ax.side; // polar mocks the side of the radial axis

          if (!isInside && side === 'top' || isInside && side === 'bottom') {
            dateStr += '<br> ';
          }
        }
      }
    }

    out.text = dateStr;
  }

  function formatLog(ax, out, hover, extraPrecision, hideexp) {
    var dtick = ax.dtick;
    var x = out.x;
    var tickformat = ax.tickformat;
    var dtChar0 = typeof dtick === 'string' && dtick.charAt(0);

    if (hideexp === 'never') {
      // If this is a hover label, then we must *never* hide the exponent
      // for the sake of display, which could give the wrong value by
      // potentially many orders of magnitude. If hideexp was 'never', then
      // it's now succeeded by preventing the other condition from automating
      // this choice. Thus we can unset it so that the axis formatting takes
      // precedence.
      hideexp = '';
    }

    if (extraPrecision && dtChar0 !== 'L') {
      dtick = 'L3';
      dtChar0 = 'L';
    }

    if (tickformat || dtChar0 === 'L') {
      out.text = numFormat(Math.pow(10, x), ax, hideexp, extraPrecision);
    } else if (fastIsnumeric(dtick) || dtChar0 === 'D' && lib_1.mod(x + 0.01, 1) < 0.1) {
      var p = Math.round(x);
      var absP = Math.abs(p);
      var exponentFormat = ax.exponentformat;

      if (exponentFormat === 'power' || isSIFormat(exponentFormat) && beyondSI(p)) {
        if (p === 0) out.text = 1;else if (p === 1) out.text = '10';else out.text = '10<sup>' + (p > 1 ? '' : MINUS_SIGN) + absP + '</sup>';
        out.fontSize *= 1.25;
      } else if ((exponentFormat === 'e' || exponentFormat === 'E') && absP > 2) {
        out.text = '1' + exponentFormat + (p > 0 ? '+' : MINUS_SIGN) + absP;
      } else {
        out.text = numFormat(Math.pow(10, x), ax, '', 'fakehover');

        if (dtick === 'D1' && ax._id.charAt(0) === 'y') {
          out.dy -= out.fontSize / 6;
        }
      }
    } else if (dtChar0 === 'D') {
      out.text = String(Math.round(Math.pow(10, lib_1.mod(x, 1))));
      out.fontSize *= 0.75;
    } else throw 'unrecognized dtick ' + String(dtick); // if 9's are printed on log scale, move the 10's away a bit


    if (ax.dtick === 'D1') {
      var firstChar = String(out.text).charAt(0);

      if (firstChar === '0' || firstChar === '1') {
        if (ax._id.charAt(0) === 'y') {
          out.dx -= out.fontSize / 4;
        } else {
          out.dy += out.fontSize / 2;
          out.dx += (ax.range[1] > ax.range[0] ? 1 : -1) * out.fontSize * (x < 0 ? 0.5 : 0.25);
        }
      }
    }
  }

  function formatCategory(ax, out) {
    var tt = ax._categories[Math.round(out.x)];

    if (tt === undefined) tt = '';
    out.text = String(tt);
  }

  function formatMultiCategory(ax, out, hover) {
    var v = Math.round(out.x);
    var cats = ax._categories[v] || [];
    var tt = cats[1] === undefined ? '' : String(cats[1]);
    var tt2 = cats[0] === undefined ? '' : String(cats[0]);

    if (hover) {
      // TODO is this what we want?
      out.text = tt2 + ' - ' + tt;
    } else {
      // setup for secondary labels
      out.text = tt;
      out.text2 = tt2;
    }
  }

  function formatLinear(ax, out, hover, extraPrecision, hideexp) {
    if (hideexp === 'never') {
      // If this is a hover label, then we must *never* hide the exponent
      // for the sake of display, which could give the wrong value by
      // potentially many orders of magnitude. If hideexp was 'never', then
      // it's now succeeded by preventing the other condition from automating
      // this choice. Thus we can unset it so that the axis formatting takes
      // precedence.
      hideexp = '';
    } else if (ax.showexponent === 'all' && Math.abs(out.x / ax.dtick) < 1e-6) {
      // don't add an exponent to zero if we're showing all exponents
      // so the only reason you'd show an exponent on zero is if it's the
      // ONLY tick to get an exponent (first or last)
      hideexp = 'hide';
    }

    out.text = numFormat(out.x, ax, hideexp, extraPrecision);
  }

  function formatAngle(ax, out, hover, extraPrecision, hideexp) {
    if (ax.thetaunit === 'radians' && !hover) {
      var num = out.x / 180;

      if (num === 0) {
        out.text = '0';
      } else {
        var frac = num2frac(num);

        if (frac[1] >= 100) {
          out.text = numFormat(lib_1.deg2rad(out.x), ax, hideexp, extraPrecision);
        } else {
          var isNeg = out.x < 0;

          if (frac[1] === 1) {
            if (frac[0] === 1) out.text = 'Ï';else out.text = frac[0] + 'Ï';
          } else {
            out.text = ['<sup>', frac[0], '</sup>', 'â', '<sub>', frac[1], '</sub>', 'Ï'].join('');
          }

          if (isNeg) out.text = MINUS_SIGN + out.text;
        }
      }
    } else {
      out.text = numFormat(out.x, ax, hideexp, extraPrecision);
    }
  } // inspired by
  // https://github.com/yisibl/num2fraction/blob/master/index.js


  function num2frac(num) {
    function almostEq(a, b) {
      return Math.abs(a - b) <= 1e-6;
    }

    function findGCD(a, b) {
      return almostEq(b, 0) ? a : findGCD(b, a % b);
    }

    function findPrecision(n) {
      var e = 1;

      while (!almostEq(Math.round(n * e) / e, n)) {
        e *= 10;
      }

      return e;
    }

    var precision = findPrecision(num);
    var number = num * precision;
    var gcd = Math.abs(findGCD(number, precision));
    return [// numerator
    Math.round(number / gcd), // denominator
    Math.round(precision / gcd)];
  } // format a number (tick value) according to the axis settings
  // new, more reliable procedure than d3.round or similar:
  // add half the rounding increment, then stringify and truncate
  // also automatically switch to sci. notation


  var SIPREFIXES = ['f', 'p', 'n', 'Î¼', 'm', '', 'k', 'M', 'G', 'T'];

  function isSIFormat(exponentFormat) {
    return exponentFormat === 'SI' || exponentFormat === 'B';
  } // are we beyond the range of common SI prefixes?
  // 10^-16 -> 1x10^-16
  // 10^-15 -> 1f
  // ...
  // 10^14 -> 100T
  // 10^15 -> 1x10^15
  // 10^16 -> 1x10^16


  function beyondSI(exponent) {
    return exponent > 14 || exponent < -15;
  }

  function numFormat(v, ax, fmtoverride, hover) {
    var isNeg = v < 0; // max number of digits past decimal point to show

    var tickRound = ax._tickround;
    var exponentFormat = fmtoverride || ax.exponentformat || 'B';
    var exponent = ax._tickexponent;
    var tickformat = axes.getTickFormat(ax);
    var separatethousands = ax.separatethousands; // special case for hover: set exponent just for this value, and
    // add a couple more digits of precision over tick labels

    if (hover) {
      // make a dummy axis obj to get the auto rounding and exponent
      var ah = {
        exponentformat: exponentFormat,
        minexponent: ax.minexponent,
        dtick: ax.showexponent === 'none' ? ax.dtick : fastIsnumeric(v) ? Math.abs(v) || 1 : 1,
        // if not showing any exponents, don't change the exponent
        // from what we calculate
        range: ax.showexponent === 'none' ? ax.range.map(ax.r2d) : [0, v || 1]
      };
      autoTickRound(ah);
      tickRound = (Number(ah._tickround) || 0) + 4;
      exponent = ah._tickexponent;
      if (ax.hoverformat) tickformat = ax.hoverformat;
    }

    if (tickformat) return ax._numFormat(tickformat)(v).replace(/-/g, MINUS_SIGN); // 'epsilon' - rounding increment

    var e = Math.pow(10, -tickRound) / 2; // exponentFormat codes:
    // 'e' (1.2e+6, default)
    // 'E' (1.2E+6)
    // 'SI' (1.2M)
    // 'B' (same as SI except 10^9=B not G)
    // 'none' (1200000)
    // 'power' (1.2x10^6)
    // 'hide' (1.2, use 3rd argument=='hide' to eg
    //      only show exponent on last tick)

    if (exponentFormat === 'none') exponent = 0; // take the sign out, put it back manually at the end
    // - makes cases easier

    v = Math.abs(v);

    if (v < e) {
      // 0 is just 0, but may get exponent if it's the last tick
      v = '0';
      isNeg = false;
    } else {
      v += e; // take out a common exponent, if any

      if (exponent) {
        v *= Math.pow(10, -exponent);
        tickRound += exponent;
      } // round the mantissa


      if (tickRound === 0) v = String(Math.floor(v));else if (tickRound < 0) {
        v = String(Math.round(v));
        v = v.substr(0, v.length + tickRound);

        for (var i = tickRound; i < 0; i++) v += '0';
      } else {
        v = String(v);
        var dp = v.indexOf('.') + 1;
        if (dp) v = v.substr(0, dp + tickRound).replace(/\.?0+$/, '');
      } // insert appropriate decimal point and thousands separator

      v = lib_1.numSeparate(v, ax._separators, separatethousands);
    } // add exponent


    if (exponent && exponentFormat !== 'hide') {
      if (isSIFormat(exponentFormat) && beyondSI(exponent)) exponentFormat = 'power';
      var signedExponent;
      if (exponent < 0) signedExponent = MINUS_SIGN + -exponent;else if (exponentFormat !== 'power') signedExponent = '+' + exponent;else signedExponent = String(exponent);

      if (exponentFormat === 'e' || exponentFormat === 'E') {
        v += exponentFormat + signedExponent;
      } else if (exponentFormat === 'power') {
        v += 'Ã10<sup>' + signedExponent + '</sup>';
      } else if (exponentFormat === 'B' && exponent === 9) {
        v += 'B';
      } else if (isSIFormat(exponentFormat)) {
        v += SIPREFIXES[exponent / 3 + 5];
      }
    } // put sign back in and return
    // replace standard minus character (which is technically a hyphen)
    // with a true minus sign


    if (isNeg) return MINUS_SIGN + v;
    return v;
  }

  axes.getTickFormat = function (ax) {
    var i;

    function convertToMs(dtick) {
      return typeof dtick !== 'string' ? dtick : Number(dtick.replace('M', '')) * ONEAVGMONTH;
    }

    function compareLogTicks(left, right) {
      var priority = ['L', 'D'];

      if (typeof left === typeof right) {
        if (typeof left === 'number') {
          return left - right;
        } else {
          var leftPriority = priority.indexOf(left.charAt(0));
          var rightPriority = priority.indexOf(right.charAt(0));

          if (leftPriority === rightPriority) {
            return Number(left.replace(/(L|D)/g, '')) - Number(right.replace(/(L|D)/g, ''));
          } else {
            return leftPriority - rightPriority;
          }
        }
      } else {
        return typeof left === 'number' ? 1 : -1;
      }
    }

    function isProperStop(dtick, range, convert) {
      var convertFn = convert || function (x) {
        return x;
      };

      var leftDtick = range[0];
      var rightDtick = range[1];
      return (!leftDtick && typeof leftDtick !== 'number' || convertFn(leftDtick) <= convertFn(dtick)) && (!rightDtick && typeof rightDtick !== 'number' || convertFn(rightDtick) >= convertFn(dtick));
    }

    function isProperLogStop(dtick, range) {
      var isLeftDtickNull = range[0] === null;
      var isRightDtickNull = range[1] === null;
      var isDtickInRangeLeft = compareLogTicks(dtick, range[0]) >= 0;
      var isDtickInRangeRight = compareLogTicks(dtick, range[1]) <= 0;
      return (isLeftDtickNull || isDtickInRangeLeft) && (isRightDtickNull || isDtickInRangeRight);
    }

    var tickstop, stopi;

    if (ax.tickformatstops && ax.tickformatstops.length > 0) {
      switch (ax.type) {
        case 'date':
        case 'linear':
          {
            for (i = 0; i < ax.tickformatstops.length; i++) {
              stopi = ax.tickformatstops[i];

              if (stopi.enabled && isProperStop(ax.dtick, stopi.dtickrange, convertToMs)) {
                tickstop = stopi;
                break;
              }
            }

            break;
          }

        case 'log':
          {
            for (i = 0; i < ax.tickformatstops.length; i++) {
              stopi = ax.tickformatstops[i];

              if (stopi.enabled && isProperLogStop(ax.dtick, stopi.dtickrange)) {
                tickstop = stopi;
                break;
              }
            }

            break;
          }
      }
    }

    return tickstop ? tickstop.value : ax.tickformat;
  }; // getSubplots - extract all subplot IDs we need
  // as an array of items like 'xy', 'x2y', 'x2y2'...
  // sorted by x (x,x2,x3...) then y
  // optionally restrict to only subplots containing axis object ax
  //
  // NOTE: this is currently only used OUTSIDE plotly.js (toolpanel, webapp)
  // ideally we get rid of it there (or just copy this there) and remove it here


  axes.getSubplots = function (gd, ax) {
    var subplotObj = gd._fullLayout._subplots;
    var allSubplots = subplotObj.cartesian.concat(subplotObj.gl2d || []);
    var out = ax ? axes.findSubplotsWithAxis(allSubplots, ax) : allSubplots;
    out.sort(function (a, b) {
      var aParts = a.substr(1).split('y');
      var bParts = b.substr(1).split('y');
      if (aParts[0] === bParts[0]) return +aParts[1] - +bParts[1];
      return +aParts[0] - +bParts[0];
    });
    return out;
  }; // find all subplots with axis 'ax'
  // NOTE: this is only used in axes.getSubplots (only used outside plotly.js) and
  // gl2d/convert (where it restricts axis subplots to only those with gl2d)


  axes.findSubplotsWithAxis = function (subplots, ax) {
    var axMatch = new RegExp(ax._id.charAt(0) === 'x' ? '^' + ax._id + 'y' : ax._id + '$');
    var subplotsWithAx = [];

    for (var i = 0; i < subplots.length; i++) {
      var sp = subplots[i];
      if (axMatch.test(sp)) subplotsWithAx.push(sp);
    }

    return subplotsWithAx;
  }; // makeClipPaths: prepare clipPaths for all single axes and all possible xy pairings


  axes.makeClipPaths = function (gd) {
    var fullLayout = gd._fullLayout; // for more info: https://github.com/plotly/plotly.js/issues/2595

    if (fullLayout._hasOnlyLargeSploms) return;
    var fullWidth = {
      _offset: 0,
      _length: fullLayout.width,
      _id: ''
    };
    var fullHeight = {
      _offset: 0,
      _length: fullLayout.height,
      _id: ''
    };
    var xaList = axes.list(gd, 'x', true);
    var yaList = axes.list(gd, 'y', true);
    var clipList = [];
    var i, j;

    for (i = 0; i < xaList.length; i++) {
      clipList.push({
        x: xaList[i],
        y: fullHeight
      });

      for (j = 0; j < yaList.length; j++) {
        if (i === 0) clipList.push({
          x: fullWidth,
          y: yaList[j]
        });
        clipList.push({
          x: xaList[i],
          y: yaList[j]
        });
      }
    } // selectors don't work right with camelCase tags,
    // have to use class instead
    // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I


    var axClips = fullLayout._clips.selectAll('.axesclip').data(clipList, function (d) {
      return d.x._id + d.y._id;
    });

    axClips.enter().append('clipPath').classed('axesclip', true).attr('id', function (d) {
      return 'clip' + fullLayout._uid + d.x._id + d.y._id;
    }).append('rect');
    axClips.exit().remove();
    axClips.each(function (d) {
      d3.select(this).select('rect').attr({
        x: d.x._offset || 0,
        y: d.y._offset || 0,
        width: d.x._length || 1,
        height: d.y._length || 1
      });
    });
  };
  /**
   * Main multi-axis drawing routine!
   *
   * @param {DOM element} gd : graph div
   * @param {string or array of strings} arg : polymorphic argument
   * @param {object} opts:
   * - @param {boolean} skipTitle : optional flag to skip axis title draw/update
   *
   * Signature 1: Axes.draw(gd, 'redraw')
   *   use this to clear and redraw all axes on graph
   *
   * Signature 2: Axes.draw(gd, '')
   *   use this to draw all axes on graph w/o the selectAll().remove()
   *   of the 'redraw' signature
   *
   * Signature 3: Axes.draw(gd, [axId, axId2, ...])
   *   where the items are axis id string,
   *   use this to update multiple axes in one call
   *
   * N.B draw updates:
   * - ax._r (stored range for use by zoom/pan)
   * - ax._rl (stored linearized range for use by zoom/pan)
   */


  axes.draw = function (gd, arg, opts) {
    var fullLayout = gd._fullLayout;

    if (arg === 'redraw') {
      fullLayout._paper.selectAll('g.subplot').each(function (d) {
        var id = d[0];
        var plotinfo = fullLayout._plots[id];

        if (plotinfo) {
          var xa = plotinfo.xaxis;
          var ya = plotinfo.yaxis;
          plotinfo.xaxislayer.selectAll('.' + xa._id + 'tick').remove();
          plotinfo.yaxislayer.selectAll('.' + ya._id + 'tick').remove();
          plotinfo.xaxislayer.selectAll('.' + xa._id + 'tick2').remove();
          plotinfo.yaxislayer.selectAll('.' + ya._id + 'tick2').remove();
          plotinfo.xaxislayer.selectAll('.' + xa._id + 'divider').remove();
          plotinfo.yaxislayer.selectAll('.' + ya._id + 'divider').remove();
          if (plotinfo.gridlayer) plotinfo.gridlayer.selectAll('path').remove();
          if (plotinfo.zerolinelayer) plotinfo.zerolinelayer.selectAll('path').remove();

          fullLayout._infolayer.select('.g-' + xa._id + 'title').remove();

          fullLayout._infolayer.select('.g-' + ya._id + 'title').remove();
        }
      });
    }

    var axList = !arg || arg === 'redraw' ? axes.listIds(gd) : arg;
    return lib_1.syncOrAsync(axList.map(function (axId) {
      return function () {
        if (!axId) return;
        var ax = axes.getFromId(gd, axId);
        var axDone = axes.drawOne(gd, ax, opts);
        ax._r = ax.range.slice();
        ax._rl = lib_1.simpleMap(ax._r, ax.r2l);
        return axDone;
      };
    }));
  };
  /**
   * Draw one cartesian axis
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   * @param {object} opts
   * - @param {boolean} skipTitle (set to true to skip axis title draw call)
   *
   * Depends on:
   * - ax._mainSubplot (from linkSubplots)
   * - ax._mainAxis
   * - ax._anchorAxis
   * - ax._subplotsWith
   * - ax._counterDomainMin, ax._counterDomainMax (optionally, from linkSubplots)
   * - ax._tickAngles (on redraw only, old value relinked during supplyDefaults)
   * - ax._mainLinePosition (from lsInner)
   * - ax._mainMirrorPosition
   * - ax._linepositions
   *
   * Fills in:
   * - ax._vals:
   * - ax._gridVals:
   * - ax._selections:
   * - ax._tickAngles:
   * - ax._depth (when required only):
   * - and calls ax.setScale
   */


  axes.drawOne = function (gd, ax, opts) {
    opts = opts || {};
    var i, sp, plotinfo;
    ax.setScale();
    var fullLayout = gd._fullLayout;
    var axId = ax._id;
    var axLetter = axId.charAt(0);
    var counterLetter = axes.counterLetter(axId);
    var mainPlotinfo = fullLayout._plots[ax._mainSubplot]; // this happens when updating matched group with 'missing' axes

    if (!mainPlotinfo) return;
    var mainAxLayer = mainPlotinfo[axLetter + 'axislayer'];
    var mainLinePosition = ax._mainLinePosition;
    var mainMirrorPosition = ax._mainMirrorPosition;
    var vals = ax._vals = axes.calcTicks(ax); // Add a couple of axis properties that should cause us to recreate
    // elements. Used in d3 data function.

    var axInfo = [ax.mirror, mainLinePosition, mainMirrorPosition].join('_');

    for (i = 0; i < vals.length; i++) {
      vals[i].axInfo = axInfo;
    } // stash selections to avoid DOM queries e.g.
    // - stash tickLabels selection, so that drawTitle can use it to scoot title


    ax._selections = {}; // stash tick angle (including the computed 'auto' values) per tick-label class
    // linkup 'previous' tick angles on redraws

    if (ax._tickAngles) ax._prevTickAngles = ax._tickAngles;
    ax._tickAngles = {}; // measure [in px] between axis position and outward-most part of bounding box
    // (touching either the tick label or ticks)
    // depth can be expansive to compute, so we only do so when required

    ax._depth = null; // calcLabelLevelBbox can be expensive,
    // so make sure to not call it twice during the same Axes.drawOne call
    // by stashing label-level bounding boxes per tick-label class

    var llbboxes = {};

    function getLabelLevelBbox(suffix) {
      var cls = axId + (suffix || 'tick');
      if (!llbboxes[cls]) llbboxes[cls] = calcLabelLevelBbox(ax, cls);
      return llbboxes[cls];
    }

    if (!ax.visible) return;
    var transTickFn = axes.makeTransTickFn(ax);
    var transTickLabelFn = axes.makeTransTickLabelFn(ax);
    var tickVals; // We remove zero lines, grid lines, and inside ticks if they're within 1px of the end
    // The key case here is removing zero lines when the axis bound is zero

    var valsClipped;
    var insideTicks = ax.ticks === 'inside';
    var outsideTicks = ax.ticks === 'outside';

    if (ax.tickson === 'boundaries') {
      var boundaryVals = getBoundaryVals(ax, vals);
      valsClipped = axes.clipEnds(ax, boundaryVals);
      tickVals = insideTicks ? valsClipped : boundaryVals;
    } else {
      valsClipped = axes.clipEnds(ax, vals);
      tickVals = insideTicks && ax.ticklabelmode !== 'period' ? valsClipped : vals;
    }

    var gridVals = ax._gridVals = valsClipped;
    var dividerVals = getDividerVals(ax, vals);

    if (!fullLayout._hasOnlyLargeSploms) {
      var subplotsWithAx = ax._subplotsWith; // keep track of which subplots (by main counter axis) we've already
      // drawn grids for, so we don't overdraw overlaying subplots

      var finishedGrids = {};

      for (i = 0; i < subplotsWithAx.length; i++) {
        sp = subplotsWithAx[i];
        plotinfo = fullLayout._plots[sp];
        var counterAxis = plotinfo[counterLetter + 'axis'];
        var mainCounterID = counterAxis._mainAxis._id;
        if (finishedGrids[mainCounterID]) continue;
        finishedGrids[mainCounterID] = 1;
        var gridPath = axLetter === 'x' ? 'M0,' + counterAxis._offset + 'v' + counterAxis._length : 'M' + counterAxis._offset + ',0h' + counterAxis._length;
        axes.drawGrid(gd, ax, {
          vals: gridVals,
          counterAxis: counterAxis,
          layer: plotinfo.gridlayer.select('.' + axId),
          path: gridPath,
          transFn: transTickFn
        });
        axes.drawZeroLine(gd, ax, {
          counterAxis: counterAxis,
          layer: plotinfo.zerolinelayer,
          path: gridPath,
          transFn: transTickFn
        });
      }
    }

    var tickSigns = axes.getTickSigns(ax);
    var tickSubplots = [];

    if (ax.ticks) {
      var mainTickPath = axes.makeTickPath(ax, mainLinePosition, tickSigns[2]);
      var mirrorTickPath;
      var fullTickPath;

      if (ax._anchorAxis && ax.mirror && ax.mirror !== true) {
        mirrorTickPath = axes.makeTickPath(ax, mainMirrorPosition, tickSigns[3]);
        fullTickPath = mainTickPath + mirrorTickPath;
      } else {
        mirrorTickPath = '';
        fullTickPath = mainTickPath;
      }

      var tickPath;

      if (ax.showdividers && outsideTicks && ax.tickson === 'boundaries') {
        var dividerLookup = {};

        for (i = 0; i < dividerVals.length; i++) {
          dividerLookup[dividerVals[i].x] = 1;
        }

        tickPath = function (d) {
          return dividerLookup[d.x] ? mirrorTickPath : fullTickPath;
        };
      } else {
        tickPath = fullTickPath;
      }

      axes.drawTicks(gd, ax, {
        vals: tickVals,
        layer: mainAxLayer,
        path: tickPath,
        transFn: transTickFn
      });

      if (ax.mirror === 'allticks') {
        tickSubplots = Object.keys(ax._linepositions || {});
      }
    }

    for (i = 0; i < tickSubplots.length; i++) {
      sp = tickSubplots[i];
      plotinfo = fullLayout._plots[sp]; // [bottom or left, top or right], free and main are handled above

      var linepositions = ax._linepositions[sp] || [];
      var spTickPath = axes.makeTickPath(ax, linepositions[0], tickSigns[0]) + axes.makeTickPath(ax, linepositions[1], tickSigns[1]);
      axes.drawTicks(gd, ax, {
        vals: tickVals,
        layer: plotinfo[axLetter + 'axislayer'],
        path: spTickPath,
        transFn: transTickFn
      });
    }

    var seq = []; // tick labels - for now just the main labels.
    // TODO: mirror labels, esp for subplots

    seq.push(function () {
      return axes.drawLabels(gd, ax, {
        vals: vals,
        layer: mainAxLayer,
        plotinfo: plotinfo,
        transFn: transTickLabelFn,
        labelFns: axes.makeLabelFns(ax, mainLinePosition)
      });
    });

    if (ax.type === 'multicategory') {
      var pad = {
        x: 2,
        y: 10
      }[axLetter];
      seq.push(function () {
        var bboxKey = {
          x: 'height',
          y: 'width'
        }[axLetter];
        var standoff = getLabelLevelBbox()[bboxKey] + pad + (ax._tickAngles[axId + 'tick'] ? ax.tickfont.size * LINE_SPACING : 0);
        return axes.drawLabels(gd, ax, {
          vals: getSecondaryLabelVals(ax, vals),
          layer: mainAxLayer,
          cls: axId + 'tick2',
          repositionOnUpdate: true,
          secondary: true,
          transFn: transTickFn,
          labelFns: axes.makeLabelFns(ax, mainLinePosition + standoff * tickSigns[4])
        });
      });
      seq.push(function () {
        ax._depth = tickSigns[4] * (getLabelLevelBbox('tick2')[ax.side] - mainLinePosition);
        return drawDividers(gd, ax, {
          vals: dividerVals,
          layer: mainAxLayer,
          path: axes.makeTickPath(ax, mainLinePosition, tickSigns[4], ax._depth),
          transFn: transTickFn
        });
      });
    } else if (ax.title.hasOwnProperty('standoff')) {
      seq.push(function () {
        ax._depth = tickSigns[4] * (getLabelLevelBbox()[ax.side] - mainLinePosition);
      });
    }

    var hasRangeSlider = registry.getComponentMethod('rangeslider', 'isVisible')(ax);
    seq.push(function () {
      var s = ax.side.charAt(0);
      var sMirror = OPPOSITE_SIDE[ax.side].charAt(0);
      var pos = axes.getPxPosition(gd, ax);
      var outsideTickLen = outsideTicks ? ax.ticklen : 0;
      var llbbox;
      var push;
      var mirrorPush;
      var rangeSliderPush;

      if (ax.automargin || hasRangeSlider) {
        if (ax.type === 'multicategory') {
          llbbox = getLabelLevelBbox('tick2');
        } else {
          llbbox = getLabelLevelBbox();

          if (axLetter === 'x' && s === 'b') {
            ax._depth = Math.max(llbbox.width > 0 ? llbbox.bottom - pos : 0, outsideTickLen);
          }
        }
      }

      if (ax.automargin) {
        push = {
          x: 0,
          y: 0,
          r: 0,
          l: 0,
          t: 0,
          b: 0
        };
        var domainIndices = [0, 1];

        if (axLetter === 'x') {
          if (s === 'b') {
            push[s] = ax._depth;
          } else {
            push[s] = ax._depth = Math.max(llbbox.width > 0 ? pos - llbbox.top : 0, outsideTickLen);
            domainIndices.reverse();
          }

          if (llbbox.width > 0) {
            var rExtra = llbbox.right - (ax._offset + ax._length);

            if (rExtra > 0) {
              push.xr = 1;
              push.r = rExtra;
            }

            var lExtra = ax._offset - llbbox.left;

            if (lExtra > 0) {
              push.xl = 0;
              push.l = lExtra;
            }
          }
        } else {
          if (s === 'l') {
            push[s] = ax._depth = Math.max(llbbox.height > 0 ? pos - llbbox.left : 0, outsideTickLen);
          } else {
            push[s] = ax._depth = Math.max(llbbox.height > 0 ? llbbox.right - pos : 0, outsideTickLen);
            domainIndices.reverse();
          }

          if (llbbox.height > 0) {
            var bExtra = llbbox.bottom - (ax._offset + ax._length);

            if (bExtra > 0) {
              push.yb = 0;
              push.b = bExtra;
            }

            var tExtra = ax._offset - llbbox.top;

            if (tExtra > 0) {
              push.yt = 1;
              push.t = tExtra;
            }
          }
        }

        push[counterLetter] = ax.anchor === 'free' ? ax.position : ax._anchorAxis.domain[domainIndices[0]];

        if (ax.title.text !== fullLayout._dfltTitle[axLetter]) {
          push[s] += approxTitleDepth(ax) + (ax.title.standoff || 0);
        }

        if (ax.mirror && ax.anchor !== 'free') {
          mirrorPush = {
            x: 0,
            y: 0,
            r: 0,
            l: 0,
            t: 0,
            b: 0
          };
          mirrorPush[sMirror] = ax.linewidth;
          if (ax.mirror && ax.mirror !== true) mirrorPush[sMirror] += outsideTickLen;

          if (ax.mirror === true || ax.mirror === 'ticks') {
            mirrorPush[counterLetter] = ax._anchorAxis.domain[domainIndices[1]];
          } else if (ax.mirror === 'all' || ax.mirror === 'allticks') {
            mirrorPush[counterLetter] = [ax._counterDomainMin, ax._counterDomainMax][domainIndices[1]];
          }
        }
      }

      if (hasRangeSlider) {
        rangeSliderPush = registry.getComponentMethod('rangeslider', 'autoMarginOpts')(gd, ax);
      }

      plots_1.autoMargin(gd, axAutoMarginID(ax), push);
      plots_1.autoMargin(gd, axMirrorAutoMarginID(ax), mirrorPush);
      plots_1.autoMargin(gd, rangeSliderAutoMarginID(ax), rangeSliderPush);
    });

    if (!opts.skipTitle && !(hasRangeSlider && ax.side === 'bottom')) {
      seq.push(function () {
        return drawTitle(gd, ax);
      });
    }

    return lib_1.syncOrAsync(seq);
  };

  function getBoundaryVals(ax, vals) {
    var out = [];
    var i; // boundaryVals are never used for labels;
    // no need to worry about the other tickTextObj keys

    var _push = function (d, bndIndex) {
      var xb = d.xbnd[bndIndex];

      if (xb !== null) {
        out.push(lib_1.extendFlat({}, d, {
          x: xb
        }));
      }
    };

    if (vals.length) {
      for (i = 0; i < vals.length; i++) {
        _push(vals[i], 0);
      }

      _push(vals[i - 1], 1);
    }

    return out;
  }

  function getSecondaryLabelVals(ax, vals) {
    var out = [];
    var lookup = {};

    for (var i = 0; i < vals.length; i++) {
      var d = vals[i];

      if (lookup[d.text2]) {
        lookup[d.text2].push(d.x);
      } else {
        lookup[d.text2] = [d.x];
      }
    }

    for (var k in lookup) {
      out.push(tickTextObj(ax, lib_1.interp(lookup[k], 0.5), k));
    }

    return out;
  }

  function getDividerVals(ax, vals) {
    var out = [];
    var i, current;
    var reversed = vals.length && vals[vals.length - 1].x < vals[0].x; // never used for labels;
    // no need to worry about the other tickTextObj keys

    var _push = function (d, bndIndex) {
      var xb = d.xbnd[bndIndex];

      if (xb !== null) {
        out.push(lib_1.extendFlat({}, d, {
          x: xb
        }));
      }
    };

    if (ax.showdividers && vals.length) {
      for (i = 0; i < vals.length; i++) {
        var d = vals[i];

        if (d.text2 !== current) {
          _push(d, reversed ? 1 : 0);
        }

        current = d.text2;
      }

      _push(vals[i - 1], reversed ? 0 : 1);
    }

    return out;
  }

  function calcLabelLevelBbox(ax, cls) {
    var top, bottom;
    var left, right;

    if (ax._selections[cls].size()) {
      top = Infinity;
      bottom = -Infinity;
      left = Infinity;
      right = -Infinity;

      ax._selections[cls].each(function () {
        var thisLabel = selectTickLabel(this); // Use parent node <g.(x|y)tick>, to make Drawing.bBox
        // retrieve a bbox computed with transform info
        //
        // To improve perf, it would be nice to use `thisLabel.node()`
        // (like in fixLabelOverlaps) instead and use Axes.getPxPosition
        // together with the makeLabelFns outputs and `tickangle`
        // to compute one bbox per (tick value x tick style)

        var bb = drawing_1.bBox(thisLabel.node().parentNode);
        top = Math.min(top, bb.top);
        bottom = Math.max(bottom, bb.bottom);
        left = Math.min(left, bb.left);
        right = Math.max(right, bb.right);
      });
    } else {
      top = 0;
      bottom = 0;
      left = 0;
      right = 0;
    }

    return {
      top: top,
      bottom: bottom,
      left: left,
      right: right,
      height: bottom - top,
      width: right - left
    };
  }
  /**
   * Which direction do the 'ax.side' values, and free ticks go?
   *
   * @param {object} ax (full) axis object
   *  - {string} _id (starting with 'x' or 'y')
   *  - {string} side
   *  - {string} ticks
   * @return {array} all entries are either -1 or 1
   *  - [0]: sign for top/right ticks (i.e. negative SVG direction)
   *  - [1]: sign for bottom/left ticks (i.e. positive SVG direction)
   *  - [2]: sign for ticks corresponding to 'ax.side'
   *  - [3]: sign for ticks mirroring 'ax.side'
   *  - [4]: sign of arrow starting at axis pointing towards margin
   */


  axes.getTickSigns = function (ax) {
    var axLetter = ax._id.charAt(0);

    var sideOpposite = {
      x: 'top',
      y: 'right'
    }[axLetter];
    var main = ax.side === sideOpposite ? 1 : -1;
    var out = [-1, 1, main, -main]; // then we flip if outside XOR y axis

    if (ax.ticks !== 'inside' === (axLetter === 'x')) {
      out = out.map(function (v) {
        return -v;
      });
    } // independent of `ticks`; do not flip this one


    if (ax.side) {
      out.push({
        l: -1,
        t: -1,
        r: 1,
        b: 1
      }[ax.side.charAt(0)]);
    }

    return out;
  };
  /**
   * Make axis translate transform function
   *
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {number} _offset
   *  - {fn} l2p
   * @return {fn} function of calcTicks items
   */


  axes.makeTransTickFn = function (ax) {
    return ax._id.charAt(0) === 'x' ? function (d) {
      return strTranslate(ax._offset + ax.l2p(d.x), 0);
    } : function (d) {
      return strTranslate(0, ax._offset + ax.l2p(d.x));
    };
  };

  axes.makeTransTickLabelFn = function (ax) {
    var uv = getTickLabelUV(ax);
    var u = uv[0];
    var v = uv[1];
    return ax._id.charAt(0) === 'x' ? function (d) {
      return strTranslate(u + ax._offset + ax.l2p(getPosX(d)), v);
    } : function (d) {
      return strTranslate(v, u + ax._offset + ax.l2p(getPosX(d)));
    };
  };

  function getPosX(d) {
    return d.periodX !== undefined ? d.periodX : d.x;
  } // u is a shift along the axis,
  // v is a shift perpendicular to the axis


  function getTickLabelUV(ax) {
    var ticklabelposition = ax.ticklabelposition || '';

    var has = function (str) {
      return ticklabelposition.indexOf(str) !== -1;
    };

    var isTop = has('top');
    var isLeft = has('left');
    var isRight = has('right');
    var isBottom = has('bottom');
    var isInside = has('inside');
    var isAligned = isBottom || isLeft || isTop || isRight; // early return

    if (!isAligned && !isInside) return [0, 0];
    var side = ax.side;
    var u = isAligned ? (ax.tickwidth || 0) / 2 : 0;
    var v = TEXTPAD;
    var fontSize = ax.tickfont ? ax.tickfont.size : 12;

    if (isBottom || isTop) {
      u += fontSize * CAP_SHIFT;
      v += (ax.linewidth || 0) / 2;
    }

    if (isLeft || isRight) {
      u += (ax.linewidth || 0) / 2;
      v += TEXTPAD;
    }

    if (isInside && side === 'top') {
      v -= fontSize * (1 - CAP_SHIFT);
    }

    if (isLeft || isTop) u = -u;
    if (side === 'bottom' || side === 'right') v = -v;
    return [isAligned ? u : 0, isInside ? v : 0];
  }
  /**
   * Make axis tick path string
   *
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {number} ticklen
   *  - {number} linewidth
   * @param {number} shift along direction of ticklen
   * @param {1 or -1} sgn tick sign
   * @param {number (optional)} len tick length
   * @return {string}
   */


  axes.makeTickPath = function (ax, shift, sgn, len) {
    len = len !== undefined ? len : ax.ticklen;

    var axLetter = ax._id.charAt(0);

    var pad = (ax.linewidth || 1) / 2;
    return axLetter === 'x' ? 'M0,' + (shift + pad * sgn) + 'v' + len * sgn : 'M' + (shift + pad * sgn) + ',0h' + len * sgn;
  };
  /**
   * Make axis tick label x, y and anchor functions
   *
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {string} ticks
   *  - {number} ticklen
   *  - {string} side
   *  - {number} linewidth
   *  - {number} tickfont.size
   *  - {boolean} showline
   * @param {number} shift
   * @param {number} angle [in degrees] ...
   * @return {object}
   *  - {fn} xFn
   *  - {fn} yFn
   *  - {fn} anchorFn
   *  - {fn} heightFn
   *  - {number} labelStandoff (gap parallel to ticks)
   *  - {number} labelShift (gap perpendicular to ticks)
   */


  axes.makeLabelFns = function (ax, shift, angle) {
    var ticklabelposition = ax.ticklabelposition || '';

    var has = function (str) {
      return ticklabelposition.indexOf(str) !== -1;
    };

    var isTop = has('top');
    var isLeft = has('left');
    var isRight = has('right');
    var isBottom = has('bottom');
    var isAligned = isBottom || isLeft || isTop || isRight;
    var insideTickLabels = has('inside');
    var labelsOverTicks = ticklabelposition === 'inside' && ax.ticks === 'inside' || !insideTickLabels && ax.ticks === 'outside' && ax.tickson !== 'boundaries';
    var labelStandoff = 0;
    var labelShift = 0;
    var tickLen = labelsOverTicks ? ax.ticklen : 0;

    if (insideTickLabels) {
      tickLen *= -1;
    } else if (isAligned) {
      tickLen = 0;
    }

    if (labelsOverTicks) {
      labelStandoff += tickLen;

      if (angle) {
        var rad = lib_1.deg2rad(angle);
        labelStandoff = tickLen * Math.cos(rad) + 1;
        labelShift = tickLen * Math.sin(rad);
      }
    }

    if (ax.showticklabels && (labelsOverTicks || ax.showline)) {
      labelStandoff += 0.2 * ax.tickfont.size;
    }

    labelStandoff += (ax.linewidth || 1) / 2 * (insideTickLabels ? -1 : 1);
    var out = {
      labelStandoff: labelStandoff,
      labelShift: labelShift
    };
    var x0, y0, ff, flipIt;
    var xQ = 0;
    var side = ax.side;

    var axLetter = ax._id.charAt(0);

    var tickangle = ax.tickangle;
    var endSide;

    if (axLetter === 'x') {
      endSide = !insideTickLabels && side === 'bottom' || insideTickLabels && side === 'top';
      flipIt = endSide ? 1 : -1;
      if (insideTickLabels) flipIt *= -1;
      x0 = labelShift * flipIt;
      y0 = shift + labelStandoff * flipIt;
      ff = endSide ? 1 : -0.2;

      if (Math.abs(tickangle) === 90) {
        if (insideTickLabels) {
          ff += MID_SHIFT;
        } else {
          if (tickangle === -90 && side === 'bottom') {
            ff = CAP_SHIFT;
          } else if (tickangle === 90 && side === 'top') {
            ff = MID_SHIFT;
          } else {
            ff = 0.5;
          }
        }

        xQ = MID_SHIFT / 2 * (tickangle / 90);
      }

      out.xFn = function (d) {
        return d.dx + x0 + xQ * d.fontSize;
      };

      out.yFn = function (d) {
        return d.dy + y0 + d.fontSize * ff;
      };

      out.anchorFn = function (d, a) {
        if (isAligned) {
          if (isLeft) return 'end';
          if (isRight) return 'start';
        }

        if (!fastIsnumeric(a) || a === 0 || a === 180) {
          return 'middle';
        }

        return a * flipIt < 0 !== insideTickLabels ? 'end' : 'start';
      };

      out.heightFn = function (d, a, h) {
        return a < -60 || a > 60 ? -0.5 * h : ax.side === 'top' !== insideTickLabels ? -h : 0;
      };
    } else if (axLetter === 'y') {
      endSide = !insideTickLabels && side === 'left' || insideTickLabels && side === 'right';
      flipIt = endSide ? 1 : -1;
      if (insideTickLabels) flipIt *= -1;
      x0 = labelStandoff;
      y0 = labelShift * flipIt;
      ff = 0;

      if (!insideTickLabels && Math.abs(tickangle) === 90) {
        if (tickangle === -90 && side === 'left' || tickangle === 90 && side === 'right') {
          ff = CAP_SHIFT;
        } else {
          ff = 0.5;
        }
      }

      if (insideTickLabels) {
        var ang = fastIsnumeric(tickangle) ? +tickangle : 0;

        if (ang !== 0) {
          var rA = lib_1.deg2rad(ang);
          xQ = Math.abs(Math.sin(rA)) * CAP_SHIFT * flipIt;
          ff = 0;
        }
      }

      out.xFn = function (d) {
        return d.dx + shift - (x0 + d.fontSize * ff) * flipIt + xQ * d.fontSize;
      };

      out.yFn = function (d) {
        return d.dy + y0 + d.fontSize * MID_SHIFT;
      };

      out.anchorFn = function (d, a) {
        if (fastIsnumeric(a) && Math.abs(a) === 90) {
          return 'middle';
        }

        return endSide ? 'end' : 'start';
      };

      out.heightFn = function (d, a, h) {
        if (ax.side === 'right') a *= -1;
        return a < -30 ? -h : a < 30 ? -0.5 * h : 0;
      };
    }

    return out;
  };

  function tickDataFn(d) {
    return [d.text, d.x, d.axInfo, d.font, d.fontSize, d.fontColor].join('_');
  }
  /**
   * Draw axis ticks
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {string} ticks
   *  - {number} linewidth
   *  - {string} tickcolor
   * @param {object} opts
   * - {array of object} vals (calcTicks output-like)
   * - {d3 selection} layer
   * - {string or fn} path
   * - {fn} transFn
   * - {boolean} crisp (set to false to unset crisp-edge SVG rendering)
   */


  axes.drawTicks = function (gd, ax, opts) {
    opts = opts || {};
    var cls = ax._id + 'tick';
    var vals = opts.vals;

    if (ax.ticklabelmode === 'period') {
      // drop very first tick that we added to handle period
      vals = vals.slice();
      vals.shift();
    }

    var ticks = opts.layer.selectAll('path.' + cls).data(ax.ticks ? vals : [], tickDataFn);
    ticks.exit().remove();
    ticks.enter().append('path').classed(cls, 1).classed('ticks', 1).classed('crisp', opts.crisp !== false).call(color_1.stroke, ax.tickcolor).style('stroke-width', drawing_1.crispRound(gd, ax.tickwidth, 1) + 'px').attr('d', opts.path).style('display', null); // visible

    hideCounterAxisInsideTickLabels(ax, [TICK_PATH]);
    ticks.attr('transform', opts.transFn);
  };
  /**
   * Draw axis grid
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {boolean} showgrid
   *  - {string} gridcolor
   *  - {string} gridwidth
   *  - {boolean} zeroline
   *  - {string} type
   *  - {string} dtick
   * @param {object} opts
   * - {array of object} vals (calcTicks output-like)
   * - {d3 selection} layer
   * - {object} counterAxis (full axis object corresponding to counter axis)
   *     optional - only required if this axis supports zero lines
   * - {string or fn} path
   * - {fn} transFn
   * - {boolean} crisp (set to false to unset crisp-edge SVG rendering)
   */


  axes.drawGrid = function (gd, ax, opts) {
    opts = opts || {};
    var cls = ax._id + 'grid';
    var vals = opts.vals;
    var counterAx = opts.counterAxis;

    if (ax.showgrid === false) {
      vals = [];
    } else if (counterAx && axes.shouldShowZeroLine(gd, ax, counterAx)) {
      var isArrayMode = ax.tickmode === 'array';

      for (var i = 0; i < vals.length; i++) {
        var xi = vals[i].x;

        if (isArrayMode ? !xi : Math.abs(xi) < ax.dtick / 100) {
          vals = vals.slice(0, i).concat(vals.slice(i + 1)); // In array mode you can in principle have multiple
          // ticks at 0, so test them all. Otherwise once we found
          // one we can stop.

          if (isArrayMode) i--;else break;
        }
      }
    }

    var grid = opts.layer.selectAll('path.' + cls).data(vals, tickDataFn);
    grid.exit().remove();
    grid.enter().append('path').classed(cls, 1).classed('crisp', opts.crisp !== false);
    ax._gw = drawing_1.crispRound(gd, ax.gridwidth, 1);
    grid.attr('transform', opts.transFn).attr('d', opts.path).call(color_1.stroke, ax.gridcolor || '#ddd').style('stroke-width', ax._gw + 'px').style('display', null); // visible

    hideCounterAxisInsideTickLabels(ax, [GRID_PATH]);
    if (typeof opts.path === 'function') grid.attr('d', opts.path);
  };
  /**
   * Draw axis zero-line
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {boolean} zeroline
   *  - {number} zerolinewidth
   *  - {string} zerolinecolor
   *  - {number (optional)} _gridWidthCrispRound
   * @param {object} opts
   * - {d3 selection} layer
   * - {object} counterAxis (full axis object corresponding to counter axis)
   * - {string or fn} path
   * - {fn} transFn
   * - {boolean} crisp (set to false to unset crisp-edge SVG rendering)
   */


  axes.drawZeroLine = function (gd, ax, opts) {
    opts = opts || opts;
    var cls = ax._id + 'zl';
    var show = axes.shouldShowZeroLine(gd, ax, opts.counterAxis);
    var zl = opts.layer.selectAll('path.' + cls).data(show ? [{
      x: 0,
      id: ax._id
    }] : []);
    zl.exit().remove();
    zl.enter().append('path').classed(cls, 1).classed('zl', 1).classed('crisp', opts.crisp !== false).each(function () {
      // use the fact that only one element can enter to trigger a sort.
      // If several zerolines enter at the same time we will sort once per,
      // but generally this should be a minimal overhead.
      opts.layer.selectAll('path').sort(function (da, db) {
        return idSort(da.id, db.id);
      });
    });
    zl.attr('transform', opts.transFn).attr('d', opts.path).call(color_1.stroke, ax.zerolinecolor || color_1.defaultLine).style('stroke-width', drawing_1.crispRound(gd, ax.zerolinewidth, ax._gw || 1) + 'px').style('display', null); // visible

    hideCounterAxisInsideTickLabels(ax, [ZERO_PATH]);
  };
  /**
   * Draw axis tick labels
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {boolean} showticklabels
   *  - {number} tickangle
   *  - {object (optional)} _selections
   *  - {object} (optional)} _tickAngles
   *  - {object} (optional)} _prevTickAngles
   * @param {object} opts
   * - {array of object} vals (calcTicks output-like)
   * - {d3 selection} layer
   * - {string (optional)} cls (node className)
   * - {boolean} repositionOnUpdate (set to true to reposition update selection)
   * - {boolean} secondary
   * - {fn} transFn
   * - {object} labelFns
   *  + {fn} xFn
   *  + {fn} yFn
   *  + {fn} anchorFn
   *  + {fn} heightFn
   */


  axes.drawLabels = function (gd, ax, opts) {
    opts = opts || {};
    var fullLayout = gd._fullLayout;
    var axId = ax._id;
    var axLetter = axId.charAt(0);
    var cls = opts.cls || axId + 'tick';
    var vals = opts.vals;
    var labelFns = opts.labelFns;
    var tickAngle = opts.secondary ? 0 : ax.tickangle;
    var prevAngle = (ax._prevTickAngles || {})[cls];
    var tickLabels = opts.layer.selectAll('g.' + cls).data(ax.showticklabels ? vals : [], tickDataFn);
    var labelsReady = [];
    tickLabels.enter().append('g').classed(cls, 1).append('text') // only so tex has predictable alignment that we can
    // alter later
    .attr('text-anchor', 'middle').each(function (d) {
      var thisLabel = d3.select(this);
      var newPromise = gd._promises.length;
      thisLabel.call(svg_text_utils.positionText, labelFns.xFn(d), labelFns.yFn(d)).call(drawing_1.font, d.font, d.fontSize, d.fontColor).text(d.text).call(svg_text_utils.convertToTspans, gd);

      if (gd._promises[newPromise]) {
        // if we have an async label, we'll deal with that
        // all here so take it out of gd._promises and
        // instead position the label and promise this in
        // labelsReady
        labelsReady.push(gd._promises.pop().then(function () {
          positionLabels(thisLabel, tickAngle);
        }));
      } else {
        // sync label: just position it now.
        positionLabels(thisLabel, tickAngle);
      }
    });
    hideCounterAxisInsideTickLabels(ax, [TICK_TEXT]);
    tickLabels.exit().remove();

    if (opts.repositionOnUpdate) {
      tickLabels.each(function (d) {
        d3.select(this).select('text').call(svg_text_utils.positionText, labelFns.xFn(d), labelFns.yFn(d));
      });
    }

    function positionLabels(s, angle) {
      s.each(function (d) {
        var thisLabel = d3.select(this);
        var mathjaxGroup = thisLabel.select('.text-math-group');
        var anchor = labelFns.anchorFn(d, angle);
        var transform = opts.transFn.call(thisLabel.node(), d) + (fastIsnumeric(angle) && +angle !== 0 ? ' rotate(' + angle + ',' + labelFns.xFn(d) + ',' + (labelFns.yFn(d) - d.fontSize / 2) + ')' : ''); // how much to shift a multi-line label to center it vertically.

        var nLines = svg_text_utils.lineCount(thisLabel);
        var lineHeight = LINE_SPACING * d.fontSize;
        var anchorHeight = labelFns.heightFn(d, fastIsnumeric(angle) ? +angle : 0, (nLines - 1) * lineHeight);

        if (anchorHeight) {
          transform += strTranslate(0, anchorHeight);
        }

        if (mathjaxGroup.empty()) {
          var thisText = thisLabel.select('text');
          thisText.attr({
            transform: transform,
            'text-anchor': anchor
          });
          thisText.style('opacity', 1); // visible

          if (ax._adjustTickLabelsOverflow) {
            ax._adjustTickLabelsOverflow();
          }
        } else {
          var mjWidth = drawing_1.bBox(mathjaxGroup.node()).width;
          var mjShift = mjWidth * {
            end: -0.5,
            start: 0.5
          }[anchor];
          mathjaxGroup.attr('transform', transform + strTranslate(mjShift, 0));
        }
      });
    }

    ax._adjustTickLabelsOverflow = function () {
      var ticklabeloverflow = ax.ticklabeloverflow;
      if (!ticklabeloverflow || ticklabeloverflow === 'allow') return;
      var hideOverflow = ticklabeloverflow.indexOf('hide') !== -1;
      var isX = ax._id.charAt(0) === 'x'; // div positions

      var p0 = 0;
      var p1 = isX ? gd._fullLayout.width : gd._fullLayout.height;

      if (ticklabeloverflow.indexOf('domain') !== -1) {
        // domain positions
        var rl = lib_1.simpleMap(ax.range, ax.r2l);
        p0 = ax.l2p(rl[0]) + ax._offset;
        p1 = ax.l2p(rl[1]) + ax._offset;
      }

      var min = Math.min(p0, p1);
      var max = Math.max(p0, p1);
      var side = ax.side;
      var visibleLabelMin = Infinity;
      var visibleLabelMax = -Infinity;
      tickLabels.each(function (d) {
        var thisLabel = d3.select(this);
        var mathjaxGroup = thisLabel.select('.text-math-group');

        if (mathjaxGroup.empty()) {
          var bb = drawing_1.bBox(thisLabel.node());
          var adjust = 0;

          if (isX) {
            if (bb.right > max) adjust = 1;else if (bb.left < min) adjust = 1;
          } else {
            if (bb.bottom > max) adjust = 1;else if (bb.top + (ax.tickangle ? 0 : d.fontSize / 4) < min) adjust = 1;
          }

          var t = thisLabel.select('text');

          if (adjust) {
            if (hideOverflow) t.style('opacity', 0); // hidden
          } else {
            t.style('opacity', 1); // visible

            if (side === 'bottom' || side === 'right') {
              visibleLabelMin = Math.min(visibleLabelMin, isX ? bb.top : bb.left);
            } else {
              visibleLabelMin = -Infinity;
            }

            if (side === 'top' || side === 'left') {
              visibleLabelMax = Math.max(visibleLabelMax, isX ? bb.bottom : bb.right);
            } else {
              visibleLabelMax = Infinity;
            }
          }
        } // TODO: hide mathjax?

      });

      for (var subplot in fullLayout._plots) {
        var plotinfo = fullLayout._plots[subplot];
        if (ax._id !== plotinfo.xaxis._id && ax._id !== plotinfo.yaxis._id) continue;
        var anchorAx = isX ? plotinfo.yaxis : plotinfo.xaxis;

        if (anchorAx) {
          anchorAx['_visibleLabelMin_' + ax._id] = visibleLabelMin;
          anchorAx['_visibleLabelMax_' + ax._id] = visibleLabelMax;
        }
      }
    };

    ax._hideCounterAxisInsideTickLabels = function (partialOpts) {
      var isX = ax._id.charAt(0) === 'x';
      var anchoredAxes = [];

      for (var subplot in fullLayout._plots) {
        var plotinfo = fullLayout._plots[subplot];
        if (ax._id !== plotinfo.xaxis._id && ax._id !== plotinfo.yaxis._id) continue;
        anchoredAxes.push(isX ? plotinfo.yaxis : plotinfo.xaxis);
      }

      anchoredAxes.forEach(function (anchorAx, idx) {
        if (anchorAx && insideTicklabelposition(anchorAx)) {
          (partialOpts || [ZERO_PATH, GRID_PATH, TICK_PATH, TICK_TEXT]).forEach(function (e) {
            var isPeriodLabel = e.K === 'tick' && e.L === 'text' && ax.ticklabelmode === 'period';
            var mainPlotinfo = fullLayout._plots[ax._mainSubplot];
            var sel;
            if (e.K === ZERO_PATH.K) sel = mainPlotinfo.zerolinelayer.selectAll('.' + ax._id + 'zl');else if (e.K === GRID_PATH.K) sel = mainPlotinfo.gridlayer.selectAll('.' + ax._id);else sel = mainPlotinfo[ax._id.charAt(0) + 'axislayer'];
            sel.each(function () {
              var w = d3.select(this);
              if (e.L) w = w.selectAll(e.L);
              w.each(function (d) {
                var q = ax.l2p(isPeriodLabel ? getPosX(d) : d.x) + ax._offset;

                var t = d3.select(this);

                if (q < ax['_visibleLabelMax_' + anchorAx._id] && q > ax['_visibleLabelMin_' + anchorAx._id]) {
                  t.style('display', 'none'); // hidden
                } else if (e.K === 'tick' && !idx) {
                  t.style('display', null); // visible
                }
              });
            });
          });
        }
      });
    }; // make sure all labels are correctly positioned at their base angle
    // the positionLabels call above is only for newly drawn labels.
    // do this without waiting, using the last calculated angle to
    // minimize flicker, then do it again when we know all labels are
    // there, putting back the prescribed angle to check for overlaps.


    positionLabels(tickLabels, prevAngle + 1 ? prevAngle : tickAngle);

    function allLabelsReady() {
      return labelsReady.length && Promise.all(labelsReady);
    }

    var autoangle = null;

    function fixLabelOverlaps() {
      positionLabels(tickLabels, tickAngle); // check for auto-angling if x labels overlap
      // don't auto-angle at all for log axes with
      // base and digit format

      if (vals.length && axLetter === 'x' && !fastIsnumeric(tickAngle) && (ax.type !== 'log' || String(ax.dtick).charAt(0) !== 'D')) {
        autoangle = 0;
        var maxFontSize = 0;
        var lbbArray = [];
        var i;
        tickLabels.each(function (d) {
          maxFontSize = Math.max(maxFontSize, d.fontSize);
          var x = ax.l2p(d.x);
          var thisLabel = selectTickLabel(this);
          var bb = drawing_1.bBox(thisLabel.node());
          lbbArray.push({
            // ignore about y, just deal with x overlaps
            top: 0,
            bottom: 10,
            height: 10,
            left: x - bb.width / 2,
            // impose a 2px gap
            right: x + bb.width / 2 + 2,
            width: bb.width + 2
          });
        });

        if ((ax.tickson === 'boundaries' || ax.showdividers) && !opts.secondary) {
          var gap = 2;
          if (ax.ticks) gap += ax.tickwidth / 2; // TODO should secondary labels also fall into this fix-overlap regime?

          for (i = 0; i < lbbArray.length; i++) {
            var xbnd = vals[i].xbnd;
            var lbb = lbbArray[i];

            if (xbnd[0] !== null && lbb.left - ax.l2p(xbnd[0]) < gap || xbnd[1] !== null && ax.l2p(xbnd[1]) - lbb.right < gap) {
              autoangle = 90;
              break;
            }
          }
        } else {
          var vLen = vals.length;
          var tickSpacing = Math.abs((vals[vLen - 1].x - vals[0].x) * ax._m) / (vLen - 1);
          var ticklabelposition = ax.ticklabelposition || '';

          var has = function (str) {
            return ticklabelposition.indexOf(str) !== -1;
          };

          var isTop = has('top');
          var isLeft = has('left');
          var isRight = has('right');
          var isBottom = has('bottom');
          var isAligned = isBottom || isLeft || isTop || isRight;
          var pad = !isAligned ? 0 : (ax.tickwidth || 0) + 2 * TEXTPAD;
          var rotate90 = tickSpacing < maxFontSize * 2.5 || ax.type === 'multicategory' || ax._name === 'realaxis'; // any overlap at all - set 30 degrees or 90 degrees

          for (i = 0; i < lbbArray.length - 1; i++) {
            if (lib_1.bBoxIntersect(lbbArray[i], lbbArray[i + 1], pad)) {
              autoangle = rotate90 ? 90 : 30;
              break;
            }
          }
        }

        if (autoangle) {
          positionLabels(tickLabels, autoangle);
        }
      }
    }

    if (ax._selections) {
      ax._selections[cls] = tickLabels;
    }

    var seq = [allLabelsReady]; // N.B. during auto-margin redraws, if the axis fixed its label overlaps
    // by rotating 90 degrees, do not attempt to re-fix its label overlaps
    // as this can lead to infinite redraw loops!

    if (ax.automargin && fullLayout._redrawFromAutoMarginCount && prevAngle === 90) {
      autoangle = 90;
      seq.push(function () {
        positionLabels(tickLabels, prevAngle);
      });
    } else {
      seq.push(fixLabelOverlaps);
    } // save current tick angle for future redraws


    if (ax._tickAngles) {
      seq.push(function () {
        ax._tickAngles[cls] = autoangle === null ? fastIsnumeric(tickAngle) ? tickAngle : 0 : autoangle;
      });
    }

    var anchorAx = ax._anchorAxis;

    if (anchorAx && anchorAx.autorange && insideTicklabelposition(ax) && !isLinked(fullLayout, ax._id)) {
      if (!fullLayout._insideTickLabelsAutorange) {
        fullLayout._insideTickLabelsAutorange = {};
      }

      fullLayout._insideTickLabelsAutorange[anchorAx._name + '.autorange'] = anchorAx.autorange;
      seq.push(function computeFinalTickLabelBoundingBoxes() {
        tickLabels.each(function (d, i) {
          var thisLabel = selectTickLabel(this);
          var mathjaxGroup = thisLabel.select('.text-math-group');

          if (mathjaxGroup.empty()) {
            ax._vals[i].bb = drawing_1.bBox(thisLabel.node());
          }
        });
      });
    }

    var done = lib_1.syncOrAsync(seq);
    if (done && done.then) gd._promises.push(done);
    return done;
  };
  /**
   * Draw axis dividers
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {string} showdividers
   *  - {number} dividerwidth
   *  - {string} dividercolor
   * @param {object} opts
   * - {array of object} vals (calcTicks output-like)
   * - {d3 selection} layer
   * - {fn} path
   * - {fn} transFn
   */


  function drawDividers(gd, ax, opts) {
    var cls = ax._id + 'divider';
    var vals = opts.vals;
    var dividers = opts.layer.selectAll('path.' + cls).data(vals, tickDataFn);
    dividers.exit().remove();
    dividers.enter().insert('path', ':first-child').classed(cls, 1).classed('crisp', 1).call(color_1.stroke, ax.dividercolor).style('stroke-width', drawing_1.crispRound(gd, ax.dividerwidth, 1) + 'px');
    dividers.attr('transform', opts.transFn).attr('d', opts.path);
  }
  /**
   * Get axis position in px, that is the distance for the graph's
   * top (left) edge for x (y) axes.
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {string} side
   *  if anchored:
   *  - {object} _anchorAxis
   *  Otherwise:
   *  - {number} position
   * @return {number}
   */


  axes.getPxPosition = function (gd, ax) {
    var gs = gd._fullLayout._size;

    var axLetter = ax._id.charAt(0);

    var side = ax.side;
    var anchorAxis;

    if (ax.anchor !== 'free') {
      anchorAxis = ax._anchorAxis;
    } else if (axLetter === 'x') {
      anchorAxis = {
        _offset: gs.t + (1 - (ax.position || 0)) * gs.h,
        _length: 0
      };
    } else if (axLetter === 'y') {
      anchorAxis = {
        _offset: gs.l + (ax.position || 0) * gs.w,
        _length: 0
      };
    }

    if (side === 'top' || side === 'left') {
      return anchorAxis._offset;
    } else if (side === 'bottom' || side === 'right') {
      return anchorAxis._offset + anchorAxis._length;
    }
  };
  /**
   * Approximate axis title depth (w/o computing its bounding box)
   *
   * @param {object} ax (full) axis object
   *  - {string} title.text
   *  - {number} title.font.size
   *  - {number} title.standoff
   * @return {number} (in px)
   */


  function approxTitleDepth(ax) {
    var fontSize = ax.title.font.size;
    var extraLines = (ax.title.text.match(svg_text_utils.BR_TAG_ALL) || []).length;

    if (ax.title.hasOwnProperty('standoff')) {
      return extraLines ? fontSize * (CAP_SHIFT + extraLines * LINE_SPACING) : fontSize * CAP_SHIFT;
    } else {
      return extraLines ? fontSize * (extraLines + 1) * LINE_SPACING : fontSize;
    }
  }
  /**
   * Draw axis title, compute default standoff if necessary
   *
   * @param {DOM element} gd
   * @param {object} ax (full) axis object
   *  - {string} _id
   *  - {string} _name
   *  - {string} side
   *  - {number} title.font.size
   *  - {object} _selections
   *
   *  - {number} _depth
   *  - {number} title.standoff
   *  OR
   *  - {number} linewidth
   *  - {boolean} showticklabels
   */


  function drawTitle(gd, ax) {
    var fullLayout = gd._fullLayout;
    var axId = ax._id;
    var axLetter = axId.charAt(0);
    var fontSize = ax.title.font.size;
    var titleStandoff;

    if (ax.title.hasOwnProperty('standoff')) {
      titleStandoff = ax._depth + ax.title.standoff + approxTitleDepth(ax);
    } else {
      var isInside = insideTicklabelposition(ax);

      if (ax.type === 'multicategory') {
        titleStandoff = ax._depth;
      } else {
        var offsetBase = 1.5 * fontSize;

        if (isInside) {
          offsetBase = 0.5 * fontSize;

          if (ax.ticks === 'outside') {
            offsetBase += ax.ticklen;
          }
        }

        titleStandoff = 10 + offsetBase + (ax.linewidth ? ax.linewidth - 1 : 0);
      }

      if (!isInside) {
        if (axLetter === 'x') {
          titleStandoff += ax.side === 'top' ? fontSize * (ax.showticklabels ? 1 : 0) : fontSize * (ax.showticklabels ? 1.5 : 0.5);
        } else {
          titleStandoff += ax.side === 'right' ? fontSize * (ax.showticklabels ? 1 : 0.5) : fontSize * (ax.showticklabels ? 0.5 : 0);
        }
      }
    }

    var pos = axes.getPxPosition(gd, ax);
    var transform, x, y;

    if (axLetter === 'x') {
      x = ax._offset + ax._length / 2;
      y = ax.side === 'top' ? pos - titleStandoff : pos + titleStandoff;
    } else {
      y = ax._offset + ax._length / 2;
      x = ax.side === 'right' ? pos + titleStandoff : pos - titleStandoff;
      transform = {
        rotate: '-90',
        offset: 0
      };
    }

    var avoid;

    if (ax.type !== 'multicategory') {
      var tickLabels = ax._selections[ax._id + 'tick'];
      avoid = {
        selection: tickLabels,
        side: ax.side
      };

      if (tickLabels && tickLabels.node() && tickLabels.node().parentNode) {
        var translation = drawing_1.getTranslate(tickLabels.node().parentNode);
        avoid.offsetLeft = translation.x;
        avoid.offsetTop = translation.y;
      }

      if (ax.title.hasOwnProperty('standoff')) {
        avoid.pad = 0;
      }
    }

    return titles.draw(gd, axId + 'title', {
      propContainer: ax,
      propName: ax._name + '.title.text',
      placeholder: fullLayout._dfltTitle[axLetter],
      avoid: avoid,
      transform: transform,
      attributes: {
        x: x,
        y: y,
        'text-anchor': 'middle'
      }
    });
  }

  axes.shouldShowZeroLine = function (gd, ax, counterAxis) {
    var rng = lib_1.simpleMap(ax.range, ax.r2l);
    return rng[0] * rng[1] <= 0 && ax.zeroline && (ax.type === 'linear' || ax.type === '-') && !(ax.rangebreaks && ax.maskBreaks(0) === BADNUM) && (clipEnds(ax, 0) || !anyCounterAxLineAtZero(gd, ax, counterAxis, rng) || hasBarsOrFill(gd, ax));
  };

  axes.clipEnds = function (ax, vals) {
    return vals.filter(function (d) {
      return clipEnds(ax, d.x);
    });
  };

  function clipEnds(ax, l) {
    var p = ax.l2p(l);
    return p > 1 && p < ax._length - 1;
  }

  function anyCounterAxLineAtZero(gd, ax, counterAxis, rng) {
    var mainCounterAxis = counterAxis._mainAxis;
    if (!mainCounterAxis) return;
    var fullLayout = gd._fullLayout;

    var axLetter = ax._id.charAt(0);

    var counterLetter = axes.counterLetter(ax._id);
    var zeroPosition = ax._offset + (Math.abs(rng[0]) < Math.abs(rng[1]) === (axLetter === 'x') ? 0 : ax._length);

    function lineNearZero(ax2) {
      if (!ax2.showline || !ax2.linewidth) return false;
      var tolerance = Math.max((ax2.linewidth + ax.zerolinewidth) / 2, 1);

      function closeEnough(pos2) {
        return typeof pos2 === 'number' && Math.abs(pos2 - zeroPosition) < tolerance;
      }

      if (closeEnough(ax2._mainLinePosition) || closeEnough(ax2._mainMirrorPosition)) {
        return true;
      }

      var linePositions = ax2._linepositions || {};

      for (var k in linePositions) {
        if (closeEnough(linePositions[k][0]) || closeEnough(linePositions[k][1])) {
          return true;
        }
      }
    }

    var plotinfo = fullLayout._plots[counterAxis._mainSubplot];

    if (!(plotinfo.mainplotinfo || plotinfo).overlays.length) {
      return lineNearZero(counterAxis);
    }

    var counterLetterAxes = axes.list(gd, counterLetter);

    for (var i = 0; i < counterLetterAxes.length; i++) {
      var counterAxis2 = counterLetterAxes[i];

      if (counterAxis2._mainAxis === mainCounterAxis && lineNearZero(counterAxis2)) {
        return true;
      }
    }
  }

  function hasBarsOrFill(gd, ax) {
    var fullData = gd._fullData;
    var subplot = ax._mainSubplot;

    var axLetter = ax._id.charAt(0);

    for (var i = 0; i < fullData.length; i++) {
      var trace = fullData[i];

      if (trace.visible === true && trace.xaxis + trace.yaxis === subplot) {
        if (registry.traceIs(trace, 'bar-like') && trace.orientation === {
          x: 'h',
          y: 'v'
        }[axLetter]) return true;
        if (trace.fill && trace.fill.charAt(trace.fill.length - 1) === axLetter) return true;
      }
    }

    return false;
  }

  function selectTickLabel(gTick) {
    var s = d3.select(gTick);
    var mj = s.select('.text-math-group');
    return mj.empty() ? s.select('text') : mj;
  }
  /**
   * Find all margin pushers for 2D axes and reserve them for later use
   * Both label and rangeslider automargin calculations happen later so
   * we need to explicitly allow their ids in order to not delete them.
   *
   * TODO: can we pull the actual automargin calls forward to avoid this hack?
   * We're probably also doing multiple redraws in this case, would be faster
   * if we can just do the whole calculation ahead of time and draw once.
   */


  axes.allowAutoMargin = function (gd) {
    var axList = axes.list(gd, '', true);

    for (var i = 0; i < axList.length; i++) {
      var ax = axList[i];

      if (ax.automargin) {
        plots_1.allowAutoMargin(gd, axAutoMarginID(ax));

        if (ax.mirror) {
          plots_1.allowAutoMargin(gd, axMirrorAutoMarginID(ax));
        }
      }

      if (registry.getComponentMethod('rangeslider', 'isVisible')(ax)) {
        plots_1.allowAutoMargin(gd, rangeSliderAutoMarginID(ax));
      }
    }
  };

  function axAutoMarginID(ax) {
    return ax._id + '.automargin';
  }

  function axMirrorAutoMarginID(ax) {
    return axAutoMarginID(ax) + '.mirror';
  }

  function rangeSliderAutoMarginID(ax) {
    return ax._id + '.rangeslider';
  } // swap all the presentation attributes of the axes showing these traces


  axes.swap = function (gd, traces) {
    var axGroups = makeAxisGroups(gd, traces);

    for (var i = 0; i < axGroups.length; i++) {
      swapAxisGroup(gd, axGroups[i].x, axGroups[i].y);
    }
  };

  function makeAxisGroups(gd, traces) {
    var groups = [];
    var i, j;

    for (i = 0; i < traces.length; i++) {
      var groupsi = [];
      var xi = gd._fullData[traces[i]].xaxis;
      var yi = gd._fullData[traces[i]].yaxis;
      if (!xi || !yi) continue; // not a 2D cartesian trace?

      for (j = 0; j < groups.length; j++) {
        if (groups[j].x.indexOf(xi) !== -1 || groups[j].y.indexOf(yi) !== -1) {
          groupsi.push(j);
        }
      }

      if (!groupsi.length) {
        groups.push({
          x: [xi],
          y: [yi]
        });
        continue;
      }

      var group0 = groups[groupsi[0]];
      var groupj;

      if (groupsi.length > 1) {
        for (j = 1; j < groupsi.length; j++) {
          groupj = groups[groupsi[j]];
          mergeAxisGroups(group0.x, groupj.x);
          mergeAxisGroups(group0.y, groupj.y);
        }
      }

      mergeAxisGroups(group0.x, [xi]);
      mergeAxisGroups(group0.y, [yi]);
    }

    return groups;
  }

  function mergeAxisGroups(intoSet, fromSet) {
    for (var i = 0; i < fromSet.length; i++) {
      if (intoSet.indexOf(fromSet[i]) === -1) intoSet.push(fromSet[i]);
    }
  }

  function swapAxisGroup(gd, xIds, yIds) {
    var xFullAxes = [];
    var yFullAxes = [];
    var layout = gd.layout;
    var i, j;

    for (i = 0; i < xIds.length; i++) xFullAxes.push(axes.getFromId(gd, xIds[i]));

    for (i = 0; i < yIds.length; i++) yFullAxes.push(axes.getFromId(gd, yIds[i]));

    var allAxKeys = Object.keys(layout_attributes$1);
    var noSwapAttrs = ['anchor', 'domain', 'overlaying', 'position', 'side', 'tickangle', 'editType'];
    var numericTypes = ['linear', 'log'];

    for (i = 0; i < allAxKeys.length; i++) {
      var keyi = allAxKeys[i];
      var xVal = xFullAxes[0][keyi];
      var yVal = yFullAxes[0][keyi];
      var allEqual = true;
      var coerceLinearX = false;
      var coerceLinearY = false;

      if (keyi.charAt(0) === '_' || typeof xVal === 'function' || noSwapAttrs.indexOf(keyi) !== -1) {
        continue;
      }

      for (j = 1; j < xFullAxes.length && allEqual; j++) {
        var xVali = xFullAxes[j][keyi];

        if (keyi === 'type' && numericTypes.indexOf(xVal) !== -1 && numericTypes.indexOf(xVali) !== -1 && xVal !== xVali) {
          // type is special - if we find a mixture of linear and log,
          // coerce them all to linear on flipping
          coerceLinearX = true;
        } else if (xVali !== xVal) allEqual = false;
      }

      for (j = 1; j < yFullAxes.length && allEqual; j++) {
        var yVali = yFullAxes[j][keyi];

        if (keyi === 'type' && numericTypes.indexOf(yVal) !== -1 && numericTypes.indexOf(yVali) !== -1 && yVal !== yVali) {
          // type is special - if we find a mixture of linear and log,
          // coerce them all to linear on flipping
          coerceLinearY = true;
        } else if (yFullAxes[j][keyi] !== yVal) allEqual = false;
      }

      if (allEqual) {
        if (coerceLinearX) layout[xFullAxes[0]._name].type = 'linear';
        if (coerceLinearY) layout[yFullAxes[0]._name].type = 'linear';
        swapAxisAttrs(layout, keyi, xFullAxes, yFullAxes, gd._fullLayout._dfltTitle);
      }
    } // now swap x&y for any annotations anchored to these x & y


    for (i = 0; i < gd._fullLayout.annotations.length; i++) {
      var ann = gd._fullLayout.annotations[i];

      if (xIds.indexOf(ann.xref) !== -1 && yIds.indexOf(ann.yref) !== -1) {
        lib_1.swapAttrs(layout.annotations[i], ['?']);
      }
    }
  }

  function swapAxisAttrs(layout, key, xFullAxes, yFullAxes, dfltTitle) {
    // in case the value is the default for either axis,
    // look at the first axis in each list and see if
    // this key's value is undefined
    var np = lib_1.nestedProperty;
    var xVal = np(layout[xFullAxes[0]._name], key).get();
    var yVal = np(layout[yFullAxes[0]._name], key).get();
    var i;

    if (key === 'title') {
      // special handling of placeholder titles
      if (xVal && xVal.text === dfltTitle.x) {
        xVal.text = dfltTitle.y;
      }

      if (yVal && yVal.text === dfltTitle.y) {
        yVal.text = dfltTitle.x;
      }
    }

    for (i = 0; i < xFullAxes.length; i++) {
      np(layout, xFullAxes[i]._name + '.' + key).set(yVal);
    }

    for (i = 0; i < yFullAxes.length; i++) {
      np(layout, yFullAxes[i]._name + '.' + key).set(xVal);
    }
  }

  function isAngular(ax) {
    return ax._id === 'angularaxis';
  }

  function moveOutsideBreak(v, ax) {
    var len = ax._rangebreaks.length;

    for (var k = 0; k < len; k++) {
      var brk = ax._rangebreaks[k];

      if (v >= brk.min && v < brk.max) {
        return brk.max;
      }
    }

    return v;
  }

  function insideTicklabelposition(ax) {
    return (ax.ticklabelposition || '').indexOf('inside') !== -1;
  }

  function hideCounterAxisInsideTickLabels(ax, opts) {
    if (insideTicklabelposition(ax._anchorAxis || {})) {
      if (ax._hideCounterAxisInsideTickLabels) {
        ax._hideCounterAxisInsideTickLabels(opts);
      }
    }
  }
});

var rootPosition = {
  left: 0,
  top: 0
};
var mouseEventOffset_1 = mouseEventOffset;

function mouseEventOffset(ev, target, out) {
  target = target || ev.currentTarget || ev.srcElement;

  if (!Array.isArray(out)) {
    out = [0, 0];
  }

  var cx = ev.clientX || 0;
  var cy = ev.clientY || 0;
  var rect = getBoundingClientOffset(target);
  out[0] = cx - rect.left;
  out[1] = cy - rect.top;
  return out;
}

function getBoundingClientOffset(element) {
  if (element === window || element === document || element === document.body) {
    return rootPosition;
  } else {
    return element.getBoundingClientRect();
  }
}

// >2/3 means right, and between is center. Pick the right fraction
// based on where you are, and return the fraction corresponding to
// that position on the object

var align = function align(v, dv, v0, v1, anchor) {
  var vmin = (v - v0) / (v1 - v0);
  var vmax = vmin + dv / (v1 - v0);
  var vc = (vmin + vmax) / 2; // explicitly specified anchor

  if (anchor === 'left' || anchor === 'bottom') return vmin;
  if (anchor === 'center' || anchor === 'middle') return vc;
  if (anchor === 'right' || anchor === 'top') return vmax; // automatic based on position

  if (vmin < 2 / 3 - vc) return vmin;
  if (vmax > 4 / 3 - vc) return vmax;
  return vc;
};

// to indicate alignment
// x and y are 0-1, fractions of the plot area


var cursorset = [['sw-resize', 's-resize', 'se-resize'], ['w-resize', 'move', 'e-resize'], ['nw-resize', 'n-resize', 'ne-resize']];

var cursor = function getCursor(x, y, xanchor, yanchor) {
  if (xanchor === 'left') x = 0;else if (xanchor === 'center') x = 1;else if (xanchor === 'right') x = 2;else x = lib_1.constrain(Math.floor(x * 3), 0, 2);
  if (yanchor === 'bottom') y = 0;else if (yanchor === 'middle') y = 1;else if (yanchor === 'top') y = 2;else y = lib_1.constrain(Math.floor(y * 3), 0, 2);
  return cursorset[y][x];
};

var unhover_1 = createCommonjsModule(function (module) {

  var getGraphDiv = dom.getGraphDiv;
  var unhover = module.exports = {};

  unhover.wrapped = function (gd, evt, subplot) {
    gd = getGraphDiv(gd); // Important, clear any queued hovers

    if (gd._fullLayout) {
      throttle.clear(gd._fullLayout._uid + constants$b.HOVERID);
    }

    unhover.raw(gd, evt, subplot);
  }; // remove hover effects on mouse out, and emit unhover event


  unhover.raw = function raw(gd, evt) {
    var fullLayout = gd._fullLayout;
    var oldhoverdata = gd._hoverdata;
    if (!evt) evt = {};

    if (evt.target && !gd._dragged && events.triggerHandler(gd, 'plotly_beforehover', evt) === false) {
      return;
    }

    fullLayout._hoverlayer.selectAll('g').remove();

    fullLayout._hoverlayer.selectAll('line').remove();

    fullLayout._hoverlayer.selectAll('circle').remove();

    gd._hoverdata = undefined;

    if (evt.target && oldhoverdata) {
      gd.emit('plotly_unhover', {
        event: evt,
        points: oldhoverdata
      });
    }
  };
});

var dragelement = createCommonjsModule(function (module) {

  var removeElement = lib_1.removeElement;
  var dragElement = module.exports = {};
  dragElement.align = align;
  dragElement.getCursor = cursor;
  dragElement.unhover = unhover_1.wrapped;
  dragElement.unhoverRaw = unhover_1.raw;
  /**
   * Abstracts click & drag interactions
   *
   * During the interaction, a "coverSlip" element - a transparent
   * div covering the whole page - is created, which has two key effects:
   * - Lets you drag beyond the boundaries of the plot itself without
   *   dropping (but if you drag all the way out of the browser window the
   *   interaction will end)
   * - Freezes the cursor: whatever mouse cursor the drag element had when the
   *   interaction started gets copied to the coverSlip for use until mouseup
   *
   * If the user executes a drag bigger than MINDRAG, callbacks will fire as:
   *      prepFn, moveFn (1 or more times), doneFn
   * If the user does not drag enough, prepFn and clickFn will fire.
   *
   * Note: If you cancel contextmenu, clickFn will fire even with a right click
   * (unlike native events) so you'll get a `plotly_click` event. Cancel context eg:
   *    gd.addEventListener('contextmenu', function(e) { e.preventDefault(); });
   * TODO: we should probably turn this into a `config` parameter, so we can fix it
   * such that if you *don't* cancel contextmenu, we can prevent partial drags, which
   * put you in a weird state.
   *
   * If the user clicks multiple times quickly, clickFn will fire each time
   * but numClicks will increase to help you recognize doubleclicks.
   *
   * @param {object} options with keys:
   *      element (required) the DOM element to drag
   *      prepFn (optional) function(event, startX, startY)
   *          executed on mousedown
   *          startX and startY are the clientX and clientY pixel position
   *          of the mousedown event
   *      moveFn (optional) function(dx, dy)
   *          executed on move, ONLY after we've exceeded MINDRAG
   *          (we keep executing moveFn if you move back to where you started)
   *          dx and dy are the net pixel offset of the drag,
   *          dragged is true/false, has the mouse moved enough to
   *          constitute a drag
   *      doneFn (optional) function(e)
   *          executed on mouseup, ONLY if we exceeded MINDRAG (so you can be
   *          sure that moveFn has been called at least once)
   *          numClicks is how many clicks we've registered within
   *          a doubleclick time
   *          e is the original mouseup event
   *      clickFn (optional) function(numClicks, e)
   *          executed on mouseup if we have NOT exceeded MINDRAG (ie moveFn
   *          has not been called at all)
   *          numClicks is how many clicks we've registered within
   *          a doubleclick time
   *          e is the original mousedown event
   *      clampFn (optional, function(dx, dy) return [dx2, dy2])
   *          Provide custom clamping function for small displacements.
   *          By default, clamping is done using `minDrag` to x and y displacements
   *          independently.
   */

  dragElement.init = function init(options) {
    var gd = options.gd;
    var numClicks = 1;
    var doubleClickDelay = gd._context.doubleClickDelay;
    var element = options.element;
    var startX, startY, newMouseDownTime, cursor, dragCover, initialEvent, initialTarget, rightClick;
    if (!gd._mouseDownTime) gd._mouseDownTime = 0;
    element.style.pointerEvents = 'all';
    element.onmousedown = onStart;

    {
      element.ontouchstart = onStart;
    }

    function _clampFn(dx, dy, minDrag) {
      if (Math.abs(dx) < minDrag) dx = 0;
      if (Math.abs(dy) < minDrag) dy = 0;
      return [dx, dy];
    }

    var clampFn = options.clampFn || _clampFn;

    function onStart(e) {
      // make dragging and dragged into properties of gd
      // so that others can look at and modify them
      gd._dragged = false;
      gd._dragging = true;
      var offset = pointerOffset(e);
      startX = offset[0];
      startY = offset[1];
      initialTarget = e.target;
      initialEvent = e;
      rightClick = e.buttons === 2 || e.ctrlKey; // fix Fx.hover for touch events

      if (typeof e.clientX === 'undefined' && typeof e.clientY === 'undefined') {
        e.clientX = startX;
        e.clientY = startY;
      }

      newMouseDownTime = new Date().getTime();

      if (newMouseDownTime - gd._mouseDownTime < doubleClickDelay) {
        // in a click train
        numClicks += 1;
      } else {
        // new click train
        numClicks = 1;
        gd._mouseDownTime = newMouseDownTime;
      }

      if (options.prepFn) options.prepFn(e, startX, startY);

      if (hasHover_1 && !rightClick) {
        dragCover = coverSlip();
        dragCover.style.cursor = window.getComputedStyle(element).cursor;
      } else if (!hasHover_1) {
        // document acts as a dragcover for mobile, bc we can't create dragcover dynamically
        dragCover = document;
        cursor = window.getComputedStyle(document.documentElement).cursor;
        document.documentElement.style.cursor = window.getComputedStyle(element).cursor;
      }

      document.addEventListener('mouseup', onDone);
      document.addEventListener('touchend', onDone);

      if (options.dragmode !== false) {
        e.preventDefault();
        document.addEventListener('mousemove', onMove);
        document.addEventListener('touchmove', onMove, {
          passive: false
        });
      }

      return;
    }

    function onMove(e) {
      e.preventDefault();
      var offset = pointerOffset(e);
      var minDrag = options.minDrag || constants$a.MINDRAG;
      var dxdy = clampFn(offset[0] - startX, offset[1] - startY, minDrag);
      var dx = dxdy[0];
      var dy = dxdy[1];

      if (dx || dy) {
        gd._dragged = true;
        dragElement.unhover(gd, e);
      }

      if (gd._dragged && options.moveFn && !rightClick) {
        gd._dragdata = {
          element: element,
          dx: dx,
          dy: dy
        };
        options.moveFn(dx, dy);
      }

      return;
    }

    function onDone(e) {
      delete gd._dragdata;

      if (options.dragmode !== false) {
        e.preventDefault();
        document.removeEventListener('mousemove', onMove);
        document.removeEventListener('touchmove', onMove);
      }

      document.removeEventListener('mouseup', onDone);
      document.removeEventListener('touchend', onDone);

      if (hasHover_1) {
        removeElement(dragCover);
      } else if (cursor) {
        dragCover.documentElement.style.cursor = cursor;
        cursor = null;
      }

      if (!gd._dragging) {
        gd._dragged = false;
        return;
      }

      gd._dragging = false; // don't count as a dblClick unless the mouseUp is also within
      // the dblclick delay

      if (new Date().getTime() - gd._mouseDownTime > doubleClickDelay) {
        numClicks = Math.max(numClicks - 1, 1);
      }

      if (gd._dragged) {
        if (options.doneFn) options.doneFn();
      } else {
        if (options.clickFn) options.clickFn(numClicks, initialEvent); // If we haven't dragged, this should be a click. But because of the
        // coverSlip changing the element, the natural system might not generate one,
        // so we need to make our own. But right clicks don't normally generate
        // click events, only contextmenu events, which happen on mousedown.

        if (!rightClick) {
          var e2;

          try {
            e2 = new MouseEvent('click', e);
          } catch (err) {
            var offset = pointerOffset(e);
            e2 = document.createEvent('MouseEvents');
            e2.initMouseEvent('click', e.bubbles, e.cancelable, e.view, e.detail, e.screenX, e.screenY, offset[0], offset[1], e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
          }

          initialTarget.dispatchEvent(e2);
        }
      }

      gd._dragging = false;
      gd._dragged = false;
      return;
    }
  };

  function coverSlip() {
    var cover = document.createElement('div');
    cover.className = 'dragcover';
    var cStyle = cover.style;
    cStyle.position = 'fixed';
    cStyle.left = 0;
    cStyle.right = 0;
    cStyle.top = 0;
    cStyle.bottom = 0;
    cStyle.zIndex = 999999999;
    cStyle.background = 'none';
    document.body.appendChild(cover);
    return cover;
  }

  dragElement.coverSlip = coverSlip;

  function pointerOffset(e) {
    return mouseEventOffset_1(e.changedTouches ? e.changedTouches[0] : e, document.body);
  }
});

// to apply cursors to d3 single-element selections.
// omit cursor to revert to the default.

var setcursor = function setCursor(el3, csr) {
  (el3.attr('class') || '').split(' ').forEach(function (cls) {
    if (cls.indexOf('cursor-') === 0) el3.classed(cls, false);
  });
  if (csr) el3.classed('cursor-' + csr, true);
};

var STASHATTR = 'data-savedcursor';
var NO_CURSOR = '!!';
/*
 * works with our CSS cursor classes (see css/_cursor.scss)
 * to override a previous cursor set on d3 single-element selections,
 * by moving the name of the original cursor to the data-savedcursor attr.
 * omit cursor to revert to the previously set value.
 */

var override_cursor = function overrideCursor(el3, csr) {
  var savedCursor = el3.attr(STASHATTR);

  if (csr) {
    if (!savedCursor) {
      var classes = (el3.attr('class') || '').split(' ');

      for (var i = 0; i < classes.length; i++) {
        var cls = classes[i];

        if (cls.indexOf('cursor-') === 0) {
          el3.attr(STASHATTR, cls.substr(7)).classed(cls, false);
        }
      }

      if (!el3.attr(STASHATTR)) {
        el3.attr(STASHATTR, NO_CURSOR);
      }
    }

    setcursor(el3, csr);
  } else if (savedCursor) {
    el3.attr(STASHATTR, null);
    if (savedCursor === NO_CURSOR) setcursor(el3);else setcursor(el3, savedCursor);
  }
};

var attributes$e = {
  bgcolor: {
    valType: 'color',
    editType: 'legend',
    description: ['Sets the legend background color.', 'Defaults to `layout.paper_bgcolor`.'].join(' ')
  },
  bordercolor: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'legend',
    description: 'Sets the color of the border enclosing the legend.'
  },
  borderwidth: {
    valType: 'number',
    min: 0,
    dflt: 0,
    editType: 'legend',
    description: 'Sets the width (in px) of the border enclosing the legend.'
  },
  font: font_attributes({
    editType: 'legend',
    description: 'Sets the font used to text the legend items.'
  }),
  grouptitlefont: font_attributes({
    editType: 'legend',
    description: ['Sets the font for group titles in legend.', 'Defaults to `legend.font` with its size increased about 10%.'].join(' ')
  }),
  orientation: {
    valType: 'enumerated',
    values: ['v', 'h'],
    dflt: 'v',
    editType: 'legend',
    description: 'Sets the orientation of the legend.'
  },
  traceorder: {
    valType: 'flaglist',
    flags: ['reversed', 'grouped'],
    extras: ['normal'],
    editType: 'legend',
    description: ['Determines the order at which the legend items are displayed.', 'If *normal*, the items are displayed top-to-bottom in the same', 'order as the input data.', 'If *reversed*, the items are displayed in the opposite order', 'as *normal*.', 'If *grouped*, the items are displayed in groups', '(when a trace `legendgroup` is provided).', 'if *grouped+reversed*, the items are displayed in the opposite order', 'as *grouped*.'].join(' ')
  },
  tracegroupgap: {
    valType: 'number',
    min: 0,
    dflt: 10,
    editType: 'legend',
    description: ['Sets the amount of vertical space (in px) between legend groups.'].join(' ')
  },
  itemsizing: {
    valType: 'enumerated',
    values: ['trace', 'constant'],
    dflt: 'trace',
    editType: 'legend',
    description: ['Determines if the legend items symbols scale with their corresponding *trace* attributes', 'or remain *constant* independent of the symbol size on the graph.'].join(' ')
  },
  itemwidth: {
    valType: 'number',
    min: 30,
    dflt: 30,
    editType: 'legend',
    description: 'Sets the width (in px) of the legend item symbols (the part other than the title.text).'
  },
  itemclick: {
    valType: 'enumerated',
    values: ['toggle', 'toggleothers', false],
    dflt: 'toggle',
    editType: 'legend',
    description: ['Determines the behavior on legend item click.', '*toggle* toggles the visibility of the item clicked on the graph.', '*toggleothers* makes the clicked item the sole visible item on the graph.', '*false* disables legend item click interactions.'].join(' ')
  },
  itemdoubleclick: {
    valType: 'enumerated',
    values: ['toggle', 'toggleothers', false],
    dflt: 'toggleothers',
    editType: 'legend',
    description: ['Determines the behavior on legend item double-click.', '*toggle* toggles the visibility of the item clicked on the graph.', '*toggleothers* makes the clicked item the sole visible item on the graph.', '*false* disables legend item double-click interactions.'].join(' ')
  },
  groupclick: {
    valType: 'enumerated',
    values: ['toggleitem', 'togglegroup'],
    dflt: 'togglegroup',
    editType: 'legend',
    description: ['Determines the behavior on legend group item click.', '*toggleitem* toggles the visibility of the individual item clicked on the graph.', '*togglegroup* toggles the visibility of all items in the same legendgroup as the item clicked on the graph.'].join(' ')
  },
  x: {
    valType: 'number',
    min: -2,
    max: 3,
    editType: 'legend',
    description: ['Sets the x position (in normalized coordinates) of the legend.', 'Defaults to *1.02* for vertical legends and', 'defaults to *0* for horizontal legends.'].join(' ')
  },
  xanchor: {
    valType: 'enumerated',
    values: ['auto', 'left', 'center', 'right'],
    dflt: 'left',
    editType: 'legend',
    description: ['Sets the legend\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the legend.', 'Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3,', 'anchors legends to the left for `x` values less than or equal to 1/3 and', 'anchors legends with respect to their center otherwise.'].join(' ')
  },
  y: {
    valType: 'number',
    min: -2,
    max: 3,
    editType: 'legend',
    description: ['Sets the y position (in normalized coordinates) of the legend.', 'Defaults to *1* for vertical legends,', 'defaults to *-0.1* for horizontal legends on graphs w/o range sliders and', 'defaults to *1.1* for horizontal legends on graph with one or multiple range sliders.'].join(' ')
  },
  yanchor: {
    valType: 'enumerated',
    values: ['auto', 'top', 'middle', 'bottom'],
    editType: 'legend',
    description: ['Sets the legend\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the legend.', 'Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3,', 'anchors legends to at their top for `y` values greater than or equal to 2/3 and', 'anchors legends with respect to their middle otherwise.'].join(' ')
  },
  uirevision: {
    valType: 'any',
    editType: 'none',
    description: ['Controls persistence of legend-driven changes in trace and pie label', 'visibility. Defaults to `layout.uirevision`.'].join(' ')
  },
  valign: {
    valType: 'enumerated',
    values: ['top', 'middle', 'bottom'],
    dflt: 'middle',
    editType: 'legend',
    description: ['Sets the vertical alignment of the symbols with respect to their associated text.'].join(' ')
  },
  title: {
    text: {
      valType: 'string',
      dflt: '',
      editType: 'legend',
      description: ['Sets the title of the legend.'].join(' ')
    },
    font: font_attributes({
      editType: 'legend',
      description: ['Sets this legend\'s title font.', 'Defaults to `legend.font` with its size increased about 20%.'].join(' ')
    }),
    side: {
      valType: 'enumerated',
      values: ['top', 'left', 'top left'],
      editType: 'legend',
      description: ['Determines the location of legend\'s title', 'with respect to the legend items.', 'Defaulted to *top* with `orientation` is *h*.', 'Defaulted to *left* with `orientation` is *v*.', 'The *top left* options could be used to expand', 'legend area in both x and y sides.'].join(' ')
    },
    editType: 'legend'
  },
  editType: 'legend'
};

var isGrouped = function isGrouped(legendLayout) {
  return (legendLayout.traceorder || '').indexOf('grouped') !== -1;
};

var isVertical = function isVertical(legendLayout) {
  return legendLayout.orientation !== 'h';
};

var isReversed = function isReversed(legendLayout) {
  return (legendLayout.traceorder || '').indexOf('reversed') !== -1;
};

var helpers$8 = {
  isGrouped: isGrouped,
  isVertical: isVertical,
  isReversed: isReversed
};

var defaults$e = function legendDefaults(layoutIn, layoutOut, fullData) {
  var containerIn = layoutIn.legend || {};
  var containerOut = plot_template.newContainer(layoutOut, 'legend');

  function coerce(attr, dflt) {
    return lib_1.coerce(containerIn, containerOut, attributes$e, attr, dflt);
  }

  var trace;

  var traceCoerce = function (attr, dflt) {
    var traceIn = trace._input;
    var traceOut = trace;
    return lib_1.coerce(traceIn, traceOut, attributes$k, attr, dflt);
  };

  var globalFont = layoutOut.font || {};
  var grouptitlefont = lib_1.coerceFont(coerce, 'grouptitlefont', lib_1.extendFlat({}, globalFont, {
    size: Math.round(globalFont.size * 1.1)
  }));
  var legendTraceCount = 0;
  var legendReallyHasATrace = false;
  var defaultOrder = 'normal';

  for (var i = 0; i < fullData.length; i++) {
    trace = fullData[i];
    if (!trace.visible) continue; // Note that we explicitly count any trace that is either shown or
    // *would* be shown by default, toward the two traces you need to
    // ensure the legend is shown by default, because this can still help
    // disambiguate.

    if (trace.showlegend || trace._dfltShowLegend && !(trace._module && trace._module.attributes && trace._module.attributes.showlegend && trace._module.attributes.showlegend.dflt === false)) {
      legendTraceCount++;

      if (trace.showlegend) {
        legendReallyHasATrace = true; // Always show the legend by default if there's a pie,
        // or if there's only one trace but it's explicitly shown

        if (registry.traceIs(trace, 'pie-like') || trace._input.showlegend === true) {
          legendTraceCount++;
        }
      }

      lib_1.coerceFont(traceCoerce, 'legendgrouptitle.font', grouptitlefont);
    }

    if (registry.traceIs(trace, 'bar') && layoutOut.barmode === 'stack' || ['tonextx', 'tonexty'].indexOf(trace.fill) !== -1) {
      defaultOrder = helpers$8.isGrouped({
        traceorder: defaultOrder
      }) ? 'grouped+reversed' : 'reversed';
    }

    if (trace.legendgroup !== undefined && trace.legendgroup !== '') {
      defaultOrder = helpers$8.isReversed({
        traceorder: defaultOrder
      }) ? 'reversed+grouped' : 'grouped';
    }
  }

  var showLegend = lib_1.coerce(layoutIn, layoutOut, layout_attributes$2, 'showlegend', legendReallyHasATrace && legendTraceCount > 1); // delete legend

  if (showLegend === false) layoutOut.legend = undefined;
  if (showLegend === false && !containerIn.uirevision) return;
  coerce('uirevision', layoutOut.uirevision);
  if (showLegend === false) return;
  coerce('bgcolor', layoutOut.paper_bgcolor);
  coerce('bordercolor');
  coerce('borderwidth');
  var itemFont = lib_1.coerceFont(coerce, 'font', layoutOut.font);
  var orientation = coerce('orientation');
  var isHorizontal = orientation === 'h';
  var defaultX, defaultY, defaultYAnchor;

  if (isHorizontal) {
    defaultX = 0;

    if (registry.getComponentMethod('rangeslider', 'isVisible')(layoutIn.xaxis)) {
      defaultY = 1.1;
      defaultYAnchor = 'bottom';
    } else {
      // maybe use y=1.1 / yanchor=bottom as above
      //   to avoid https://github.com/plotly/plotly.js/issues/1199
      //   in v3
      defaultY = -0.1;
      defaultYAnchor = 'top';
    }
  } else {
    defaultX = 1.02;
    defaultY = 1;
    defaultYAnchor = 'auto';
  }

  coerce('traceorder', defaultOrder);
  if (helpers$8.isGrouped(layoutOut.legend)) coerce('tracegroupgap');
  coerce('itemsizing');
  coerce('itemwidth');
  coerce('itemclick');
  coerce('itemdoubleclick');
  coerce('groupclick');
  coerce('x', defaultX);
  coerce('xanchor');
  coerce('y', defaultY);
  coerce('yanchor', defaultYAnchor);
  coerce('valign');
  lib_1.noneOrAll(containerIn, containerOut, ['x', 'y']);
  var titleText = coerce('title.text');

  if (titleText) {
    coerce('title.side', isHorizontal ? 'left' : 'top');
    var dfltTitleFont = lib_1.extendFlat({}, itemFont, {
      size: lib_1.bigFont(itemFont.size)
    });
    lib_1.coerceFont(coerce, 'title.font', dfltTitleFont);
  }
};

var SHOWISOLATETIP = true;

var handle_click = function handleClick(g, gd, numClicks) {
  var fullLayout = gd._fullLayout;
  if (gd._dragged || gd._editing) return;
  var itemClick = fullLayout.legend.itemclick;
  var itemDoubleClick = fullLayout.legend.itemdoubleclick;
  var groupClick = fullLayout.legend.groupclick;

  if (numClicks === 1 && itemClick === 'toggle' && itemDoubleClick === 'toggleothers' && SHOWISOLATETIP && gd.data && gd._context.showTips) {
    lib_1.notifier(lib_1._(gd, 'Double-click on legend to isolate one trace'), 'long');
    SHOWISOLATETIP = false;
  } else {
    SHOWISOLATETIP = false;
  }

  var mode;
  if (numClicks === 1) mode = itemClick;else if (numClicks === 2) mode = itemDoubleClick;
  if (!mode) return;
  var toggleGroup = groupClick === 'togglegroup';
  var hiddenSlices = fullLayout.hiddenlabels ? fullLayout.hiddenlabels.slice() : [];
  var legendItem = g.data()[0][0];
  if (legendItem.groupTitle && legendItem.noClick) return;
  var fullData = gd._fullData;
  var fullTrace = legendItem.trace;
  var legendgroup = fullTrace.legendgroup;
  var i, j, kcont, key, keys, val;
  var attrUpdate = {};
  var attrIndices = [];
  var carrs = [];
  var carrIdx = [];

  function insertUpdate(traceIndex, key, value) {
    var attrIndex = attrIndices.indexOf(traceIndex);
    var valueArray = attrUpdate[key];

    if (!valueArray) {
      valueArray = attrUpdate[key] = [];
    }

    if (attrIndices.indexOf(traceIndex) === -1) {
      attrIndices.push(traceIndex);
      attrIndex = attrIndices.length - 1;
    }

    valueArray[attrIndex] = value;
    return attrIndex;
  }

  function setVisibility(fullTrace, visibility) {
    if (legendItem.groupTitle && !toggleGroup) return;
    var fullInput = fullTrace._fullInput;

    if (registry.hasTransform(fullInput, 'groupby')) {
      var kcont = carrs[fullInput.index];

      if (!kcont) {
        var groupbyIndices = registry.getTransformIndices(fullInput, 'groupby');
        var lastGroupbyIndex = groupbyIndices[groupbyIndices.length - 1];
        kcont = lib_1.keyedContainer(fullInput, 'transforms[' + lastGroupbyIndex + '].styles', 'target', 'value.visible');
        carrs[fullInput.index] = kcont;
      }

      var curState = kcont.get(fullTrace._group); // If not specified, assume visible. This happens if there are other style
      // properties set for a group but not the visibility. There are many similar
      // ways to do this (e.g. why not just `curState = fullTrace.visible`??? The
      // answer is: because it breaks other things like groupby trace names in
      // subtle ways.)

      if (curState === undefined) {
        curState = true;
      }

      if (curState !== false) {
        // true -> legendonly. All others toggle to true:
        kcont.set(fullTrace._group, visibility);
      }

      carrIdx[fullInput.index] = insertUpdate(fullInput.index, 'visible', fullInput.visible === false ? false : true);
    } else {
      // false -> false (not possible since will not be visible in legend)
      // true -> legendonly
      // legendonly -> true
      var nextVisibility = fullInput.visible === false ? false : visibility;
      insertUpdate(fullInput.index, 'visible', nextVisibility);
    }
  }

  if (registry.traceIs(fullTrace, 'pie-like')) {
    var thisLabel = legendItem.label;
    var thisLabelIndex = hiddenSlices.indexOf(thisLabel);

    if (mode === 'toggle') {
      if (thisLabelIndex === -1) hiddenSlices.push(thisLabel);else hiddenSlices.splice(thisLabelIndex, 1);
    } else if (mode === 'toggleothers') {
      hiddenSlices = [];
      gd.calcdata[0].forEach(function (d) {
        if (thisLabel !== d.label) {
          hiddenSlices.push(d.label);
        }
      });

      if (gd._fullLayout.hiddenlabels && gd._fullLayout.hiddenlabels.length === hiddenSlices.length && thisLabelIndex === -1) {
        hiddenSlices = [];
      }
    }

    registry.call('_guiRelayout', gd, 'hiddenlabels', hiddenSlices);
  } else {
    var hasLegendgroup = legendgroup && legendgroup.length;
    var traceIndicesInGroup = [];
    var tracei;

    if (hasLegendgroup) {
      for (i = 0; i < fullData.length; i++) {
        tracei = fullData[i];
        if (!tracei.visible) continue;

        if (tracei.legendgroup === legendgroup) {
          traceIndicesInGroup.push(i);
        }
      }
    }

    if (mode === 'toggle') {
      var nextVisibility;

      switch (fullTrace.visible) {
        case true:
          nextVisibility = 'legendonly';
          break;

        case false:
          nextVisibility = false;
          break;

        case 'legendonly':
          nextVisibility = true;
          break;
      }

      if (hasLegendgroup) {
        if (toggleGroup) {
          for (i = 0; i < fullData.length; i++) {
            if (fullData[i].visible !== false && fullData[i].legendgroup === legendgroup) {
              setVisibility(fullData[i], nextVisibility);
            }
          }
        } else {
          setVisibility(fullTrace, nextVisibility);
        }
      } else {
        setVisibility(fullTrace, nextVisibility);
      }
    } else if (mode === 'toggleothers') {
      // Compute the clicked index. expandedIndex does what we want for expanded traces
      // but also culls hidden traces. That means we have some work to do.
      var isClicked, isInGroup, notInLegend, otherState;
      var isIsolated = true;

      for (i = 0; i < fullData.length; i++) {
        isClicked = fullData[i] === fullTrace;
        notInLegend = fullData[i].showlegend !== true;
        if (isClicked || notInLegend) continue;
        isInGroup = hasLegendgroup && fullData[i].legendgroup === legendgroup;

        if (!isInGroup && fullData[i].visible === true && !registry.traceIs(fullData[i], 'notLegendIsolatable')) {
          isIsolated = false;
          break;
        }
      }

      for (i = 0; i < fullData.length; i++) {
        // False is sticky; we don't change it.
        if (fullData[i].visible === false) continue;

        if (registry.traceIs(fullData[i], 'notLegendIsolatable')) {
          continue;
        }

        switch (fullTrace.visible) {
          case 'legendonly':
            setVisibility(fullData[i], true);
            break;

          case true:
            otherState = isIsolated ? true : 'legendonly';
            isClicked = fullData[i] === fullTrace; // N.B. consider traces that have a set legendgroup as toggleable

            notInLegend = fullData[i].showlegend !== true && !fullData[i].legendgroup;
            isInGroup = isClicked || hasLegendgroup && fullData[i].legendgroup === legendgroup;
            setVisibility(fullData[i], isInGroup || notInLegend ? true : otherState);
            break;
        }
      }
    }

    for (i = 0; i < carrs.length; i++) {
      kcont = carrs[i];
      if (!kcont) continue;
      var update = kcont.constructUpdate();
      var updateKeys = Object.keys(update);

      for (j = 0; j < updateKeys.length; j++) {
        key = updateKeys[j];
        val = attrUpdate[key] = attrUpdate[key] || [];
        val[carrIdx[i]] = update[key];
      }
    } // The length of the value arrays should be equal and any unspecified
    // values should be explicitly undefined for them to get properly culled
    // as updates and not accidentally reset to the default value. This fills
    // out sparse arrays with the required number of undefined values:


    keys = Object.keys(attrUpdate);

    for (i = 0; i < keys.length; i++) {
      key = keys[i];

      for (j = 0; j < attrIndices.length; j++) {
        // Use hasOwnProperty to protect against falsy values:
        if (!attrUpdate[key].hasOwnProperty(j)) {
          attrUpdate[key][j] = undefined;
        }
      }
    }

    registry.call('_guiRestyle', gd, attrUpdate, attrIndices);
  }
};

var constants$9 = {
  scrollBarWidth: 6,
  scrollBarMinHeight: 20,
  scrollBarColor: '#808BA4',
  scrollBarMargin: 4,
  scrollBarEnterAttrs: {
    rx: 20,
    ry: 3,
    width: 0,
    height: 0
  },
  // number of px between legend title and (left) side of legend (always in x direction and from inner border)
  titlePad: 2,
  // number of px between each legend item (x and/or y direction)
  itemGap: 5
};

var get_legend_data = function getLegendData(calcdata, opts) {
  var inHover = opts._inHover;
  var grouped = helpers$8.isGrouped(opts);
  var reversed = helpers$8.isReversed(opts);
  var lgroupToTraces = {};
  var lgroups = [];
  var hasOneNonBlankGroup = false;
  var slicesShown = {};
  var lgroupi = 0;
  var maxNameLength = 0;
  var i, j;

  function addOneItem(legendGroup, legendItem) {
    // each '' legend group is treated as a separate group
    if (legendGroup === '' || !helpers$8.isGrouped(opts)) {
      // TODO: check this against fullData legendgroups?
      var uniqueGroup = '~~i' + lgroupi;
      lgroups.push(uniqueGroup);
      lgroupToTraces[uniqueGroup] = [legendItem];
      lgroupi++;
    } else if (lgroups.indexOf(legendGroup) === -1) {
      lgroups.push(legendGroup);
      hasOneNonBlankGroup = true;
      lgroupToTraces[legendGroup] = [legendItem];
    } else {
      lgroupToTraces[legendGroup].push(legendItem);
    }
  } // build an { legendgroup: [cd0, cd0], ... } object


  for (i = 0; i < calcdata.length; i++) {
    var cd = calcdata[i];
    var cd0 = cd[0];
    var trace = cd0.trace;
    var lgroup = trace.legendgroup;
    if (!inHover && (!trace.visible || !trace.showlegend)) continue;

    if (registry.traceIs(trace, 'pie-like')) {
      if (!slicesShown[lgroup]) slicesShown[lgroup] = {};

      for (j = 0; j < cd.length; j++) {
        var labelj = cd[j].label;

        if (!slicesShown[lgroup][labelj]) {
          addOneItem(lgroup, {
            label: labelj,
            color: cd[j].color,
            i: cd[j].i,
            trace: trace,
            pts: cd[j].pts
          });
          slicesShown[lgroup][labelj] = true;
          maxNameLength = Math.max(maxNameLength, (labelj || '').length);
        }
      }
    } else {
      addOneItem(lgroup, cd0);
      maxNameLength = Math.max(maxNameLength, (trace.name || '').length);
    }
  } // won't draw a legend in this case


  if (!lgroups.length) return []; // collapse all groups into one if all groups are blank

  var shouldCollapse = !hasOneNonBlankGroup || !grouped;
  var legendData = [];

  for (i = 0; i < lgroups.length; i++) {
    var t = lgroupToTraces[lgroups[i]];

    if (shouldCollapse) {
      legendData.push(t[0]);
    } else {
      legendData.push(t);
    }
  }

  if (shouldCollapse) legendData = [legendData];

  for (i = 0; i < legendData.length; i++) {
    // find minimum rank within group
    var groupMinRank = Infinity;

    for (j = 0; j < legendData[i].length; j++) {
      var rank = legendData[i][j].trace.legendrank;
      if (groupMinRank > rank) groupMinRank = rank;
    } // record on first group element


    legendData[i][0]._groupMinRank = groupMinRank;
    legendData[i][0]._preGroupSort = i;
  }

  var orderFn1 = function (a, b) {
    return a[0]._groupMinRank - b[0]._groupMinRank || a[0]._preGroupSort - b[0]._preGroupSort // fallback for old Chrome < 70 https://bugs.chromium.org/p/v8/issues/detail?id=90
    ;
  };

  var orderFn2 = function (a, b) {
    return a.trace.legendrank - b.trace.legendrank || a._preSort - b._preSort // fallback for old Chrome < 70 https://bugs.chromium.org/p/v8/issues/detail?id=90
    ;
  }; // sort considering minimum group legendrank


  legendData.forEach(function (a, k) {
    a[0]._preGroupSort = k;
  });
  legendData.sort(orderFn1);

  for (i = 0; i < legendData.length; i++) {
    // sort considering trace.legendrank and legend.traceorder
    legendData[i].forEach(function (a, k) {
      a._preSort = k;
    });
    legendData[i].sort(orderFn2);
    var firstItemTrace = legendData[i][0].trace;
    var groupTitle = null; // get group title text

    for (j = 0; j < legendData[i].length; j++) {
      var gt = legendData[i][j].trace.legendgrouptitle;

      if (gt && gt.text) {
        groupTitle = gt;
        if (inHover) gt.font = opts._groupTitleFont;
        break;
      }
    } // reverse order


    if (reversed) legendData[i].reverse();

    if (groupTitle) {
      var hasPieLike = false;

      for (j = 0; j < legendData[i].length; j++) {
        if (registry.traceIs(legendData[i][j].trace, 'pie-like')) {
          hasPieLike = true;
          break;
        }
      } // set group title text


      legendData[i].unshift({
        i: -1,
        groupTitle: groupTitle,
        noClick: hasPieLike,
        trace: {
          showlegend: firstItemTrace.showlegend,
          legendgroup: firstItemTrace.legendgroup,
          visible: opts.groupclick === 'toggleitem' ? true : firstItemTrace.visible
        }
      });
    } // rearrange lgroupToTraces into a d3-friendly array of arrays


    for (j = 0; j < legendData[i].length; j++) {
      legendData[i][j] = [legendData[i][j]];
    }
  } // number of legend groups - needed in legend/draw.js


  opts._lgroupsLength = legendData.length; // maximum name/label length - needed in legend/draw.js

  opts._maxNameLength = maxNameLength;
  return legendData;
};

var helpers$7 = createCommonjsModule(function (module, exports) {

  function format(vRounded) {
    return vRounded.indexOf('e') !== -1 ? vRounded.replace(/[.]?0+e/, 'e') : vRounded.indexOf('.') !== -1 ? vRounded.replace(/[.]?0+$/, '') : vRounded;
  }

  exports.formatPiePercent = function formatPiePercent(v, separators) {
    var vRounded = format((v * 100).toPrecision(3));
    return lib_1.numSeparate(vRounded, separators) + '%';
  };

  exports.formatPieValue = function formatPieValue(v, separators) {
    var vRounded = format(v.toPrecision(10));
    return lib_1.numSeparate(vRounded, separators);
  };

  exports.getFirstFilled = function getFirstFilled(array, indices) {
    if (!Array.isArray(array)) return;

    for (var i = 0; i < indices.length; i++) {
      var v = array[indices[i]];
      if (v || v === 0 || v === '') return v;
    }
  };

  exports.castOption = function castOption(item, indices) {
    if (Array.isArray(item)) return exports.getFirstFilled(item, indices);else if (item) return item;
  };

  exports.getRotationAngle = function (rotation) {
    return (rotation === 'auto' ? 0 : rotation) * Math.PI / 180;
  };
});

var castOption = helpers$7.castOption;

var style_one = function styleOne(s, pt, trace) {
  var line = trace.marker.line;
  var lineColor = castOption(line.color, pt.pts) || color_1.defaultLine;
  var lineWidth = castOption(line.width, pt.pts) || 0;
  s.style('stroke-width', lineWidth).call(color_1.fill, pt.color).call(color_1.stroke, lineColor);
};

var strTranslate$9 = lib_1.strTranslate;
var extractOpts = helpers$a.extractOpts;
var pieCastOption = helpers$7.castOption;
var CST_MARKER_SIZE = 12;
var CST_LINE_WIDTH = 5;
var CST_MARKER_LINE_WIDTH = 2;
var MAX_LINE_WIDTH = 10;
var MAX_MARKER_LINE_WIDTH = 5;

var style$2 = function style(s, gd, legend) {
  var fullLayout = gd._fullLayout;
  if (!legend) legend = fullLayout.legend;
  var constantItemSizing = legend.itemsizing === 'constant';
  var itemWidth = legend.itemwidth;
  var centerPos = (itemWidth + constants$9.itemGap * 2) / 2;
  var centerTransform = strTranslate$9(centerPos, 0);

  var boundLineWidth = function (mlw, cont, max, cst) {
    var v;

    if (mlw + 1) {
      v = mlw;
    } else if (cont && cont.width > 0) {
      v = cont.width;
    } else {
      return 0;
    }

    return constantItemSizing ? cst : Math.min(v, max);
  };

  s.each(function (d) {
    var traceGroup = d3.select(this);
    var layers = lib_1.ensureSingle(traceGroup, 'g', 'layers');
    layers.style('opacity', d[0].trace.opacity);
    var valign = legend.valign;
    var lineHeight = d[0].lineHeight;
    var height = d[0].height;

    if (valign === 'middle' || !lineHeight || !height) {
      layers.attr('transform', null);
    } else {
      var factor = {
        top: 1,
        bottom: -1
      }[valign];
      var markerOffsetY = factor * (0.5 * (lineHeight - height + 3));
      layers.attr('transform', strTranslate$9(0, markerOffsetY));
    }

    var fill = layers.selectAll('g.legendfill').data([d]);
    fill.enter().append('g').classed('legendfill', true);
    var line = layers.selectAll('g.legendlines').data([d]);
    line.enter().append('g').classed('legendlines', true);
    var symbol = layers.selectAll('g.legendsymbols').data([d]);
    symbol.enter().append('g').classed('legendsymbols', true);
    symbol.selectAll('g.legendpoints').data([d]).enter().append('g').classed('legendpoints', true);
  }).each(styleSpatial).each(styleWaterfalls).each(styleFunnels).each(styleBars).each(styleBoxes).each(styleFunnelareas).each(stylePies).each(styleLines).each(stylePoints).each(styleCandles).each(styleOHLC);

  function styleLines(d) {
    var styleGuide = getStyleGuide(d);
    var showFill = styleGuide.showFill;
    var showLine = styleGuide.showLine;
    var showGradientLine = styleGuide.showGradientLine;
    var showGradientFill = styleGuide.showGradientFill;
    var anyFill = styleGuide.anyFill;
    var anyLine = styleGuide.anyLine;
    var d0 = d[0];
    var trace = d0.trace;
    var dMod, tMod;
    var cOpts = extractOpts(trace);
    var colorscale = cOpts.colorscale;
    var reversescale = cOpts.reversescale;

    var fillStyle = function (s) {
      if (s.size()) {
        if (showFill) {
          drawing_1.fillGroupStyle(s, gd);
        } else {
          var gradientID = 'legendfill-' + trace.uid;
          drawing_1.gradient(s, gd, gradientID, getGradientDirection(reversescale), colorscale, 'fill');
        }
      }
    };

    var lineGradient = function (s) {
      if (s.size()) {
        var gradientID = 'legendline-' + trace.uid;
        drawing_1.lineGroupStyle(s);
        drawing_1.gradient(s, gd, gradientID, getGradientDirection(reversescale), colorscale, 'stroke');
      }
    }; // with fill and no markers or text, move the line and fill up a bit
    // so it's more centered


    var pathStart = subtypes.hasMarkers(trace) || !anyFill ? 'M5,0' : // with a line leave it slightly below center, to leave room for the
    // line thickness and because the line is usually more prominent
    anyLine ? 'M5,-2' : 'M5,-3';
    var this3 = d3.select(this);
    var fill = this3.select('.legendfill').selectAll('path').data(showFill || showGradientFill ? [d] : []);
    fill.enter().append('path').classed('js-fill', true);
    fill.exit().remove();
    fill.attr('d', pathStart + 'h' + itemWidth + 'v6h-' + itemWidth + 'z').call(fillStyle);

    if (showLine || showGradientLine) {
      var lw = boundLineWidth(undefined, trace.line, MAX_LINE_WIDTH, CST_LINE_WIDTH);
      tMod = lib_1.minExtend(trace, {
        line: {
          width: lw
        }
      });
      dMod = [lib_1.minExtend(d0, {
        trace: tMod
      })];
    }

    var line = this3.select('.legendlines').selectAll('path').data(showLine || showGradientLine ? [dMod] : []);
    line.enter().append('path').classed('js-line', true);
    line.exit().remove(); // this is ugly... but you can't apply a gradient to a perfectly
    // horizontal or vertical line. Presumably because then
    // the system doesn't know how to scale vertical variation, even
    // though there *is* no vertical variation in this case.
    // so add an invisibly small angle to the line
    // This issue (and workaround) exist across (Mac) Chrome, FF, and Safari

    line.attr('d', pathStart + (showGradientLine ? 'l' + itemWidth + ',0.0001' : 'h' + itemWidth)).call(showLine ? drawing_1.lineGroupStyle : lineGradient);
  }

  function stylePoints(d) {
    var styleGuide = getStyleGuide(d);
    var anyFill = styleGuide.anyFill;
    var anyLine = styleGuide.anyLine;
    var showLine = styleGuide.showLine;
    var showMarker = styleGuide.showMarker;
    var d0 = d[0];
    var trace = d0.trace;
    var showText = !showMarker && !anyLine && !anyFill && subtypes.hasText(trace);
    var dMod, tMod; // 'scatter3d' don't use gd.calcdata,
    // use d0.trace to infer arrayOk attributes

    function boundVal(attrIn, arrayToValFn, bounds, cst) {
      var valIn = lib_1.nestedProperty(trace, attrIn).get();
      var valToBound = lib_1.isArrayOrTypedArray(valIn) && arrayToValFn ? arrayToValFn(valIn) : valIn;

      if (constantItemSizing && valToBound && cst !== undefined) {
        valToBound = cst;
      }

      if (bounds) {
        if (valToBound < bounds[0]) return bounds[0];else if (valToBound > bounds[1]) return bounds[1];
      }

      return valToBound;
    }

    function pickFirst(array) {
      if (d0._distinct && d0.index && array[d0.index]) return array[d0.index];
      return array[0];
    } // constrain text, markers, etc so they'll fit on the legend


    if (showMarker || showText || showLine) {
      var dEdit = {};
      var tEdit = {};

      if (showMarker) {
        dEdit.mc = boundVal('marker.color', pickFirst);
        dEdit.mx = boundVal('marker.symbol', pickFirst);
        dEdit.mo = boundVal('marker.opacity', lib_1.mean, [0.2, 1]);
        dEdit.mlc = boundVal('marker.line.color', pickFirst);
        dEdit.mlw = boundVal('marker.line.width', lib_1.mean, [0, 5], CST_MARKER_LINE_WIDTH);
        tEdit.marker = {
          sizeref: 1,
          sizemin: 1,
          sizemode: 'diameter'
        };
        var ms = boundVal('marker.size', lib_1.mean, [2, 16], CST_MARKER_SIZE);
        dEdit.ms = ms;
        tEdit.marker.size = ms;
      }

      if (showLine) {
        tEdit.line = {
          width: boundVal('line.width', pickFirst, [0, 10], CST_LINE_WIDTH)
        };
      }

      if (showText) {
        dEdit.tx = 'Aa';
        dEdit.tp = boundVal('textposition', pickFirst);
        dEdit.ts = 10;
        dEdit.tc = boundVal('textfont.color', pickFirst);
        dEdit.tf = boundVal('textfont.family', pickFirst);
      }

      dMod = [lib_1.minExtend(d0, dEdit)];
      tMod = lib_1.minExtend(trace, tEdit); // always show legend items in base state

      tMod.selectedpoints = null; // never show texttemplate

      tMod.texttemplate = null;
    }

    var ptgroup = d3.select(this).select('g.legendpoints');
    var pts = ptgroup.selectAll('path.scatterpts').data(showMarker ? dMod : []); // make sure marker is on the bottom, in case it enters after text

    pts.enter().insert('path', ':first-child').classed('scatterpts', true).attr('transform', centerTransform);
    pts.exit().remove();
    pts.call(drawing_1.pointStyle, tMod, gd); // 'mrc' is set in pointStyle and used in textPointStyle:
    // constrain it here

    if (showMarker) dMod[0].mrc = 3;
    var txt = ptgroup.selectAll('g.pointtext').data(showText ? dMod : []);
    txt.enter().append('g').classed('pointtext', true).append('text').attr('transform', centerTransform);
    txt.exit().remove();
    txt.selectAll('text').call(drawing_1.textPointStyle, tMod, gd);
  }

  function styleWaterfalls(d) {
    var trace = d[0].trace;
    var isWaterfall = trace.type === 'waterfall';

    if (d[0]._distinct && isWaterfall) {
      var cont = d[0].trace[d[0].dir].marker;
      d[0].mc = cont.color;
      d[0].mlw = cont.line.width;
      d[0].mlc = cont.line.color;
      return styleBarLike(d, this, 'waterfall');
    }

    var ptsData = [];

    if (trace.visible && isWaterfall) {
      ptsData = d[0].hasTotals ? [['increasing', 'M-6,-6V6H0Z'], ['totals', 'M6,6H0L-6,-6H-0Z'], ['decreasing', 'M6,6V-6H0Z']] : [['increasing', 'M-6,-6V6H6Z'], ['decreasing', 'M6,6V-6H-6Z']];
    }

    var pts = d3.select(this).select('g.legendpoints').selectAll('path.legendwaterfall').data(ptsData);
    pts.enter().append('path').classed('legendwaterfall', true).attr('transform', centerTransform).style('stroke-miterlimit', 1);
    pts.exit().remove();
    pts.each(function (dd) {
      var pt = d3.select(this);
      var cont = trace[dd[0]].marker;
      var lw = boundLineWidth(undefined, cont.line, MAX_MARKER_LINE_WIDTH, CST_MARKER_LINE_WIDTH);
      pt.attr('d', dd[1]).style('stroke-width', lw + 'px').call(color_1.fill, cont.color);

      if (lw) {
        pt.call(color_1.stroke, cont.line.color);
      }
    });
  }

  function styleBars(d) {
    styleBarLike(d, this);
  }

  function styleFunnels(d) {
    styleBarLike(d, this, 'funnel');
  }

  function styleBarLike(d, lThis, desiredType) {
    var trace = d[0].trace;
    var marker = trace.marker || {};
    var markerLine = marker.line || {};
    var isVisible = !desiredType ? registry.traceIs(trace, 'bar') : trace.visible && trace.type === desiredType;
    var barpath = d3.select(lThis).select('g.legendpoints').selectAll('path.legend' + desiredType).data(isVisible ? [d] : []);
    barpath.enter().append('path').classed('legend' + desiredType, true).attr('d', 'M6,6H-6V-6H6Z').attr('transform', centerTransform);
    barpath.exit().remove();
    barpath.each(function (d) {
      var p = d3.select(this);
      var d0 = d[0];
      var w = boundLineWidth(d0.mlw, marker.line, MAX_MARKER_LINE_WIDTH, CST_MARKER_LINE_WIDTH);
      p.style('stroke-width', w + 'px');
      var mcc = d0.mcc;

      if (!legend._inHover && 'mc' in d0) {
        // not in unified hover but
        // for legend use the color in the middle of scale
        var cOpts = extractOpts(marker);
        var mid = cOpts.mid;
        if (mid === undefined) mid = (cOpts.max + cOpts.min) / 2;
        mcc = drawing_1.tryColorscale(marker, '')(mid);
      }

      var fillColor = mcc || d0.mc || marker.color;
      var markerPattern = marker.pattern;
      var patternShape = markerPattern && drawing_1.getPatternAttr(markerPattern.shape, 0, '');

      if (patternShape) {
        var patternBGColor = drawing_1.getPatternAttr(markerPattern.bgcolor, 0, null);
        var patternFGColor = drawing_1.getPatternAttr(markerPattern.fgcolor, 0, null);
        var patternFGOpacity = markerPattern.fgopacity;
        var patternSize = dimAttr(markerPattern.size, 8, 10);
        var patternSolidity = dimAttr(markerPattern.solidity, 0.5, 1);
        var patternID = 'legend-' + trace.uid;
        p.call(drawing_1.pattern, 'legend', gd, patternID, patternShape, patternSize, patternSolidity, mcc, markerPattern.fillmode, patternBGColor, patternFGColor, patternFGOpacity);
      } else {
        p.call(color_1.fill, fillColor);
      }

      if (w) color_1.stroke(p, d0.mlc || markerLine.color);
    });
  }

  function styleBoxes(d) {
    var trace = d[0].trace;
    var pts = d3.select(this).select('g.legendpoints').selectAll('path.legendbox').data(trace.visible && registry.traceIs(trace, 'box-violin') ? [d] : []);
    pts.enter().append('path').classed('legendbox', true) // if we want the median bar, prepend M6,0H-6
    .attr('d', 'M6,6H-6V-6H6Z').attr('transform', centerTransform);
    pts.exit().remove();
    pts.each(function () {
      var p = d3.select(this);

      if ((trace.boxpoints === 'all' || trace.points === 'all') && color_1.opacity(trace.fillcolor) === 0 && color_1.opacity((trace.line || {}).color) === 0) {
        var tMod = lib_1.minExtend(trace, {
          marker: {
            size: constantItemSizing ? CST_MARKER_SIZE : lib_1.constrain(trace.marker.size, 2, 16),
            sizeref: 1,
            sizemin: 1,
            sizemode: 'diameter'
          }
        });
        pts.call(drawing_1.pointStyle, tMod, gd);
      } else {
        var w = boundLineWidth(undefined, trace.line, MAX_MARKER_LINE_WIDTH, CST_MARKER_LINE_WIDTH);
        p.style('stroke-width', w + 'px').call(color_1.fill, trace.fillcolor);
        if (w) color_1.stroke(p, trace.line.color);
      }
    });
  }

  function styleCandles(d) {
    var trace = d[0].trace;
    var pts = d3.select(this).select('g.legendpoints').selectAll('path.legendcandle').data(trace.visible && trace.type === 'candlestick' ? [d, d] : []);
    pts.enter().append('path').classed('legendcandle', true).attr('d', function (_, i) {
      if (i) return 'M-15,0H-8M-8,6V-6H8Z'; // increasing

      return 'M15,0H8M8,-6V6H-8Z'; // decreasing
    }).attr('transform', centerTransform).style('stroke-miterlimit', 1);
    pts.exit().remove();
    pts.each(function (_, i) {
      var p = d3.select(this);
      var cont = trace[i ? 'increasing' : 'decreasing'];
      var w = boundLineWidth(undefined, cont.line, MAX_MARKER_LINE_WIDTH, CST_MARKER_LINE_WIDTH);
      p.style('stroke-width', w + 'px').call(color_1.fill, cont.fillcolor);
      if (w) color_1.stroke(p, cont.line.color);
    });
  }

  function styleOHLC(d) {
    var trace = d[0].trace;
    var pts = d3.select(this).select('g.legendpoints').selectAll('path.legendohlc').data(trace.visible && trace.type === 'ohlc' ? [d, d] : []);
    pts.enter().append('path').classed('legendohlc', true).attr('d', function (_, i) {
      if (i) return 'M-15,0H0M-8,-6V0'; // increasing

      return 'M15,0H0M8,6V0'; // decreasing
    }).attr('transform', centerTransform).style('stroke-miterlimit', 1);
    pts.exit().remove();
    pts.each(function (_, i) {
      var p = d3.select(this);
      var cont = trace[i ? 'increasing' : 'decreasing'];
      var w = boundLineWidth(undefined, cont.line, MAX_MARKER_LINE_WIDTH, CST_MARKER_LINE_WIDTH);
      p.style('fill', 'none').call(drawing_1.dashLine, cont.line.dash, w);
      if (w) color_1.stroke(p, cont.line.color);
    });
  }

  function stylePies(d) {
    stylePieLike(d, this, 'pie');
  }

  function styleFunnelareas(d) {
    stylePieLike(d, this, 'funnelarea');
  }

  function stylePieLike(d, lThis, desiredType) {
    var d0 = d[0];
    var trace = d0.trace;
    var isVisible = !desiredType ? registry.traceIs(trace, desiredType) : trace.visible && trace.type === desiredType;
    var pts = d3.select(lThis).select('g.legendpoints').selectAll('path.legend' + desiredType).data(isVisible ? [d] : []);
    pts.enter().append('path').classed('legend' + desiredType, true).attr('d', 'M6,6H-6V-6H6Z').attr('transform', centerTransform);
    pts.exit().remove();

    if (pts.size()) {
      var cont = (trace.marker || {}).line;
      var lw = boundLineWidth(pieCastOption(cont.width, d0.pts), cont, MAX_MARKER_LINE_WIDTH, CST_MARKER_LINE_WIDTH);
      var tMod = lib_1.minExtend(trace, {
        marker: {
          line: {
            width: lw
          }
        }
      }); // since minExtend do not slice more than 3 items we need to patch line.color here

      tMod.marker.line.color = cont.color;
      var d0Mod = lib_1.minExtend(d0, {
        trace: tMod
      });
      style_one(pts, d0Mod, tMod);
    }
  }

  function styleSpatial(d) {
    // i.e. maninly traces having z and colorscale
    var trace = d[0].trace;
    var useGradient;
    var ptsData = [];

    if (trace.visible) {
      switch (trace.type) {
        case 'histogram2d':
        case 'heatmap':
          ptsData = [['M-15,-2V4H15V-2Z'] // similar to contour
          ];
          useGradient = true;
          break;

        case 'choropleth':
        case 'choroplethmapbox':
          ptsData = [['M-6,-6V6H6V-6Z']];
          useGradient = true;
          break;

        case 'densitymapbox':
          ptsData = [['M-6,0 a6,6 0 1,0 12,0 a 6,6 0 1,0 -12,0']];
          useGradient = 'radial';
          break;

        case 'cone':
          ptsData = [['M-6,2 A2,2 0 0,0 -6,6 V6L6,4Z'], ['M-6,-6 A2,2 0 0,0 -6,-2 L6,-4Z'], ['M-6,-2 A2,2 0 0,0 -6,2 L6,0Z']];
          useGradient = false;
          break;

        case 'streamtube':
          ptsData = [['M-6,2 A2,2 0 0,0 -6,6 H6 A2,2 0 0,1 6,2 Z'], ['M-6,-6 A2,2 0 0,0 -6,-2 H6 A2,2 0 0,1 6,-6 Z'], ['M-6,-2 A2,2 0 0,0 -6,2 H6 A2,2 0 0,1 6,-2 Z']];
          useGradient = false;
          break;

        case 'surface':
          ptsData = [['M-6,-6 A2,3 0 0,0 -6,0 H6 A2,3 0 0,1 6,-6 Z'], ['M-6,1 A2,3 0 0,1 -6,6 H6 A2,3 0 0,0 6,0 Z']];
          useGradient = true;
          break;

        case 'mesh3d':
          ptsData = [['M-6,6H0L-6,-6Z'], ['M6,6H0L6,-6Z'], ['M-6,-6H6L0,6Z']];
          useGradient = false;
          break;

        case 'volume':
          ptsData = [['M-6,6H0L-6,-6Z'], ['M6,6H0L6,-6Z'], ['M-6,-6H6L0,6Z']];
          useGradient = true;
          break;

        case 'isosurface':
          ptsData = [['M-6,6H0L-6,-6Z'], ['M6,6H0L6,-6Z'], ['M-6,-6 A12,24 0 0,0 6,-6 L0,6Z']];
          useGradient = false;
          break;
      }
    }

    var pts = d3.select(this).select('g.legendpoints').selectAll('path.legend3dandfriends').data(ptsData);
    pts.enter().append('path').classed('legend3dandfriends', true).attr('transform', centerTransform).style('stroke-miterlimit', 1);
    pts.exit().remove();
    pts.each(function (dd, i) {
      var pt = d3.select(this);
      var cOpts = extractOpts(trace);
      var colorscale = cOpts.colorscale;
      var reversescale = cOpts.reversescale;

      var fillGradient = function (s) {
        if (s.size()) {
          var gradientID = 'legendfill-' + trace.uid;
          drawing_1.gradient(s, gd, gradientID, getGradientDirection(reversescale, useGradient === 'radial'), colorscale, 'fill');
        }
      };

      var fillColor;

      if (!colorscale) {
        var color = trace.vertexcolor || trace.facecolor || trace.color;
        fillColor = lib_1.isArrayOrTypedArray(color) ? color[i] || color[0] : color;
      } else {
        if (!useGradient) {
          var len = colorscale.length;
          fillColor = i === 0 ? colorscale[reversescale ? len - 1 : 0][1] : // minimum
          i === 1 ? colorscale[reversescale ? 0 : len - 1][1] : // maximum
          colorscale[Math.floor((len - 1) / 2)][1]; // middle
        }
      }

      pt.attr('d', dd[0]);

      if (fillColor) {
        pt.call(color_1.fill, fillColor);
      } else {
        pt.call(fillGradient);
      }
    });
  }
};

function getGradientDirection(reversescale, isRadial) {
  var str = isRadial ? 'radial' : 'horizontal';
  return str + (reversescale ? '' : 'reversed');
}

function getStyleGuide(d) {
  var trace = d[0].trace;
  var contours = trace.contours;
  var showLine = subtypes.hasLines(trace);
  var showMarker = subtypes.hasMarkers(trace);
  var showFill = trace.visible && trace.fill && trace.fill !== 'none';
  var showGradientLine = false;
  var showGradientFill = false;

  if (contours) {
    var coloring = contours.coloring;

    if (coloring === 'lines') {
      showGradientLine = true;
    } else {
      showLine = coloring === 'none' || coloring === 'heatmap' || contours.showlines;
    }

    if (contours.type === 'constraint') {
      showFill = contours._operation !== '=';
    } else if (coloring === 'fill' || coloring === 'heatmap') {
      showGradientFill = true;
    }
  }

  return {
    showMarker: showMarker,
    showLine: showLine,
    showFill: showFill,
    showGradientLine: showGradientLine,
    showGradientFill: showGradientFill,
    anyLine: showLine || showGradientLine,
    anyFill: showFill || showGradientFill
  };
}

function dimAttr(v, dflt, max) {
  if (v && lib_1.isArrayOrTypedArray(v)) return dflt;
  if (v > max) return max;
  return v;
}

var LINE_SPACING$5 = alignment.LINE_SPACING;
var FROM_TL$4 = alignment.FROM_TL;
var FROM_BR$3 = alignment.FROM_BR;
var MAIN_TITLE = 1;

var draw$a = function draw(gd, opts) {
  if (!opts) opts = gd._fullLayout.legend || {};
  return _draw(gd, opts);
};

function _draw(gd, legendObj) {
  var fullLayout = gd._fullLayout;
  var clipId = 'legend' + fullLayout._uid;
  var layer;
  var inHover = legendObj._inHover;

  if (inHover) {
    layer = legendObj.layer;
    clipId += '-hover';
  } else {
    layer = fullLayout._infolayer;
  }

  if (!layer) return;
  if (!gd._legendMouseDownTime) gd._legendMouseDownTime = 0;
  var legendData;

  if (!inHover) {
    if (!gd.calcdata) return;
    legendData = fullLayout.showlegend && get_legend_data(gd.calcdata, legendObj);
  } else {
    if (!legendObj.entries) return;
    legendData = get_legend_data(legendObj.entries, legendObj);
  }

  var hiddenSlices = fullLayout.hiddenlabels || [];

  if (!inHover && (!fullLayout.showlegend || !legendData.length)) {
    layer.selectAll('.legend').remove();

    fullLayout._topdefs.select('#' + clipId).remove();

    return plots_1.autoMargin(gd, 'legend');
  }

  var legend = lib_1.ensureSingle(layer, 'g', 'legend', function (s) {
    if (!inHover) s.attr('pointer-events', 'all');
  });
  var clipPath = lib_1.ensureSingleById(fullLayout._topdefs, 'clipPath', clipId, function (s) {
    s.append('rect');
  });
  var bg = lib_1.ensureSingle(legend, 'rect', 'bg', function (s) {
    s.attr('shape-rendering', 'crispEdges');
  });
  bg.call(color_1.stroke, legendObj.bordercolor).call(color_1.fill, legendObj.bgcolor).style('stroke-width', legendObj.borderwidth + 'px');
  var scrollBox = lib_1.ensureSingle(legend, 'g', 'scrollbox');
  var title = legendObj.title;
  legendObj._titleWidth = 0;
  legendObj._titleHeight = 0;

  if (title.text) {
    var titleEl = lib_1.ensureSingle(scrollBox, 'text', 'legendtitletext');
    titleEl.attr('text-anchor', 'start').call(drawing_1.font, title.font).text(title.text);
    textLayout(titleEl, scrollBox, gd, legendObj, MAIN_TITLE); // handle mathjax or multi-line text and compute title height
  } else {
    scrollBox.selectAll('.legendtitletext').remove();
  }

  var scrollBar = lib_1.ensureSingle(legend, 'rect', 'scrollbar', function (s) {
    s.attr(constants$9.scrollBarEnterAttrs).call(color_1.fill, constants$9.scrollBarColor);
  });
  var groups = scrollBox.selectAll('g.groups').data(legendData);
  groups.enter().append('g').attr('class', 'groups');
  groups.exit().remove();
  var traces = groups.selectAll('g.traces').data(lib_1.identity);
  traces.enter().append('g').attr('class', 'traces');
  traces.exit().remove();
  traces.style('opacity', function (d) {
    var trace = d[0].trace;

    if (registry.traceIs(trace, 'pie-like')) {
      return hiddenSlices.indexOf(d[0].label) !== -1 ? 0.5 : 1;
    } else {
      return trace.visible === 'legendonly' ? 0.5 : 1;
    }
  }).each(function () {
    d3.select(this).call(drawTexts, gd, legendObj);
  }).call(style$2, gd, legendObj).each(function () {
    if (!inHover) d3.select(this).call(setupTraceToggle, gd);
  });
  lib_1.syncOrAsync([plots_1.previousPromises, function () {
    return computeLegendDimensions(gd, groups, traces, legendObj);
  }, function () {
    var gs = fullLayout._size;
    var bw = legendObj.borderwidth;

    if (!inHover) {
      var expMargin = expandMargin(gd); // IF expandMargin return a Promise (which is truthy),
      // we're under a doAutoMargin redraw, so we don't have to
      // draw the remaining pieces below

      if (expMargin) return;

      var lx = gs.l + gs.w * legendObj.x - FROM_TL$4[getXanchor(legendObj)] * legendObj._width;

      var ly = gs.t + gs.h * (1 - legendObj.y) - FROM_TL$4[getYanchor(legendObj)] * legendObj._effHeight;

      if (fullLayout.margin.autoexpand) {
        var lx0 = lx;
        var ly0 = ly;
        lx = lib_1.constrain(lx, 0, fullLayout.width - legendObj._width);
        ly = lib_1.constrain(ly, 0, fullLayout.height - legendObj._effHeight);

        if (lx !== lx0) {
          lib_1.log('Constrain legend.x to make legend fit inside graph');
        }

        if (ly !== ly0) {
          lib_1.log('Constrain legend.y to make legend fit inside graph');
        }
      } // Set size and position of all the elements that make up a legend:
      // legend, background and border, scroll box and scroll bar as well as title


      drawing_1.setTranslate(legend, lx, ly);
    } // to be safe, remove previous listeners


    scrollBar.on('.drag', null);
    legend.on('wheel', null);

    if (inHover || legendObj._height <= legendObj._maxHeight || gd._context.staticPlot) {
      // if scrollbar should not be shown.
      var height = legendObj._effHeight; // if unified hover, let it be its full size

      if (inHover) height = legendObj._height;
      bg.attr({
        width: legendObj._width - bw,
        height: height - bw,
        x: bw / 2,
        y: bw / 2
      });
      drawing_1.setTranslate(scrollBox, 0, 0);
      clipPath.select('rect').attr({
        width: legendObj._width - 2 * bw,
        height: height - 2 * bw,
        x: bw,
        y: bw
      });
      drawing_1.setClipUrl(scrollBox, clipId, gd);
      drawing_1.setRect(scrollBar, 0, 0, 0, 0);
      delete legendObj._scrollY;
    } else {
      var scrollBarHeight = Math.max(constants$9.scrollBarMinHeight, legendObj._effHeight * legendObj._effHeight / legendObj._height);
      var scrollBarYMax = legendObj._effHeight - scrollBarHeight - 2 * constants$9.scrollBarMargin;
      var scrollBoxYMax = legendObj._height - legendObj._effHeight;
      var scrollRatio = scrollBarYMax / scrollBoxYMax;
      var scrollBoxY = Math.min(legendObj._scrollY || 0, scrollBoxYMax); // increase the background and clip-path width
      // by the scrollbar width and margin

      bg.attr({
        width: legendObj._width - 2 * bw + constants$9.scrollBarWidth + constants$9.scrollBarMargin,
        height: legendObj._effHeight - bw,
        x: bw / 2,
        y: bw / 2
      });
      clipPath.select('rect').attr({
        width: legendObj._width - 2 * bw + constants$9.scrollBarWidth + constants$9.scrollBarMargin,
        height: legendObj._effHeight - 2 * bw,
        x: bw,
        y: bw + scrollBoxY
      });
      drawing_1.setClipUrl(scrollBox, clipId, gd);
      scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio); // scroll legend by mousewheel or touchpad swipe up/down

      legend.on('wheel', function () {
        scrollBoxY = lib_1.constrain(legendObj._scrollY + d3.event.deltaY / scrollBarYMax * scrollBoxYMax, 0, scrollBoxYMax);
        scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio);

        if (scrollBoxY !== 0 && scrollBoxY !== scrollBoxYMax) {
          d3.event.preventDefault();
        }
      });
      var eventY0, eventY1, scrollBoxY0;

      var getScrollBarDragY = function (scrollBoxY0, eventY0, eventY1) {
        var y = (eventY1 - eventY0) / scrollRatio + scrollBoxY0;
        return lib_1.constrain(y, 0, scrollBoxYMax);
      };

      var getNaturalDragY = function (scrollBoxY0, eventY0, eventY1) {
        var y = (eventY0 - eventY1) / scrollRatio + scrollBoxY0;
        return lib_1.constrain(y, 0, scrollBoxYMax);
      }; // scroll legend by dragging scrollBAR


      var scrollBarDrag = d3.behavior.drag().on('dragstart', function () {
        var e = d3.event.sourceEvent;

        if (e.type === 'touchstart') {
          eventY0 = e.changedTouches[0].clientY;
        } else {
          eventY0 = e.clientY;
        }

        scrollBoxY0 = scrollBoxY;
      }).on('drag', function () {
        var e = d3.event.sourceEvent;
        if (e.buttons === 2 || e.ctrlKey) return;

        if (e.type === 'touchmove') {
          eventY1 = e.changedTouches[0].clientY;
        } else {
          eventY1 = e.clientY;
        }

        scrollBoxY = getScrollBarDragY(scrollBoxY0, eventY0, eventY1);
        scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio);
      });
      scrollBar.call(scrollBarDrag); // scroll legend by touch-dragging scrollBOX

      var scrollBoxTouchDrag = d3.behavior.drag().on('dragstart', function () {
        var e = d3.event.sourceEvent;

        if (e.type === 'touchstart') {
          eventY0 = e.changedTouches[0].clientY;
          scrollBoxY0 = scrollBoxY;
        }
      }).on('drag', function () {
        var e = d3.event.sourceEvent;

        if (e.type === 'touchmove') {
          eventY1 = e.changedTouches[0].clientY;
          scrollBoxY = getNaturalDragY(scrollBoxY0, eventY0, eventY1);
          scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio);
        }
      });
      scrollBox.call(scrollBoxTouchDrag);
    }

    function scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio) {
      legendObj._scrollY = gd._fullLayout.legend._scrollY = scrollBoxY;
      drawing_1.setTranslate(scrollBox, 0, -scrollBoxY);
      drawing_1.setRect(scrollBar, legendObj._width, constants$9.scrollBarMargin + scrollBoxY * scrollRatio, constants$9.scrollBarWidth, scrollBarHeight);
      clipPath.select('rect').attr('y', bw + scrollBoxY);
    }

    if (gd._context.edits.legendPosition) {
      var xf, yf, x0, y0;
      legend.classed('cursor-move', true);
      dragelement.init({
        element: legend.node(),
        gd: gd,
        prepFn: function () {
          var transform = drawing_1.getTranslate(legend);
          x0 = transform.x;
          y0 = transform.y;
        },
        moveFn: function (dx, dy) {
          var newX = x0 + dx;
          var newY = y0 + dy;
          drawing_1.setTranslate(legend, newX, newY);
          xf = dragelement.align(newX, 0, gs.l, gs.l + gs.w, legendObj.xanchor);
          yf = dragelement.align(newY, 0, gs.t + gs.h, gs.t, legendObj.yanchor);
        },
        doneFn: function () {
          if (xf !== undefined && yf !== undefined) {
            registry.call('_guiRelayout', gd, {
              'legend.x': xf,
              'legend.y': yf
            });
          }
        },
        clickFn: function (numClicks, e) {
          var clickedTrace = layer.selectAll('g.traces').filter(function () {
            var bbox = this.getBoundingClientRect();
            return e.clientX >= bbox.left && e.clientX <= bbox.right && e.clientY >= bbox.top && e.clientY <= bbox.bottom;
          });

          if (clickedTrace.size() > 0) {
            clickOrDoubleClick(gd, legend, clickedTrace, numClicks, e);
          }
        }
      });
    }
  }], gd);
}

function clickOrDoubleClick(gd, legend, legendItem, numClicks, evt) {
  var trace = legendItem.data()[0][0].trace;
  var evtData = {
    event: evt,
    node: legendItem.node(),
    curveNumber: trace.index,
    expandedIndex: trace._expandedIndex,
    data: gd.data,
    layout: gd.layout,
    frames: gd._transitionData._frames,
    config: gd._context,
    fullData: gd._fullData,
    fullLayout: gd._fullLayout
  };

  if (trace._group) {
    evtData.group = trace._group;
  }

  if (registry.traceIs(trace, 'pie-like')) {
    evtData.label = legendItem.datum()[0].label;
  }

  var clickVal = events.triggerHandler(gd, 'plotly_legendclick', evtData);
  if (clickVal === false) return;

  if (numClicks === 1) {
    legend._clickTimeout = setTimeout(function () {
      if (!gd._fullLayout) return;
      handle_click(legendItem, gd, numClicks);
    }, gd._context.doubleClickDelay);
  } else if (numClicks === 2) {
    if (legend._clickTimeout) clearTimeout(legend._clickTimeout);
    gd._legendMouseDownTime = 0;
    var dblClickVal = events.triggerHandler(gd, 'plotly_legenddoubleclick', evtData);
    if (dblClickVal !== false) handle_click(legendItem, gd, numClicks);
  }
}

function drawTexts(g, gd, legendObj) {
  var legendItem = g.data()[0][0];
  var trace = legendItem.trace;
  var isPieLike = registry.traceIs(trace, 'pie-like');
  var isEditable = !legendObj._inHover && gd._context.edits.legendText && !isPieLike;
  var maxNameLength = legendObj._maxNameLength;
  var name, font;

  if (legendItem.groupTitle) {
    name = legendItem.groupTitle.text;
    font = legendItem.groupTitle.font;
  } else {
    font = legendObj.font;

    if (!legendObj.entries) {
      name = isPieLike ? legendItem.label : trace.name;

      if (trace._meta) {
        name = lib_1.templateString(name, trace._meta);
      }
    } else {
      name = legendItem.text;
    }
  }

  var textEl = lib_1.ensureSingle(g, 'text', 'legendtext');
  textEl.attr('text-anchor', 'start').call(drawing_1.font, font).text(isEditable ? ensureLength(name, maxNameLength) : name);
  var textGap = legendObj.itemwidth + constants$9.itemGap * 2;
  svg_text_utils.positionText(textEl, textGap, 0);

  if (isEditable) {
    textEl.call(svg_text_utils.makeEditable, {
      gd: gd,
      text: name
    }).call(textLayout, g, gd, legendObj).on('edit', function (newName) {
      this.text(ensureLength(newName, maxNameLength)).call(textLayout, g, gd, legendObj);
      var fullInput = legendItem.trace._fullInput || {};
      var update = {};

      if (registry.hasTransform(fullInput, 'groupby')) {
        var groupbyIndices = registry.getTransformIndices(fullInput, 'groupby');
        var index = groupbyIndices[groupbyIndices.length - 1];
        var kcont = lib_1.keyedContainer(fullInput, 'transforms[' + index + '].styles', 'target', 'value.name');
        kcont.set(legendItem.trace._group, newName);
        update = kcont.constructUpdate();
      } else {
        update.name = newName;
      }

      return registry.call('_guiRestyle', gd, update, trace.index);
    });
  } else {
    textLayout(textEl, g, gd, legendObj);
  }
}
/*
 * Make sure we have a reasonably clickable region.
 * If this string is missing or very short, pad it with spaces out to at least
 * 4 characters, up to the max length of other labels, on the assumption that
 * most characters are wider than spaces so a string of spaces will usually be
 * no wider than the real labels.
 */


function ensureLength(str, maxLength) {
  var targetLength = Math.max(4, maxLength);
  if (str && str.trim().length >= targetLength / 2) return str;
  str = str || '';

  for (var i = targetLength - str.length; i > 0; i--) str += ' ';

  return str;
}

function setupTraceToggle(g, gd) {
  var doubleClickDelay = gd._context.doubleClickDelay;
  var newMouseDownTime;
  var numClicks = 1;
  var traceToggle = lib_1.ensureSingle(g, 'rect', 'legendtoggle', function (s) {
    if (!gd._context.staticPlot) {
      s.style('cursor', 'pointer').attr('pointer-events', 'all');
    }

    s.call(color_1.fill, 'rgba(0,0,0,0)');
  });
  if (gd._context.staticPlot) return;
  traceToggle.on('mousedown', function () {
    newMouseDownTime = new Date().getTime();

    if (newMouseDownTime - gd._legendMouseDownTime < doubleClickDelay) {
      // in a click train
      numClicks += 1;
    } else {
      // new click train
      numClicks = 1;
      gd._legendMouseDownTime = newMouseDownTime;
    }
  });
  traceToggle.on('mouseup', function () {
    if (gd._dragged || gd._editing) return;
    var legend = gd._fullLayout.legend;

    if (new Date().getTime() - gd._legendMouseDownTime > doubleClickDelay) {
      numClicks = Math.max(numClicks - 1, 1);
    }

    clickOrDoubleClick(gd, legend, g, numClicks, d3.event);
  });
}

function textLayout(s, g, gd, legendObj, aTitle) {
  if (legendObj._inHover) s.attr('data-notex', true); // do not process MathJax for unified hover

  svg_text_utils.convertToTspans(s, gd, function () {
    computeTextDimensions(g, gd, legendObj, aTitle);
  });
}

function computeTextDimensions(g, gd, legendObj, aTitle) {
  var legendItem = g.data()[0][0];

  if (!legendObj._inHover && legendItem && !legendItem.trace.showlegend) {
    g.remove();
    return;
  }

  var mathjaxGroup = g.select('g[class*=math-group]');
  var mathjaxNode = mathjaxGroup.node();
  if (!legendObj) legendObj = gd._fullLayout.legend;
  var bw = legendObj.borderwidth;
  var font;

  if (aTitle === MAIN_TITLE) {
    font = legendObj.title.font;
  } else if (legendItem.groupTitle) {
    font = legendItem.groupTitle.font;
  } else {
    font = legendObj.font;
  }

  var lineHeight = font.size * LINE_SPACING$5;
  var height, width;

  if (mathjaxNode) {
    var mathjaxBB = drawing_1.bBox(mathjaxNode);
    height = mathjaxBB.height;
    width = mathjaxBB.width;

    if (aTitle === MAIN_TITLE) {
      drawing_1.setTranslate(mathjaxGroup, bw, bw + height * 0.75);
    } else {
      // legend item
      drawing_1.setTranslate(mathjaxGroup, 0, height * 0.25);
    }
  } else {
    var textEl = g.select(aTitle === MAIN_TITLE ? '.legendtitletext' : '.legendtext');
    var textLines = svg_text_utils.lineCount(textEl);
    var textNode = textEl.node();
    height = lineHeight * textLines;
    width = textNode ? drawing_1.bBox(textNode).width : 0; // approximation to height offset to center the font
    // to avoid getBoundingClientRect

    if (aTitle === MAIN_TITLE) {
      if (legendObj.title.side === 'left') {
        // add extra space between legend title and itmes
        width += constants$9.itemGap * 2;
      }

      svg_text_utils.positionText(textEl, bw + constants$9.titlePad, bw + lineHeight);
    } else {
      // legend item
      var x = constants$9.itemGap * 2 + legendObj.itemwidth;

      if (legendItem.groupTitle) {
        x = constants$9.itemGap;
        width -= legendObj.itemwidth;
      }

      svg_text_utils.positionText(textEl, x, -lineHeight * ((textLines - 1) / 2 - 0.3));
    }
  }

  if (aTitle === MAIN_TITLE) {
    legendObj._titleWidth = width;
    legendObj._titleHeight = height;
  } else {
    // legend item
    legendItem.lineHeight = lineHeight;
    legendItem.height = Math.max(height, 16) + 3;
    legendItem.width = width;
  }
}

function getTitleSize(legendObj) {
  var w = 0;
  var h = 0;
  var side = legendObj.title.side;

  if (side) {
    if (side.indexOf('left') !== -1) {
      w = legendObj._titleWidth;
    }

    if (side.indexOf('top') !== -1) {
      h = legendObj._titleHeight;
    }
  }

  return [w, h];
}
/*
 * Computes in fullLayout.legend:
 *
 *  - _height: legend height including items past scrollbox height
 *  - _maxHeight: maximum legend height before scrollbox is required
 *  - _effHeight: legend height w/ or w/o scrollbox
 *
 *  - _width: legend width
 *  - _maxWidth (for orientation:h only): maximum width before starting new row
 */


function computeLegendDimensions(gd, groups, traces, legendObj) {
  var fullLayout = gd._fullLayout;
  if (!legendObj) legendObj = fullLayout.legend;
  var gs = fullLayout._size;
  var isVertical = helpers$8.isVertical(legendObj);
  var isGrouped = helpers$8.isGrouped(legendObj);
  var bw = legendObj.borderwidth;
  var bw2 = 2 * bw;
  var itemGap = constants$9.itemGap;
  var textGap = legendObj.itemwidth + itemGap * 2;
  var endPad = 2 * (bw + itemGap);
  var yanchor = getYanchor(legendObj);
  var isBelowPlotArea = legendObj.y < 0 || legendObj.y === 0 && yanchor === 'top';
  var isAbovePlotArea = legendObj.y > 1 || legendObj.y === 1 && yanchor === 'bottom';
  var traceGroupGap = legendObj.tracegroupgap; // - if below/above plot area, give it the maximum potential margin-push value
  // - otherwise, extend the height of the plot area

  legendObj._maxHeight = Math.max(isBelowPlotArea || isAbovePlotArea ? fullLayout.height / 2 : gs.h, 30);
  var toggleRectWidth = 0;
  legendObj._width = 0;
  legendObj._height = 0;
  var titleSize = getTitleSize(legendObj);

  if (isVertical) {
    traces.each(function (d) {
      var h = d[0].height;
      drawing_1.setTranslate(this, bw + titleSize[0], bw + titleSize[1] + legendObj._height + h / 2 + itemGap);
      legendObj._height += h;
      legendObj._width = Math.max(legendObj._width, d[0].width);
    });
    toggleRectWidth = textGap + legendObj._width;
    legendObj._width += itemGap + textGap + bw2;
    legendObj._height += endPad;

    if (isGrouped) {
      groups.each(function (d, i) {
        drawing_1.setTranslate(this, 0, i * legendObj.tracegroupgap);
      });
      legendObj._height += (legendObj._lgroupsLength - 1) * legendObj.tracegroupgap;
    }
  } else {
    var xanchor = getXanchor(legendObj);
    var isLeftOfPlotArea = legendObj.x < 0 || legendObj.x === 0 && xanchor === 'right';
    var isRightOfPlotArea = legendObj.x > 1 || legendObj.x === 1 && xanchor === 'left';
    var isBeyondPlotAreaY = isAbovePlotArea || isBelowPlotArea;
    var hw = fullLayout.width / 2; // - if placed within x-margins, extend the width of the plot area
    // - else if below/above plot area and anchored in the margin, extend to opposite margin,
    // - otherwise give it the maximum potential margin-push value

    legendObj._maxWidth = Math.max(isLeftOfPlotArea ? isBeyondPlotAreaY && xanchor === 'left' ? gs.l + gs.w : hw : isRightOfPlotArea ? isBeyondPlotAreaY && xanchor === 'right' ? gs.r + gs.w : hw : gs.w, 2 * textGap);
    var maxItemWidth = 0;
    var combinedItemWidth = 0;
    traces.each(function (d) {
      var w = d[0].width + textGap;
      maxItemWidth = Math.max(maxItemWidth, w);
      combinedItemWidth += w;
    });
    toggleRectWidth = null;
    var maxRowWidth = 0;

    if (isGrouped) {
      var maxGroupHeightInRow = 0;
      var groupOffsetX = 0;
      var groupOffsetY = 0;
      groups.each(function () {
        var maxWidthInGroup = 0;
        var offsetY = 0;
        d3.select(this).selectAll('g.traces').each(function (d) {
          var w = d[0].width;
          var h = d[0].height;
          drawing_1.setTranslate(this, titleSize[0], titleSize[1] + bw + itemGap + h / 2 + offsetY);
          offsetY += h;
          maxWidthInGroup = Math.max(maxWidthInGroup, textGap + w);
        });
        var next = maxWidthInGroup + itemGap; // horizontal_wrapping

        if ( // not on the first column already
        groupOffsetX > 0 && // goes beyound limit
        next + bw + groupOffsetX > legendObj._maxWidth) {
          maxRowWidth = Math.max(maxRowWidth, groupOffsetX);
          groupOffsetX = 0;
          groupOffsetY += maxGroupHeightInRow + traceGroupGap;
          maxGroupHeightInRow = offsetY;
        } else {
          maxGroupHeightInRow = Math.max(maxGroupHeightInRow, offsetY);
        }

        drawing_1.setTranslate(this, groupOffsetX, groupOffsetY);
        groupOffsetX += next;
      });
      legendObj._width = Math.max(maxRowWidth, groupOffsetX) + bw;
      legendObj._height = groupOffsetY + maxGroupHeightInRow + endPad;
    } else {
      var nTraces = traces.size();
      var oneRowLegend = combinedItemWidth + bw2 + (nTraces - 1) * itemGap < legendObj._maxWidth;
      var maxItemHeightInRow = 0;
      var offsetX = 0;
      var offsetY = 0;
      var rowWidth = 0;
      traces.each(function (d) {
        var h = d[0].height;
        var w = textGap + d[0].width;
        var next = (oneRowLegend ? w : maxItemWidth) + itemGap;

        if (next + bw + offsetX - itemGap >= legendObj._maxWidth) {
          maxRowWidth = Math.max(maxRowWidth, rowWidth);
          offsetX = 0;
          offsetY += maxItemHeightInRow;
          legendObj._height += maxItemHeightInRow;
          maxItemHeightInRow = 0;
        }

        drawing_1.setTranslate(this, titleSize[0] + bw + offsetX, titleSize[1] + bw + offsetY + h / 2 + itemGap);
        rowWidth = offsetX + w + itemGap;
        offsetX += next;
        maxItemHeightInRow = Math.max(maxItemHeightInRow, h);
      });

      if (oneRowLegend) {
        legendObj._width = offsetX + bw2;
        legendObj._height = maxItemHeightInRow + endPad;
      } else {
        legendObj._width = Math.max(maxRowWidth, rowWidth) + bw2;
        legendObj._height += maxItemHeightInRow + endPad;
      }
    }
  }

  legendObj._width = Math.ceil(Math.max(legendObj._width + titleSize[0], legendObj._titleWidth + 2 * (bw + constants$9.titlePad)));
  legendObj._height = Math.ceil(Math.max(legendObj._height + titleSize[1], legendObj._titleHeight + 2 * (bw + constants$9.itemGap)));
  legendObj._effHeight = Math.min(legendObj._height, legendObj._maxHeight);
  var edits = gd._context.edits;
  var isEditable = edits.legendText || edits.legendPosition;
  traces.each(function (d) {
    var traceToggle = d3.select(this).select('.legendtoggle');
    var h = d[0].height;
    var w = isEditable ? textGap : toggleRectWidth || textGap + d[0].width;
    if (!isVertical) w += itemGap / 2;
    drawing_1.setRect(traceToggle, 0, -h / 2, w, h);
  });
}

function expandMargin(gd) {
  var fullLayout = gd._fullLayout;
  var legendObj = fullLayout.legend;
  var xanchor = getXanchor(legendObj);
  var yanchor = getYanchor(legendObj);
  return plots_1.autoMargin(gd, 'legend', {
    x: legendObj.x,
    y: legendObj.y,
    l: legendObj._width * FROM_TL$4[xanchor],
    r: legendObj._width * FROM_BR$3[xanchor],
    b: legendObj._effHeight * FROM_BR$3[yanchor],
    t: legendObj._effHeight * FROM_TL$4[yanchor]
  });
}

function getXanchor(legendObj) {
  return lib_1.isRightAnchor(legendObj) ? 'right' : lib_1.isCenterAnchor(legendObj) ? 'center' : 'left';
}

function getYanchor(legendObj) {
  return lib_1.isBottomAnchor(legendObj) ? 'bottom' : lib_1.isMiddleAnchor(legendObj) ? 'middle' : 'top';
}

var strTranslate$8 = lib_1.strTranslate;
var strRotate$1 = lib_1.strRotate; // hover labels for multiple horizontal bars get tilted by some angle,
// then need to be offset differently if they overlap

var YANGLE = constants$b.YANGLE;
var YA_RADIANS = Math.PI * YANGLE / 180; // expansion of projected height

var YFACTOR = 1 / Math.sin(YA_RADIANS); // to make the appropriate post-rotation x offset,
// you need both x and y offsets

var YSHIFTX = Math.cos(YA_RADIANS);
var YSHIFTY = Math.sin(YA_RADIANS); // size and display constants for hover text

var HOVERARROWSIZE = constants$b.HOVERARROWSIZE;
var HOVERTEXTPAD = constants$b.HOVERTEXTPAD;
var multipleHoverPoints = {
  box: true,
  ohlc: true,
  violin: true,
  candlestick: true
};
var cartesianScatterPoints = {
  scatter: true,
  scattergl: true,
  splom: true
}; // fx.hover: highlight data on hover
// evt can be a mousemove event, or an object with data about what points
//   to hover on
//      {xpx,ypx[,hovermode]} - pixel locations from top left
//          (with optional overriding hovermode)
//      {xval,yval[,hovermode]} - data values
//      [{curveNumber,(pointNumber|xval and/or yval)}] -
//              array of specific points to highlight
//          pointNumber is a single integer if gd.data[curveNumber] is 1D,
//              or a two-element array if it's 2D
//          xval and yval are data values,
//              1D data may specify either or both,
//              2D data must specify both
// subplot is an id string (default "xy")
// makes use of gl.hovermode, which can be:
//      x (find the points with the closest x values, ie a column),
//      closest (find the single closest point)
//    internally there are two more that occasionally get used:
//      y (pick out a row - only used for multiple horizontal bar charts)
//      array (used when the user specifies an explicit
//          array of points to hover on)
//
// We wrap the hovers in a timer, to limit their frequency.
// The actual rendering is done by private function _hover.

var hover_1 = function hover(gd, evt, subplot, noHoverEvent) {
  gd = lib_1.getGraphDiv(gd); // The 'target' property changes when bubbling out of Shadow DOM.
  // Throttling can delay reading the target, so we save the current value.

  var eventTarget = evt.target;
  lib_1.throttle(gd._fullLayout._uid + constants$b.HOVERID, constants$b.HOVERMINTIME, function () {
    _hover(gd, evt, subplot, noHoverEvent, eventTarget);
  });
};
/*
 * Draw a single hover item or an array of hover item in a pre-existing svg container somewhere
 * hoverItem should have keys:
 *    - x and y (or x0, x1, y0, and y1):
 *      the pixel position to mark, relative to opts.container
 *    - xLabel, yLabel, zLabel, text, and name:
 *      info to go in the label
 *    - color:
 *      the background color for the label.
 *    - idealAlign (optional):
 *      'left' or 'right' for which side of the x/y box to try to put this on first
 *    - borderColor (optional):
 *      color for the border, defaults to strongest contrast with color
 *    - fontFamily (optional):
 *      string, the font for this label, defaults to constants.HOVERFONT
 *    - fontSize (optional):
 *      the label font size, defaults to constants.HOVERFONTSIZE
 *    - fontColor (optional):
 *      defaults to borderColor
 * opts should have keys:
 *    - bgColor:
 *      the background color this is against, used if the trace is
 *      non-opaque, and for the name, which goes outside the box
 *    - container:
 *      a <svg> or <g> element to add the hover label to
 *    - outerContainer:
 *      normally a parent of `container`, sets the bounding box to use to
 *      constrain the hover label and determine whether to show it on the left or right
 * opts can have optional keys:
 *    - anchorIndex:
        the index of the hover item used as an anchor for positioning.
        The other hover items will be pushed up or down to prevent overlap.
 */


var loneHover = function loneHover(hoverItems, opts) {
  var multiHover = true;

  if (!Array.isArray(hoverItems)) {
    multiHover = false;
    hoverItems = [hoverItems];
  }

  var gd = opts.gd;
  var gTop = getTopOffset(gd);
  var gLeft = getLeftOffset(gd);
  var pointsData = hoverItems.map(function (hoverItem) {
    var _x0 = hoverItem._x0 || hoverItem.x0 || hoverItem.x || 0;

    var _x1 = hoverItem._x1 || hoverItem.x1 || hoverItem.x || 0;

    var _y0 = hoverItem._y0 || hoverItem.y0 || hoverItem.y || 0;

    var _y1 = hoverItem._y1 || hoverItem.y1 || hoverItem.y || 0;

    var eventData = hoverItem.eventData;

    if (eventData) {
      var x0 = Math.min(_x0, _x1);
      var x1 = Math.max(_x0, _x1);
      var y0 = Math.min(_y0, _y1);
      var y1 = Math.max(_y0, _y1);
      var trace = hoverItem.trace;

      if (registry.traceIs(trace, 'gl3d')) {
        var container = gd._fullLayout[trace.scene]._scene.container;
        var dx = container.offsetLeft;
        var dy = container.offsetTop;
        x0 += dx;
        x1 += dx;
        y0 += dy;
        y1 += dy;
      } // TODO: handle heatmapgl


      eventData.bbox = {
        x0: x0 + gLeft,
        x1: x1 + gLeft,
        y0: y0 + gTop,
        y1: y1 + gTop
      };

      if (opts.inOut_bbox) {
        opts.inOut_bbox.push(eventData.bbox);
      }
    } else {
      eventData = false;
    }

    return {
      color: hoverItem.color || color_1.defaultLine,
      x0: hoverItem.x0 || hoverItem.x || 0,
      x1: hoverItem.x1 || hoverItem.x || 0,
      y0: hoverItem.y0 || hoverItem.y || 0,
      y1: hoverItem.y1 || hoverItem.y || 0,
      xLabel: hoverItem.xLabel,
      yLabel: hoverItem.yLabel,
      zLabel: hoverItem.zLabel,
      text: hoverItem.text,
      name: hoverItem.name,
      idealAlign: hoverItem.idealAlign,
      // optional extra bits of styling
      borderColor: hoverItem.borderColor,
      fontFamily: hoverItem.fontFamily,
      fontSize: hoverItem.fontSize,
      fontColor: hoverItem.fontColor,
      nameLength: hoverItem.nameLength,
      textAlign: hoverItem.textAlign,
      // filler to make createHoverText happy
      trace: hoverItem.trace || {
        index: 0,
        hoverinfo: ''
      },
      xa: {
        _offset: 0
      },
      ya: {
        _offset: 0
      },
      index: 0,
      hovertemplate: hoverItem.hovertemplate || false,
      hovertemplateLabels: hoverItem.hovertemplateLabels || false,
      eventData: eventData
    };
  });
  var rotateLabels = false;
  var hoverLabel = createHoverText(pointsData, {
    gd: gd,
    hovermode: 'closest',
    rotateLabels: rotateLabels,
    bgColor: opts.bgColor || color_1.background,
    container: d3.select(opts.container),
    outerContainer: opts.outerContainer || opts.container
  }); // Fix vertical overlap

  var tooltipSpacing = 5;
  var lastBottomY = 0;
  var anchor = 0;
  hoverLabel.sort(function (a, b) {
    return a.y0 - b.y0;
  }).each(function (d, i) {
    var topY = d.y0 - d.by / 2;

    if (topY - tooltipSpacing < lastBottomY) {
      d.offset = lastBottomY - topY + tooltipSpacing;
    } else {
      d.offset = 0;
    }

    lastBottomY = topY + d.by + d.offset;
    if (i === opts.anchorIndex || 0) anchor = d.offset;
  }).each(function (d) {
    d.offset -= anchor;
  });
  var scaleX = gd._fullLayout._invScaleX;
  var scaleY = gd._fullLayout._invScaleY;
  alignHoverText(hoverLabel, rotateLabels, scaleX, scaleY);
  return multiHover ? hoverLabel : hoverLabel.node();
}; // The actual implementation is here:


function _hover(gd, evt, subplot, noHoverEvent, eventTarget) {
  if (!subplot) subplot = 'xy'; // if the user passed in an array of subplots,
  // use those instead of finding overlayed plots

  var subplots = Array.isArray(subplot) ? subplot : [subplot];
  var fullLayout = gd._fullLayout;
  var plots = fullLayout._plots || [];
  var plotinfo = plots[subplot];

  var hasCartesian = fullLayout._has('cartesian'); // list of all overlaid subplots to look at


  if (plotinfo) {
    var overlayedSubplots = plotinfo.overlays.map(function (pi) {
      return pi.id;
    });
    subplots = subplots.concat(overlayedSubplots);
  }

  var len = subplots.length;
  var xaArray = new Array(len);
  var yaArray = new Array(len);
  var supportsCompare = false;

  for (var i = 0; i < len; i++) {
    var spId = subplots[i];

    if (plots[spId]) {
      // 'cartesian' case
      supportsCompare = true;
      xaArray[i] = plots[spId].xaxis;
      yaArray[i] = plots[spId].yaxis;
    } else if (fullLayout[spId] && fullLayout[spId]._subplot) {
      // other subplot types
      var _subplot = fullLayout[spId]._subplot;
      xaArray[i] = _subplot.xaxis;
      yaArray[i] = _subplot.yaxis;
    } else {
      lib_1.warn('Unrecognized subplot: ' + spId);
      return;
    }
  }

  var hovermode = evt.hovermode || fullLayout.hovermode;
  if (hovermode && !supportsCompare) hovermode = 'closest';

  if (['x', 'y', 'closest', 'x unified', 'y unified'].indexOf(hovermode) === -1 || !gd.calcdata || gd.querySelector('.zoombox') || gd._dragging) {
    return dragelement.unhoverRaw(gd, evt);
  }

  var hoverdistance = fullLayout.hoverdistance;
  if (hoverdistance === -1) hoverdistance = Infinity;
  var spikedistance = fullLayout.spikedistance;
  if (spikedistance === -1) spikedistance = Infinity; // hoverData: the set of candidate points we've found to highlight

  var hoverData = []; // searchData: the data to search in. Mostly this is just a copy of
  // gd.calcdata, filtered to the subplot and overlays we're on
  // but if a point array is supplied it will be a mapping
  // of indicated curves

  var searchData = []; // [x|y]valArray: the axis values of the hover event
  // mapped onto each of the currently selected overlaid subplots

  var xvalArray, yvalArray;

  var itemnum, curvenum, cd, trace, subplotId, subploti, _mode, xval, yval, pointData, closedataPreviousLength; // spikePoints: the set of candidate points we've found to draw spikes to


  var spikePoints = {
    hLinePoint: null,
    vLinePoint: null
  }; // does subplot have one (or more) horizontal traces?
  // This is used to determine whether we rotate the labels or not

  var hasOneHorizontalTrace = false; // Figure out what we're hovering on:
  // mouse location or user-supplied data

  if (Array.isArray(evt)) {
    // user specified an array of points to highlight
    hovermode = 'array';

    for (itemnum = 0; itemnum < evt.length; itemnum++) {
      cd = gd.calcdata[evt[itemnum].curveNumber || 0];

      if (cd) {
        trace = cd[0].trace;

        if (cd[0].trace.hoverinfo !== 'skip') {
          searchData.push(cd);

          if (trace.orientation === 'h') {
            hasOneHorizontalTrace = true;
          }
        }
      }
    }
  } else {
    for (curvenum = 0; curvenum < gd.calcdata.length; curvenum++) {
      cd = gd.calcdata[curvenum];
      trace = cd[0].trace;

      if (trace.hoverinfo !== 'skip' && helpers$9.isTraceInSubplots(trace, subplots)) {
        searchData.push(cd);

        if (trace.orientation === 'h') {
          hasOneHorizontalTrace = true;
        }
      }
    } // [x|y]px: the pixels (from top left) of the mouse location
    // on the currently selected plot area
    // add pointerX|Y property for drawing the spikes in spikesnap 'cursor' situation


    var hasUserCalledHover = !eventTarget;
    var xpx, ypx;

    if (hasUserCalledHover) {
      if ('xpx' in evt) xpx = evt.xpx;else xpx = xaArray[0]._length / 2;
      if ('ypx' in evt) ypx = evt.ypx;else ypx = yaArray[0]._length / 2;
    } else {
      // fire the beforehover event and quit if it returns false
      // note that we're only calling this on real mouse events, so
      // manual calls to fx.hover will always run.
      if (events.triggerHandler(gd, 'plotly_beforehover', evt) === false) {
        return;
      }

      var dbb = eventTarget.getBoundingClientRect();
      xpx = evt.clientX - dbb.left;
      ypx = evt.clientY - dbb.top;

      fullLayout._calcInverseTransform(gd);

      var transformedCoords = lib_1.apply3DTransform(fullLayout._invTransform)(xpx, ypx);
      xpx = transformedCoords[0];
      ypx = transformedCoords[1]; // in case hover was called from mouseout into hovertext,
      // it's possible you're not actually over the plot anymore

      if (xpx < 0 || xpx > xaArray[0]._length || ypx < 0 || ypx > yaArray[0]._length) {
        return dragelement.unhoverRaw(gd, evt);
      }
    }

    evt.pointerX = xpx + xaArray[0]._offset;
    evt.pointerY = ypx + yaArray[0]._offset;
    if ('xval' in evt) xvalArray = helpers$9.flat(subplots, evt.xval);else xvalArray = helpers$9.p2c(xaArray, xpx);
    if ('yval' in evt) yvalArray = helpers$9.flat(subplots, evt.yval);else yvalArray = helpers$9.p2c(yaArray, ypx);

    if (!fastIsnumeric(xvalArray[0]) || !fastIsnumeric(yvalArray[0])) {
      lib_1.warn('Fx.hover failed', evt, gd);
      return dragelement.unhoverRaw(gd, evt);
    }
  } // the pixel distance to beat as a matching point
  // in 'x' or 'y' mode this resets for each trace


  var distance = Infinity; // find the closest point in each trace
  // this is minimum dx and/or dy, depending on mode
  // and the pixel position for the label (labelXpx, labelYpx)

  function findHoverPoints(customXVal, customYVal) {
    for (curvenum = 0; curvenum < searchData.length; curvenum++) {
      cd = searchData[curvenum]; // filter out invisible or broken data

      if (!cd || !cd[0] || !cd[0].trace) continue;
      trace = cd[0].trace;
      if (trace.visible !== true || trace._length === 0) continue; // Explicitly bail out for these two. I don't know how to otherwise prevent
      // the rest of this function from running and failing

      if (['carpet', 'contourcarpet'].indexOf(trace._module.name) !== -1) continue;

      if (trace.type === 'splom') {
        // splom traces do not generate overlay subplots,
        // it is safe to assume here splom traces correspond to the 0th subplot
        subploti = 0;
        subplotId = subplots[subploti];
      } else {
        subplotId = helpers$9.getSubplot(trace);
        subploti = subplots.indexOf(subplotId);
      } // within one trace mode can sometimes be overridden


      _mode = hovermode;

      if (helpers$9.isUnifiedHover(_mode)) {
        _mode = _mode.charAt(0);
      } // container for new point, also used to pass info into module.hoverPoints


      pointData = {
        // trace properties
        cd: cd,
        trace: trace,
        xa: xaArray[subploti],
        ya: yaArray[subploti],
        // max distances for hover and spikes - for points that want to show but do not
        // want to override other points, set distance/spikeDistance equal to max*Distance
        // and it will not get filtered out but it will be guaranteed to have a greater
        // distance than any point that calculated a real distance.
        maxHoverDistance: hoverdistance,
        maxSpikeDistance: spikedistance,
        // point properties - override all of these
        index: false,
        // point index in trace - only used by plotly.js hoverdata consumers
        distance: Math.min(distance, hoverdistance),
        // pixel distance or pseudo-distance
        // distance/pseudo-distance for spikes. This distance should always be calculated
        // as if in "closest" mode, and should only be set if this point should
        // generate a spike.
        spikeDistance: Infinity,
        // in some cases the spikes have different positioning from the hover label
        // they don't need x0/x1, just one position
        xSpike: undefined,
        ySpike: undefined,
        // where and how to display the hover label
        color: color_1.defaultLine,
        // trace color
        name: trace.name,
        x0: undefined,
        x1: undefined,
        y0: undefined,
        y1: undefined,
        xLabelVal: undefined,
        yLabelVal: undefined,
        zLabelVal: undefined,
        text: undefined
      }; // add ref to subplot object (non-cartesian case)

      if (fullLayout[subplotId]) {
        pointData.subplot = fullLayout[subplotId]._subplot;
      } // add ref to splom scene


      if (fullLayout._splomScenes && fullLayout._splomScenes[trace.uid]) {
        pointData.scene = fullLayout._splomScenes[trace.uid];
      }

      closedataPreviousLength = hoverData.length; // for a highlighting array, figure out what
      // we're searching for with this element

      if (_mode === 'array') {
        var selection = evt[curvenum];

        if ('pointNumber' in selection) {
          pointData.index = selection.pointNumber;
          _mode = 'closest';
        } else {
          _mode = '';

          if ('xval' in selection) {
            xval = selection.xval;
            _mode = 'x';
          }

          if ('yval' in selection) {
            yval = selection.yval;
            _mode = _mode ? 'closest' : 'y';
          }
        }
      } else if (customXVal !== undefined && customYVal !== undefined) {
        xval = customXVal;
        yval = customYVal;
      } else {
        xval = xvalArray[subploti];
        yval = yvalArray[subploti];
      } // Now if there is range to look in, find the points to hover.


      if (hoverdistance !== 0) {
        if (trace._module && trace._module.hoverPoints) {
          var newPoints = trace._module.hoverPoints(pointData, xval, yval, _mode, {
            finiteRange: true,
            hoverLayer: fullLayout._hoverlayer
          });

          if (newPoints) {
            var newPoint;

            for (var newPointNum = 0; newPointNum < newPoints.length; newPointNum++) {
              newPoint = newPoints[newPointNum];

              if (fastIsnumeric(newPoint.x0) && fastIsnumeric(newPoint.y0)) {
                hoverData.push(cleanPoint(newPoint, hovermode));
              }
            }
          }
        } else {
          lib_1.log('Unrecognized trace type in hover:', trace);
        }
      } // in closest mode, remove any existing (farther) points
      // and don't look any farther than this latest point (or points, some
      // traces like box & violin make multiple hover labels at once)


      if (hovermode === 'closest' && hoverData.length > closedataPreviousLength) {
        hoverData.splice(0, closedataPreviousLength);
        distance = hoverData[0].distance;
      } // Now if there is range to look in, find the points to draw the spikelines
      // Do it only if there is no hoverData


      if (hasCartesian && spikedistance !== 0) {
        if (hoverData.length === 0) {
          pointData.distance = spikedistance;
          pointData.index = false;

          var closestPoints = trace._module.hoverPoints(pointData, xval, yval, 'closest', {
            hoverLayer: fullLayout._hoverlayer
          });

          if (closestPoints) {
            closestPoints = closestPoints.filter(function (point) {
              // some hover points, like scatter fills, do not allow spikes,
              // so will generate a hover point but without a valid spikeDistance
              return point.spikeDistance <= spikedistance;
            });
          }

          if (closestPoints && closestPoints.length) {
            var tmpPoint;
            var closestVPoints = closestPoints.filter(function (point) {
              return point.xa.showspikes && point.xa.spikesnap !== 'hovered data';
            });

            if (closestVPoints.length) {
              var closestVPt = closestVPoints[0];

              if (fastIsnumeric(closestVPt.x0) && fastIsnumeric(closestVPt.y0)) {
                tmpPoint = fillSpikePoint(closestVPt);

                if (!spikePoints.vLinePoint || spikePoints.vLinePoint.spikeDistance > tmpPoint.spikeDistance) {
                  spikePoints.vLinePoint = tmpPoint;
                }
              }
            }

            var closestHPoints = closestPoints.filter(function (point) {
              return point.ya.showspikes && point.ya.spikesnap !== 'hovered data';
            });

            if (closestHPoints.length) {
              var closestHPt = closestHPoints[0];

              if (fastIsnumeric(closestHPt.x0) && fastIsnumeric(closestHPt.y0)) {
                tmpPoint = fillSpikePoint(closestHPt);

                if (!spikePoints.hLinePoint || spikePoints.hLinePoint.spikeDistance > tmpPoint.spikeDistance) {
                  spikePoints.hLinePoint = tmpPoint;
                }
              }
            }
          }
        }
      }
    }
  }

  findHoverPoints();

  function selectClosestPoint(pointsData, spikedistance, spikeOnWinning) {
    var resultPoint = null;
    var minDistance = Infinity;
    var thisSpikeDistance;

    for (var i = 0; i < pointsData.length; i++) {
      thisSpikeDistance = pointsData[i].spikeDistance;
      if (spikeOnWinning && i === 0) thisSpikeDistance = -Infinity;

      if (thisSpikeDistance <= minDistance && thisSpikeDistance <= spikedistance) {
        resultPoint = pointsData[i];
        minDistance = thisSpikeDistance;
      }
    }

    return resultPoint;
  }

  function fillSpikePoint(point) {
    if (!point) return null;
    return {
      xa: point.xa,
      ya: point.ya,
      x: point.xSpike !== undefined ? point.xSpike : (point.x0 + point.x1) / 2,
      y: point.ySpike !== undefined ? point.ySpike : (point.y0 + point.y1) / 2,
      distance: point.distance,
      spikeDistance: point.spikeDistance,
      curveNumber: point.trace.index,
      color: point.color,
      pointNumber: point.index
    };
  }

  var spikelineOpts = {
    fullLayout: fullLayout,
    container: fullLayout._hoverlayer,
    event: evt
  };
  var oldspikepoints = gd._spikepoints;
  var newspikepoints = {
    vLinePoint: spikePoints.vLinePoint,
    hLinePoint: spikePoints.hLinePoint
  };
  gd._spikepoints = newspikepoints;

  var sortHoverData = function () {
    hoverData.sort(function (d1, d2) {
      return d1.distance - d2.distance;
    }); // move period positioned points and box/bar-like traces to the end of the list

    hoverData = orderRangePoints(hoverData, hovermode);
  };

  sortHoverData();
  var axLetter = hovermode.charAt(0);
  var spikeOnWinning = (axLetter === 'x' || axLetter === 'y') && hoverData[0] && cartesianScatterPoints[hoverData[0].trace.type]; // Now if it is not restricted by spikedistance option, set the points to draw the spikelines

  if (hasCartesian && spikedistance !== 0) {
    if (hoverData.length !== 0) {
      var tmpHPointData = hoverData.filter(function (point) {
        return point.ya.showspikes;
      });
      var tmpHPoint = selectClosestPoint(tmpHPointData, spikedistance, spikeOnWinning);
      spikePoints.hLinePoint = fillSpikePoint(tmpHPoint);
      var tmpVPointData = hoverData.filter(function (point) {
        return point.xa.showspikes;
      });
      var tmpVPoint = selectClosestPoint(tmpVPointData, spikedistance, spikeOnWinning);
      spikePoints.vLinePoint = fillSpikePoint(tmpVPoint);
    }
  } // if hoverData is empty check for the spikes to draw and quit if there are none


  if (hoverData.length === 0) {
    var result = dragelement.unhoverRaw(gd, evt);

    if (hasCartesian && (spikePoints.hLinePoint !== null || spikePoints.vLinePoint !== null)) {
      if (spikesChanged(oldspikepoints)) {
        createSpikelines(gd, spikePoints, spikelineOpts);
      }
    }

    return result;
  }

  if (hasCartesian) {
    if (spikesChanged(oldspikepoints)) {
      createSpikelines(gd, spikePoints, spikelineOpts);
    }
  }

  if (helpers$9.isXYhover(_mode) && hoverData[0].length !== 0 && hoverData[0].trace.type !== 'splom' // TODO: add support for splom
  ) {
    // pick winning point
    var winningPoint = hoverData[0]; // discard other points

    if (multipleHoverPoints[winningPoint.trace.type]) {
      hoverData = hoverData.filter(function (d) {
        return d.trace.index === winningPoint.trace.index;
      });
    } else {
      hoverData = [winningPoint];
    }

    var initLen = hoverData.length;
    var winX = getCoord('x', winningPoint, fullLayout);
    var winY = getCoord('y', winningPoint, fullLayout); // in compare mode, select every point at position

    findHoverPoints(winX, winY);
    var finalPoints = [];
    var seen = {};
    var id = 0;

    var insert = function (newHd) {
      var key = multipleHoverPoints[newHd.trace.type] ? hoverDataKey(newHd) : newHd.trace.index;

      if (!seen[key]) {
        id++;
        seen[key] = id;
        finalPoints.push(newHd);
      } else {
        var oldId = seen[key] - 1;
        var oldHd = finalPoints[oldId];

        if (oldId > 0 && Math.abs(newHd.distance) < Math.abs(oldHd.distance)) {
          // replace with closest
          finalPoints[oldId] = newHd;
        }
      }
    };

    var k; // insert the winnig point(s) first

    for (k = 0; k < initLen; k++) {
      insert(hoverData[k]);
    } // override from the end


    for (k = hoverData.length - 1; k > initLen - 1; k--) {
      insert(hoverData[k]);
    }

    hoverData = finalPoints;
    sortHoverData();
  } // lastly, emit custom hover/unhover events


  var oldhoverdata = gd._hoverdata;
  var newhoverdata = [];
  var gTop = getTopOffset(gd);
  var gLeft = getLeftOffset(gd); // pull out just the data that's useful to
  // other people and send it to the event

  for (itemnum = 0; itemnum < hoverData.length; itemnum++) {
    var pt = hoverData[itemnum];
    var eventData = helpers$9.makeEventData(pt, pt.trace, pt.cd);

    if (pt.hovertemplate !== false) {
      var ht = false;

      if (pt.cd[pt.index] && pt.cd[pt.index].ht) {
        ht = pt.cd[pt.index].ht;
      }

      pt.hovertemplate = ht || pt.trace.hovertemplate || false;
    }

    if (pt.xa && pt.ya) {
      var _x0 = pt.x0 + pt.xa._offset;

      var _x1 = pt.x1 + pt.xa._offset;

      var _y0 = pt.y0 + pt.ya._offset;

      var _y1 = pt.y1 + pt.ya._offset;

      var x0 = Math.min(_x0, _x1);
      var x1 = Math.max(_x0, _x1);
      var y0 = Math.min(_y0, _y1);
      var y1 = Math.max(_y0, _y1);
      eventData.bbox = {
        x0: x0 + gLeft,
        x1: x1 + gLeft,
        y0: y0 + gTop,
        y1: y1 + gTop
      };
    }

    pt.eventData = [eventData];
    newhoverdata.push(eventData);
  }

  gd._hoverdata = newhoverdata;
  var rotateLabels = hovermode === 'y' && (searchData.length > 1 || hoverData.length > 1) || hovermode === 'closest' && hasOneHorizontalTrace && hoverData.length > 1;
  var bgColor = color_1.combine(fullLayout.plot_bgcolor || color_1.background, fullLayout.paper_bgcolor);
  var hoverLabels = createHoverText(hoverData, {
    gd: gd,
    hovermode: hovermode,
    rotateLabels: rotateLabels,
    bgColor: bgColor,
    container: fullLayout._hoverlayer,
    outerContainer: fullLayout._paper.node(),
    commonLabelOpts: fullLayout.hoverlabel,
    hoverdistance: fullLayout.hoverdistance
  });

  if (!helpers$9.isUnifiedHover(hovermode)) {
    hoverAvoidOverlaps(hoverLabels, rotateLabels ? 'xa' : 'ya', fullLayout);
    alignHoverText(hoverLabels, rotateLabels, fullLayout._invScaleX, fullLayout._invScaleY);
  } // TODO: tagName hack is needed to appease geo.js's hack of using eventTarget=true
  // we should improve the "fx" API so other plots can use it without these hack.


  if (eventTarget && eventTarget.tagName) {
    var hasClickToShow = registry.getComponentMethod('annotations', 'hasClickToShow')(gd, newhoverdata);
    override_cursor(d3.select(eventTarget), hasClickToShow ? 'pointer' : '');
  } // don't emit events if called manually


  if (!eventTarget || noHoverEvent || !hoverChanged(gd, evt, oldhoverdata)) return;

  if (oldhoverdata) {
    gd.emit('plotly_unhover', {
      event: evt,
      points: oldhoverdata
    });
  }

  gd.emit('plotly_hover', {
    event: evt,
    points: gd._hoverdata,
    xaxes: xaArray,
    yaxes: yaArray,
    xvals: xvalArray,
    yvals: yvalArray
  });
}

function hoverDataKey(d) {
  return [d.trace.index, d.index, d.x0, d.y0, d.name, d.attr, d.xa ? d.xa._id : '', d.ya ? d.ya._id : ''].join(',');
}

var EXTRA_STRING_REGEX = /<extra>([\s\S]*)<\/extra>/;

function createHoverText(hoverData, opts) {
  var gd = opts.gd;
  var fullLayout = gd._fullLayout;
  var hovermode = opts.hovermode;
  var rotateLabels = opts.rotateLabels;
  var bgColor = opts.bgColor;
  var container = opts.container;
  var outerContainer = opts.outerContainer;
  var commonLabelOpts = opts.commonLabelOpts || {}; // Early exit if no labels are drawn

  if (hoverData.length === 0) return [[]]; // opts.fontFamily/Size are used for the common label
  // and as defaults for each hover label, though the individual labels
  // can override this.

  var fontFamily = opts.fontFamily || constants$b.HOVERFONT;
  var fontSize = opts.fontSize || constants$b.HOVERFONTSIZE;
  var c0 = hoverData[0];
  var xa = c0.xa;
  var ya = c0.ya;
  var axLetter = hovermode.charAt(0);
  var t0 = c0[axLetter + 'Label'];
  var outerContainerBB = getBoundingClientRect(gd, outerContainer);
  var outerTop = outerContainerBB.top;
  var outerWidth = outerContainerBB.width;
  var outerHeight = outerContainerBB.height; // show the common label, if any, on the axis
  // never show a common label in array mode,
  // even if sometimes there could be one

  var showCommonLabel = t0 !== undefined && c0.distance <= opts.hoverdistance && (hovermode === 'x' || hovermode === 'y'); // all hover traces hoverinfo must contain the hovermode
  // to have common labels

  if (showCommonLabel) {
    var allHaveZ = true;
    var i, traceHoverinfo;

    for (i = 0; i < hoverData.length; i++) {
      if (allHaveZ && hoverData[i].zLabel === undefined) allHaveZ = false;
      traceHoverinfo = hoverData[i].hoverinfo || hoverData[i].trace.hoverinfo;

      if (traceHoverinfo) {
        var parts = Array.isArray(traceHoverinfo) ? traceHoverinfo : traceHoverinfo.split('+');

        if (parts.indexOf('all') === -1 && parts.indexOf(hovermode) === -1) {
          showCommonLabel = false;
          break;
        }
      }
    } // xyz labels put all info in their main label, so have no need of a common label


    if (allHaveZ) showCommonLabel = false;
  }

  var commonLabel = container.selectAll('g.axistext').data(showCommonLabel ? [0] : []);
  commonLabel.enter().append('g').classed('axistext', true);
  commonLabel.exit().remove();
  commonLabel.each(function () {
    var label = d3.select(this);
    var lpath = lib_1.ensureSingle(label, 'path', '', function (s) {
      s.style({
        'stroke-width': '1px'
      });
    });
    var ltext = lib_1.ensureSingle(label, 'text', '', function (s) {
      // prohibit tex interpretation until we can handle
      // tex and regular text together
      s.attr('data-notex', 1);
    });
    var commonBgColor = commonLabelOpts.bgcolor || color_1.defaultLine;
    var commonStroke = commonLabelOpts.bordercolor || color_1.contrast(commonBgColor);
    var contrastColor = color_1.contrast(commonBgColor);
    var commonLabelFont = {
      family: commonLabelOpts.font.family || fontFamily,
      size: commonLabelOpts.font.size || fontSize,
      color: commonLabelOpts.font.color || contrastColor
    };
    lpath.style({
      fill: commonBgColor,
      stroke: commonStroke
    });
    ltext.text(t0).call(drawing_1.font, commonLabelFont).call(svg_text_utils.positionText, 0, 0).call(svg_text_utils.convertToTspans, gd);
    label.attr('transform', '');
    var tbb = getBoundingClientRect(gd, ltext.node());
    var lx, ly;

    if (hovermode === 'x') {
      var topsign = xa.side === 'top' ? '-' : '';
      ltext.attr('text-anchor', 'middle').call(svg_text_utils.positionText, 0, xa.side === 'top' ? outerTop - tbb.bottom - HOVERARROWSIZE - HOVERTEXTPAD : outerTop - tbb.top + HOVERARROWSIZE + HOVERTEXTPAD);
      lx = xa._offset + (c0.x0 + c0.x1) / 2;
      ly = ya._offset + (xa.side === 'top' ? 0 : ya._length);
      var halfWidth = tbb.width / 2 + HOVERTEXTPAD;

      if (lx < halfWidth) {
        lx = halfWidth;
        lpath.attr('d', 'M-' + (halfWidth - HOVERARROWSIZE) + ',0' + 'L-' + (halfWidth - HOVERARROWSIZE * 2) + ',' + topsign + HOVERARROWSIZE + 'H' + (HOVERTEXTPAD + tbb.width / 2) + 'v' + topsign + (HOVERTEXTPAD * 2 + tbb.height) + 'H-' + halfWidth + 'V' + topsign + HOVERARROWSIZE + 'Z');
      } else if (lx > fullLayout.width - halfWidth) {
        lx = fullLayout.width - halfWidth;
        lpath.attr('d', 'M' + (halfWidth - HOVERARROWSIZE) + ',0' + 'L' + halfWidth + ',' + topsign + HOVERARROWSIZE + 'v' + topsign + (HOVERTEXTPAD * 2 + tbb.height) + 'H-' + halfWidth + 'V' + topsign + HOVERARROWSIZE + 'H' + (halfWidth - HOVERARROWSIZE * 2) + 'Z');
      } else {
        lpath.attr('d', 'M0,0' + 'L' + HOVERARROWSIZE + ',' + topsign + HOVERARROWSIZE + 'H' + (HOVERTEXTPAD + tbb.width / 2) + 'v' + topsign + (HOVERTEXTPAD * 2 + tbb.height) + 'H-' + (HOVERTEXTPAD + tbb.width / 2) + 'V' + topsign + HOVERARROWSIZE + 'H-' + HOVERARROWSIZE + 'Z');
      }
    } else {
      var anchor;
      var sgn;
      var leftsign;

      if (ya.side === 'right') {
        anchor = 'start';
        sgn = 1;
        leftsign = '';
        lx = xa._offset + xa._length;
      } else {
        anchor = 'end';
        sgn = -1;
        leftsign = '-';
        lx = xa._offset;
      }

      ly = ya._offset + (c0.y0 + c0.y1) / 2;
      ltext.attr('text-anchor', anchor);
      lpath.attr('d', 'M0,0' + 'L' + leftsign + HOVERARROWSIZE + ',' + HOVERARROWSIZE + 'V' + (HOVERTEXTPAD + tbb.height / 2) + 'h' + leftsign + (HOVERTEXTPAD * 2 + tbb.width) + 'V-' + (HOVERTEXTPAD + tbb.height / 2) + 'H' + leftsign + HOVERARROWSIZE + 'V-' + HOVERARROWSIZE + 'Z');
      var halfHeight = tbb.height / 2;
      var lty = outerTop - tbb.top - halfHeight;
      var clipId = 'clip' + fullLayout._uid + 'commonlabel' + ya._id;
      var clipPath;

      if (lx < tbb.width + 2 * HOVERTEXTPAD + HOVERARROWSIZE) {
        clipPath = 'M-' + (HOVERARROWSIZE + HOVERTEXTPAD) + '-' + halfHeight + 'h-' + (tbb.width - HOVERTEXTPAD) + 'V' + halfHeight + 'h' + (tbb.width - HOVERTEXTPAD) + 'Z';
        var ltx = tbb.width - lx + HOVERTEXTPAD;
        svg_text_utils.positionText(ltext, ltx, lty); // shift each line (except the longest) so that start-of-line
        // is always visible

        if (anchor === 'end') {
          ltext.selectAll('tspan').each(function () {
            var s = d3.select(this);
            var dummy = drawing_1.tester.append('text').text(s.text()).call(drawing_1.font, commonLabelFont);
            var dummyBB = getBoundingClientRect(gd, dummy.node());

            if (Math.round(dummyBB.width) < Math.round(tbb.width)) {
              s.attr('x', ltx - dummyBB.width);
            }

            dummy.remove();
          });
        }
      } else {
        svg_text_utils.positionText(ltext, sgn * (HOVERTEXTPAD + HOVERARROWSIZE), lty);
        clipPath = null;
      }

      var textClip = fullLayout._topclips.selectAll('#' + clipId).data(clipPath ? [0] : []);

      textClip.enter().append('clipPath').attr('id', clipId).append('path');
      textClip.exit().remove();
      textClip.select('path').attr('d', clipPath);
      drawing_1.setClipUrl(ltext, clipPath ? clipId : null, gd);
    }

    label.attr('transform', strTranslate$8(lx, ly));
  }); // Show a single hover label

  if (helpers$9.isUnifiedHover(hovermode)) {
    // Delete leftover hover labels from other hovermodes
    container.selectAll('g.hovertext').remove();
    var groupedHoverData = hoverData.filter(function (data) {
      return data.hoverinfo !== 'none';
    }); // Return early if nothing is hovered on

    if (groupedHoverData.length === 0) return; // mock legend

    var hoverlabel = fullLayout.hoverlabel;
    var font = hoverlabel.font;
    var mockLayoutIn = {
      showlegend: true,
      legend: {
        title: {
          text: t0,
          font: font
        },
        font: font,
        bgcolor: hoverlabel.bgcolor,
        bordercolor: hoverlabel.bordercolor,
        borderwidth: 1,
        tracegroupgap: 7,
        traceorder: fullLayout.legend ? fullLayout.legend.traceorder : undefined,
        orientation: 'v'
      }
    };
    var mockLayoutOut = {
      font: font
    };
    defaults$e(mockLayoutIn, mockLayoutOut, gd._fullData);
    var mockLegend = mockLayoutOut.legend; // prepare items for the legend

    mockLegend.entries = [];

    for (var j = 0; j < groupedHoverData.length; j++) {
      var pt = groupedHoverData[j];
      if (pt.hoverinfo === 'none') continue;
      var texts = getHoverLabelText(pt, true, hovermode, fullLayout, t0);
      var text = texts[0];
      var name = texts[1];
      pt.name = name;

      if (name !== '') {
        pt.text = name + ' : ' + text;
      } else {
        pt.text = text;
      } // pass through marker's calcdata to style legend items


      var cd = pt.cd[pt.index];

      if (cd) {
        if (cd.mc) pt.mc = cd.mc;
        if (cd.mcc) pt.mc = cd.mcc;
        if (cd.mlc) pt.mlc = cd.mlc;
        if (cd.mlcc) pt.mlc = cd.mlcc;
        if (cd.mlw) pt.mlw = cd.mlw;
        if (cd.mrc) pt.mrc = cd.mrc;
        if (cd.dir) pt.dir = cd.dir;
      }

      pt._distinct = true;
      mockLegend.entries.push([pt]);
    }

    mockLegend.entries.sort(function (a, b) {
      return a[0].trace.index - b[0].trace.index;
    });
    mockLegend.layer = container; // Draw unified hover label

    mockLegend._inHover = true;
    mockLegend._groupTitleFont = hoverlabel.grouptitlefont;
    draw$a(gd, mockLegend); // Position the hover

    var legendContainer = container.select('g.legend');
    var tbb = getBoundingClientRect(gd, legendContainer.node());
    var tWidth = tbb.width + 2 * HOVERTEXTPAD;
    var tHeight = tbb.height + 2 * HOVERTEXTPAD;
    var winningPoint = groupedHoverData[0];
    var avgX = (winningPoint.x0 + winningPoint.x1) / 2;
    var avgY = (winningPoint.y0 + winningPoint.y1) / 2; // When a scatter (or e.g. heatmap) point wins, it's OK for the hovelabel to occlude the bar and other points.

    var pointWon = !(registry.traceIs(winningPoint.trace, 'bar-like') || registry.traceIs(winningPoint.trace, 'box-violin'));
    var lyBottom, lyTop;

    if (axLetter === 'y') {
      if (pointWon) {
        lyTop = avgY - HOVERTEXTPAD;
        lyBottom = avgY + HOVERTEXTPAD;
      } else {
        lyTop = Math.min.apply(null, groupedHoverData.map(function (c) {
          return Math.min(c.y0, c.y1);
        }));
        lyBottom = Math.max.apply(null, groupedHoverData.map(function (c) {
          return Math.max(c.y0, c.y1);
        }));
      }
    } else {
      lyTop = lyBottom = lib_1.mean(groupedHoverData.map(function (c) {
        return (c.y0 + c.y1) / 2;
      })) - tHeight / 2;
    }

    var lxRight, lxLeft;

    if (axLetter === 'x') {
      if (pointWon) {
        lxRight = avgX + HOVERTEXTPAD;
        lxLeft = avgX - HOVERTEXTPAD;
      } else {
        lxRight = Math.max.apply(null, groupedHoverData.map(function (c) {
          return Math.max(c.x0, c.x1);
        }));
        lxLeft = Math.min.apply(null, groupedHoverData.map(function (c) {
          return Math.min(c.x0, c.x1);
        }));
      }
    } else {
      lxRight = lxLeft = lib_1.mean(groupedHoverData.map(function (c) {
        return (c.x0 + c.x1) / 2;
      })) - tWidth / 2;
    }

    var xOffset = xa._offset;
    var yOffset = ya._offset;
    lyBottom += yOffset;
    lxRight += xOffset;
    lxLeft += xOffset - tWidth;
    lyTop += yOffset - tHeight;
    var lx, ly; // top and left positions of the hover box
    // horizontal alignment to end up on screen

    if (lxRight + tWidth < outerWidth && lxRight >= 0) {
      lx = lxRight;
    } else if (lxLeft + tWidth < outerWidth && lxLeft >= 0) {
      lx = lxLeft;
    } else if (xOffset + tWidth < outerWidth) {
      lx = xOffset; // subplot left corner
    } else {
      // closest left or right side of the paper
      if (lxRight - avgX < avgX - lxLeft + tWidth) {
        lx = outerWidth - tWidth;
      } else {
        lx = 0;
      }
    }

    lx += HOVERTEXTPAD; // vertical alignement to end up on screen

    if (lyBottom + tHeight < outerHeight && lyBottom >= 0) {
      ly = lyBottom;
    } else if (lyTop + tHeight < outerHeight && lyTop >= 0) {
      ly = lyTop;
    } else if (yOffset + tHeight < outerHeight) {
      ly = yOffset; // subplot top corner
    } else {
      // closest top or bottom side of the paper
      if (lyBottom - avgY < avgY - lyTop + tHeight) {
        ly = outerHeight - tHeight;
      } else {
        ly = 0;
      }
    }

    ly += HOVERTEXTPAD;
    legendContainer.attr('transform', strTranslate$8(lx - 1, ly - 1));
    return legendContainer;
  } // show all the individual labels
  // first create the objects


  var hoverLabels = container.selectAll('g.hovertext').data(hoverData, function (d) {
    // N.B. when multiple items have the same result key-function value,
    // only the first of those items in hoverData gets rendered
    return hoverDataKey(d);
  });
  hoverLabels.enter().append('g').classed('hovertext', true).each(function () {
    var g = d3.select(this); // trace name label (rect and text.name)

    g.append('rect').call(color_1.fill, color_1.addOpacity(bgColor, 0.8));
    g.append('text').classed('name', true); // trace data label (path and text.nums)

    g.append('path').style('stroke-width', '1px');
    g.append('text').classed('nums', true).call(drawing_1.font, fontFamily, fontSize);
  });
  hoverLabels.exit().remove(); // then put the text in, position the pointer to the data,
  // and figure out sizes

  hoverLabels.each(function (d) {
    var g = d3.select(this).attr('transform', '');
    var dColor = d.color;

    if (Array.isArray(dColor)) {
      dColor = dColor[d.eventData[0].pointNumber];
    } // combine possible non-opaque trace color with bgColor


    var color0 = d.bgcolor || dColor; // color for 'nums' part of the label

    var numsColor = color_1.combine(color_1.opacity(color0) ? color0 : color_1.defaultLine, bgColor); // color for 'name' part of the label

    var nameColor = color_1.combine(color_1.opacity(dColor) ? dColor : color_1.defaultLine, bgColor); // find a contrasting color for border and text

    var contrastColor = d.borderColor || color_1.contrast(numsColor);
    var texts = getHoverLabelText(d, showCommonLabel, hovermode, fullLayout, t0, g);
    var text = texts[0];
    var name = texts[1]; // main label

    var tx = g.select('text.nums').call(drawing_1.font, d.fontFamily || fontFamily, d.fontSize || fontSize, d.fontColor || contrastColor).text(text).attr('data-notex', 1).call(svg_text_utils.positionText, 0, 0).call(svg_text_utils.convertToTspans, gd);
    var tx2 = g.select('text.name');
    var tx2width = 0;
    var tx2height = 0; // secondary label for non-empty 'name'

    if (name && name !== text) {
      tx2.call(drawing_1.font, d.fontFamily || fontFamily, d.fontSize || fontSize, nameColor).text(name).attr('data-notex', 1).call(svg_text_utils.positionText, 0, 0).call(svg_text_utils.convertToTspans, gd);
      var t2bb = getBoundingClientRect(gd, tx2.node());
      tx2width = t2bb.width + 2 * HOVERTEXTPAD;
      tx2height = t2bb.height + 2 * HOVERTEXTPAD;
    } else {
      tx2.remove();
      g.select('rect').remove();
    }

    g.select('path').style({
      fill: numsColor,
      stroke: contrastColor
    });
    var htx = d.xa._offset + (d.x0 + d.x1) / 2;
    var hty = d.ya._offset + (d.y0 + d.y1) / 2;
    var dx = Math.abs(d.x1 - d.x0);
    var dy = Math.abs(d.y1 - d.y0);
    var tbb = getBoundingClientRect(gd, tx.node());
    var tbbWidth = tbb.width / fullLayout._invScaleX;
    var tbbHeight = tbb.height / fullLayout._invScaleY;
    d.ty0 = (outerTop - tbb.top) / fullLayout._invScaleY;
    d.bx = tbbWidth + 2 * HOVERTEXTPAD;
    d.by = Math.max(tbbHeight + 2 * HOVERTEXTPAD, tx2height);
    d.anchor = 'start';
    d.txwidth = tbbWidth;
    d.tx2width = tx2width;
    d.offset = 0;
    var txTotalWidth = (tbbWidth + HOVERARROWSIZE + HOVERTEXTPAD + tx2width) * fullLayout._invScaleX;
    var anchorStartOK, anchorEndOK;

    if (rotateLabels) {
      d.pos = htx;
      anchorStartOK = hty + dy / 2 + txTotalWidth <= outerHeight;
      anchorEndOK = hty - dy / 2 - txTotalWidth >= 0;

      if ((d.idealAlign === 'top' || !anchorStartOK) && anchorEndOK) {
        hty -= dy / 2;
        d.anchor = 'end';
      } else if (anchorStartOK) {
        hty += dy / 2;
        d.anchor = 'start';
      } else d.anchor = 'middle';
    } else {
      d.pos = hty;
      anchorStartOK = htx + dx / 2 + txTotalWidth <= outerWidth;
      anchorEndOK = htx - dx / 2 - txTotalWidth >= 0;

      if ((d.idealAlign === 'left' || !anchorStartOK) && anchorEndOK) {
        htx -= dx / 2;
        d.anchor = 'end';
      } else if (anchorStartOK) {
        htx += dx / 2;
        d.anchor = 'start';
      } else {
        d.anchor = 'middle';
        var txHalfWidth = txTotalWidth / 2;
        var overflowR = htx + txHalfWidth - outerWidth;
        var overflowL = htx - txHalfWidth;
        if (overflowR > 0) htx -= overflowR;
        if (overflowL < 0) htx += -overflowL;
      }
    }

    tx.attr('text-anchor', d.anchor);
    if (tx2width) tx2.attr('text-anchor', d.anchor);
    g.attr('transform', strTranslate$8(htx, hty) + (rotateLabels ? strRotate$1(YANGLE) : ''));
  });
  return hoverLabels;
}

function getHoverLabelText(d, showCommonLabel, hovermode, fullLayout, t0, g) {
  var name = '';
  var text = ''; // to get custom 'name' labels pass cleanPoint

  if (d.nameOverride !== undefined) d.name = d.nameOverride;

  if (d.name) {
    if (d.trace._meta) {
      d.name = lib_1.templateString(d.name, d.trace._meta);
    }

    name = plainText(d.name, d.nameLength);
  }

  var h0 = hovermode.charAt(0);
  var h1 = h0 === 'x' ? 'y' : 'x';

  if (d.zLabel !== undefined) {
    if (d.xLabel !== undefined) text += 'x: ' + d.xLabel + '<br>';
    if (d.yLabel !== undefined) text += 'y: ' + d.yLabel + '<br>';

    if (d.trace.type !== 'choropleth' && d.trace.type !== 'choroplethmapbox') {
      text += (text ? 'z: ' : '') + d.zLabel;
    }
  } else if (showCommonLabel && d[h0 + 'Label'] === t0) {
    text = d[h1 + 'Label'] || '';
  } else if (d.xLabel === undefined) {
    if (d.yLabel !== undefined && d.trace.type !== 'scattercarpet') {
      text = d.yLabel;
    }
  } else if (d.yLabel === undefined) text = d.xLabel;else text = '(' + d.xLabel + ', ' + d.yLabel + ')';

  if ((d.text || d.text === 0) && !Array.isArray(d.text)) {
    text += (text ? '<br>' : '') + d.text;
  } // used by other modules (initially just ternary) that
  // manage their own hoverinfo independent of cleanPoint
  // the rest of this will still apply, so such modules
  // can still put things in (x|y|z)Label, text, and name
  // and hoverinfo will still determine their visibility


  if (d.extraText !== undefined) text += (text ? '<br>' : '') + d.extraText; // if 'text' is empty at this point,
  // and hovertemplate is not defined,
  // put 'name' in main label and don't show secondary label

  if (g && text === '' && !d.hovertemplate) {
    // if 'name' is also empty, remove entire label
    if (name === '') g.remove();
    text = name;
  } // hovertemplate


  var hovertemplate = d.hovertemplate || false;

  if (hovertemplate) {
    var labels = d.hovertemplateLabels || d;

    if (d[h0 + 'Label'] !== t0) {
      labels[h0 + 'other'] = labels[h0 + 'Val'];
      labels[h0 + 'otherLabel'] = labels[h0 + 'Label'];
    }

    text = lib_1.hovertemplateString(hovertemplate, labels, fullLayout._d3locale, d.eventData[0] || {}, d.trace._meta);
    text = text.replace(EXTRA_STRING_REGEX, function (match, extra) {
      // assign name for secondary text label
      name = plainText(extra, d.nameLength); // remove from main text label

      return '';
    });
  }

  return [text, name];
} // Make groups of touching points, and within each group
// move each point so that no labels overlap, but the average
// label position is the same as it was before moving. Incidentally,
// this is equivalent to saying all the labels are on equal linear
// springs about their initial position. Initially, each point is
// its own group, but as we find overlaps we will clump the points.
//
// Also, there are hard constraints at the edges of the graphs,
// that push all groups to the middle so they are visible. I don't
// know what happens if the group spans all the way from one edge to
// the other, though it hardly matters - there's just too much
// information then.


function hoverAvoidOverlaps(hoverLabels, axKey, fullLayout) {
  var nummoves = 0;
  var axSign = 1;
  var nLabels = hoverLabels.size(); // make groups of touching points

  var pointgroups = new Array(nLabels);
  var k = 0;
  hoverLabels.each(function (d) {
    var ax = d[axKey];
    var axIsX = ax._id.charAt(0) === 'x';
    var rng = ax.range;

    if (k === 0 && rng && rng[0] > rng[1] !== axIsX) {
      axSign = -1;
    }

    pointgroups[k++] = [{
      datum: d,
      traceIndex: d.trace.index,
      dp: 0,
      pos: d.pos,
      posref: d.posref,
      size: d.by * (axIsX ? YFACTOR : 1) / 2,
      pmin: 0,
      pmax: axIsX ? fullLayout.width : fullLayout.height
    }];
  });
  pointgroups.sort(function (a, b) {
    return a[0].posref - b[0].posref || // for equal positions, sort trace indices increasing or decreasing
    // depending on whether the axis is reversed or not... so stacked
    // traces will generally keep their order even if one trace adds
    // nothing to the stack.
    axSign * (b[0].traceIndex - a[0].traceIndex);
  });
  var donepositioning, topOverlap, bottomOverlap, i, j, pti, sumdp;

  function constrainGroup(grp) {
    var minPt = grp[0];
    var maxPt = grp[grp.length - 1]; // overlap with the top - positive vals are overlaps

    topOverlap = minPt.pmin - minPt.pos - minPt.dp + minPt.size; // overlap with the bottom - positive vals are overlaps

    bottomOverlap = maxPt.pos + maxPt.dp + maxPt.size - minPt.pmax; // check for min overlap first, so that we always
    // see the largest labels
    // allow for .01px overlap, so we don't get an
    // infinite loop from rounding errors

    if (topOverlap > 0.01) {
      for (j = grp.length - 1; j >= 0; j--) grp[j].dp += topOverlap;

      donepositioning = false;
    }

    if (bottomOverlap < 0.01) return;

    if (topOverlap < -0.01) {
      // make sure we're not pushing back and forth
      for (j = grp.length - 1; j >= 0; j--) grp[j].dp -= bottomOverlap;

      donepositioning = false;
    }

    if (!donepositioning) return; // no room to fix positioning, delete off-screen points
    // first see how many points we need to delete

    var deleteCount = 0;

    for (i = 0; i < grp.length; i++) {
      pti = grp[i];
      if (pti.pos + pti.dp + pti.size > minPt.pmax) deleteCount++;
    } // start by deleting points whose data is off screen


    for (i = grp.length - 1; i >= 0; i--) {
      if (deleteCount <= 0) break;
      pti = grp[i]; // pos has already been constrained to [pmin,pmax]
      // so look for points close to that to delete

      if (pti.pos > minPt.pmax - 1) {
        pti.del = true;
        deleteCount--;
      }
    }

    for (i = 0; i < grp.length; i++) {
      if (deleteCount <= 0) break;
      pti = grp[i]; // pos has already been constrained to [pmin,pmax]
      // so look for points close to that to delete

      if (pti.pos < minPt.pmin + 1) {
        pti.del = true;
        deleteCount--; // shift the whole group minus into this new space

        bottomOverlap = pti.size * 2;

        for (j = grp.length - 1; j >= 0; j--) grp[j].dp -= bottomOverlap;
      }
    } // then delete points that go off the bottom


    for (i = grp.length - 1; i >= 0; i--) {
      if (deleteCount <= 0) break;
      pti = grp[i];

      if (pti.pos + pti.dp + pti.size > minPt.pmax) {
        pti.del = true;
        deleteCount--;
      }
    }
  } // loop through groups, combining them if they overlap,
  // until nothing moves


  while (!donepositioning && nummoves <= nLabels) {
    // to avoid infinite loops, don't move more times
    // than there are traces
    nummoves++; // assume nothing will move in this iteration,
    // reverse this if it does

    donepositioning = true;
    i = 0;

    while (i < pointgroups.length - 1) {
      // the higher (g0) and lower (g1) point group
      var g0 = pointgroups[i];
      var g1 = pointgroups[i + 1]; // the lowest point in the higher group (p0)
      // the highest point in the lower group (p1)

      var p0 = g0[g0.length - 1];
      var p1 = g1[0];
      topOverlap = p0.pos + p0.dp + p0.size - p1.pos - p1.dp + p1.size; // Only group points that lie on the same axes

      if (topOverlap > 0.01 && p0.pmin === p1.pmin && p0.pmax === p1.pmax) {
        // push the new point(s) added to this group out of the way
        for (j = g1.length - 1; j >= 0; j--) g1[j].dp += topOverlap; // add them to the group


        g0.push.apply(g0, g1);
        pointgroups.splice(i + 1, 1); // adjust for minimum average movement

        sumdp = 0;

        for (j = g0.length - 1; j >= 0; j--) sumdp += g0[j].dp;

        bottomOverlap = sumdp / g0.length;

        for (j = g0.length - 1; j >= 0; j--) g0[j].dp -= bottomOverlap;

        donepositioning = false;
      } else i++;
    } // check if we're going off the plot on either side and fix


    pointgroups.forEach(constrainGroup);
  } // now put these offsets into hoverData


  for (i = pointgroups.length - 1; i >= 0; i--) {
    var grp = pointgroups[i];

    for (j = grp.length - 1; j >= 0; j--) {
      var pt = grp[j];
      var hoverPt = pt.datum;
      hoverPt.offset = pt.dp;
      hoverPt.del = pt.del;
    }
  }
}

function alignHoverText(hoverLabels, rotateLabels, scaleX, scaleY) {
  var pX = function (x) {
    return x * scaleX;
  };

  var pY = function (y) {
    return y * scaleY;
  }; // finally set the text positioning relative to the data and draw the
  // box around it


  hoverLabels.each(function (d) {
    var g = d3.select(this);
    if (d.del) return g.remove();
    var tx = g.select('text.nums');
    var anchor = d.anchor;
    var horzSign = anchor === 'end' ? -1 : 1;
    var alignShift = {
      start: 1,
      end: -1,
      middle: 0
    }[anchor];
    var txx = alignShift * (HOVERARROWSIZE + HOVERTEXTPAD);
    var tx2x = txx + alignShift * (d.txwidth + HOVERTEXTPAD);
    var offsetX = 0;
    var offsetY = d.offset;
    var isMiddle = anchor === 'middle';

    if (isMiddle) {
      txx -= d.tx2width / 2;
      tx2x += d.txwidth / 2 + HOVERTEXTPAD;
    }

    if (rotateLabels) {
      offsetY *= -YSHIFTY;
      offsetX = d.offset * YSHIFTX;
    }

    g.select('path').attr('d', isMiddle ? // middle aligned: rect centered on data
    'M-' + pX(d.bx / 2 + d.tx2width / 2) + ',' + pY(offsetY - d.by / 2) + 'h' + pX(d.bx) + 'v' + pY(d.by) + 'h-' + pX(d.bx) + 'Z' : // left or right aligned: side rect with arrow to data
    'M0,0L' + pX(horzSign * HOVERARROWSIZE + offsetX) + ',' + pY(HOVERARROWSIZE + offsetY) + 'v' + pY(d.by / 2 - HOVERARROWSIZE) + 'h' + pX(horzSign * d.bx) + 'v-' + pY(d.by) + 'H' + pX(horzSign * HOVERARROWSIZE + offsetX) + 'V' + pY(offsetY - HOVERARROWSIZE) + 'Z');
    var posX = offsetX + txx;
    var posY = offsetY + d.ty0 - d.by / 2 + HOVERTEXTPAD;
    var textAlign = d.textAlign || 'auto';

    if (textAlign !== 'auto') {
      if (textAlign === 'left' && anchor !== 'start') {
        tx.attr('text-anchor', 'start');
        posX = isMiddle ? -d.bx / 2 - d.tx2width / 2 + HOVERTEXTPAD : -d.bx - HOVERTEXTPAD;
      } else if (textAlign === 'right' && anchor !== 'end') {
        tx.attr('text-anchor', 'end');
        posX = isMiddle ? d.bx / 2 - d.tx2width / 2 - HOVERTEXTPAD : d.bx + HOVERTEXTPAD;
      }
    }

    tx.call(svg_text_utils.positionText, pX(posX), pY(posY));

    if (d.tx2width) {
      g.select('text.name').call(svg_text_utils.positionText, pX(tx2x + alignShift * HOVERTEXTPAD + offsetX), pY(offsetY + d.ty0 - d.by / 2 + HOVERTEXTPAD));
      g.select('rect').call(drawing_1.setRect, pX(tx2x + (alignShift - 1) * d.tx2width / 2 + offsetX), pY(offsetY - d.by / 2 - 1), pX(d.tx2width), pY(d.by + 2));
    }
  });
}

function cleanPoint(d, hovermode) {
  var index = d.index;
  var trace = d.trace || {};
  var cd0 = d.cd[0];
  var cd = d.cd[index] || {};

  function pass(v) {
    return v || fastIsnumeric(v) && v === 0;
  }

  var getVal = Array.isArray(index) ? function (calcKey, traceKey) {
    var v = lib_1.castOption(cd0, index, calcKey);
    return pass(v) ? v : lib_1.extractOption({}, trace, '', traceKey);
  } : function (calcKey, traceKey) {
    return lib_1.extractOption(cd, trace, calcKey, traceKey);
  };

  function fill(key, calcKey, traceKey) {
    var val = getVal(calcKey, traceKey);
    if (pass(val)) d[key] = val;
  }

  fill('hoverinfo', 'hi', 'hoverinfo');
  fill('bgcolor', 'hbg', 'hoverlabel.bgcolor');
  fill('borderColor', 'hbc', 'hoverlabel.bordercolor');
  fill('fontFamily', 'htf', 'hoverlabel.font.family');
  fill('fontSize', 'hts', 'hoverlabel.font.size');
  fill('fontColor', 'htc', 'hoverlabel.font.color');
  fill('nameLength', 'hnl', 'hoverlabel.namelength');
  fill('textAlign', 'hta', 'hoverlabel.align');
  d.posref = hovermode === 'y' || hovermode === 'closest' && trace.orientation === 'h' ? d.xa._offset + (d.x0 + d.x1) / 2 : d.ya._offset + (d.y0 + d.y1) / 2; // then constrain all the positions to be on the plot

  d.x0 = lib_1.constrain(d.x0, 0, d.xa._length);
  d.x1 = lib_1.constrain(d.x1, 0, d.xa._length);
  d.y0 = lib_1.constrain(d.y0, 0, d.ya._length);
  d.y1 = lib_1.constrain(d.y1, 0, d.ya._length); // and convert the x and y label values into formatted text

  if (d.xLabelVal !== undefined) {
    d.xLabel = 'xLabel' in d ? d.xLabel : axes_1.hoverLabelText(d.xa, d.xLabelVal, trace.xhoverformat);
    d.xVal = d.xa.c2d(d.xLabelVal);
  }

  if (d.yLabelVal !== undefined) {
    d.yLabel = 'yLabel' in d ? d.yLabel : axes_1.hoverLabelText(d.ya, d.yLabelVal, trace.yhoverformat);
    d.yVal = d.ya.c2d(d.yLabelVal);
  } // Traces like heatmaps generate the zLabel in their hoverPoints function


  if (d.zLabelVal !== undefined && d.zLabel === undefined) {
    d.zLabel = String(d.zLabelVal);
  } // for box means and error bars, add the range to the label


  if (!isNaN(d.xerr) && !(d.xa.type === 'log' && d.xerr <= 0)) {
    var xeText = axes_1.tickText(d.xa, d.xa.c2l(d.xerr), 'hover').text;

    if (d.xerrneg !== undefined) {
      d.xLabel += ' +' + xeText + ' / -' + axes_1.tickText(d.xa, d.xa.c2l(d.xerrneg), 'hover').text;
    } else d.xLabel += ' Â± ' + xeText; // small distance penalty for error bars, so that if there are
    // traces with errors and some without, the error bar label will
    // hoist up to the point


    if (hovermode === 'x') d.distance += 1;
  }

  if (!isNaN(d.yerr) && !(d.ya.type === 'log' && d.yerr <= 0)) {
    var yeText = axes_1.tickText(d.ya, d.ya.c2l(d.yerr), 'hover').text;

    if (d.yerrneg !== undefined) {
      d.yLabel += ' +' + yeText + ' / -' + axes_1.tickText(d.ya, d.ya.c2l(d.yerrneg), 'hover').text;
    } else d.yLabel += ' Â± ' + yeText;

    if (hovermode === 'y') d.distance += 1;
  }

  var infomode = d.hoverinfo || d.trace.hoverinfo;

  if (infomode && infomode !== 'all') {
    infomode = Array.isArray(infomode) ? infomode : infomode.split('+');
    if (infomode.indexOf('x') === -1) d.xLabel = undefined;
    if (infomode.indexOf('y') === -1) d.yLabel = undefined;
    if (infomode.indexOf('z') === -1) d.zLabel = undefined;
    if (infomode.indexOf('text') === -1) d.text = undefined;
    if (infomode.indexOf('name') === -1) d.name = undefined;
  }

  return d;
}

function createSpikelines(gd, closestPoints, opts) {
  var container = opts.container;
  var fullLayout = opts.fullLayout;
  var gs = fullLayout._size;
  var evt = opts.event;
  var showY = !!closestPoints.hLinePoint;
  var showX = !!closestPoints.vLinePoint;
  var xa, ya; // Remove old spikeline items

  container.selectAll('.spikeline').remove();
  if (!(showX || showY)) return;
  var contrastColor = color_1.combine(fullLayout.plot_bgcolor, fullLayout.paper_bgcolor); // Horizontal line (to y-axis)

  if (showY) {
    var hLinePoint = closestPoints.hLinePoint;
    var hLinePointX, hLinePointY;
    xa = hLinePoint && hLinePoint.xa;
    ya = hLinePoint && hLinePoint.ya;
    var ySnap = ya.spikesnap;

    if (ySnap === 'cursor') {
      hLinePointX = evt.pointerX;
      hLinePointY = evt.pointerY;
    } else {
      hLinePointX = xa._offset + hLinePoint.x;
      hLinePointY = ya._offset + hLinePoint.y;
    }

    var dfltHLineColor = tinycolor.readability(hLinePoint.color, contrastColor) < 1.5 ? color_1.contrast(contrastColor) : hLinePoint.color;
    var yMode = ya.spikemode;
    var yThickness = ya.spikethickness;
    var yColor = ya.spikecolor || dfltHLineColor;
    var xEdge = axes_1.getPxPosition(gd, ya);
    var xBase, xEndSpike;

    if (yMode.indexOf('toaxis') !== -1 || yMode.indexOf('across') !== -1) {
      if (yMode.indexOf('toaxis') !== -1) {
        xBase = xEdge;
        xEndSpike = hLinePointX;
      }

      if (yMode.indexOf('across') !== -1) {
        var xAcross0 = ya._counterDomainMin;
        var xAcross1 = ya._counterDomainMax;

        if (ya.anchor === 'free') {
          xAcross0 = Math.min(xAcross0, ya.position);
          xAcross1 = Math.max(xAcross1, ya.position);
        }

        xBase = gs.l + xAcross0 * gs.w;
        xEndSpike = gs.l + xAcross1 * gs.w;
      } // Foreground horizontal line (to y-axis)


      container.insert('line', ':first-child').attr({
        x1: xBase,
        x2: xEndSpike,
        y1: hLinePointY,
        y2: hLinePointY,
        'stroke-width': yThickness,
        stroke: yColor,
        'stroke-dasharray': drawing_1.dashStyle(ya.spikedash, yThickness)
      }).classed('spikeline', true).classed('crisp', true); // Background horizontal Line (to y-axis)

      container.insert('line', ':first-child').attr({
        x1: xBase,
        x2: xEndSpike,
        y1: hLinePointY,
        y2: hLinePointY,
        'stroke-width': yThickness + 2,
        stroke: contrastColor
      }).classed('spikeline', true).classed('crisp', true);
    } // Y axis marker


    if (yMode.indexOf('marker') !== -1) {
      container.insert('circle', ':first-child').attr({
        cx: xEdge + (ya.side !== 'right' ? yThickness : -yThickness),
        cy: hLinePointY,
        r: yThickness,
        fill: yColor
      }).classed('spikeline', true);
    }
  }

  if (showX) {
    var vLinePoint = closestPoints.vLinePoint;
    var vLinePointX, vLinePointY;
    xa = vLinePoint && vLinePoint.xa;
    ya = vLinePoint && vLinePoint.ya;
    var xSnap = xa.spikesnap;

    if (xSnap === 'cursor') {
      vLinePointX = evt.pointerX;
      vLinePointY = evt.pointerY;
    } else {
      vLinePointX = xa._offset + vLinePoint.x;
      vLinePointY = ya._offset + vLinePoint.y;
    }

    var dfltVLineColor = tinycolor.readability(vLinePoint.color, contrastColor) < 1.5 ? color_1.contrast(contrastColor) : vLinePoint.color;
    var xMode = xa.spikemode;
    var xThickness = xa.spikethickness;
    var xColor = xa.spikecolor || dfltVLineColor;
    var yEdge = axes_1.getPxPosition(gd, xa);
    var yBase, yEndSpike;

    if (xMode.indexOf('toaxis') !== -1 || xMode.indexOf('across') !== -1) {
      if (xMode.indexOf('toaxis') !== -1) {
        yBase = yEdge;
        yEndSpike = vLinePointY;
      }

      if (xMode.indexOf('across') !== -1) {
        var yAcross0 = xa._counterDomainMin;
        var yAcross1 = xa._counterDomainMax;

        if (xa.anchor === 'free') {
          yAcross0 = Math.min(yAcross0, xa.position);
          yAcross1 = Math.max(yAcross1, xa.position);
        }

        yBase = gs.t + (1 - yAcross1) * gs.h;
        yEndSpike = gs.t + (1 - yAcross0) * gs.h;
      } // Foreground vertical line (to x-axis)


      container.insert('line', ':first-child').attr({
        x1: vLinePointX,
        x2: vLinePointX,
        y1: yBase,
        y2: yEndSpike,
        'stroke-width': xThickness,
        stroke: xColor,
        'stroke-dasharray': drawing_1.dashStyle(xa.spikedash, xThickness)
      }).classed('spikeline', true).classed('crisp', true); // Background vertical line (to x-axis)

      container.insert('line', ':first-child').attr({
        x1: vLinePointX,
        x2: vLinePointX,
        y1: yBase,
        y2: yEndSpike,
        'stroke-width': xThickness + 2,
        stroke: contrastColor
      }).classed('spikeline', true).classed('crisp', true);
    } // X axis marker


    if (xMode.indexOf('marker') !== -1) {
      container.insert('circle', ':first-child').attr({
        cx: vLinePointX,
        cy: yEdge - (xa.side !== 'top' ? xThickness : -xThickness),
        r: xThickness,
        fill: xColor
      }).classed('spikeline', true);
    }
  }
}

function hoverChanged(gd, evt, oldhoverdata) {
  // don't emit any events if nothing changed
  if (!oldhoverdata || oldhoverdata.length !== gd._hoverdata.length) return true;

  for (var i = oldhoverdata.length - 1; i >= 0; i--) {
    var oldPt = oldhoverdata[i];
    var newPt = gd._hoverdata[i];

    if (oldPt.curveNumber !== newPt.curveNumber || String(oldPt.pointNumber) !== String(newPt.pointNumber) || String(oldPt.pointNumbers) !== String(newPt.pointNumbers)) {
      return true;
    }
  }

  return false;
}

function spikesChanged(gd, oldspikepoints) {
  // don't relayout the plot because of new spikelines if spikelines points didn't change
  if (!oldspikepoints) return true;
  if (oldspikepoints.vLinePoint !== gd._spikepoints.vLinePoint || oldspikepoints.hLinePoint !== gd._spikepoints.hLinePoint) return true;
  return false;
}

function plainText(s, len) {
  return svg_text_utils.plainText(s || '', {
    len: len,
    allowedTags: ['br', 'sub', 'sup', 'b', 'i', 'em']
  });
}

function orderRangePoints(hoverData, hovermode) {
  var axLetter = hovermode.charAt(0);
  var first = [];
  var second = [];
  var last = [];

  for (var i = 0; i < hoverData.length; i++) {
    var d = hoverData[i];

    if (registry.traceIs(d.trace, 'bar-like') || registry.traceIs(d.trace, 'box-violin')) {
      last.push(d);
    } else if (d.trace[axLetter + 'period']) {
      second.push(d);
    } else {
      first.push(d);
    }
  }

  return first.concat(second).concat(last);
}

function getCoord(axLetter, winningPoint, fullLayout) {
  var ax = winningPoint[axLetter + 'a'];
  var val = winningPoint[axLetter + 'Val'];
  var cd0 = winningPoint.cd[0];
  if (ax.type === 'category') val = ax._categoriesMap[val];else if (ax.type === 'date') {
    var periodalignment = winningPoint.trace[axLetter + 'periodalignment'];

    if (periodalignment) {
      var d = winningPoint.cd[winningPoint.index];
      var start = d[axLetter + 'Start'];
      if (start === undefined) start = d[axLetter];
      var end = d[axLetter + 'End'];
      if (end === undefined) end = d[axLetter];
      var diff = end - start;

      if (periodalignment === 'end') {
        val += diff;
      } else if (periodalignment === 'middle') {
        val += diff / 2;
      }
    }

    val = ax.d2c(val);
  }

  if (cd0 && cd0.t && cd0.t.posLetter === ax._id) {
    if (fullLayout.boxmode === 'group' || fullLayout.violinmode === 'group') {
      val += cd0.t.dPos;
    }
  }

  return val;
} // Top/left hover offsets relative to graph div. As long as hover content is
// a sibling of the graph div, it will be positioned correctly relative to
// the offset parent, whatever that may be.


function getTopOffset(gd) {
  return gd.offsetTop + gd.clientTop;
}

function getLeftOffset(gd) {
  return gd.offsetLeft + gd.clientLeft;
}

function getBoundingClientRect(gd, node) {
  var fullLayout = gd._fullLayout;
  var rect = node.getBoundingClientRect();
  var x0 = rect.x;
  var y0 = rect.y;
  var x1 = x0 + rect.width;
  var y1 = y0 + rect.height;
  var A = lib_1.apply3DTransform(fullLayout._invTransform)(x0, y0);
  var B = lib_1.apply3DTransform(fullLayout._invTransform)(x1, y1);
  var Ax = A[0];
  var Ay = A[1];
  var Bx = B[0];
  var By = B[1];
  return {
    x: Ax,
    y: Ay,
    width: Bx - Ax,
    height: By - Ay,
    top: Math.min(Ay, By),
    left: Math.min(Ax, Bx),
    right: Math.max(Ax, Bx),
    bottom: Math.max(Ay, By)
  };
}

var hover$2 = {
  hover: hover_1,
  loneHover: loneHover
};

var isUnifiedHover$2 = helpers$9.isUnifiedHover;

var hoverlabel_defaults = function handleHoverLabelDefaults(contIn, contOut, coerce, opts) {
  opts = opts || {};
  var hasLegend = contOut.legend;

  function inheritFontAttr(attr) {
    if (!opts.font[attr]) {
      opts.font[attr] = hasLegend ? contOut.legend.font[attr] : contOut.font[attr];
    }
  } // In unified hover, inherit from layout.legend if available or layout


  if (contOut && isUnifiedHover$2(contOut.hovermode)) {
    if (!opts.font) opts.font = {};
    inheritFontAttr('size');
    inheritFontAttr('family');
    inheritFontAttr('color');

    if (hasLegend) {
      if (!opts.bgcolor) opts.bgcolor = color_1.combine(contOut.legend.bgcolor, contOut.paper_bgcolor);
      if (!opts.bordercolor) opts.bordercolor = contOut.legend.bordercolor;
    } else {
      if (!opts.bgcolor) opts.bgcolor = contOut.paper_bgcolor;
    }
  }

  coerce('hoverlabel.bgcolor', opts.bgcolor);
  coerce('hoverlabel.bordercolor', opts.bordercolor);
  coerce('hoverlabel.namelength', opts.namelength);
  lib_1.coerceFont(coerce, 'hoverlabel.font', opts.font);
  coerce('hoverlabel.align', opts.align);
};

var layout_global_defaults = function supplyLayoutGlobalDefaults(layoutIn, layoutOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(layoutIn, layoutOut, layout_attributes$3, attr, dflt);
  }

  hoverlabel_defaults(layoutIn, layoutOut, coerce);
};

var defaults$d = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {
  function coerce(attr, dflt) {
    return lib_1.coerce(traceIn, traceOut, attributes$l, attr, dflt);
  }

  var opts = lib_1.extendFlat({}, layout.hoverlabel);
  if (traceOut.hovertemplate) opts.namelength = -1;
  hoverlabel_defaults(traceIn, traceOut, coerce, opts);
};

var hovermode_defaults = function handleHoverModeDefaults(layoutIn, layoutOut) {
  function coerce(attr, dflt) {
    // don't coerce if it is already coerced in other place e.g. in cartesian defaults
    if (layoutOut[attr] !== undefined) return layoutOut[attr];
    return lib_1.coerce(layoutIn, layoutOut, layout_attributes$3, attr, dflt);
  }

  coerce('clickmode');
  return coerce('hovermode');
};

var layout_defaults$1 = function supplyLayoutDefaults(layoutIn, layoutOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(layoutIn, layoutOut, layout_attributes$3, attr, dflt);
  }

  var hoverMode = hovermode_defaults(layoutIn, layoutOut);

  if (hoverMode) {
    coerce('hoverdistance');
    coerce('spikedistance');
  }

  var dragMode = coerce('dragmode');
  if (dragMode === 'select') coerce('selectdirection'); // if only mapbox or geo subplots is present on graph,
  // reset 'zoom' dragmode to 'pan' until 'zoom' is implemented,
  // so that the correct modebar button is active

  var hasMapbox = layoutOut._has('mapbox');

  var hasGeo = layoutOut._has('geo');

  var len = layoutOut._basePlotModules.length;

  if (layoutOut.dragmode === 'zoom' && ((hasMapbox || hasGeo) && len === 1 || hasMapbox && hasGeo && len === 2)) {
    layoutOut.dragmode = 'pan';
  }

  hoverlabel_defaults(layoutIn, layoutOut, coerce);
  lib_1.coerceFont(coerce, 'hoverlabel.grouptitlefont', layoutOut.hoverlabel.font);
};

var calc$2 = function calc(gd) {
  var calcdata = gd.calcdata;
  var fullLayout = gd._fullLayout;

  function makeCoerceHoverInfo(trace) {
    return function (val) {
      return lib_1.coerceHoverinfo({
        hoverinfo: val
      }, {
        _module: trace._module
      }, fullLayout);
    };
  }

  for (var i = 0; i < calcdata.length; i++) {
    var cd = calcdata[i];
    var trace = cd[0].trace; // don't include hover calc fields for pie traces
    // as calcdata items might be sorted by value and
    // won't match the data array order.

    if (registry.traceIs(trace, 'pie-like')) continue;
    var fillFn = registry.traceIs(trace, '2dMap') ? paste : lib_1.fillArray;
    fillFn(trace.hoverinfo, cd, 'hi', makeCoerceHoverInfo(trace));
    if (trace.hovertemplate) fillFn(trace.hovertemplate, cd, 'ht');
    if (!trace.hoverlabel) continue;
    fillFn(trace.hoverlabel.bgcolor, cd, 'hbg');
    fillFn(trace.hoverlabel.bordercolor, cd, 'hbc');
    fillFn(trace.hoverlabel.font.size, cd, 'hts');
    fillFn(trace.hoverlabel.font.color, cd, 'htc');
    fillFn(trace.hoverlabel.font.family, cd, 'htf');
    fillFn(trace.hoverlabel.namelength, cd, 'hnl');
    fillFn(trace.hoverlabel.align, cd, 'hta');
  }
};

function paste(traceAttr, cd, cdAttr, fn) {
  fn = fn || lib_1.identity;

  if (Array.isArray(traceAttr)) {
    cd[0][cdAttr] = fn(traceAttr);
  }
}

var hover$1 = hover$2.hover;

var click$1 = function click(gd, evt, subplot) {
  var annotationsDone = registry.getComponentMethod('annotations', 'onClick')(gd, gd._hoverdata); // fallback to fail-safe in case the plot type's hover method doesn't pass the subplot.
  // Ternary, for example, didn't, but it was caught because tested.

  if (subplot !== undefined) {
    // The true flag at the end causes it to re-run the hover computation to figure out *which*
    // point is being clicked. Without this, clicking is somewhat unreliable.
    hover$1(gd, evt, subplot, true);
  }

  function emitClick() {
    gd.emit('plotly_click', {
      points: gd._hoverdata,
      event: evt
    });
  }

  if (gd._hoverdata && evt && evt.target) {
    if (annotationsDone && annotationsDone.then) {
      annotationsDone.then(emitClick);
    } else emitClick(); // why do we get a double event without this???


    if (evt.stopImmediatePropagation) evt.stopImmediatePropagation();
  }
};

var fx = {
  moduleType: 'component',
  name: 'fx',
  constants: constants$b,
  schema: {
    layout: layout_attributes$3
  },
  attributes: attributes$l,
  layoutAttributes: layout_attributes$3,
  supplyLayoutGlobalDefaults: layout_global_defaults,
  supplyDefaults: defaults$d,
  supplyLayoutDefaults: layout_defaults$1,
  calc: calc$2,
  getDistanceFunction: helpers$9.getDistanceFunction,
  getClosest: helpers$9.getClosest,
  inbox: helpers$9.inbox,
  quadrature: helpers$9.quadrature,
  appendArrayPointValue: helpers$9.appendArrayPointValue,
  castHoverOption: castHoverOption,
  castHoverinfo: castHoverinfo,
  hover: hover$2.hover,
  unhover: dragelement.unhover,
  loneHover: hover$2.loneHover,
  loneUnhover: loneUnhover,
  click: click$1
};

function loneUnhover(containerOrSelection) {
  // duck type whether the arg is a d3 selection because ie9 doesn't
  // handle instanceof like modern browsers do.
  var selection = lib_1.isD3Selection(containerOrSelection) ? containerOrSelection : d3.select(containerOrSelection);
  selection.selectAll('g.hovertext').remove();
  selection.selectAll('.spikeline').remove();
} // helpers for traces that use Fx.loneHover


function castHoverOption(trace, ptNumber, attr) {
  return lib_1.castOption(trace, ptNumber, 'hoverlabel.' + attr);
}

function castHoverinfo(trace, fullLayout, ptNumber) {
  function _coerce(val) {
    return lib_1.coerceHoverinfo({
      hoverinfo: val
    }, {
      _module: trace._module
    }, fullLayout);
  }

  return lib_1.castOption(trace, ptNumber, 'hoverinfo', _coerce);
}

var helpers$6 = createCommonjsModule(function (module, exports) {

  exports.selectMode = function (dragmode) {
    return dragmode === 'lasso' || dragmode === 'select';
  };

  exports.drawMode = function (dragmode) {
    return dragmode === 'drawclosedpath' || dragmode === 'drawopenpath' || dragmode === 'drawline' || dragmode === 'drawrect' || dragmode === 'drawcircle';
  };

  exports.openMode = function (dragmode) {
    return dragmode === 'drawline' || dragmode === 'drawopenpath';
  };

  exports.rectMode = function (dragmode) {
    return dragmode === 'select' || dragmode === 'drawline' || dragmode === 'drawrect' || dragmode === 'drawcircle';
  };

  exports.freeMode = function (dragmode) {
    return dragmode === 'lasso' || dragmode === 'drawclosedpath' || dragmode === 'drawopenpath';
  };

  exports.selectingOrDrawing = function (dragmode) {
    return exports.freeMode(dragmode) || exports.rectMode(dragmode);
  };
});

/**
 * Clear gl frame (if any). This is a common pattern as
 * we usually set `preserveDrawingBuffer: true` during
 * gl context creation (e.g. via `reglUtils.prepare`).
 *
 * @param {DOM node or object} gd : graph div object
 */

var clear_gl_canvases = function clearGlCanvases(gd) {
  var fullLayout = gd._fullLayout;

  if (fullLayout._glcanvas && fullLayout._glcanvas.size()) {
    fullLayout._glcanvas.each(function (d) {
      if (d.regl) d.regl.clear({
        color: true,
        depth: true
      });
    });
  }
};

var ploticon = {
  'undo': {
    'width': 857.1,
    'height': 1000,
    'path': 'm857 350q0-87-34-166t-91-137-137-92-166-34q-96 0-183 41t-147 114q-4 6-4 13t5 11l76 77q6 5 14 5 9-1 13-7 41-53 100-82t126-29q58 0 110 23t92 61 61 91 22 111-22 111-61 91-92 61-110 23q-55 0-105-20t-90-57l77-77q17-16 8-38-10-23-33-23h-250q-15 0-25 11t-11 25v250q0 24 22 33 22 10 39-8l72-72q60 57 137 88t159 31q87 0 166-34t137-92 91-137 34-166z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'home': {
    'width': 928.6,
    'height': 1000,
    'path': 'm786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'camera-retro': {
    'width': 1000,
    'height': 1000,
    'path': 'm518 386q0 8-5 13t-13 5q-37 0-63-27t-26-63q0-8 5-13t13-5 12 5 5 13q0 23 16 38t38 16q8 0 13 5t5 13z m125-73q0-59-42-101t-101-42-101 42-42 101 42 101 101 42 101-42 42-101z m-572-320h858v71h-858v-71z m643 320q0 89-62 152t-152 62-151-62-63-152 63-151 151-63 152 63 62 151z m-571 358h214v72h-214v-72z m-72-107h858v143h-462l-36-71h-360v-72z m929 143v-714q0-30-21-51t-50-21h-858q-29 0-50 21t-21 51v714q0 30 21 51t50 21h858q29 0 50-21t21-51z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'zoombox': {
    'width': 1000,
    'height': 1000,
    'path': 'm1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'pan': {
    'width': 1000,
    'height': 1000,
    'path': 'm1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'zoom_plus': {
    'width': 875,
    'height': 1000,
    'path': 'm1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'zoom_minus': {
    'width': 875,
    'height': 1000,
    'path': 'm0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'autoscale': {
    'width': 1000,
    'height': 1000,
    'path': 'm250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'tooltip_basic': {
    'width': 1500,
    'height': 1000,
    'path': 'm375 725l0 0-375-375 375-374 0-1 1125 0 0 750-1125 0z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'tooltip_compare': {
    'width': 1125,
    'height': 1000,
    'path': 'm187 786l0 2-187-188 188-187 0 0 937 0 0 373-938 0z m0-499l0 1-187-188 188-188 0 0 937 0 0 376-938-1z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'plotlylogo': {
    'width': 1542,
    'height': 1000,
    'path': 'm0-10h182v-140h-182v140z m228 146h183v-286h-183v286z m225 714h182v-1000h-182v1000z m225-285h182v-715h-182v715z m225 142h183v-857h-183v857z m231-428h182v-429h-182v429z m225-291h183v-138h-183v138z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'z-axis': {
    'width': 1000,
    'height': 1000,
    'path': 'm833 5l-17 108v41l-130-65 130-66c0 0 0 38 0 39 0-1 36-14 39-25 4-15-6-22-16-30-15-12-39-16-56-20-90-22-187-23-279-23-261 0-341 34-353 59 3 60 228 110 228 110-140-8-351-35-351-116 0-120 293-142 474-142 155 0 477 22 477 142 0 50-74 79-163 96z m-374 94c-58-5-99-21-99-40 0-24 65-43 144-43 79 0 143 19 143 43 0 19-42 34-98 40v216h87l-132 135-133-135h88v-216z m167 515h-136v1c16 16 31 34 46 52l84 109v54h-230v-71h124v-1c-16-17-28-32-44-51l-89-114v-51h245v72z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  '3d_rotate': {
    'width': 1000,
    'height': 1000,
    'path': 'm922 660c-5 4-9 7-14 11-359 263-580-31-580-31l-102 28 58-400c0 1 1 1 2 2 118 108 351 249 351 249s-62 27-100 42c88 83 222 183 347 122 16-8 30-17 44-27-2 1-4 2-6 4z m36-329c0 0 64 229-88 296-62 27-124 14-175-11 157-78 225-208 249-266 8-19 11-31 11-31 2 5 6 15 11 32-5-13-8-20-8-20z m-775-239c70-31 117-50 198-32-121 80-199 346-199 346l-96-15-58-12c0 0 55-226 155-287z m603 133l-317-139c0 0 4-4 19-14 7-5 24-15 24-15s-177-147-389 4c235-287 536-112 536-112l31-22 100 299-4-1z m-298-153c6-4 14-9 24-15 0 0-17 10-24 15z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'camera': {
    'width': 1000,
    'height': 1000,
    'path': 'm500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'movie': {
    'width': 1000,
    'height': 1000,
    'path': 'm938 413l-188-125c0 37-17 71-44 94 64 38 107 107 107 187 0 121-98 219-219 219-121 0-219-98-219-219 0-61 25-117 66-156h-115c30 33 49 76 49 125 0 103-84 187-187 187s-188-84-188-187c0-57 26-107 65-141-38-22-65-62-65-109v-250c0-70 56-126 125-126h500c69 0 125 56 125 126l188-126c34 0 62 28 62 63v375c0 35-28 63-62 63z m-750 0c-69 0-125 56-125 125s56 125 125 125 125-56 125-125-56-125-125-125z m406-1c-87 0-157 70-157 157 0 86 70 156 157 156s156-70 156-156-70-157-156-157z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'question': {
    'width': 857.1,
    'height': 1000,
    'path': 'm500 82v107q0 8-5 13t-13 5h-107q-8 0-13-5t-5-13v-107q0-8 5-13t13-5h107q8 0 13 5t5 13z m143 375q0 49-31 91t-77 65-95 23q-136 0-207-119-9-14 4-24l74-55q4-4 10-4 9 0 14 7 30 38 48 51 19 14 48 14 27 0 48-15t21-33q0-21-11-34t-38-25q-35-16-65-48t-29-70v-20q0-8 5-13t13-5h107q8 0 13 5t5 13q0 10 12 27t30 28q18 10 28 16t25 19 25 27 16 34 7 45z m214-107q0-117-57-215t-156-156-215-58-216 58-155 156-58 215 58 215 155 156 216 58 215-58 156-156 57-215z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'disk': {
    'width': 857.1,
    'height': 1000,
    'path': 'm214-7h429v214h-429v-214z m500 0h72v500q0 8-6 21t-11 20l-157 156q-5 6-19 12t-22 5v-232q0-22-15-38t-38-16h-322q-22 0-37 16t-16 38v232h-72v-714h72v232q0 22 16 38t37 16h465q22 0 38-16t15-38v-232z m-214 518v178q0 8-5 13t-13 5h-107q-7 0-13-5t-5-13v-178q0-8 5-13t13-5h107q7 0 13 5t5 13z m357-18v-518q0-22-15-38t-38-16h-750q-23 0-38 16t-16 38v750q0 22 16 38t38 16h517q23 0 50-12t42-26l156-157q16-15 27-42t11-49z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'drawopenpath': {
    'width': 70,
    'height': 70,
    'path': 'M33.21,85.65a7.31,7.31,0,0,1-2.59-.48c-8.16-3.11-9.27-19.8-9.88-41.3-.1-3.58-.19-6.68-.35-9-.15-2.1-.67-3.48-1.43-3.79-2.13-.88-7.91,2.32-12,5.86L3,32.38c1.87-1.64,11.55-9.66,18.27-6.9,2.13.87,4.75,3.14,5.17,9,.17,2.43.26,5.59.36,9.25a224.17,224.17,0,0,0,1.5,23.4c1.54,10.76,4,12.22,4.48,12.4.84.32,2.79-.46,5.76-3.59L43,80.07C41.53,81.57,37.68,85.64,33.21,85.65ZM74.81,69a11.34,11.34,0,0,0,6.09-6.72L87.26,44.5,74.72,32,56.9,38.35c-2.37.86-5.57,3.42-6.61,6L38.65,72.14l8.42,8.43ZM55,46.27a7.91,7.91,0,0,1,3.64-3.17l14.8-5.3,8,8L76.11,60.6l-.06.19a6.37,6.37,0,0,1-3,3.43L48.25,74.59,44.62,71Zm16.57,7.82A6.9,6.9,0,1,0,64.64,61,6.91,6.91,0,0,0,71.54,54.09Zm-4.05,0a2.85,2.85,0,1,1-2.85-2.85A2.86,2.86,0,0,1,67.49,54.09Zm-4.13,5.22L60.5,56.45,44.26,72.7l2.86,2.86ZM97.83,35.67,84.14,22l-8.57,8.57L89.26,44.24Zm-13.69-8,8,8-2.85,2.85-8-8Z',
    'transform': 'matrix(1 0 0 1 -15 -15)'
  },
  'drawclosedpath': {
    'width': 90,
    'height': 90,
    'path': 'M88.41,21.12a26.56,26.56,0,0,0-36.18,0l-2.07,2-2.07-2a26.57,26.57,0,0,0-36.18,0,23.74,23.74,0,0,0,0,34.8L48,90.12a3.22,3.22,0,0,0,4.42,0l36-34.21a23.73,23.73,0,0,0,0-34.79ZM84,51.24,50.16,83.35,16.35,51.25a17.28,17.28,0,0,1,0-25.47,20,20,0,0,1,27.3,0l4.29,4.07a3.23,3.23,0,0,0,4.44,0l4.29-4.07a20,20,0,0,1,27.3,0,17.27,17.27,0,0,1,0,25.46ZM66.76,47.68h-33v6.91h33ZM53.35,35H46.44V68h6.91Z',
    'transform': 'matrix(1 0 0 1 -5 -5)'
  },
  'lasso': {
    'width': 1031,
    'height': 1000,
    'path': 'm1018 538c-36 207-290 336-568 286-277-48-473-256-436-463 10-57 36-108 76-151-13-66 11-137 68-183 34-28 75-41 114-42l-55-70 0 0c-2-1-3-2-4-3-10-14-8-34 5-45 14-11 34-8 45 4 1 1 2 3 2 5l0 0 113 140c16 11 31 24 45 40 4 3 6 7 8 11 48-3 100 0 151 9 278 48 473 255 436 462z m-624-379c-80 14-149 48-197 96 42 42 109 47 156 9 33-26 47-66 41-105z m-187-74c-19 16-33 37-39 60 50-32 109-55 174-68-42-25-95-24-135 8z m360 75c-34-7-69-9-102-8 8 62-16 128-68 170-73 59-175 54-244-5-9 20-16 40-20 61-28 159 121 317 333 354s407-60 434-217c28-159-121-318-333-355z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'selectbox': {
    'width': 1000,
    'height': 1000,
    'path': 'm0 850l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-285l0-143 143 0 0 143-143 0z m857 0l0-143 143 0 0 143-143 0z m-857-286l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z m285 0l0-143 143 0 0 143-143 0z m286 0l0-143 143 0 0 143-143 0z',
    'transform': 'matrix(1 0 0 -1 0 850)'
  },
  'drawline': {
    'width': 70,
    'height': 70,
    'path': 'M60.64,62.3a11.29,11.29,0,0,0,6.09-6.72l6.35-17.72L60.54,25.31l-17.82,6.4c-2.36.86-5.57,3.41-6.6,6L24.48,65.5l8.42,8.42ZM40.79,39.63a7.89,7.89,0,0,1,3.65-3.17l14.79-5.31,8,8L61.94,54l-.06.19a6.44,6.44,0,0,1-3,3.43L34.07,68l-3.62-3.63Zm16.57,7.81a6.9,6.9,0,1,0-6.89,6.9A6.9,6.9,0,0,0,57.36,47.44Zm-4,0a2.86,2.86,0,1,1-2.85-2.85A2.86,2.86,0,0,1,53.32,47.44Zm-4.13,5.22L46.33,49.8,30.08,66.05l2.86,2.86ZM83.65,29,70,15.34,61.4,23.9,75.09,37.59ZM70,21.06l8,8-2.84,2.85-8-8ZM87,80.49H10.67V87H87Z',
    'transform': 'matrix(1 0 0 1 -15 -15)'
  },
  'drawrect': {
    'width': 80,
    'height': 80,
    'path': 'M78,22V79H21V22H78m9-9H12V88H87V13ZM68,46.22H31V54H68ZM53,32H45.22V69H53Z',
    'transform': 'matrix(1 0 0 1 -10 -10)'
  },
  'drawcircle': {
    'width': 80,
    'height': 80,
    'path': 'M50,84.72C26.84,84.72,8,69.28,8,50.3S26.84,15.87,50,15.87,92,31.31,92,50.3,73.16,84.72,50,84.72Zm0-60.59c-18.6,0-33.74,11.74-33.74,26.17S31.4,76.46,50,76.46,83.74,64.72,83.74,50.3,68.6,24.13,50,24.13Zm17.15,22h-34v7.11h34Zm-13.8-13H46.24v34h7.11Z',
    'transform': 'matrix(1 0 0 1 -10 -10)'
  },
  'eraseshape': {
    'width': 80,
    'height': 80,
    'path': 'M82.77,78H31.85L6,49.57,31.85,21.14H82.77a8.72,8.72,0,0,1,8.65,8.77V69.24A8.72,8.72,0,0,1,82.77,78ZM35.46,69.84H82.77a.57.57,0,0,0,.49-.6V29.91a.57.57,0,0,0-.49-.61H35.46L17,49.57Zm32.68-34.7-24,24,5,5,24-24Zm-19,.53-5,5,24,24,5-5Z',
    'transform': 'matrix(1 0 0 1 -10 -10)'
  },
  'spikeline': {
    'width': 1000,
    'height': 1000,
    'path': 'M512 409c0-57-46-104-103-104-57 0-104 47-104 104 0 57 47 103 104 103 57 0 103-46 103-103z m-327-39l92 0 0 92-92 0z m-185 0l92 0 0 92-92 0z m370-186l92 0 0 93-92 0z m0-184l92 0 0 92-92 0z',
    'transform': 'matrix(1.5 0 0 -1.5 0 850)'
  },
  'pencil': {
    'width': 1792,
    'height': 1792,
    'path': 'M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z',
    'transform': 'matrix(1 0 0 1 0 1)'
  },
  'newplotlylogo': {
    'name': 'newplotlylogo',
    'svg': '<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 132 132\'><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id=\'symbol\'><rect class=\'cls-1\' width=\'132\' height=\'132\' rx=\'6\' ry=\'6\'/><circle class=\'cls-2\' cx=\'78\' cy=\'54\' r=\'6\'/><circle class=\'cls-2\' cx=\'102\' cy=\'30\' r=\'6\'/><circle class=\'cls-2\' cx=\'78\' cy=\'30\' r=\'6\'/><circle class=\'cls-2\' cx=\'54\' cy=\'30\' r=\'6\'/><circle class=\'cls-2\' cx=\'30\' cy=\'30\' r=\'6\'/><circle class=\'cls-2\' cx=\'30\' cy=\'54\' r=\'6\'/><path class=\'cls-3\' d=\'M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z\'/><path class=\'cls-3\' d=\'M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z\'/><path class=\'cls-3\' d=\'M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z\'/><path class=\'cls-3\' d=\'M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z\'/></g></svg>'
  }
};

var parseSvgPath = parse;
/**
 * expected argument lengths
 * @type {Object}
 */

var length = {
  a: 7,
  c: 6,
  h: 1,
  l: 2,
  m: 2,
  q: 4,
  s: 4,
  t: 2,
  v: 1,
  z: 0
};
/**
 * segment pattern
 * @type {RegExp}
 */

var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;
/**
 * parse an svg path data string. Generates an Array
 * of commands where each command is an Array of the
 * form `[command, arg1, arg2, ...]`
 *
 * @param {String} path
 * @return {Array}
 */

function parse(path) {
  var data = [];
  path.replace(segment, function (_, command, args) {
    var type = command.toLowerCase();
    args = parseValues(args); // overloaded moveTo

    if (type == 'm' && args.length > 2) {
      data.push([command].concat(args.splice(0, 2)));
      type = 'l';
      command = command == 'm' ? 'l' : 'L';
    }

    while (true) {
      if (args.length == length[type]) {
        args.unshift(command);
        return data.push(args);
      }

      if (args.length < length[type]) throw new Error('malformed path data');
      data.push([command].concat(args.splice(0, length[type])));
    }
  });
  return data;
}

var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;

function parseValues(args) {
  var numbers = args.match(number);
  return numbers ? numbers.map(Number) : [];
}

var CIRCLE_SIDES = 32; // should be divisible by 4

var constants$8 = {
  CIRCLE_SIDES: CIRCLE_SIDES,
  i000: 0,
  i090: CIRCLE_SIDES / 4,
  i180: CIRCLE_SIDES / 2,
  i270: CIRCLE_SIDES / 4 * 3,
  cos45: Math.cos(Math.PI / 4),
  sin45: Math.sin(Math.PI / 4),
  SQRT2: Math.sqrt(2)
};

var strTranslate$7 = lib_1.strTranslate; // in v3 (once log ranges are fixed),
// we'll be able to p2r here for all axis types

function p2r$2(ax, v) {
  switch (ax.type) {
    case 'log':
      return ax.p2d(v);

    case 'date':
      return ax.p2r(v, 0, ax.calendar);

    default:
      return ax.p2r(v);
  }
}

function r2p$1(ax, v) {
  switch (ax.type) {
    case 'log':
      return ax.d2p(v);

    case 'date':
      return ax.r2p(v, 0, ax.calendar);

    default:
      return ax.r2p(v);
  }
}

function axValue$1(ax) {
  var index = ax._id.charAt(0) === 'y' ? 1 : 0;
  return function (v) {
    return p2r$2(ax, v[index]);
  };
}

function getTransform$1(plotinfo) {
  return strTranslate$7(plotinfo.xaxis._offset, plotinfo.yaxis._offset);
}

var helpers$5 = {
  p2r: p2r$2,
  r2p: r2p$1,
  axValue: axValue$1,
  getTransform: getTransform$1
};

var helpers$4 = createCommonjsModule(function (module, exports) {

  var CIRCLE_SIDES = constants$8.CIRCLE_SIDES;
  var SQRT2 = constants$8.SQRT2;
  var p2r = helpers$5.p2r;
  var r2p = helpers$5.r2p;
  var iC = [0, 3, 4, 5, 6, 1, 2];
  var iQS = [0, 3, 4, 1, 2];

  exports.writePaths = function (polygons) {
    var nI = polygons.length;
    if (!nI) return 'M0,0Z';
    var str = '';

    for (var i = 0; i < nI; i++) {
      var nJ = polygons[i].length;

      for (var j = 0; j < nJ; j++) {
        var w = polygons[i][j][0];

        if (w === 'Z') {
          str += 'Z';
        } else {
          var nK = polygons[i][j].length;

          for (var k = 0; k < nK; k++) {
            var realK = k;

            if (w === 'Q' || w === 'S') {
              realK = iQS[k];
            } else if (w === 'C') {
              realK = iC[k];
            }

            str += polygons[i][j][realK];

            if (k > 0 && k < nK - 1) {
              str += ',';
            }
          }
        }
      }
    }

    return str;
  };

  exports.readPaths = function (str, gd, plotinfo, isActiveShape) {
    var cmd = parseSvgPath(str);
    var polys = [];
    var n = -1;

    var newPoly = function () {
      n++;
      polys[n] = [];
    };

    var k;
    var x = 0;
    var y = 0;
    var initX;
    var initY;

    var recStart = function () {
      initX = x;
      initY = y;
    };

    recStart();

    for (var i = 0; i < cmd.length; i++) {
      var newPos = [];
      var x1, x2, y1, y2; // i.e. extra params for curves

      var c = cmd[i][0];
      var w = c;

      switch (c) {
        case 'M':
          newPoly();
          x = +cmd[i][1];
          y = +cmd[i][2];
          newPos.push([w, x, y]);
          recStart();
          break;

        case 'Q':
        case 'S':
          x1 = +cmd[i][1];
          y1 = +cmd[i][2];
          x = +cmd[i][3];
          y = +cmd[i][4];
          newPos.push([w, x, y, x1, y1]); // -> iQS order

          break;

        case 'C':
          x1 = +cmd[i][1];
          y1 = +cmd[i][2];
          x2 = +cmd[i][3];
          y2 = +cmd[i][4];
          x = +cmd[i][5];
          y = +cmd[i][6];
          newPos.push([w, x, y, x1, y1, x2, y2]); // -> iC order

          break;

        case 'T':
        case 'L':
          x = +cmd[i][1];
          y = +cmd[i][2];
          newPos.push([w, x, y]);
          break;

        case 'H':
          w = 'L'; // convert to line (for now)

          x = +cmd[i][1];
          newPos.push([w, x, y]);
          break;

        case 'V':
          w = 'L'; // convert to line (for now)

          y = +cmd[i][1];
          newPos.push([w, x, y]);
          break;

        case 'A':
          w = 'L'; // convert to line to handle circle

          var rx = +cmd[i][1];
          var ry = +cmd[i][2];

          if (!+cmd[i][4]) {
            rx = -rx;
            ry = -ry;
          }

          var cenX = x - rx;
          var cenY = y;

          for (k = 1; k <= CIRCLE_SIDES / 2; k++) {
            var t = 2 * Math.PI * k / CIRCLE_SIDES;
            newPos.push([w, cenX + rx * Math.cos(t), cenY + ry * Math.sin(t)]);
          }

          break;

        case 'Z':
          if (x !== initX || y !== initY) {
            x = initX;
            y = initY;
            newPos.push([w, x, y]);
          }

          break;
      }

      var domain = (plotinfo || {}).domain;
      var size = gd._fullLayout._size;
      var xPixelSized = plotinfo && plotinfo.xsizemode === 'pixel';
      var yPixelSized = plotinfo && plotinfo.ysizemode === 'pixel';
      var noOffset = isActiveShape === false;

      for (var j = 0; j < newPos.length; j++) {
        for (k = 0; k + 2 < 7; k += 2) {
          var _x = newPos[j][k + 1];
          var _y = newPos[j][k + 2];
          if (_x === undefined || _y === undefined) continue; // keep track of end point for Z

          x = _x;
          y = _y;

          if (plotinfo) {
            if (plotinfo.xaxis && plotinfo.xaxis.p2r) {
              if (noOffset) _x -= plotinfo.xaxis._offset;

              if (xPixelSized) {
                _x = r2p(plotinfo.xaxis, plotinfo.xanchor) + _x;
              } else {
                _x = p2r(plotinfo.xaxis, _x);
              }
            } else {
              if (noOffset) _x -= size.l;
              if (domain) _x = domain.x[0] + _x / size.w;else _x = _x / size.w;
            }

            if (plotinfo.yaxis && plotinfo.yaxis.p2r) {
              if (noOffset) _y -= plotinfo.yaxis._offset;

              if (yPixelSized) {
                _y = r2p(plotinfo.yaxis, plotinfo.yanchor) - _y;
              } else {
                _y = p2r(plotinfo.yaxis, _y);
              }
            } else {
              if (noOffset) _y -= size.t;
              if (domain) _y = domain.y[1] - _y / size.h;else _y = 1 - _y / size.h;
            }
          }

          newPos[j][k + 1] = _x;
          newPos[j][k + 2] = _y;
        }

        polys[n].push(newPos[j].slice());
      }
    }

    return polys;
  };

  function almostEq(a, b) {
    return Math.abs(a - b) <= 1e-6;
  }

  function dist(a, b) {
    var dx = b[1] - a[1];
    var dy = b[2] - a[2];
    return Math.sqrt(dx * dx + dy * dy);
  }

  exports.pointsShapeRectangle = function (cell) {
    var len = cell.length;
    if (len !== 5) return false;

    for (var j = 1; j < 3; j++) {
      var e01 = cell[0][j] - cell[1][j];
      var e32 = cell[3][j] - cell[2][j];
      if (!almostEq(e01, e32)) return false;
      var e03 = cell[0][j] - cell[3][j];
      var e12 = cell[1][j] - cell[2][j];
      if (!almostEq(e03, e12)) return false;
    } // N.B. rotated rectangles are not valid rects since rotation is not supported in shapes for now.


    if (!almostEq(cell[0][1], cell[1][1]) && !almostEq(cell[0][1], cell[3][1])) return false; // reject cases with zero area

    return !!(dist(cell[0], cell[1]) * dist(cell[0], cell[3]));
  };

  exports.pointsShapeEllipse = function (cell) {
    var len = cell.length;
    if (len !== CIRCLE_SIDES + 1) return false; // opposite diagonals should be the same

    len = CIRCLE_SIDES;

    for (var i = 0; i < len; i++) {
      var k = (len * 2 - i) % len;
      var k2 = (len / 2 + k) % len;
      var i2 = (len / 2 + i) % len;
      if (!almostEq(dist(cell[i], cell[i2]), dist(cell[k], cell[k2]))) return false;
    }

    return true;
  };

  exports.handleEllipse = function (isEllipse, start, end) {
    if (!isEllipse) return [start, end]; // i.e. case of line

    var pos = exports.ellipseOver({
      x0: start[0],
      y0: start[1],
      x1: end[0],
      y1: end[1]
    });
    var cx = (pos.x1 + pos.x0) / 2;
    var cy = (pos.y1 + pos.y0) / 2;
    var rx = (pos.x1 - pos.x0) / 2;
    var ry = (pos.y1 - pos.y0) / 2; // make a circle when one dimension is zero

    if (!rx) rx = ry = ry / SQRT2;
    if (!ry) ry = rx = rx / SQRT2;
    var cell = [];

    for (var i = 0; i < CIRCLE_SIDES; i++) {
      var t = i * 2 * Math.PI / CIRCLE_SIDES;
      cell.push([cx + rx * Math.cos(t), cy + ry * Math.sin(t)]);
    }

    return cell;
  };

  exports.ellipseOver = function (pos) {
    var x0 = pos.x0;
    var y0 = pos.y0;
    var x1 = pos.x1;
    var y1 = pos.y1;
    var dx = x1 - x0;
    var dy = y1 - y0;
    x0 -= dx;
    y0 -= dy;
    var cx = (x0 + x1) / 2;
    var cy = (y0 + y1) / 2;
    var scale = SQRT2;
    dx *= scale;
    dy *= scale;
    return {
      x0: cx - dx,
      y0: cy - dy,
      x1: cx + dx,
      y1: cy + dy
    };
  };
});

var drawMode$2 = helpers$6.drawMode;
var openMode$1 = helpers$6.openMode;
var i000$1 = constants$8.i000;
var i090$1 = constants$8.i090;
var i180$1 = constants$8.i180;
var i270$1 = constants$8.i270;
var cos45 = constants$8.cos45;
var sin45 = constants$8.sin45;
var p2r$1 = helpers$5.p2r;
var r2p = helpers$5.r2p;
var clearSelect$2 = handle_outline.clearSelect;
var readPaths$1 = helpers$4.readPaths;
var writePaths$1 = helpers$4.writePaths;
var ellipseOver = helpers$4.ellipseOver;

var newshapes = function newShapes(outlines, dragOptions) {
  if (!outlines.length) return;
  var e = outlines[0][0]; // pick first

  if (!e) return;
  var d = e.getAttribute('d');
  var gd = dragOptions.gd;
  var drwStyle = gd._fullLayout.newshape;
  var plotinfo = dragOptions.plotinfo;
  var xaxis = plotinfo.xaxis;
  var yaxis = plotinfo.yaxis;
  var xPaper = !!plotinfo.domain || !plotinfo.xaxis;
  var yPaper = !!plotinfo.domain || !plotinfo.yaxis;
  var isActiveShape = dragOptions.isActiveShape;
  var dragmode = dragOptions.dragmode;
  var shapes = (gd.layout || {}).shapes || [];

  if (!drawMode$2(dragmode) && isActiveShape !== undefined) {
    var id = gd._fullLayout._activeShapeIndex;

    if (id < shapes.length) {
      switch (gd._fullLayout.shapes[id].type) {
        case 'rect':
          dragmode = 'drawrect';
          break;

        case 'circle':
          dragmode = 'drawcircle';
          break;

        case 'line':
          dragmode = 'drawline';
          break;

        case 'path':
          var path = shapes[id].path || '';

          if (path[path.length - 1] === 'Z') {
            dragmode = 'drawclosedpath';
          } else {
            dragmode = 'drawopenpath';
          }

          break;
      }
    }
  }

  var isOpenMode = openMode$1(dragmode);
  var polygons = readPaths$1(d, gd, plotinfo, isActiveShape);
  var newShape = {
    editable: true,
    xref: xPaper ? 'paper' : xaxis._id,
    yref: yPaper ? 'paper' : yaxis._id,
    layer: drwStyle.layer,
    opacity: drwStyle.opacity,
    line: {
      color: drwStyle.line.color,
      width: drwStyle.line.width,
      dash: drwStyle.line.dash
    }
  };

  if (!isOpenMode) {
    newShape.fillcolor = drwStyle.fillcolor;
    newShape.fillrule = drwStyle.fillrule;
  }

  var cell; // line, rect and circle can be in one cell
  // only define cell if there is single cell

  if (polygons.length === 1) cell = polygons[0];

  if (cell && dragmode === 'drawrect') {
    newShape.type = 'rect';
    newShape.x0 = cell[0][1];
    newShape.y0 = cell[0][2];
    newShape.x1 = cell[2][1];
    newShape.y1 = cell[2][2];
  } else if (cell && dragmode === 'drawline') {
    newShape.type = 'line';
    newShape.x0 = cell[0][1];
    newShape.y0 = cell[0][2];
    newShape.x1 = cell[1][1];
    newShape.y1 = cell[1][2];
  } else if (cell && dragmode === 'drawcircle') {
    newShape.type = 'circle'; // an ellipse!

    var xA = cell[i000$1][1];
    var xB = cell[i090$1][1];
    var xC = cell[i180$1][1];
    var xD = cell[i270$1][1];
    var yA = cell[i000$1][2];
    var yB = cell[i090$1][2];
    var yC = cell[i180$1][2];
    var yD = cell[i270$1][2];
    var xDateOrLog = plotinfo.xaxis && (plotinfo.xaxis.type === 'date' || plotinfo.xaxis.type === 'log');
    var yDateOrLog = plotinfo.yaxis && (plotinfo.yaxis.type === 'date' || plotinfo.yaxis.type === 'log');

    if (xDateOrLog) {
      xA = r2p(plotinfo.xaxis, xA);
      xB = r2p(plotinfo.xaxis, xB);
      xC = r2p(plotinfo.xaxis, xC);
      xD = r2p(plotinfo.xaxis, xD);
    }

    if (yDateOrLog) {
      yA = r2p(plotinfo.yaxis, yA);
      yB = r2p(plotinfo.yaxis, yB);
      yC = r2p(plotinfo.yaxis, yC);
      yD = r2p(plotinfo.yaxis, yD);
    }

    var x0 = (xB + xD) / 2;
    var y0 = (yA + yC) / 2;
    var rx = (xD - xB + xC - xA) / 2;
    var ry = (yD - yB + yC - yA) / 2;
    var pos = ellipseOver({
      x0: x0,
      y0: y0,
      x1: x0 + rx * cos45,
      y1: y0 + ry * sin45
    });

    if (xDateOrLog) {
      pos.x0 = p2r$1(plotinfo.xaxis, pos.x0);
      pos.x1 = p2r$1(plotinfo.xaxis, pos.x1);
    }

    if (yDateOrLog) {
      pos.y0 = p2r$1(plotinfo.yaxis, pos.y0);
      pos.y1 = p2r$1(plotinfo.yaxis, pos.y1);
    }

    newShape.x0 = pos.x0;
    newShape.y0 = pos.y0;
    newShape.x1 = pos.x1;
    newShape.y1 = pos.y1;
  } else {
    newShape.type = 'path';
    if (xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);
    newShape.path = writePaths$1(polygons);
    cell = null;
  }

  clearSelect$2(gd);
  var editHelpers = dragOptions.editHelpers;
  var modifyItem = (editHelpers || {}).modifyItem;
  var allShapes = [];

  for (var q = 0; q < shapes.length; q++) {
    var beforeEdit = gd._fullLayout.shapes[q];
    allShapes[q] = beforeEdit._input;

    if (isActiveShape !== undefined && q === gd._fullLayout._activeShapeIndex) {
      var afterEdit = newShape;

      switch (beforeEdit.type) {
        case 'line':
        case 'rect':
        case 'circle':
          modifyItem('x0', afterEdit.x0);
          modifyItem('x1', afterEdit.x1);
          modifyItem('y0', afterEdit.y0);
          modifyItem('y1', afterEdit.y1);
          break;

        case 'path':
          modifyItem('path', afterEdit.path);
          break;
      }
    }
  }

  if (isActiveShape === undefined) {
    allShapes.push(newShape); // add new shape

    return allShapes;
  }

  return editHelpers ? editHelpers.getUpdateObj() : {};
};

function fixDatesForPaths(polygons, xaxis, yaxis) {
  var xIsDate = xaxis.type === 'date';
  var yIsDate = yaxis.type === 'date';
  if (!xIsDate && !yIsDate) return polygons;

  for (var i = 0; i < polygons.length; i++) {
    for (var j = 0; j < polygons[i].length; j++) {
      for (var k = 0; k + 2 < polygons[i][j].length; k += 2) {
        if (xIsDate) polygons[i][j][k + 1] = polygons[i][j][k + 1].replace(' ', '_');
        if (yIsDate) polygons[i][j][k + 2] = polygons[i][j][k + 2].replace(' ', '_');
      }
    }
  }

  return polygons;
}

var drawMode$1 = helpers$6.drawMode;
var i000 = constants$8.i000;
var i090 = constants$8.i090;
var i180 = constants$8.i180;
var i270 = constants$8.i270;
var clearOutlineControllers$1 = handle_outline.clearOutlineControllers;
var pointsShapeRectangle = helpers$4.pointsShapeRectangle;
var pointsShapeEllipse = helpers$4.pointsShapeEllipse;
var writePaths = helpers$4.writePaths;

var display_outlines = function displayOutlines(polygons, outlines, dragOptions, nCalls) {
  if (!nCalls) nCalls = 0;
  var gd = dragOptions.gd;

  function redraw() {
    // recursive call
    displayOutlines(polygons, outlines, dragOptions, nCalls++);

    if (pointsShapeEllipse(polygons[0])) {
      update({
        redrawing: true
      });
    }
  }

  function update(opts) {
    dragOptions.isActiveShape = false; // i.e. to disable controllers

    var updateObject = newshapes(outlines, dragOptions);

    if (Object.keys(updateObject).length) {
      registry.call((opts || {}).redrawing ? 'relayout' : '_guiRelayout', gd, updateObject);
    }
  }

  var isActiveShape = dragOptions.isActiveShape;
  var fullLayout = gd._fullLayout;
  var zoomLayer = fullLayout._zoomlayer;
  var dragmode = dragOptions.dragmode;
  var isDrawMode = drawMode$1(dragmode);
  if (isDrawMode) gd._fullLayout._drawing = true;else if (gd._fullLayout._activeShapeIndex >= 0) clearOutlineControllers$1(gd); // make outline

  outlines.attr('d', writePaths(polygons)); // add controllers

  var vertexDragOptions;
  var shapeDragOptions;
  var indexI; // cell index

  var indexJ; // vertex or cell-controller index

  var copyPolygons;

  if (isActiveShape && !nCalls) {
    copyPolygons = recordPositions([], polygons);
    var g = zoomLayer.append('g').attr('class', 'outline-controllers');
    addVertexControllers(g);
    addShapeControllers();
  }

  function startDragVertex(evt) {
    indexI = +evt.srcElement.getAttribute('data-i');
    indexJ = +evt.srcElement.getAttribute('data-j');
    vertexDragOptions[indexI][indexJ].moveFn = moveVertexController;
  }

  function moveVertexController(dx, dy) {
    if (!polygons.length) return;
    var x0 = copyPolygons[indexI][indexJ][1];
    var y0 = copyPolygons[indexI][indexJ][2];
    var cell = polygons[indexI];
    var len = cell.length;

    if (pointsShapeRectangle(cell)) {
      for (var q = 0; q < len; q++) {
        if (q === indexJ) continue; // move other corners of rectangle

        var pos = cell[q];

        if (pos[1] === cell[indexJ][1]) {
          pos[1] = x0 + dx;
        }

        if (pos[2] === cell[indexJ][2]) {
          pos[2] = y0 + dy;
        }
      } // move the corner


      cell[indexJ][1] = x0 + dx;
      cell[indexJ][2] = y0 + dy;

      if (!pointsShapeRectangle(cell)) {
        // reject result to rectangles with ensure areas
        for (var j = 0; j < len; j++) {
          for (var k = 0; k < cell[j].length; k++) {
            cell[j][k] = copyPolygons[indexI][j][k];
          }
        }
      }
    } else {
      // other polylines
      cell[indexJ][1] = x0 + dx;
      cell[indexJ][2] = y0 + dy;
    }

    redraw();
  }

  function endDragVertexController() {
    update();
  }

  function removeVertex() {
    if (!polygons.length) return;
    if (!polygons[indexI]) return;
    if (!polygons[indexI].length) return;
    var newPolygon = [];

    for (var j = 0; j < polygons[indexI].length; j++) {
      if (j !== indexJ) {
        newPolygon.push(polygons[indexI][j]);
      }
    }

    if (newPolygon.length > 1 && !(newPolygon.length === 2 && newPolygon[1][0] === 'Z')) {
      if (indexJ === 0) {
        newPolygon[0][0] = 'M';
      }

      polygons[indexI] = newPolygon;
      redraw();
      update();
    }
  }

  function clickVertexController(numClicks, evt) {
    if (numClicks === 2) {
      indexI = +evt.srcElement.getAttribute('data-i');
      indexJ = +evt.srcElement.getAttribute('data-j');
      var cell = polygons[indexI];

      if (!pointsShapeRectangle(cell) && !pointsShapeEllipse(cell)) {
        removeVertex();
      }
    }
  }

  function addVertexControllers(g) {
    vertexDragOptions = [];

    for (var i = 0; i < polygons.length; i++) {
      var cell = polygons[i];
      var onRect = pointsShapeRectangle(cell);
      var onEllipse = !onRect && pointsShapeEllipse(cell);
      vertexDragOptions[i] = [];

      for (var j = 0; j < cell.length; j++) {
        if (cell[j][0] === 'Z') continue;

        if (onEllipse && j !== i000 && j !== i090 && j !== i180 && j !== i270) {
          continue;
        }

        var x = cell[j][1];
        var y = cell[j][2];
        var vertex = g.append('circle').classed('cursor-grab', true).attr('data-i', i).attr('data-j', j).attr('cx', x).attr('cy', y).attr('r', 4).style({
          'mix-blend-mode': 'luminosity',
          fill: 'black',
          stroke: 'white',
          'stroke-width': 1
        });
        vertexDragOptions[i][j] = {
          element: vertex.node(),
          gd: gd,
          prepFn: startDragVertex,
          doneFn: endDragVertexController,
          clickFn: clickVertexController
        };
        dragelement.init(vertexDragOptions[i][j]);
      }
    }
  }

  function moveShape(dx, dy) {
    if (!polygons.length) return;

    for (var i = 0; i < polygons.length; i++) {
      for (var j = 0; j < polygons[i].length; j++) {
        for (var k = 0; k + 2 < polygons[i][j].length; k += 2) {
          polygons[i][j][k + 1] = copyPolygons[i][j][k + 1] + dx;
          polygons[i][j][k + 2] = copyPolygons[i][j][k + 2] + dy;
        }
      }
    }
  }

  function moveShapeController(dx, dy) {
    moveShape(dx, dy);
    redraw();
  }

  function startDragShapeController(evt) {
    indexI = +evt.srcElement.getAttribute('data-i');
    if (!indexI) indexI = 0; // ensure non-existing move button get zero index

    shapeDragOptions[indexI].moveFn = moveShapeController;
  }

  function endDragShapeController() {
    update();
  }

  function addShapeControllers() {
    shapeDragOptions = [];
    if (!polygons.length) return;
    var i = 0;
    shapeDragOptions[i] = {
      element: outlines[0][0],
      gd: gd,
      prepFn: startDragShapeController,
      doneFn: endDragShapeController
    };
    dragelement.init(shapeDragOptions[i]);
  }
};

function recordPositions(polygonsOut, polygonsIn) {
  for (var i = 0; i < polygonsIn.length; i++) {
    var cell = polygonsIn[i];
    polygonsOut[i] = [];

    for (var j = 0; j < cell.length; j++) {
      polygonsOut[i][j] = [];

      for (var k = 0; k < cell[j].length; k++) {
        polygonsOut[i][j][k] = cell[j][k];
      }
    }
  }

  return polygonsOut;
}

var constants$7 = {
  segmentRE: /[MLHVQCTSZ][^MLHVQCTSZ]*/g,
  paramRE: /[^\s,]+/g,
  // which numbers in each path segment are x (or y) values
  // drawn is which param is a drawn point, as opposed to a
  // control point (which doesn't count toward autorange.
  // TODO: this means curved paths could extend beyond the
  // autorange bounds. This is a bit tricky to get right
  // unless we revert to bounding boxes, but perhaps there's
  // a calculation we could do...)
  paramIsX: {
    M: {
      0: true,
      drawn: 0
    },
    L: {
      0: true,
      drawn: 0
    },
    H: {
      0: true,
      drawn: 0
    },
    V: {},
    Q: {
      0: true,
      2: true,
      drawn: 2
    },
    C: {
      0: true,
      2: true,
      4: true,
      drawn: 4
    },
    T: {
      0: true,
      drawn: 0
    },
    S: {
      0: true,
      2: true,
      drawn: 2
    },
    // A: {0: true, 5: true},
    Z: {}
  },
  paramIsY: {
    M: {
      1: true,
      drawn: 1
    },
    L: {
      1: true,
      drawn: 1
    },
    H: {},
    V: {
      0: true,
      drawn: 0
    },
    Q: {
      1: true,
      3: true,
      drawn: 3
    },
    C: {
      1: true,
      3: true,
      5: true,
      drawn: 5
    },
    T: {
      1: true,
      drawn: 1
    },
    S: {
      1: true,
      3: true,
      drawn: 5
    },
    // A: {1: true, 6: true},
    Z: {}
  },
  numParams: {
    M: 2,
    L: 2,
    H: 1,
    V: 1,
    Q: 4,
    C: 6,
    T: 2,
    S: 4,
    // A: 7,
    Z: 0
  }
};

var helpers$3 = createCommonjsModule(function (module, exports) {
  // specified by their data values, because they don't make a continuous mapping.
  // so these have to be specified in terms of the category serial numbers,
  // but can take fractional values. Other axis types we specify position based on
  // the actual data values.
  // TODO: in V3.0 (when log axis ranges are in data units) range and shape position
  // will be identical, so rangeToShapePosition and shapePositionToRange can be
  // removed entirely.

  exports.rangeToShapePosition = function (ax) {
    return ax.type === 'log' ? ax.r2d : function (v) {
      return v;
    };
  };

  exports.shapePositionToRange = function (ax) {
    return ax.type === 'log' ? ax.d2r : function (v) {
      return v;
    };
  };

  exports.decodeDate = function (convertToPx) {
    return function (v) {
      if (v.replace) v = v.replace('_', ' ');
      return convertToPx(v);
    };
  };

  exports.encodeDate = function (convertToDate) {
    return function (v) {
      return convertToDate(v).replace(' ', '_');
    };
  };

  exports.extractPathCoords = function (path, paramsToUse) {
    var extractedCoordinates = [];
    var segments = path.match(constants$7.segmentRE);
    segments.forEach(function (segment) {
      var relevantParamIdx = paramsToUse[segment.charAt(0)].drawn;
      if (relevantParamIdx === undefined) return;
      var params = segment.substr(1).match(constants$7.paramRE);
      if (!params || params.length < relevantParamIdx) return;
      extractedCoordinates.push(lib_1.cleanNumber(params[relevantParamIdx]));
    });
    return extractedCoordinates;
  };

  exports.getDataToPixel = function (gd, axis, isVertical, refType) {
    var gs = gd._fullLayout._size;
    var dataToPixel;

    if (axis) {
      if (refType === 'domain') {
        dataToPixel = function (v) {
          return axis._length * (isVertical ? 1 - v : v) + axis._offset;
        };
      } else {
        var d2r = exports.shapePositionToRange(axis);

        dataToPixel = function (v) {
          return axis._offset + axis.r2p(d2r(v, true));
        };

        if (axis.type === 'date') dataToPixel = exports.decodeDate(dataToPixel);
      }
    } else if (isVertical) {
      dataToPixel = function (v) {
        return gs.t + gs.h * (1 - v);
      };
    } else {
      dataToPixel = function (v) {
        return gs.l + gs.w * v;
      };
    }

    return dataToPixel;
  };

  exports.getPixelToData = function (gd, axis, isVertical, opt) {
    var gs = gd._fullLayout._size;
    var pixelToData;

    if (axis) {
      if (opt === 'domain') {
        pixelToData = function (p) {
          var q = (p - axis._offset) / axis._length;
          return isVertical ? 1 - q : q;
        };
      } else {
        var r2d = exports.rangeToShapePosition(axis);

        pixelToData = function (p) {
          return r2d(axis.p2r(p - axis._offset));
        };
      }
    } else if (isVertical) {
      pixelToData = function (p) {
        return 1 - (p - gs.t) / gs.h;
      };
    } else {
      pixelToData = function (p) {
        return (p - gs.l) / gs.w;
      };
    }

    return pixelToData;
  };
  /**
   * Based on the given stroke width, rounds the passed
   * position value to represent either a full or half pixel.
   *
   * In case of an odd stroke width (e.g. 1), this measure ensures
   * that a stroke positioned at the returned position isn't rendered
   * blurry due to anti-aliasing.
   *
   * In case of an even stroke width (e.g. 2), this measure ensures
   * that the position value is transformed to a full pixel value
   * so that anti-aliasing doesn't take effect either.
   *
   * @param {number} pos The raw position value to be transformed
   * @param {number} strokeWidth The stroke width
   * @returns {number} either an integer or a .5 decimal number
   */


  exports.roundPositionForSharpStrokeRendering = function (pos, strokeWidth) {
    var strokeWidthIsOdd = Math.round(strokeWidth % 2) === 1;
    var posValAsInt = Math.round(pos);
    return strokeWidthIsOdd ? posValAsInt + 0.5 : posValAsInt;
  };

  exports.makeOptionsAndPlotinfo = function (gd, index) {
    var options = gd._fullLayout.shapes[index] || {};
    var plotinfo = gd._fullLayout._plots[options.xref + options.yref];
    var hasPlotinfo = !!plotinfo;

    if (hasPlotinfo) {
      plotinfo._hadPlotinfo = true;
    } else {
      plotinfo = {};
      if (options.xref && options.xref !== 'paper') plotinfo.xaxis = gd._fullLayout[options.xref + 'axis'];
      if (options.yref && options.yref !== 'paper') plotinfo.yaxis = gd._fullLayout[options.yref + 'axis'];
    }

    plotinfo.xsizemode = options.xsizemode;
    plotinfo.ysizemode = options.ysizemode;
    plotinfo.xanchor = options.xanchor;
    plotinfo.yanchor = options.yanchor;
    return {
      options: options,
      plotinfo: plotinfo
    };
  };
});

var readPaths = helpers$4.readPaths;
var clearOutlineControllers = handle_outline.clearOutlineControllers;
var arrayEditor$4 = plot_template.arrayEditor; // Shapes are stored in gd.layout.shapes, an array of objects
// index can point to one item in this array,
//  or non-numeric to simply add a new one
//  or -1 to modify all existing
// opt can be the full options object, or one key (to be set to value)
//  or undefined to simply redraw
// if opt is blank, val can be 'add' or a full options object to add a new
//  annotation at that point in the array, or 'remove' to delete this one

var draw_1$2 = {
  draw: draw$9,
  drawOne: drawOne$1,
  eraseActiveShape: eraseActiveShape
};

function draw$9(gd) {
  var fullLayout = gd._fullLayout; // Remove previous shapes before drawing new in shapes in fullLayout.shapes

  fullLayout._shapeUpperLayer.selectAll('path').remove();

  fullLayout._shapeLowerLayer.selectAll('path').remove();

  for (var k in fullLayout._plots) {
    var shapelayer = fullLayout._plots[k].shapelayer;
    if (shapelayer) shapelayer.selectAll('path').remove();
  }

  for (var i = 0; i < fullLayout.shapes.length; i++) {
    if (fullLayout.shapes[i].visible) {
      drawOne$1(gd, i);
    }
  } // may need to resurrect this if we put text (LaTeX) in shapes
  // return Plots.previousPromises(gd);

}

function shouldSkipEdits(gd) {
  return !!gd._fullLayout._drawing;
}

function couldHaveActiveShape(gd) {
  // for now keep config.editable: true as it was before shape-drawing PR
  return !gd._context.edits.shapePosition;
}

function drawOne$1(gd, index) {
  // remove the existing shape if there is one.
  // because indices can change, we need to look in all shape layers
  gd._fullLayout._paperdiv.selectAll('.shapelayer [data-index="' + index + '"]').remove();

  var o = helpers$3.makeOptionsAndPlotinfo(gd, index);
  var options = o.options;
  var plotinfo = o.plotinfo; // this shape is gone - quit now after deleting it
  // TODO: use d3 idioms instead of deleting and redrawing every time

  if (!options._input || options.visible === false) return;

  if (options.layer !== 'below') {
    drawShape(gd._fullLayout._shapeUpperLayer);
  } else if (options.xref === 'paper' || options.yref === 'paper') {
    drawShape(gd._fullLayout._shapeLowerLayer);
  } else {
    if (plotinfo._hadPlotinfo) {
      var mainPlot = plotinfo.mainplotinfo || plotinfo;
      drawShape(mainPlot.shapelayer);
    } else {
      // Fall back to _shapeLowerLayer in case the requested subplot doesn't exist.
      // This can happen if you reference the shape to an x / y axis combination
      // that doesn't have any data on it (and layer is below)
      drawShape(gd._fullLayout._shapeLowerLayer);
    }
  }

  function drawShape(shapeLayer) {
    var d = getPathString(gd, options);
    var attrs = {
      'data-index': index,
      'fill-rule': options.fillrule,
      d: d
    };
    var opacity = options.opacity;
    var fillColor = options.fillcolor;
    var lineColor = options.line.width ? options.line.color : 'rgba(0,0,0,0)';
    var lineWidth = options.line.width;
    var lineDash = options.line.dash;

    if (!lineWidth && options.editable === true) {
      // ensure invisible border to activate the shape
      lineWidth = 5;
      lineDash = 'solid';
    }

    var isOpen = d[d.length - 1] !== 'Z';
    var isActiveShape = couldHaveActiveShape(gd) && options.editable && gd._fullLayout._activeShapeIndex === index;

    if (isActiveShape) {
      fillColor = isOpen ? 'rgba(0,0,0,0)' : gd._fullLayout.activeshape.fillcolor;
      opacity = gd._fullLayout.activeshape.opacity;
    }

    var path = shapeLayer.append('path').attr(attrs).style('opacity', opacity).call(color_1.stroke, lineColor).call(color_1.fill, fillColor).call(drawing_1.dashLine, lineDash, lineWidth);
    setClipPath(path, gd, options);
    var editHelpers;
    if (isActiveShape || gd._context.edits.shapePosition) editHelpers = arrayEditor$4(gd.layout, 'shapes', options);

    if (isActiveShape) {
      path.style({
        'cursor': 'move'
      });
      var dragOptions = {
        element: path.node(),
        plotinfo: plotinfo,
        gd: gd,
        editHelpers: editHelpers,
        isActiveShape: true // i.e. to enable controllers

      };
      var polygons = readPaths(d, gd); // display polygons on the screen

      display_outlines(polygons, path, dragOptions);
    } else {
      if (gd._context.edits.shapePosition) {
        setupDragElement$1(gd, path, options, index, shapeLayer, editHelpers);
      } else if (options.editable === true) {
        path.style('pointer-events', isOpen || color_1.opacity(fillColor) * opacity <= 0.5 ? 'stroke' : 'all');
      }
    }

    path.node().addEventListener('click', function () {
      return activateShape(gd, path);
    });
  }
}

function setClipPath(shapePath, gd, shapeOptions) {
  // note that for layer="below" the clipAxes can be different from the
  // subplot we're drawing this in. This could cause problems if the shape
  // spans two subplots. See https://github.com/plotly/plotly.js/issues/1452
  //
  // if axis is 'paper' or an axis with " domain" appended, then there is no
  // clip axis
  var clipAxes = (shapeOptions.xref + shapeOptions.yref).replace(/paper/g, '').replace(/[xyz][1-9]* *domain/g, '');
  drawing_1.setClipUrl(shapePath, clipAxes ? 'clip' + gd._fullLayout._uid + clipAxes : null, gd);
}

function setupDragElement$1(gd, shapePath, shapeOptions, index, shapeLayer, editHelpers) {
  var MINWIDTH = 10;
  var MINHEIGHT = 10;
  var xPixelSized = shapeOptions.xsizemode === 'pixel';
  var yPixelSized = shapeOptions.ysizemode === 'pixel';
  var isLine = shapeOptions.type === 'line';
  var isPath = shapeOptions.type === 'path';
  var modifyItem = editHelpers.modifyItem;
  var x0, y0, x1, y1, xAnchor, yAnchor;
  var n0, s0, w0, e0, optN, optS, optW, optE;
  var pathIn; // setup conversion functions

  var xa = axes_1.getFromId(gd, shapeOptions.xref);
  var xRefType = axes_1.getRefType(shapeOptions.xref);
  var ya = axes_1.getFromId(gd, shapeOptions.yref);
  var yRefType = axes_1.getRefType(shapeOptions.yref);
  var x2p = helpers$3.getDataToPixel(gd, xa, false, xRefType);
  var y2p = helpers$3.getDataToPixel(gd, ya, true, yRefType);
  var p2x = helpers$3.getPixelToData(gd, xa, false, xRefType);
  var p2y = helpers$3.getPixelToData(gd, ya, true, yRefType);
  var sensoryElement = obtainSensoryElement();
  var dragOptions = {
    element: sensoryElement.node(),
    gd: gd,
    prepFn: startDrag,
    doneFn: endDrag,
    clickFn: abortDrag
  };
  var dragMode;
  dragelement.init(dragOptions);
  sensoryElement.node().onmousemove = updateDragMode;

  function obtainSensoryElement() {
    return isLine ? createLineDragHandles() : shapePath;
  }

  function createLineDragHandles() {
    var minSensoryWidth = 10;
    var sensoryWidth = Math.max(shapeOptions.line.width, minSensoryWidth); // Helper shapes group
    // Note that by setting the `data-index` attr, it is ensured that
    // the helper group is purged in this modules `draw` function

    var g = shapeLayer.append('g').attr('data-index', index); // Helper path for moving

    g.append('path').attr('d', shapePath.attr('d')).style({
      'cursor': 'move',
      'stroke-width': sensoryWidth,
      'stroke-opacity': '0' // ensure not visible

    }); // Helper circles for resizing

    var circleStyle = {
      'fill-opacity': '0' // ensure not visible

    };
    var circleRadius = Math.max(sensoryWidth / 2, minSensoryWidth);
    g.append('circle').attr({
      'data-line-point': 'start-point',
      'cx': xPixelSized ? x2p(shapeOptions.xanchor) + shapeOptions.x0 : x2p(shapeOptions.x0),
      'cy': yPixelSized ? y2p(shapeOptions.yanchor) - shapeOptions.y0 : y2p(shapeOptions.y0),
      'r': circleRadius
    }).style(circleStyle).classed('cursor-grab', true);
    g.append('circle').attr({
      'data-line-point': 'end-point',
      'cx': xPixelSized ? x2p(shapeOptions.xanchor) + shapeOptions.x1 : x2p(shapeOptions.x1),
      'cy': yPixelSized ? y2p(shapeOptions.yanchor) - shapeOptions.y1 : y2p(shapeOptions.y1),
      'r': circleRadius
    }).style(circleStyle).classed('cursor-grab', true);
    return g;
  }

  function updateDragMode(evt) {
    if (shouldSkipEdits(gd)) {
      dragMode = null;
      return;
    }

    if (isLine) {
      if (evt.target.tagName === 'path') {
        dragMode = 'move';
      } else {
        dragMode = evt.target.attributes['data-line-point'].value === 'start-point' ? 'resize-over-start-point' : 'resize-over-end-point';
      }
    } else {
      // element might not be on screen at time of setup,
      // so obtain bounding box here
      var dragBBox = dragOptions.element.getBoundingClientRect(); // choose 'move' or 'resize'
      // based on initial position of cursor within the drag element

      var w = dragBBox.right - dragBBox.left;
      var h = dragBBox.bottom - dragBBox.top;
      var x = evt.clientX - dragBBox.left;
      var y = evt.clientY - dragBBox.top;
      var cursor = !isPath && w > MINWIDTH && h > MINHEIGHT && !evt.shiftKey ? dragelement.getCursor(x / w, 1 - y / h) : 'move';
      setcursor(shapePath, cursor); // possible values 'move', 'sw', 'w', 'se', 'e', 'ne', 'n', 'nw' and 'w'

      dragMode = cursor.split('-')[0];
    }
  }

  function startDrag(evt) {
    if (shouldSkipEdits(gd)) return; // setup update strings and initial values

    if (xPixelSized) {
      xAnchor = x2p(shapeOptions.xanchor);
    }

    if (yPixelSized) {
      yAnchor = y2p(shapeOptions.yanchor);
    }

    if (shapeOptions.type === 'path') {
      pathIn = shapeOptions.path;
    } else {
      x0 = xPixelSized ? shapeOptions.x0 : x2p(shapeOptions.x0);
      y0 = yPixelSized ? shapeOptions.y0 : y2p(shapeOptions.y0);
      x1 = xPixelSized ? shapeOptions.x1 : x2p(shapeOptions.x1);
      y1 = yPixelSized ? shapeOptions.y1 : y2p(shapeOptions.y1);
    }

    if (x0 < x1) {
      w0 = x0;
      optW = 'x0';
      e0 = x1;
      optE = 'x1';
    } else {
      w0 = x1;
      optW = 'x1';
      e0 = x0;
      optE = 'x0';
    } // For fixed size shapes take opposing direction of y-axis into account.
    // Hint: For data sized shapes this is done by the y2p function.


    if (!yPixelSized && y0 < y1 || yPixelSized && y0 > y1) {
      n0 = y0;
      optN = 'y0';
      s0 = y1;
      optS = 'y1';
    } else {
      n0 = y1;
      optN = 'y1';
      s0 = y0;
      optS = 'y0';
    } // setup dragMode and the corresponding handler


    updateDragMode(evt);
    renderVisualCues(shapeLayer, shapeOptions);
    deactivateClipPathTemporarily(shapePath, shapeOptions, gd);
    dragOptions.moveFn = dragMode === 'move' ? moveShape : resizeShape;
    dragOptions.altKey = evt.altKey;
  }

  function endDrag() {
    if (shouldSkipEdits(gd)) return;
    setcursor(shapePath);
    removeVisualCues(shapeLayer); // Don't rely on clipPath being activated during re-layout

    setClipPath(shapePath, gd, shapeOptions);
    registry.call('_guiRelayout', gd, editHelpers.getUpdateObj());
  }

  function abortDrag() {
    if (shouldSkipEdits(gd)) return;
    removeVisualCues(shapeLayer);
  }

  function moveShape(dx, dy) {
    if (shapeOptions.type === 'path') {
      var noOp = function (coord) {
        return coord;
      };

      var moveX = noOp;
      var moveY = noOp;

      if (xPixelSized) {
        modifyItem('xanchor', shapeOptions.xanchor = p2x(xAnchor + dx));
      } else {
        moveX = function moveX(x) {
          return p2x(x2p(x) + dx);
        };

        if (xa && xa.type === 'date') moveX = helpers$3.encodeDate(moveX);
      }

      if (yPixelSized) {
        modifyItem('yanchor', shapeOptions.yanchor = p2y(yAnchor + dy));
      } else {
        moveY = function moveY(y) {
          return p2y(y2p(y) + dy);
        };

        if (ya && ya.type === 'date') moveY = helpers$3.encodeDate(moveY);
      }

      modifyItem('path', shapeOptions.path = movePath(pathIn, moveX, moveY));
    } else {
      if (xPixelSized) {
        modifyItem('xanchor', shapeOptions.xanchor = p2x(xAnchor + dx));
      } else {
        modifyItem('x0', shapeOptions.x0 = p2x(x0 + dx));
        modifyItem('x1', shapeOptions.x1 = p2x(x1 + dx));
      }

      if (yPixelSized) {
        modifyItem('yanchor', shapeOptions.yanchor = p2y(yAnchor + dy));
      } else {
        modifyItem('y0', shapeOptions.y0 = p2y(y0 + dy));
        modifyItem('y1', shapeOptions.y1 = p2y(y1 + dy));
      }
    }

    shapePath.attr('d', getPathString(gd, shapeOptions));
    renderVisualCues(shapeLayer, shapeOptions);
  }

  function resizeShape(dx, dy) {
    if (isPath) {
      // TODO: implement path resize, don't forget to update dragMode code
      var noOp = function (coord) {
        return coord;
      };

      var moveX = noOp;
      var moveY = noOp;

      if (xPixelSized) {
        modifyItem('xanchor', shapeOptions.xanchor = p2x(xAnchor + dx));
      } else {
        moveX = function moveX(x) {
          return p2x(x2p(x) + dx);
        };

        if (xa && xa.type === 'date') moveX = helpers$3.encodeDate(moveX);
      }

      if (yPixelSized) {
        modifyItem('yanchor', shapeOptions.yanchor = p2y(yAnchor + dy));
      } else {
        moveY = function moveY(y) {
          return p2y(y2p(y) + dy);
        };

        if (ya && ya.type === 'date') moveY = helpers$3.encodeDate(moveY);
      }

      modifyItem('path', shapeOptions.path = movePath(pathIn, moveX, moveY));
    } else if (isLine) {
      if (dragMode === 'resize-over-start-point') {
        var newX0 = x0 + dx;
        var newY0 = yPixelSized ? y0 - dy : y0 + dy;
        modifyItem('x0', shapeOptions.x0 = xPixelSized ? newX0 : p2x(newX0));
        modifyItem('y0', shapeOptions.y0 = yPixelSized ? newY0 : p2y(newY0));
      } else if (dragMode === 'resize-over-end-point') {
        var newX1 = x1 + dx;
        var newY1 = yPixelSized ? y1 - dy : y1 + dy;
        modifyItem('x1', shapeOptions.x1 = xPixelSized ? newX1 : p2x(newX1));
        modifyItem('y1', shapeOptions.y1 = yPixelSized ? newY1 : p2y(newY1));
      }
    } else {
      var has = function (str) {
        return dragMode.indexOf(str) !== -1;
      };

      var hasN = has('n');
      var hasS = has('s');
      var hasW = has('w');
      var hasE = has('e');
      var newN = hasN ? n0 + dy : n0;
      var newS = hasS ? s0 + dy : s0;
      var newW = hasW ? w0 + dx : w0;
      var newE = hasE ? e0 + dx : e0;

      if (yPixelSized) {
        // Do things in opposing direction for y-axis.
        // Hint: for data-sized shapes the reversal of axis direction is done in p2y.
        if (hasN) newN = n0 - dy;
        if (hasS) newS = s0 - dy;
      } // Update shape eventually. Again, be aware of the
      // opposing direction of the y-axis of fixed size shapes.


      if (!yPixelSized && newS - newN > MINHEIGHT || yPixelSized && newN - newS > MINHEIGHT) {
        modifyItem(optN, shapeOptions[optN] = yPixelSized ? newN : p2y(newN));
        modifyItem(optS, shapeOptions[optS] = yPixelSized ? newS : p2y(newS));
      }

      if (newE - newW > MINWIDTH) {
        modifyItem(optW, shapeOptions[optW] = xPixelSized ? newW : p2x(newW));
        modifyItem(optE, shapeOptions[optE] = xPixelSized ? newE : p2x(newE));
      }
    }

    shapePath.attr('d', getPathString(gd, shapeOptions));
    renderVisualCues(shapeLayer, shapeOptions);
  }

  function renderVisualCues(shapeLayer, shapeOptions) {
    if (xPixelSized || yPixelSized) {
      renderAnchor();
    }

    function renderAnchor() {
      var isNotPath = shapeOptions.type !== 'path'; // d3 join with dummy data to satisfy d3 data-binding

      var visualCues = shapeLayer.selectAll('.visual-cue').data([0]); // Enter

      var strokeWidth = 1;
      visualCues.enter().append('path').attr({
        'fill': '#fff',
        'fill-rule': 'evenodd',
        'stroke': '#000',
        'stroke-width': strokeWidth
      }).classed('visual-cue', true); // Update

      var posX = x2p(xPixelSized ? shapeOptions.xanchor : lib_1.midRange(isNotPath ? [shapeOptions.x0, shapeOptions.x1] : helpers$3.extractPathCoords(shapeOptions.path, constants$7.paramIsX)));
      var posY = y2p(yPixelSized ? shapeOptions.yanchor : lib_1.midRange(isNotPath ? [shapeOptions.y0, shapeOptions.y1] : helpers$3.extractPathCoords(shapeOptions.path, constants$7.paramIsY)));
      posX = helpers$3.roundPositionForSharpStrokeRendering(posX, strokeWidth);
      posY = helpers$3.roundPositionForSharpStrokeRendering(posY, strokeWidth);

      if (xPixelSized && yPixelSized) {
        var crossPath = 'M' + (posX - 1 - strokeWidth) + ',' + (posY - 1 - strokeWidth) + 'h-8v2h8 v8h2v-8 h8v-2h-8 v-8h-2 Z';
        visualCues.attr('d', crossPath);
      } else if (xPixelSized) {
        var vBarPath = 'M' + (posX - 1 - strokeWidth) + ',' + (posY - 9 - strokeWidth) + 'v18 h2 v-18 Z';
        visualCues.attr('d', vBarPath);
      } else {
        var hBarPath = 'M' + (posX - 9 - strokeWidth) + ',' + (posY - 1 - strokeWidth) + 'h18 v2 h-18 Z';
        visualCues.attr('d', hBarPath);
      }
    }
  }

  function removeVisualCues(shapeLayer) {
    shapeLayer.selectAll('.visual-cue').remove();
  }

  function deactivateClipPathTemporarily(shapePath, shapeOptions, gd) {
    var xref = shapeOptions.xref;
    var yref = shapeOptions.yref;
    var xa = axes_1.getFromId(gd, xref);
    var ya = axes_1.getFromId(gd, yref);
    var clipAxes = '';
    if (xref !== 'paper' && !xa.autorange) clipAxes += xref;
    if (yref !== 'paper' && !ya.autorange) clipAxes += yref;
    drawing_1.setClipUrl(shapePath, clipAxes ? 'clip' + gd._fullLayout._uid + clipAxes : null, gd);
  }
}

function getPathString(gd, options) {
  var type = options.type;
  var xRefType = axes_1.getRefType(options.xref);
  var yRefType = axes_1.getRefType(options.yref);
  var xa = axes_1.getFromId(gd, options.xref);
  var ya = axes_1.getFromId(gd, options.yref);
  var gs = gd._fullLayout._size;
  var x2r, x2p, y2r, y2p;
  var x0, x1, y0, y1;

  if (xa) {
    if (xRefType === 'domain') {
      x2p = function (v) {
        return xa._offset + xa._length * v;
      };
    } else {
      x2r = helpers$3.shapePositionToRange(xa);

      x2p = function (v) {
        return xa._offset + xa.r2p(x2r(v, true));
      };
    }
  } else {
    x2p = function (v) {
      return gs.l + gs.w * v;
    };
  }

  if (ya) {
    if (yRefType === 'domain') {
      y2p = function (v) {
        return ya._offset + ya._length * (1 - v);
      };
    } else {
      y2r = helpers$3.shapePositionToRange(ya);

      y2p = function (v) {
        return ya._offset + ya.r2p(y2r(v, true));
      };
    }
  } else {
    y2p = function (v) {
      return gs.t + gs.h * (1 - v);
    };
  }

  if (type === 'path') {
    if (xa && xa.type === 'date') x2p = helpers$3.decodeDate(x2p);
    if (ya && ya.type === 'date') y2p = helpers$3.decodeDate(y2p);
    return convertPath(options, x2p, y2p);
  }

  if (options.xsizemode === 'pixel') {
    var xAnchorPos = x2p(options.xanchor);
    x0 = xAnchorPos + options.x0;
    x1 = xAnchorPos + options.x1;
  } else {
    x0 = x2p(options.x0);
    x1 = x2p(options.x1);
  }

  if (options.ysizemode === 'pixel') {
    var yAnchorPos = y2p(options.yanchor);
    y0 = yAnchorPos - options.y0;
    y1 = yAnchorPos - options.y1;
  } else {
    y0 = y2p(options.y0);
    y1 = y2p(options.y1);
  }

  if (type === 'line') return 'M' + x0 + ',' + y0 + 'L' + x1 + ',' + y1;
  if (type === 'rect') return 'M' + x0 + ',' + y0 + 'H' + x1 + 'V' + y1 + 'H' + x0 + 'Z'; // circle

  var cx = (x0 + x1) / 2;
  var cy = (y0 + y1) / 2;
  var rx = Math.abs(cx - x0);
  var ry = Math.abs(cy - y0);
  var rArc = 'A' + rx + ',' + ry;
  var rightPt = cx + rx + ',' + cy;
  var topPt = cx + ',' + (cy - ry);
  return 'M' + rightPt + rArc + ' 0 1,1 ' + topPt + rArc + ' 0 0,1 ' + rightPt + 'Z';
}

function convertPath(options, x2p, y2p) {
  var pathIn = options.path;
  var xSizemode = options.xsizemode;
  var ySizemode = options.ysizemode;
  var xAnchor = options.xanchor;
  var yAnchor = options.yanchor;
  return pathIn.replace(constants$7.segmentRE, function (segment) {
    var paramNumber = 0;
    var segmentType = segment.charAt(0);
    var xParams = constants$7.paramIsX[segmentType];
    var yParams = constants$7.paramIsY[segmentType];
    var nParams = constants$7.numParams[segmentType];
    var paramString = segment.substr(1).replace(constants$7.paramRE, function (param) {
      if (xParams[paramNumber]) {
        if (xSizemode === 'pixel') param = x2p(xAnchor) + Number(param);else param = x2p(param);
      } else if (yParams[paramNumber]) {
        if (ySizemode === 'pixel') param = y2p(yAnchor) - Number(param);else param = y2p(param);
      }

      paramNumber++;
      if (paramNumber > nParams) param = 'X';
      return param;
    });

    if (paramNumber > nParams) {
      paramString = paramString.replace(/[\s,]*X.*/, '');
      lib_1.log('Ignoring extra params in segment ' + segment);
    }

    return segmentType + paramString;
  });
}

function movePath(pathIn, moveX, moveY) {
  return pathIn.replace(constants$7.segmentRE, function (segment) {
    var paramNumber = 0;
    var segmentType = segment.charAt(0);
    var xParams = constants$7.paramIsX[segmentType];
    var yParams = constants$7.paramIsY[segmentType];
    var nParams = constants$7.numParams[segmentType];
    var paramString = segment.substr(1).replace(constants$7.paramRE, function (param) {
      if (paramNumber >= nParams) return param;
      if (xParams[paramNumber]) param = moveX(param);else if (yParams[paramNumber]) param = moveY(param);
      paramNumber++;
      return param;
    });
    return segmentType + paramString;
  });
}

function activateShape(gd, path) {
  if (!couldHaveActiveShape(gd)) return;
  var element = path.node();
  var id = +element.getAttribute('data-index');

  if (id >= 0) {
    // deactivate if already active
    if (id === gd._fullLayout._activeShapeIndex) {
      deactivateShape(gd);
      return;
    }

    gd._fullLayout._activeShapeIndex = id;
    gd._fullLayout._deactivateShape = deactivateShape;
    draw$9(gd);
  }
}

function deactivateShape(gd) {
  if (!couldHaveActiveShape(gd)) return;
  var id = gd._fullLayout._activeShapeIndex;

  if (id >= 0) {
    clearOutlineControllers(gd);
    delete gd._fullLayout._activeShapeIndex;
    draw$9(gd);
  }
}

function eraseActiveShape(gd) {
  if (!couldHaveActiveShape(gd)) return;
  clearOutlineControllers(gd);
  var id = gd._fullLayout._activeShapeIndex;
  var shapes = (gd.layout || {}).shapes || [];

  if (id < shapes.length) {
    var newShapes = [];

    for (var q = 0; q < shapes.length; q++) {
      if (q !== id) {
        newShapes.push(shapes[q]);
      }
    }

    delete gd._fullLayout._activeShapeIndex;
    registry.call('_guiRelayout', gd, {
      shapes: newShapes
    });
  }
}

var buttons = createCommonjsModule(function (module) {

  var eraseActiveShape = draw_1$2.eraseActiveShape;
  var _ = lib_1._;
  var modeBarButtons = module.exports = {};
  /**
   * ModeBar buttons configuration
   *
   * @param {string} name
   *      name / id of the buttons (for tracking)
   * @param {string} title
   *      text that appears while hovering over the button,
   *      enter null, false or '' for no hover text
   * @param {string} icon
   *      svg icon object associated with the button
   *      can be linked to Plotly.Icons to use the default plotly icons
   * @param {string} [gravity]
   *      icon positioning
   * @param {function} click
   *      click handler associated with the button, a function of
   *      'gd' (the main graph object) and
   *      'ev' (the event object)
   * @param {string} [attr]
   *      attribute associated with button,
   *      use this with 'val' to keep track of the state
   * @param {*} [val]
   *      initial 'attr' value, can be a function of gd
   * @param {boolean} [toggle]
   *      is the button a toggle button?
   */

  modeBarButtons.toImage = {
    name: 'toImage',
    title: function (gd) {
      var opts = gd._context.toImageButtonOptions || {};
      var format = opts.format || 'png';
      return format === 'png' ? _(gd, 'Download plot as a png') : // legacy text
      _(gd, 'Download plot'); // generic non-PNG text
    },
    icon: ploticon.camera,
    click: function (gd) {
      var toImageButtonOptions = gd._context.toImageButtonOptions;
      var opts = {
        format: toImageButtonOptions.format || 'png'
      };
      lib_1.notifier(_(gd, 'Taking snapshot - this may take a few seconds'), 'long');

      if (opts.format !== 'svg' && lib_1.isIE()) {
        lib_1.notifier(_(gd, 'IE only supports svg.  Changing format to svg.'), 'long');
        opts.format = 'svg';
      }

      ['filename', 'width', 'height', 'scale'].forEach(function (key) {
        if (key in toImageButtonOptions) {
          opts[key] = toImageButtonOptions[key];
        }
      });
      registry.call('downloadImage', gd, opts).then(function (filename) {
        lib_1.notifier(_(gd, 'Snapshot succeeded') + ' - ' + filename, 'long');
      }).catch(function () {
        lib_1.notifier(_(gd, 'Sorry, there was a problem downloading your snapshot!'), 'long');
      });
    }
  };
  modeBarButtons.sendDataToCloud = {
    name: 'sendDataToCloud',
    title: function (gd) {
      return _(gd, 'Edit in Chart Studio');
    },
    icon: ploticon.disk,
    click: function (gd) {
      plots_1.sendDataToCloud(gd);
    }
  };
  modeBarButtons.editInChartStudio = {
    name: 'editInChartStudio',
    title: function (gd) {
      return _(gd, 'Edit in Chart Studio');
    },
    icon: ploticon.pencil,
    click: function (gd) {
      plots_1.sendDataToCloud(gd);
    }
  };
  modeBarButtons.zoom2d = {
    name: 'zoom2d',
    _cat: 'zoom',
    title: function (gd) {
      return _(gd, 'Zoom');
    },
    attr: 'dragmode',
    val: 'zoom',
    icon: ploticon.zoombox,
    click: handleCartesian
  };
  modeBarButtons.pan2d = {
    name: 'pan2d',
    _cat: 'pan',
    title: function (gd) {
      return _(gd, 'Pan');
    },
    attr: 'dragmode',
    val: 'pan',
    icon: ploticon.pan,
    click: handleCartesian
  };
  modeBarButtons.select2d = {
    name: 'select2d',
    _cat: 'select',
    title: function (gd) {
      return _(gd, 'Box Select');
    },
    attr: 'dragmode',
    val: 'select',
    icon: ploticon.selectbox,
    click: handleCartesian
  };
  modeBarButtons.lasso2d = {
    name: 'lasso2d',
    _cat: 'lasso',
    title: function (gd) {
      return _(gd, 'Lasso Select');
    },
    attr: 'dragmode',
    val: 'lasso',
    icon: ploticon.lasso,
    click: handleCartesian
  };
  modeBarButtons.drawclosedpath = {
    name: 'drawclosedpath',
    title: function (gd) {
      return _(gd, 'Draw closed freeform');
    },
    attr: 'dragmode',
    val: 'drawclosedpath',
    icon: ploticon.drawclosedpath,
    click: handleCartesian
  };
  modeBarButtons.drawopenpath = {
    name: 'drawopenpath',
    title: function (gd) {
      return _(gd, 'Draw open freeform');
    },
    attr: 'dragmode',
    val: 'drawopenpath',
    icon: ploticon.drawopenpath,
    click: handleCartesian
  };
  modeBarButtons.drawline = {
    name: 'drawline',
    title: function (gd) {
      return _(gd, 'Draw line');
    },
    attr: 'dragmode',
    val: 'drawline',
    icon: ploticon.drawline,
    click: handleCartesian
  };
  modeBarButtons.drawrect = {
    name: 'drawrect',
    title: function (gd) {
      return _(gd, 'Draw rectangle');
    },
    attr: 'dragmode',
    val: 'drawrect',
    icon: ploticon.drawrect,
    click: handleCartesian
  };
  modeBarButtons.drawcircle = {
    name: 'drawcircle',
    title: function (gd) {
      return _(gd, 'Draw circle');
    },
    attr: 'dragmode',
    val: 'drawcircle',
    icon: ploticon.drawcircle,
    click: handleCartesian
  };
  modeBarButtons.eraseshape = {
    name: 'eraseshape',
    title: function (gd) {
      return _(gd, 'Erase active shape');
    },
    icon: ploticon.eraseshape,
    click: eraseActiveShape
  };
  modeBarButtons.zoomIn2d = {
    name: 'zoomIn2d',
    _cat: 'zoomin',
    title: function (gd) {
      return _(gd, 'Zoom in');
    },
    attr: 'zoom',
    val: 'in',
    icon: ploticon.zoom_plus,
    click: handleCartesian
  };
  modeBarButtons.zoomOut2d = {
    name: 'zoomOut2d',
    _cat: 'zoomout',
    title: function (gd) {
      return _(gd, 'Zoom out');
    },
    attr: 'zoom',
    val: 'out',
    icon: ploticon.zoom_minus,
    click: handleCartesian
  };
  modeBarButtons.autoScale2d = {
    name: 'autoScale2d',
    _cat: 'autoscale',
    title: function (gd) {
      return _(gd, 'Autoscale');
    },
    attr: 'zoom',
    val: 'auto',
    icon: ploticon.autoscale,
    click: handleCartesian
  };
  modeBarButtons.resetScale2d = {
    name: 'resetScale2d',
    _cat: 'resetscale',
    title: function (gd) {
      return _(gd, 'Reset axes');
    },
    attr: 'zoom',
    val: 'reset',
    icon: ploticon.home,
    click: handleCartesian
  };
  modeBarButtons.hoverClosestCartesian = {
    name: 'hoverClosestCartesian',
    _cat: 'hoverclosest',
    title: function (gd) {
      return _(gd, 'Show closest data on hover');
    },
    attr: 'hovermode',
    val: 'closest',
    icon: ploticon.tooltip_basic,
    gravity: 'ne',
    click: handleCartesian
  };
  modeBarButtons.hoverCompareCartesian = {
    name: 'hoverCompareCartesian',
    _cat: 'hoverCompare',
    title: function (gd) {
      return _(gd, 'Compare data on hover');
    },
    attr: 'hovermode',
    val: function (gd) {
      return gd._fullLayout._isHoriz ? 'y' : 'x';
    },
    icon: ploticon.tooltip_compare,
    gravity: 'ne',
    click: handleCartesian
  };

  function handleCartesian(gd, ev) {
    var button = ev.currentTarget;
    var astr = button.getAttribute('data-attr');
    var val = button.getAttribute('data-val') || true;
    var fullLayout = gd._fullLayout;
    var aobj = {};
    var axList = axis_ids.list(gd, null, true);
    var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;
    var ax, i;

    if (astr === 'zoom') {
      var mag = val === 'in' ? 0.5 : 2;
      var r0 = (1 + mag) / 2;
      var r1 = (1 - mag) / 2;
      var axName;

      for (i = 0; i < axList.length; i++) {
        ax = axList[i];

        if (!ax.fixedrange) {
          axName = ax._name;

          if (val === 'auto') {
            aobj[axName + '.autorange'] = true;
          } else if (val === 'reset') {
            if (ax._rangeInitial === undefined) {
              aobj[axName + '.autorange'] = true;
            } else {
              var rangeInitial = ax._rangeInitial.slice();

              aobj[axName + '.range[0]'] = rangeInitial[0];
              aobj[axName + '.range[1]'] = rangeInitial[1];
            } // N.B. "reset" also resets showspikes


            if (ax._showSpikeInitial !== undefined) {
              aobj[axName + '.showspikes'] = ax._showSpikeInitial;

              if (allSpikesEnabled === 'on' && !ax._showSpikeInitial) {
                allSpikesEnabled = 'off';
              }
            }
          } else {
            var rangeNow = [ax.r2l(ax.range[0]), ax.r2l(ax.range[1])];
            var rangeNew = [r0 * rangeNow[0] + r1 * rangeNow[1], r0 * rangeNow[1] + r1 * rangeNow[0]];
            aobj[axName + '.range[0]'] = ax.l2r(rangeNew[0]);
            aobj[axName + '.range[1]'] = ax.l2r(rangeNew[1]);
          }
        }
      }
    } else {
      // if ALL traces have orientation 'h', 'hovermode': 'x' otherwise: 'y'
      if (astr === 'hovermode' && (val === 'x' || val === 'y')) {
        val = fullLayout._isHoriz ? 'y' : 'x';
        button.setAttribute('data-val', val);
      }

      aobj[astr] = val;
    }

    fullLayout._cartesianSpikesEnabled = allSpikesEnabled;
    registry.call('_guiRelayout', gd, aobj);
  }

  modeBarButtons.zoom3d = {
    name: 'zoom3d',
    _cat: 'zoom',
    title: function (gd) {
      return _(gd, 'Zoom');
    },
    attr: 'scene.dragmode',
    val: 'zoom',
    icon: ploticon.zoombox,
    click: handleDrag3d
  };
  modeBarButtons.pan3d = {
    name: 'pan3d',
    _cat: 'pan',
    title: function (gd) {
      return _(gd, 'Pan');
    },
    attr: 'scene.dragmode',
    val: 'pan',
    icon: ploticon.pan,
    click: handleDrag3d
  };
  modeBarButtons.orbitRotation = {
    name: 'orbitRotation',
    title: function (gd) {
      return _(gd, 'Orbital rotation');
    },
    attr: 'scene.dragmode',
    val: 'orbit',
    icon: ploticon['3d_rotate'],
    click: handleDrag3d
  };
  modeBarButtons.tableRotation = {
    name: 'tableRotation',
    title: function (gd) {
      return _(gd, 'Turntable rotation');
    },
    attr: 'scene.dragmode',
    val: 'turntable',
    icon: ploticon['z-axis'],
    click: handleDrag3d
  };

  function handleDrag3d(gd, ev) {
    var button = ev.currentTarget;
    var attr = button.getAttribute('data-attr');
    var val = button.getAttribute('data-val') || true;
    var sceneIds = gd._fullLayout._subplots.gl3d || [];
    var layoutUpdate = {};
    var parts = attr.split('.');

    for (var i = 0; i < sceneIds.length; i++) {
      layoutUpdate[sceneIds[i] + '.' + parts[1]] = val;
    } // for multi-type subplots


    var val2d = val === 'pan' ? val : 'zoom';
    layoutUpdate.dragmode = val2d;
    registry.call('_guiRelayout', gd, layoutUpdate);
  }

  modeBarButtons.resetCameraDefault3d = {
    name: 'resetCameraDefault3d',
    _cat: 'resetCameraDefault',
    title: function (gd) {
      return _(gd, 'Reset camera to default');
    },
    attr: 'resetDefault',
    icon: ploticon.home,
    click: handleCamera3d
  };
  modeBarButtons.resetCameraLastSave3d = {
    name: 'resetCameraLastSave3d',
    _cat: 'resetCameraLastSave',
    title: function (gd) {
      return _(gd, 'Reset camera to last save');
    },
    attr: 'resetLastSave',
    icon: ploticon.movie,
    click: handleCamera3d
  };

  function handleCamera3d(gd, ev) {
    var button = ev.currentTarget;
    var attr = button.getAttribute('data-attr');
    var resetLastSave = attr === 'resetLastSave';
    var resetDefault = attr === 'resetDefault';
    var fullLayout = gd._fullLayout;
    var sceneIds = fullLayout._subplots.gl3d || [];
    var aobj = {};

    for (var i = 0; i < sceneIds.length; i++) {
      var sceneId = sceneIds[i];
      var camera = sceneId + '.camera';
      var aspectratio = sceneId + '.aspectratio';
      var aspectmode = sceneId + '.aspectmode';
      var scene = fullLayout[sceneId]._scene;
      var didUpdate;

      if (resetLastSave) {
        aobj[camera + '.up'] = scene.viewInitial.up;
        aobj[camera + '.eye'] = scene.viewInitial.eye;
        aobj[camera + '.center'] = scene.viewInitial.center;
        didUpdate = true;
      } else if (resetDefault) {
        aobj[camera + '.up'] = null;
        aobj[camera + '.eye'] = null;
        aobj[camera + '.center'] = null;
        didUpdate = true;
      }

      if (didUpdate) {
        aobj[aspectratio + '.x'] = scene.viewInitial.aspectratio.x;
        aobj[aspectratio + '.y'] = scene.viewInitial.aspectratio.y;
        aobj[aspectratio + '.z'] = scene.viewInitial.aspectratio.z;
        aobj[aspectmode] = scene.viewInitial.aspectmode;
      }
    }

    registry.call('_guiRelayout', gd, aobj);
  }

  modeBarButtons.hoverClosest3d = {
    name: 'hoverClosest3d',
    _cat: 'hoverclosest',
    title: function (gd) {
      return _(gd, 'Toggle show closest data on hover');
    },
    attr: 'hovermode',
    val: null,
    toggle: true,
    icon: ploticon.tooltip_basic,
    gravity: 'ne',
    click: handleHover3d
  };

  function getNextHover3d(gd, ev) {
    var button = ev.currentTarget;
    var val = button._previousVal;
    var fullLayout = gd._fullLayout;
    var sceneIds = fullLayout._subplots.gl3d || [];
    var axes = ['xaxis', 'yaxis', 'zaxis']; // initialize 'current spike' object to be stored in the DOM

    var currentSpikes = {};
    var layoutUpdate = {};

    if (val) {
      layoutUpdate = val;
      button._previousVal = null;
    } else {
      for (var i = 0; i < sceneIds.length; i++) {
        var sceneId = sceneIds[i];
        var sceneLayout = fullLayout[sceneId];
        var hovermodeAStr = sceneId + '.hovermode';
        currentSpikes[hovermodeAStr] = sceneLayout.hovermode;
        layoutUpdate[hovermodeAStr] = false; // copy all the current spike attrs

        for (var j = 0; j < 3; j++) {
          var axis = axes[j];
          var spikeAStr = sceneId + '.' + axis + '.showspikes';
          layoutUpdate[spikeAStr] = false;
          currentSpikes[spikeAStr] = sceneLayout[axis].showspikes;
        }
      }

      button._previousVal = currentSpikes;
    }

    return layoutUpdate;
  }

  function handleHover3d(gd, ev) {
    var layoutUpdate = getNextHover3d(gd, ev);
    registry.call('_guiRelayout', gd, layoutUpdate);
  }

  modeBarButtons.zoomInGeo = {
    name: 'zoomInGeo',
    _cat: 'zoomin',
    title: function (gd) {
      return _(gd, 'Zoom in');
    },
    attr: 'zoom',
    val: 'in',
    icon: ploticon.zoom_plus,
    click: handleGeo
  };
  modeBarButtons.zoomOutGeo = {
    name: 'zoomOutGeo',
    _cat: 'zoomout',
    title: function (gd) {
      return _(gd, 'Zoom out');
    },
    attr: 'zoom',
    val: 'out',
    icon: ploticon.zoom_minus,
    click: handleGeo
  };
  modeBarButtons.resetGeo = {
    name: 'resetGeo',
    _cat: 'reset',
    title: function (gd) {
      return _(gd, 'Reset');
    },
    attr: 'reset',
    val: null,
    icon: ploticon.autoscale,
    click: handleGeo
  };
  modeBarButtons.hoverClosestGeo = {
    name: 'hoverClosestGeo',
    _cat: 'hoverclosest',
    title: function (gd) {
      return _(gd, 'Toggle show closest data on hover');
    },
    attr: 'hovermode',
    val: null,
    toggle: true,
    icon: ploticon.tooltip_basic,
    gravity: 'ne',
    click: toggleHover
  };

  function handleGeo(gd, ev) {
    var button = ev.currentTarget;
    var attr = button.getAttribute('data-attr');
    var val = button.getAttribute('data-val') || true;
    var fullLayout = gd._fullLayout;
    var geoIds = fullLayout._subplots.geo || [];

    for (var i = 0; i < geoIds.length; i++) {
      var id = geoIds[i];
      var geoLayout = fullLayout[id];

      if (attr === 'zoom') {
        var scale = geoLayout.projection.scale;
        var newScale = val === 'in' ? 2 * scale : 0.5 * scale;
        registry.call('_guiRelayout', gd, id + '.projection.scale', newScale);
      }
    }

    if (attr === 'reset') {
      resetView(gd, 'geo');
    }
  }

  modeBarButtons.hoverClosestGl2d = {
    name: 'hoverClosestGl2d',
    _cat: 'hoverclosest',
    title: function (gd) {
      return _(gd, 'Toggle show closest data on hover');
    },
    attr: 'hovermode',
    val: null,
    toggle: true,
    icon: ploticon.tooltip_basic,
    gravity: 'ne',
    click: toggleHover
  };
  modeBarButtons.hoverClosestPie = {
    name: 'hoverClosestPie',
    _cat: 'hoverclosest',
    title: function (gd) {
      return _(gd, 'Toggle show closest data on hover');
    },
    attr: 'hovermode',
    val: 'closest',
    icon: ploticon.tooltip_basic,
    gravity: 'ne',
    click: toggleHover
  };

  function getNextHover(gd) {
    var fullLayout = gd._fullLayout;
    if (fullLayout.hovermode) return false;

    if (fullLayout._has('cartesian')) {
      return fullLayout._isHoriz ? 'y' : 'x';
    }

    return 'closest';
  }

  function toggleHover(gd) {
    var newHover = getNextHover(gd);
    registry.call('_guiRelayout', gd, 'hovermode', newHover);
  }

  modeBarButtons.resetViewSankey = {
    name: 'resetSankeyGroup',
    title: function (gd) {
      return _(gd, 'Reset view');
    },
    icon: ploticon.home,
    click: function (gd) {
      var aObj = {
        'node.groups': [],
        'node.x': [],
        'node.y': []
      };

      for (var i = 0; i < gd._fullData.length; i++) {
        var viewInitial = gd._fullData[i]._viewInitial;
        aObj['node.groups'].push(viewInitial.node.groups.slice());
        aObj['node.x'].push(viewInitial.node.x.slice());
        aObj['node.y'].push(viewInitial.node.y.slice());
      }

      registry.call('restyle', gd, aObj);
    }
  }; // buttons when more then one plot types are present

  modeBarButtons.toggleHover = {
    name: 'toggleHover',
    title: function (gd) {
      return _(gd, 'Toggle show closest data on hover');
    },
    attr: 'hovermode',
    val: null,
    toggle: true,
    icon: ploticon.tooltip_basic,
    gravity: 'ne',
    click: function (gd, ev) {
      var layoutUpdate = getNextHover3d(gd, ev);
      layoutUpdate.hovermode = getNextHover(gd);
      registry.call('_guiRelayout', gd, layoutUpdate);
    }
  };
  modeBarButtons.resetViews = {
    name: 'resetViews',
    title: function (gd) {
      return _(gd, 'Reset views');
    },
    icon: ploticon.home,
    click: function (gd, ev) {
      var button = ev.currentTarget;
      button.setAttribute('data-attr', 'zoom');
      button.setAttribute('data-val', 'reset');
      handleCartesian(gd, ev);
      button.setAttribute('data-attr', 'resetLastSave');
      handleCamera3d(gd, ev);
      resetView(gd, 'geo');
      resetView(gd, 'mapbox');
    }
  };
  modeBarButtons.toggleSpikelines = {
    name: 'toggleSpikelines',
    title: function (gd) {
      return _(gd, 'Toggle Spike Lines');
    },
    icon: ploticon.spikeline,
    attr: '_cartesianSpikesEnabled',
    val: 'on',
    click: function (gd) {
      var fullLayout = gd._fullLayout;
      var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;
      fullLayout._cartesianSpikesEnabled = allSpikesEnabled === 'on' ? 'off' : 'on';
      registry.call('_guiRelayout', gd, setSpikelineVisibility(gd));
    }
  };

  function setSpikelineVisibility(gd) {
    var fullLayout = gd._fullLayout;
    var areSpikesOn = fullLayout._cartesianSpikesEnabled === 'on';
    var axList = axis_ids.list(gd, null, true);
    var aobj = {};

    for (var i = 0; i < axList.length; i++) {
      var ax = axList[i];
      aobj[ax._name + '.showspikes'] = areSpikesOn ? true : ax._showSpikeInitial;
    }

    return aobj;
  }

  modeBarButtons.resetViewMapbox = {
    name: 'resetViewMapbox',
    _cat: 'resetView',
    title: function (gd) {
      return _(gd, 'Reset view');
    },
    attr: 'reset',
    icon: ploticon.home,
    click: function (gd) {
      resetView(gd, 'mapbox');
    }
  };
  modeBarButtons.zoomInMapbox = {
    name: 'zoomInMapbox',
    _cat: 'zoomin',
    title: function (gd) {
      return _(gd, 'Zoom in');
    },
    attr: 'zoom',
    val: 'in',
    icon: ploticon.zoom_plus,
    click: handleMapboxZoom
  };
  modeBarButtons.zoomOutMapbox = {
    name: 'zoomOutMapbox',
    _cat: 'zoomout',
    title: function (gd) {
      return _(gd, 'Zoom out');
    },
    attr: 'zoom',
    val: 'out',
    icon: ploticon.zoom_minus,
    click: handleMapboxZoom
  };

  function handleMapboxZoom(gd, ev) {
    var button = ev.currentTarget;
    var val = button.getAttribute('data-val');
    var fullLayout = gd._fullLayout;
    var subplotIds = fullLayout._subplots.mapbox || [];
    var scalar = 1.05;
    var aObj = {};

    for (var i = 0; i < subplotIds.length; i++) {
      var id = subplotIds[i];
      var current = fullLayout[id].zoom;
      var next = val === 'in' ? scalar * current : current / scalar;
      aObj[id + '.zoom'] = next;
    }

    registry.call('_guiRelayout', gd, aObj);
  }

  function resetView(gd, subplotType) {
    var fullLayout = gd._fullLayout;
    var subplotIds = fullLayout._subplots[subplotType] || [];
    var aObj = {};

    for (var i = 0; i < subplotIds.length; i++) {
      var id = subplotIds[i];
      var subplotObj = fullLayout[id]._subplot;
      var viewInitial = subplotObj.viewInitial;
      var viewKeys = Object.keys(viewInitial);

      for (var j = 0; j < viewKeys.length; j++) {
        var key = viewKeys[j];
        aObj[id + '.' + key] = viewInitial[key];
      }
    }

    registry.call('_guiRelayout', gd, aObj);
  }
});

var buttonList = Object.keys(buttons);
var DRAW_MODES$1 = ['drawline', 'drawopenpath', 'drawclosedpath', 'drawcircle', 'drawrect', 'eraseshape'];
var backButtons = ['v1hovermode', 'hoverclosest', 'hovercompare', 'togglehover', 'togglespikelines'].concat(DRAW_MODES$1);
var foreButtons = [];

var addToForeButtons = function (b) {
  if (backButtons.indexOf(b._cat || b.name) !== -1) return; // for convenience add lowercase shotname e.g. zoomin as well fullname zoomInGeo

  var name = b.name;

  var _cat = (b._cat || b.name).toLowerCase();

  if (foreButtons.indexOf(name) === -1) foreButtons.push(name);
  if (foreButtons.indexOf(_cat) === -1) foreButtons.push(_cat);
};

buttonList.forEach(function (k) {
  addToForeButtons(buttons[k]);
});
foreButtons.sort();
var constants$6 = {
  DRAW_MODES: DRAW_MODES$1,
  backButtons: backButtons,
  foreButtons: foreButtons
};

var attributes$d = {
  editType: 'modebar',
  orientation: {
    valType: 'enumerated',
    values: ['v', 'h'],
    dflt: 'h',
    editType: 'modebar',
    description: 'Sets the orientation of the modebar.'
  },
  bgcolor: {
    valType: 'color',
    editType: 'modebar',
    description: 'Sets the background color of the modebar.'
  },
  color: {
    valType: 'color',
    editType: 'modebar',
    description: 'Sets the color of the icons in the modebar.'
  },
  activecolor: {
    valType: 'color',
    editType: 'modebar',
    description: 'Sets the color of the active or hovered on icons in the modebar.'
  },
  uirevision: {
    valType: 'any',
    editType: 'none',
    description: ['Controls persistence of user-driven changes related to the modebar,', 'including `hovermode`, `dragmode`, and `showspikes` at both the', 'root level and inside subplots. Defaults to `layout.uirevision`.'].join(' ')
  },
  add: {
    valType: 'string',
    arrayOk: true,
    dflt: '',
    editType: 'modebar',
    description: ['Determines which predefined modebar buttons to add.', 'Please note that these buttons will only be shown if they are', 'compatible with all trace types used in a graph.', 'Similar to `config.modeBarButtonsToAdd` option.', 'This may include *' + constants$6.backButtons.join('*, *') + '*.'].join(' ')
  },
  remove: {
    valType: 'string',
    arrayOk: true,
    dflt: '',
    editType: 'modebar',
    description: ['Determines which predefined modebar buttons to remove.', 'Similar to `config.modeBarButtonsToRemove` option.', 'This may include *' + constants$6.foreButtons.join('*, *') + '*.'].join(' ')
  }
};

var defaults$c = function supplyLayoutDefaults(layoutIn, layoutOut) {
  var containerIn = layoutIn.modebar || {};
  var containerOut = plot_template.newContainer(layoutOut, 'modebar');

  function coerce(attr, dflt) {
    return lib_1.coerce(containerIn, containerOut, attributes$d, attr, dflt);
  }

  coerce('orientation');
  coerce('bgcolor', color_1.addOpacity(layoutOut.paper_bgcolor, 0.5));
  var defaultColor = color_1.contrast(color_1.rgb(layoutOut.modebar.bgcolor));
  coerce('color', color_1.addOpacity(defaultColor, 0.3));
  coerce('activecolor', color_1.addOpacity(defaultColor, 0.7));
  coerce('uirevision', layoutOut.uirevision);
  coerce('add');
  coerce('remove');
};

var version$1 = version$2.version;
var Parser = new DOMParser();
/**
 * UI controller for interactive plots
 * @Class
 * @Param {object} opts
 * @Param {object} opts.buttons    nested arrays of grouped buttons config objects
 * @Param {object} opts.container  container div to append modeBar
 * @Param {object} opts.graphInfo  primary plot object containing data and layout
 */

function ModeBar(opts) {
  this.container = opts.container;
  this.element = document.createElement('div');
  this.update(opts.graphInfo, opts.buttons);
  this.container.appendChild(this.element);
}

var proto = ModeBar.prototype;
/**
 * Update modeBar (buttons and logo)
 *
 * @param {object} graphInfo  primary plot object containing data and layout
 * @param {array of arrays} buttons nested arrays of grouped buttons to initialize
 *
 */

proto.update = function (graphInfo, buttons) {
  this.graphInfo = graphInfo;
  var context = this.graphInfo._context;
  var fullLayout = this.graphInfo._fullLayout;
  var modeBarId = 'modebar-' + fullLayout._uid;
  this.element.setAttribute('id', modeBarId);
  this._uid = modeBarId;
  this.element.className = 'modebar';
  if (context.displayModeBar === 'hover') this.element.className += ' modebar--hover ease-bg';

  if (fullLayout.modebar.orientation === 'v') {
    this.element.className += ' vertical';
    buttons = buttons.reverse();
  }

  var style = fullLayout.modebar;
  var bgSelector = context.displayModeBar === 'hover' ? '.js-plotly-plot .plotly:hover ' : '';
  lib_1.deleteRelatedStyleRule(modeBarId);
  lib_1.addRelatedStyleRule(modeBarId, bgSelector + '#' + modeBarId + ' .modebar-group', 'background-color: ' + style.bgcolor);
  lib_1.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn .icon path', 'fill: ' + style.color);
  lib_1.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn:hover .icon path', 'fill: ' + style.activecolor);
  lib_1.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn.active .icon path', 'fill: ' + style.activecolor); // if buttons or logo have changed, redraw modebar interior

  var needsNewButtons = !this.hasButtons(buttons);
  var needsNewLogo = this.hasLogo !== context.displaylogo;
  var needsNewLocale = this.locale !== context.locale;
  this.locale = context.locale;

  if (needsNewButtons || needsNewLogo || needsNewLocale) {
    this.removeAllButtons();
    this.updateButtons(buttons);

    if (context.watermark || context.displaylogo) {
      var logoGroup = this.getLogo();

      if (context.watermark) {
        logoGroup.className = logoGroup.className + ' watermark';
      }

      if (fullLayout.modebar.orientation === 'v') {
        this.element.insertBefore(logoGroup, this.element.childNodes[0]);
      } else {
        this.element.appendChild(logoGroup);
      }

      this.hasLogo = true;
    }
  }

  this.updateActiveButton();
};

proto.updateButtons = function (buttons) {
  var _this = this;

  this.buttons = buttons;
  this.buttonElements = [];
  this.buttonsNames = [];
  this.buttons.forEach(function (buttonGroup) {
    var group = _this.createGroup();

    buttonGroup.forEach(function (buttonConfig) {
      var buttonName = buttonConfig.name;

      if (!buttonName) {
        throw new Error('must provide button \'name\' in button config');
      }

      if (_this.buttonsNames.indexOf(buttonName) !== -1) {
        throw new Error('button name \'' + buttonName + '\' is taken');
      }

      _this.buttonsNames.push(buttonName);

      var button = _this.createButton(buttonConfig);

      _this.buttonElements.push(button);

      group.appendChild(button);
    });

    _this.element.appendChild(group);
  });
};
/**
 * Empty div for containing a group of buttons
 * @Return {HTMLelement}
 */


proto.createGroup = function () {
  var group = document.createElement('div');
  group.className = 'modebar-group';
  return group;
};
/**
 * Create a new button div and set constant and configurable attributes
 * @Param {object} config (see ./buttons.js for more info)
 * @Return {HTMLelement}
 */


proto.createButton = function (config) {
  var _this = this;

  var button = document.createElement('a');
  button.setAttribute('rel', 'tooltip');
  button.className = 'modebar-btn';
  var title = config.title;
  if (title === undefined) title = config.name; // for localization: allow title to be a callable that takes gd as arg
  else if (typeof title === 'function') title = title(this.graphInfo);
  if (title || title === 0) button.setAttribute('data-title', title);
  if (config.attr !== undefined) button.setAttribute('data-attr', config.attr);
  var val = config.val;

  if (val !== undefined) {
    if (typeof val === 'function') val = val(this.graphInfo);
    button.setAttribute('data-val', val);
  }

  var click = config.click;

  if (typeof click !== 'function') {
    throw new Error('must provide button \'click\' function in button config');
  } else {
    button.addEventListener('click', function (ev) {
      config.click(_this.graphInfo, ev); // only needed for 'hoverClosestGeo' which does not call relayout

      _this.updateActiveButton(ev.currentTarget);
    });
  }

  button.setAttribute('data-toggle', config.toggle || false);
  if (config.toggle) d3.select(button).classed('active', true);
  var icon = config.icon;

  if (typeof icon === 'function') {
    button.appendChild(icon());
  } else {
    button.appendChild(this.createIcon(icon || ploticon.question));
  }

  button.setAttribute('data-gravity', config.gravity || 'n');
  return button;
};
/**
 * Add an icon to a button
 * @Param {object} thisIcon
 * @Param {number} thisIcon.width
 * @Param {string} thisIcon.path
 * @Param {string} thisIcon.color
 * @Return {HTMLelement}
 */


proto.createIcon = function (thisIcon) {
  var iconHeight = fastIsnumeric(thisIcon.height) ? Number(thisIcon.height) : thisIcon.ascent - thisIcon.descent;
  var svgNS = 'http://www.w3.org/2000/svg';
  var icon;

  if (thisIcon.path) {
    icon = document.createElementNS(svgNS, 'svg');
    icon.setAttribute('viewBox', [0, 0, thisIcon.width, iconHeight].join(' '));
    icon.setAttribute('class', 'icon');
    var path = document.createElementNS(svgNS, 'path');
    path.setAttribute('d', thisIcon.path);

    if (thisIcon.transform) {
      path.setAttribute('transform', thisIcon.transform);
    } else if (thisIcon.ascent !== undefined) {
      // Legacy icon transform calculation
      path.setAttribute('transform', 'matrix(1 0 0 -1 0 ' + thisIcon.ascent + ')');
    }

    icon.appendChild(path);
  }

  if (thisIcon.svg) {
    var svgDoc = Parser.parseFromString(thisIcon.svg, 'application/xml');
    icon = svgDoc.childNodes[0];
  }

  icon.setAttribute('height', '1em');
  icon.setAttribute('width', '1em');
  return icon;
};
/**
 * Updates active button with attribute specified in layout
 * @Param {object} graphInfo plot object containing data and layout
 * @Return {HTMLelement}
 */


proto.updateActiveButton = function (buttonClicked) {
  var fullLayout = this.graphInfo._fullLayout;
  var dataAttrClicked = buttonClicked !== undefined ? buttonClicked.getAttribute('data-attr') : null;
  this.buttonElements.forEach(function (button) {
    var thisval = button.getAttribute('data-val') || true;
    var dataAttr = button.getAttribute('data-attr');
    var isToggleButton = button.getAttribute('data-toggle') === 'true';
    var button3 = d3.select(button); // Use 'data-toggle' and 'buttonClicked' to toggle buttons
    // that have no one-to-one equivalent in fullLayout

    if (isToggleButton) {
      if (dataAttr === dataAttrClicked) {
        button3.classed('active', !button3.classed('active'));
      }
    } else {
      var val = dataAttr === null ? dataAttr : lib_1.nestedProperty(fullLayout, dataAttr).get();
      button3.classed('active', val === thisval);
    }
  });
};
/**
 * Check if modeBar is configured as button configuration argument
 *
 * @Param {object} buttons 2d array of grouped button config objects
 * @Return {boolean}
 */


proto.hasButtons = function (buttons) {
  var currentButtons = this.buttons;
  if (!currentButtons) return false;
  if (buttons.length !== currentButtons.length) return false;

  for (var i = 0; i < buttons.length; ++i) {
    if (buttons[i].length !== currentButtons[i].length) return false;

    for (var j = 0; j < buttons[i].length; j++) {
      if (buttons[i][j].name !== currentButtons[i][j].name) return false;
    }
  }

  return true;
};

function jsVersion(str) {
  return str + ' (v' + version$1 + ')';
}
/**
 * @return {HTMLDivElement} The logo image wrapped in a group
 */


proto.getLogo = function () {
  var group = this.createGroup();
  var a = document.createElement('a');
  a.href = 'https://plotly.com/';
  a.target = '_blank';
  a.setAttribute('data-title', jsVersion(lib_1._(this.graphInfo, 'Produced with Plotly.js')));
  a.className = 'modebar-btn plotlyjsicon modebar-btn--logo';
  a.appendChild(this.createIcon(ploticon.newplotlylogo));
  group.appendChild(a);
  return group;
};

proto.removeAllButtons = function () {
  while (this.element.firstChild) {
    this.element.removeChild(this.element.firstChild);
  }

  this.hasLogo = false;
};

proto.destroy = function () {
  lib_1.removeElement(this.container.querySelector('.modebar'));
  lib_1.deleteRelatedStyleRule(this._uid);
};

function createModeBar(gd, buttons) {
  var fullLayout = gd._fullLayout;
  var modeBar = new ModeBar({
    graphInfo: gd,
    container: fullLayout._modebardiv.node(),
    buttons: buttons
  });

  if (fullLayout._privateplot) {
    d3.select(modeBar.element).append('span').classed('badge-private float--left', true).text('PRIVATE');
  }

  return modeBar;
}

var modebar$1 = createModeBar;

var isUnifiedHover$1 = helpers$9.isUnifiedHover;
var DRAW_MODES = constants$6.DRAW_MODES;
/**
 * ModeBar wrapper around 'create' and 'update',
 * chooses buttons to pass to ModeBar constructor based on
 * plot type and plot config.
 *
 * @param {object} gd main plot object
 *
 */

var manage = function manageModeBar(gd) {
  var fullLayout = gd._fullLayout;
  var context = gd._context;
  var modeBar = fullLayout._modeBar;

  if (!context.displayModeBar && !context.watermark) {
    if (modeBar) {
      modeBar.destroy();
      delete fullLayout._modeBar;
    }

    return;
  }

  if (!Array.isArray(context.modeBarButtonsToRemove)) {
    throw new Error(['*modeBarButtonsToRemove* configuration options', 'must be an array.'].join(' '));
  }

  if (!Array.isArray(context.modeBarButtonsToAdd)) {
    throw new Error(['*modeBarButtonsToAdd* configuration options', 'must be an array.'].join(' '));
  }

  var customButtons = context.modeBarButtons;
  var buttonGroups;

  if (Array.isArray(customButtons) && customButtons.length) {
    buttonGroups = fillCustomButton(customButtons);
  } else if (!context.displayModeBar && context.watermark) {
    buttonGroups = [];
  } else {
    buttonGroups = getButtonGroups(gd);
  }

  if (modeBar) modeBar.update(gd, buttonGroups);else fullLayout._modeBar = modebar$1(gd, buttonGroups);
}; // logic behind which buttons are displayed by default


function getButtonGroups(gd) {
  var fullLayout = gd._fullLayout;
  var fullData = gd._fullData;
  var context = gd._context;

  function match(name, B) {
    if (typeof B === 'string') {
      if (B.toLowerCase() === name.toLowerCase()) return true;
    } else {
      var v0 = B.name;
      var v1 = B._cat || B.name;
      if (v0 === name || v1 === name.toLowerCase()) return true;
    }

    return false;
  }

  var layoutAdd = fullLayout.modebar.add;
  if (typeof layoutAdd === 'string') layoutAdd = [layoutAdd];
  var layoutRemove = fullLayout.modebar.remove;
  if (typeof layoutRemove === 'string') layoutRemove = [layoutRemove];
  var buttonsToAdd = context.modeBarButtonsToAdd.concat(layoutAdd.filter(function (e) {
    for (var i = 0; i < context.modeBarButtonsToRemove.length; i++) {
      if (match(e, context.modeBarButtonsToRemove[i])) return false;
    }

    return true;
  }));
  var buttonsToRemove = context.modeBarButtonsToRemove.concat(layoutRemove.filter(function (e) {
    for (var i = 0; i < context.modeBarButtonsToAdd.length; i++) {
      if (match(e, context.modeBarButtonsToAdd[i])) return false;
    }

    return true;
  }));

  var hasCartesian = fullLayout._has('cartesian');

  var hasGL3D = fullLayout._has('gl3d');

  var hasGeo = fullLayout._has('geo');

  var hasPie = fullLayout._has('pie');

  var hasFunnelarea = fullLayout._has('funnelarea');

  var hasGL2D = fullLayout._has('gl2d');

  var hasTernary = fullLayout._has('ternary');

  var hasMapbox = fullLayout._has('mapbox');

  var hasPolar = fullLayout._has('polar');

  var hasSmith = fullLayout._has('smith');

  var hasSankey = fullLayout._has('sankey');

  var allAxesFixed = areAllAxesFixed(fullLayout);
  var hasUnifiedHoverLabel = isUnifiedHover$1(fullLayout.hovermode);
  var groups = [];

  function addGroup(newGroup) {
    if (!newGroup.length) return;
    var out = [];

    for (var i = 0; i < newGroup.length; i++) {
      var name = newGroup[i];
      var B = buttons[name];
      var v0 = B.name.toLowerCase();
      var v1 = (B._cat || B.name).toLowerCase();
      var found = false;

      for (var q = 0; q < buttonsToRemove.length; q++) {
        var t = buttonsToRemove[q].toLowerCase();

        if (t === v0 || t === v1) {
          found = true;
          break;
        }
      }

      if (found) continue;
      out.push(buttons[name]);
    }

    groups.push(out);
  } // buttons common to all plot types


  var commonGroup = ['toImage'];
  if (context.showEditInChartStudio) commonGroup.push('editInChartStudio');else if (context.showSendToCloud) commonGroup.push('sendDataToCloud');
  addGroup(commonGroup);
  var zoomGroup = [];
  var hoverGroup = [];
  var resetGroup = [];
  var dragModeGroup = [];

  if ((hasCartesian || hasGL2D || hasPie || hasFunnelarea || hasTernary) + hasGeo + hasGL3D + hasMapbox + hasPolar + hasSmith > 1) {
    // graphs with more than one plot types get 'union buttons'
    // which reset the view or toggle hover labels across all subplots.
    hoverGroup = ['toggleHover'];
    resetGroup = ['resetViews'];
  } else if (hasGeo) {
    zoomGroup = ['zoomInGeo', 'zoomOutGeo'];
    hoverGroup = ['hoverClosestGeo'];
    resetGroup = ['resetGeo'];
  } else if (hasGL3D) {
    hoverGroup = ['hoverClosest3d'];
    resetGroup = ['resetCameraDefault3d', 'resetCameraLastSave3d'];
  } else if (hasMapbox) {
    zoomGroup = ['zoomInMapbox', 'zoomOutMapbox'];
    hoverGroup = ['toggleHover'];
    resetGroup = ['resetViewMapbox'];
  } else if (hasGL2D) {
    hoverGroup = ['hoverClosestGl2d'];
  } else if (hasPie) {
    hoverGroup = ['hoverClosestPie'];
  } else if (hasSankey) {
    hoverGroup = ['hoverClosestCartesian', 'hoverCompareCartesian'];
    resetGroup = ['resetViewSankey'];
  } else {
    // hasPolar, hasSmith, hasTernary
    // always show at least one hover icon.
    hoverGroup = ['toggleHover'];
  } // if we have cartesian, allow switching between closest and compare
  // regardless of what other types are on the plot, since they'll all
  // just treat any truthy hovermode as 'closest'


  if (hasCartesian) {
    hoverGroup = ['toggleSpikelines', 'hoverClosestCartesian', 'hoverCompareCartesian'];
  }

  if (hasNoHover(fullData) || hasUnifiedHoverLabel) {
    hoverGroup = [];
  }

  if ((hasCartesian || hasGL2D) && !allAxesFixed) {
    zoomGroup = ['zoomIn2d', 'zoomOut2d', 'autoScale2d'];
    if (resetGroup[0] !== 'resetViews') resetGroup = ['resetScale2d'];
  }

  if (hasGL3D) {
    dragModeGroup = ['zoom3d', 'pan3d', 'orbitRotation', 'tableRotation'];
  } else if ((hasCartesian || hasGL2D) && !allAxesFixed || hasTernary) {
    dragModeGroup = ['zoom2d', 'pan2d'];
  } else if (hasMapbox || hasGeo) {
    dragModeGroup = ['pan2d'];
  } else if (hasPolar) {
    dragModeGroup = ['zoom2d'];
  }

  if (isSelectable(fullData)) {
    dragModeGroup.push('select2d', 'lasso2d');
  }

  var enabledHoverGroup = [];

  var enableHover = function (a) {
    // return if already added
    if (enabledHoverGroup.indexOf(a) !== -1) return; // should be in hoverGroup

    if (hoverGroup.indexOf(a) !== -1) {
      enabledHoverGroup.push(a);
    }
  };

  if (Array.isArray(buttonsToAdd)) {
    var newList = [];

    for (var i = 0; i < buttonsToAdd.length; i++) {
      var b = buttonsToAdd[i];

      if (typeof b === 'string') {
        b = b.toLowerCase();

        if (DRAW_MODES.indexOf(b) !== -1) {
          // accept pre-defined drag modes i.e. shape drawing features as string
          if (fullLayout._has('mapbox') || // draw shapes in paper coordinate (could be improved in future to support data coordinate, when there is no pitch)
          fullLayout._has('cartesian') // draw shapes in data coordinate
          ) {
            dragModeGroup.push(b);
          }
        } else if (b === 'togglespikelines') {
          enableHover('toggleSpikelines');
        } else if (b === 'togglehover') {
          enableHover('toggleHover');
        } else if (b === 'hovercompare') {
          enableHover('hoverCompareCartesian');
        } else if (b === 'hoverclosest') {
          enableHover('hoverClosestCartesian');
          enableHover('hoverClosestGeo');
          enableHover('hoverClosest3d');
          enableHover('hoverClosestGl2d');
          enableHover('hoverClosestPie');
        } else if (b === 'v1hovermode') {
          enableHover('toggleHover');
          enableHover('hoverClosestCartesian');
          enableHover('hoverCompareCartesian');
          enableHover('hoverClosestGeo');
          enableHover('hoverClosest3d');
          enableHover('hoverClosestGl2d');
          enableHover('hoverClosestPie');
        }
      } else newList.push(b);
    }

    buttonsToAdd = newList;
  }

  addGroup(dragModeGroup);
  addGroup(zoomGroup.concat(resetGroup));
  addGroup(enabledHoverGroup);
  return appendButtonsToGroups(groups, buttonsToAdd);
}

function areAllAxesFixed(fullLayout) {
  var axList = axis_ids.list({
    _fullLayout: fullLayout
  }, null, true);

  for (var i = 0; i < axList.length; i++) {
    if (!axList[i].fixedrange) {
      return false;
    }
  }

  return true;
} // look for traces that support selection
// to be updated as we add more selectPoints handlers


function isSelectable(fullData) {
  var selectable = false;

  for (var i = 0; i < fullData.length; i++) {
    if (selectable) break;
    var trace = fullData[i];
    if (!trace._module || !trace._module.selectPoints) continue;

    if (registry.traceIs(trace, 'scatter-like')) {
      if (subtypes.hasMarkers(trace) || subtypes.hasText(trace)) {
        selectable = true;
      }
    } else if (registry.traceIs(trace, 'box-violin')) {
      if (trace.boxpoints === 'all' || trace.points === 'all') {
        selectable = true;
      }
    } else {
      // assume that in general if the trace module has selectPoints,
      // then it's selectable. Scatter is an exception to this because it must
      // have markers or text, not just be a scatter type.
      selectable = true;
    }
  }

  return selectable;
} // check whether all trace are 'noHover'


function hasNoHover(fullData) {
  for (var i = 0; i < fullData.length; i++) {
    if (!registry.traceIs(fullData[i], 'noHover')) return false;
  }

  return true;
}

function appendButtonsToGroups(groups, buttons) {
  if (buttons.length) {
    if (Array.isArray(buttons[0])) {
      for (var i = 0; i < buttons.length; i++) {
        groups.push(buttons[i]);
      }
    } else groups.push(buttons);
  }

  return groups;
} // fill in custom buttons referring to default mode bar buttons


function fillCustomButton(customButtons) {
  for (var i = 0; i < customButtons.length; i++) {
    var buttonGroup = customButtons[i];

    for (var j = 0; j < buttonGroup.length; j++) {
      var button = buttonGroup[j];

      if (typeof button === 'string') {
        if (buttons[button] !== undefined) {
          customButtons[i][j] = buttons[button];
        } else {
          throw new Error(['*modeBarButtons* configuration options', 'invalid button name'].join(' '));
        }
      }
    }
  }

  return customButtons;
}

var modebar = {
  moduleType: 'component',
  name: 'modebar',
  layoutAttributes: attributes$d,
  supplyLayoutDefaults: defaults$c,
  manage: manage
};

var FROM_BL$1 = alignment.FROM_BL;

var scale_zoom = function scaleZoom(ax, factor, centerFraction) {
  if (centerFraction === undefined) {
    centerFraction = FROM_BL$1[ax.constraintoward || 'center'];
  }

  var rangeLinear = [ax.r2l(ax.range[0]), ax.r2l(ax.range[1])];
  var center = rangeLinear[0] + (rangeLinear[1] - rangeLinear[0]) * centerFraction;
  ax.range = ax._input.range = [ax.l2r(center + (rangeLinear[0] - center) * factor), ax.l2r(center + (rangeLinear[1] - center) * factor)];
  ax.setScale();
};

var id2name$1 = axis_ids.id2name;
var ALMOST_EQUAL = numerical.ALMOST_EQUAL;
var FROM_BL = alignment.FROM_BL;

var handleDefaults = function (layoutIn, layoutOut, opts) {
  var axIds = opts.axIds;
  var axHasImage = opts.axHasImage; // sets of axes linked by `scaleanchor` OR `matches` along with the
  // scaleratios compounded together, populated in handleConstraintDefaults

  var constraintGroups = layoutOut._axisConstraintGroups = []; // similar to _axisConstraintGroups, but only matching axes

  var matchGroups = layoutOut._axisMatchGroups = [];
  var i, group, axId, axName, axIn, axOut, attr, val;

  for (i = 0; i < axIds.length; i++) {
    axName = id2name$1(axIds[i]);
    axIn = layoutIn[axName];
    axOut = layoutOut[axName];
    handleOneAxDefaults(axIn, axOut, {
      axIds: axIds,
      layoutOut: layoutOut,
      hasImage: axHasImage[axName]
    });
  } // save matchGroup on each matching axis


  function stash(groups, stashAttr) {
    for (i = 0; i < groups.length; i++) {
      group = groups[i];

      for (axId in group) {
        layoutOut[id2name$1(axId)][stashAttr] = group;
      }
    }
  }

  stash(matchGroups, '_matchGroup'); // If any axis in a constraint group is fixedrange, they all get fixed
  // This covers matches axes, as they're now in the constraintgroup too
  // and have not yet been removed (if the group is *only* matching)

  for (i = 0; i < constraintGroups.length; i++) {
    group = constraintGroups[i];

    for (axId in group) {
      axOut = layoutOut[id2name$1(axId)];

      if (axOut.fixedrange) {
        for (var axId2 in group) {
          var axName2 = id2name$1(axId2);

          if ((layoutIn[axName2] || {}).fixedrange === false) {
            lib_1.warn('fixedrange was specified as false for axis ' + axName2 + ' but was overridden because another ' + 'axis in its constraint group has fixedrange true');
          }

          layoutOut[axName2].fixedrange = true;
        }

        break;
      }
    }
  } // remove constraint groups that simply duplicate match groups


  i = 0;

  while (i < constraintGroups.length) {
    group = constraintGroups[i];

    for (axId in group) {
      axOut = layoutOut[id2name$1(axId)];

      if (axOut._matchGroup && Object.keys(axOut._matchGroup).length === Object.keys(group).length) {
        constraintGroups.splice(i, 1);
        i--;
      }

      break;
    }

    i++;
  } // save constraintGroup on each constrained axis


  stash(constraintGroups, '_constraintGroup'); // make sure `matching` axes share values of necessary attributes
  // Precedence (base axis is the one that doesn't list a `matches`, ie others
  // all point to it):
  // (1) explicitly defined value in the base axis
  // (2) explicitly defined in another axis (arbitrary order)
  // (3) default in the base axis

  var matchAttrs = ['constrain', 'range', 'autorange', 'rangemode', 'rangebreaks', 'categoryorder', 'categoryarray'];
  var hasRange = false;
  var hasDayOfWeekBreaks = false;

  function setAttrVal() {
    val = axOut[attr];

    if (attr === 'rangebreaks') {
      hasDayOfWeekBreaks = axOut._hasDayOfWeekBreaks;
    }
  }

  for (i = 0; i < matchGroups.length; i++) {
    group = matchGroups[i]; // find 'matching' range attrs

    for (var j = 0; j < matchAttrs.length; j++) {
      attr = matchAttrs[j];
      val = null;
      var baseAx;

      for (axId in group) {
        axName = id2name$1(axId);
        axIn = layoutIn[axName];
        axOut = layoutOut[axName];

        if (!(attr in axOut)) {
          continue;
        }

        if (!axOut.matches) {
          baseAx = axOut; // top priority: explicit value in base axis

          if (attr in axIn) {
            setAttrVal();
            break;
          }
        }

        if (val === null && attr in axIn) {
          // second priority: first explicit value in another axis
          setAttrVal();
        }
      } // special logic for coupling of range and autorange
      // if nobody explicitly specifies autorange, but someone does
      // explicitly specify range, autorange must be disabled.


      if (attr === 'range' && val) {
        hasRange = true;
      }

      if (attr === 'autorange' && val === null && hasRange) {
        val = false;
      }

      if (val === null && attr in baseAx) {
        // fallback: default value in base axis
        val = baseAx[attr];
      } // but we still might not have a value, which is fine.


      if (val !== null) {
        for (axId in group) {
          axOut = layoutOut[id2name$1(axId)];
          axOut[attr] = attr === 'range' ? val.slice() : val;

          if (attr === 'rangebreaks') {
            axOut._hasDayOfWeekBreaks = hasDayOfWeekBreaks;
            set_convert(axOut, layoutOut);
          }
        }
      }
    }
  }
};

function handleOneAxDefaults(axIn, axOut, opts) {
  var axIds = opts.axIds;
  var layoutOut = opts.layoutOut;
  var hasImage = opts.hasImage;
  var constraintGroups = layoutOut._axisConstraintGroups;
  var matchGroups = layoutOut._axisMatchGroups;
  var axId = axOut._id;
  var axLetter = axId.charAt(0);
  var splomStash = ((layoutOut._splomAxes || {})[axLetter] || {})[axId] || {};
  var thisID = axOut._id;
  var isX = thisID.charAt(0) === 'x'; // Clear _matchGroup & _constraintGroup so relinkPrivateKeys doesn't keep
  // an old one around. If this axis is in a group we'll set this again later

  axOut._matchGroup = null;
  axOut._constraintGroup = null;

  function coerce(attr, dflt) {
    return lib_1.coerce(axIn, axOut, layout_attributes$1, attr, dflt);
  } // coerce the constraint mechanics even if this axis has no scaleanchor
  // because it may be the anchor of another axis.


  coerce('constrain', hasImage ? 'domain' : 'range');
  lib_1.coerce(axIn, axOut, {
    constraintoward: {
      valType: 'enumerated',
      values: isX ? ['left', 'center', 'right'] : ['bottom', 'middle', 'top'],
      dflt: isX ? 'center' : 'middle'
    }
  }, 'constraintoward'); // If this axis is already part of a constraint group, we can't
  // scaleanchor any other axis in that group, or we'd make a loop.
  // Filter axIds to enforce this, also matching axis types.

  var thisType = axOut.type;
  var i, idi;
  var linkableAxes = [];

  for (i = 0; i < axIds.length; i++) {
    idi = axIds[i];
    if (idi === thisID) continue;
    var axi = layoutOut[id2name$1(idi)];

    if (axi.type === thisType) {
      linkableAxes.push(idi);
    }
  }

  var thisGroup = getConstraintGroup(constraintGroups, thisID);

  if (thisGroup) {
    var linkableAxesNoLoops = [];

    for (i = 0; i < linkableAxes.length; i++) {
      idi = linkableAxes[i];
      if (!thisGroup[idi]) linkableAxesNoLoops.push(idi);
    }

    linkableAxes = linkableAxesNoLoops;
  }

  var canLink = linkableAxes.length;
  var matches, scaleanchor;

  if (canLink && (axIn.matches || splomStash.matches)) {
    matches = lib_1.coerce(axIn, axOut, {
      matches: {
        valType: 'enumerated',
        values: linkableAxes,
        dflt: linkableAxes.indexOf(splomStash.matches) !== -1 ? splomStash.matches : undefined
      }
    }, 'matches');
  } // 'matches' wins over 'scaleanchor' - each axis can only specify one
  // constraint, but you can chain matches and scaleanchor constraints by
  // specifying them in separate axes.


  var scaleanchorDflt = hasImage && !isX ? axOut.anchor : undefined;

  if (canLink && !matches && (axIn.scaleanchor || scaleanchorDflt)) {
    scaleanchor = lib_1.coerce(axIn, axOut, {
      scaleanchor: {
        valType: 'enumerated',
        values: linkableAxes
      }
    }, 'scaleanchor', scaleanchorDflt);
  }

  if (matches) {
    axOut._matchGroup = updateConstraintGroups(matchGroups, thisID, matches, 1); // Also include match constraints in the scale groups

    var matchedAx = layoutOut[id2name$1(matches)];
    var matchRatio = extent(layoutOut, axOut) / extent(layoutOut, matchedAx);

    if (isX !== (matches.charAt(0) === 'x')) {
      // We don't yet know the actual scale ratio of x/y matches constraints,
      // due to possible automargins, so just leave a placeholder for this:
      // 'x' means "x size over y size", 'y' means the inverse.
      // in principle in the constraint group you could get multiple of these.
      matchRatio = (isX ? 'x' : 'y') + matchRatio;
    }

    updateConstraintGroups(constraintGroups, thisID, matches, matchRatio);
  } else if (axIn.matches && axIds.indexOf(axIn.matches) !== -1) {
    lib_1.warn('ignored ' + axOut._name + '.matches: "' + axIn.matches + '" to avoid an infinite loop');
  }

  if (scaleanchor) {
    var scaleratio = coerce('scaleratio'); // TODO: I suppose I could do attribute.min: Number.MIN_VALUE to avoid zero,
    // but that seems hacky. Better way to say "must be a positive number"?
    // Of course if you use several super-tiny values you could eventually
    // force a product of these to zero and all hell would break loose...
    // Likewise with super-huge values.

    if (!scaleratio) scaleratio = axOut.scaleratio = 1;
    updateConstraintGroups(constraintGroups, thisID, scaleanchor, scaleratio);
  } else if (axIn.scaleanchor && axIds.indexOf(axIn.scaleanchor) !== -1) {
    lib_1.warn('ignored ' + axOut._name + '.scaleanchor: "' + axIn.scaleanchor + '" to avoid either an infinite loop ' + 'and possibly inconsistent scaleratios, or because this axis ' + 'declares a *matches* constraint.');
  }
}

function extent(layoutOut, ax) {
  var domain = ax.domain;

  if (!domain) {
    // at this point overlaying axes haven't yet inherited their main domains
    // TODO: constrain: domain with overlaying axes is likely a bug.
    domain = layoutOut[id2name$1(ax.overlaying)].domain;
  }

  return domain[1] - domain[0];
}

function getConstraintGroup(groups, thisID) {
  for (var i = 0; i < groups.length; i++) {
    if (groups[i][thisID]) {
      return groups[i];
    }
  }

  return null;
}
/*
 * Add this axis to the axis constraint groups, which is the collection
 * of axes that are all constrained together on scale (or matching).
 *
 * constraintGroups: a list of objects. each object is
 * {axis_id: scale_within_group}, where scale_within_group is
 * only important relative to the rest of the group, and defines
 * the relative scales between all axes in the group
 *
 * thisGroup: the group the current axis is already in
 * thisID: the id if the current axis
 * thatID: the id of the axis to scale it with
 * scaleratio: the ratio of this axis to the thatID axis
 */


function updateConstraintGroups(constraintGroups, thisID, thatID, scaleratio) {
  var i, j, groupi, keyj, thisGroupIndex;
  var thisGroup = getConstraintGroup(constraintGroups, thisID);

  if (thisGroup === null) {
    thisGroup = {};
    thisGroup[thisID] = 1;
    thisGroupIndex = constraintGroups.length;
    constraintGroups.push(thisGroup);
  } else {
    thisGroupIndex = constraintGroups.indexOf(thisGroup);
  }

  var thisGroupKeys = Object.keys(thisGroup); // we know that this axis isn't in any other groups, but we don't know
  // about the thatID axis. If it is, we need to merge the groups.

  for (i = 0; i < constraintGroups.length; i++) {
    groupi = constraintGroups[i];

    if (i !== thisGroupIndex && groupi[thatID]) {
      var baseScale = groupi[thatID];

      for (j = 0; j < thisGroupKeys.length; j++) {
        keyj = thisGroupKeys[j];
        groupi[keyj] = multiplyScales(baseScale, multiplyScales(scaleratio, thisGroup[keyj]));
      }

      constraintGroups.splice(thisGroupIndex, 1);
      return;
    }
  } // otherwise, we insert the new thatID axis as the base scale (1)
  // in its group, and scale the rest of the group to it


  if (scaleratio !== 1) {
    for (j = 0; j < thisGroupKeys.length; j++) {
      var key = thisGroupKeys[j];
      thisGroup[key] = multiplyScales(scaleratio, thisGroup[key]);
    }
  }

  thisGroup[thatID] = 1;
} // scales may be numbers or 'x1.3', 'yy4.5' etc to multiply by as-yet-unknown
// ratios between x and y plot sizes n times


function multiplyScales(a, b) {
  var aPrefix = '';
  var bPrefix = '';
  var aLen, bLen;

  if (typeof a === 'string') {
    aPrefix = a.match(/^[xy]*/)[0];
    aLen = aPrefix.length;
    a = +a.substr(aLen);
  }

  if (typeof b === 'string') {
    bPrefix = b.match(/^[xy]*/)[0];
    bLen = bPrefix.length;
    b = +b.substr(bLen);
  }

  var c = a * b; // just two numbers

  if (!aLen && !bLen) {
    return c;
  } // one or more prefixes of the same type


  if (!aLen || !bLen || aPrefix.charAt(0) === bPrefix.charAt(0)) {
    return aPrefix + bPrefix + a * b;
  } // x and y cancel each other out exactly - back to a number


  if (aLen === bLen) {
    return c;
  } // partial cancelation of prefixes


  return (aLen > bLen ? aPrefix.substr(bLen) : bPrefix.substr(aLen)) + c;
}

function finalRatios(group, fullLayout) {
  var size = fullLayout._size;
  var yRatio = size.h / size.w;
  var out = {};
  var keys = Object.keys(group);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var val = group[key];

    if (typeof val === 'string') {
      var prefix = val.match(/^[xy]*/)[0];
      var pLen = prefix.length;
      val = +val.substr(pLen);
      var mult = prefix.charAt(0) === 'y' ? yRatio : 1 / yRatio;

      for (var j = 0; j < pLen; j++) {
        val *= mult;
      }
    }

    out[key] = val;
  }

  return out;
}

var enforce = function enforce(gd) {
  var fullLayout = gd._fullLayout;
  var constraintGroups = fullLayout._axisConstraintGroups || [];
  var i, j, group, axisID, ax, normScale, mode, factor; // matching constraints are handled in the autorange code when autoranged,
  // or in the supplyDefaults code when explicitly ranged.
  // now we just need to handle scaleanchor constraints
  // matches constraints that chain with scaleanchor constraints are included
  // here too, but because matches has already been satisfied,
  // any changes here should preserve that.

  for (i = 0; i < constraintGroups.length; i++) {
    group = finalRatios(constraintGroups[i], fullLayout);
    var axisIDs = Object.keys(group);
    var minScale = Infinity;
    var maxScale = 0; // mostly matchScale will be the same as minScale
    // ie we expand axis ranges to encompass *everything*
    // that's currently in any of their ranges, but during
    // autorange of a subset of axes we will ignore other
    // axes for this purpose.

    var matchScale = Infinity;
    var normScales = {};
    var axes = {};
    var hasAnyDomainConstraint = false; // find the (normalized) scale of each axis in the group

    for (j = 0; j < axisIDs.length; j++) {
      axisID = axisIDs[j];
      axes[axisID] = ax = fullLayout[id2name$1(axisID)];
      if (ax._inputDomain) ax.domain = ax._inputDomain.slice();else ax._inputDomain = ax.domain.slice();
      if (!ax._inputRange) ax._inputRange = ax.range.slice(); // set axis scale here so we can use _m rather than
      // having to calculate it from length and range

      ax.setScale(); // abs: inverted scales still satisfy the constraint

      normScales[axisID] = normScale = Math.abs(ax._m) / group[axisID];
      minScale = Math.min(minScale, normScale);

      if (ax.constrain === 'domain' || !ax._constraintShrinkable) {
        matchScale = Math.min(matchScale, normScale);
      } // this has served its purpose, so remove it


      delete ax._constraintShrinkable;
      maxScale = Math.max(maxScale, normScale);
      if (ax.constrain === 'domain') hasAnyDomainConstraint = true;
    } // Do we have a constraint mismatch? Give a small buffer for rounding errors


    if (minScale > ALMOST_EQUAL * maxScale && !hasAnyDomainConstraint) continue; // now increase any ranges we need to until all normalized scales are equal

    for (j = 0; j < axisIDs.length; j++) {
      axisID = axisIDs[j];
      normScale = normScales[axisID];
      ax = axes[axisID];
      mode = ax.constrain; // even if the scale didn't change, if we're shrinking domain
      // we need to recalculate in case `constraintoward` changed

      if (normScale !== matchScale || mode === 'domain') {
        factor = normScale / matchScale;

        if (mode === 'range') {
          scale_zoom(ax, factor);
        } else {
          // mode === 'domain'
          var inputDomain = ax._inputDomain;
          var domainShrunk = (ax.domain[1] - ax.domain[0]) / (inputDomain[1] - inputDomain[0]);
          var rangeShrunk = (ax.r2l(ax.range[1]) - ax.r2l(ax.range[0])) / (ax.r2l(ax._inputRange[1]) - ax.r2l(ax._inputRange[0]));
          factor /= domainShrunk;

          if (factor * rangeShrunk < 1) {
            // we've asked to magnify the axis more than we can just by
            // enlarging the domain - so we need to constrict range
            ax.domain = ax._input.domain = inputDomain.slice();
            scale_zoom(ax, factor);
            continue;
          }

          if (rangeShrunk < 1) {
            // the range has previously been constricted by ^^, but we've
            // switched to the domain-constricted regime, so reset range
            ax.range = ax._input.range = ax._inputRange.slice();
            factor *= rangeShrunk;
          }

          if (ax.autorange) {
            /*
             * range & factor may need to change because range was
             * calculated for the larger scaling, so some pixel
             * paddings may get cut off when we reduce the domain.
             *
             * This is easier than the regular autorange calculation
             * because we already know the scaling `m`, but we still
             * need to cut out impossible constraints (like
             * annotations with super-long arrows). That's what
             * outerMin/Max are for - if the expansion was going to
             * go beyond the original domain, it must be impossible
             */
            var rl0 = ax.r2l(ax.range[0]);
            var rl1 = ax.r2l(ax.range[1]);
            var rangeCenter = (rl0 + rl1) / 2;
            var rangeMin = rangeCenter;
            var rangeMax = rangeCenter;
            var halfRange = Math.abs(rl1 - rangeCenter); // extra tiny bit for rounding errors, in case we actually
            // *are* expanding to the full domain

            var outerMin = rangeCenter - halfRange * factor * 1.0001;
            var outerMax = rangeCenter + halfRange * factor * 1.0001;
            var getPadMin = autorange.makePadFn(fullLayout, ax, 0);
            var getPadMax = autorange.makePadFn(fullLayout, ax, 1);
            updateDomain(ax, factor);
            var m = Math.abs(ax._m);
            var extremes = autorange.concatExtremes(gd, ax);
            var minArray = extremes.min;
            var maxArray = extremes.max;
            var newVal;
            var k;

            for (k = 0; k < minArray.length; k++) {
              newVal = minArray[k].val - getPadMin(minArray[k]) / m;

              if (newVal > outerMin && newVal < rangeMin) {
                rangeMin = newVal;
              }
            }

            for (k = 0; k < maxArray.length; k++) {
              newVal = maxArray[k].val + getPadMax(maxArray[k]) / m;

              if (newVal < outerMax && newVal > rangeMax) {
                rangeMax = newVal;
              }
            }

            var domainExpand = (rangeMax - rangeMin) / (2 * halfRange);
            factor /= domainExpand;
            rangeMin = ax.l2r(rangeMin);
            rangeMax = ax.l2r(rangeMax);
            ax.range = ax._input.range = rl0 < rl1 ? [rangeMin, rangeMax] : [rangeMax, rangeMin];
          }

          updateDomain(ax, factor);
        }
      }
    }
  }
};

var getAxisGroup = function getAxisGroup(fullLayout, axId) {
  var matchGroups = fullLayout._axisMatchGroups;

  for (var i = 0; i < matchGroups.length; i++) {
    var group = matchGroups[i];
    if (group[axId]) return 'g' + i;
  }

  return axId;
}; // For use before autoranging, check if this axis was previously constrained
// by domain but no longer is


var clean$1 = function clean(gd, ax) {
  if (ax._inputDomain) {
    var isConstrained = false;
    var axId = ax._id;
    var constraintGroups = gd._fullLayout._axisConstraintGroups;

    for (var j = 0; j < constraintGroups.length; j++) {
      if (constraintGroups[j][axId]) {
        isConstrained = true;
        break;
      }
    }

    if (!isConstrained || ax.constrain !== 'domain') {
      ax._input.domain = ax.domain = ax._inputDomain;
      delete ax._inputDomain;
    }
  }
};

function updateDomain(ax, factor) {
  var inputDomain = ax._inputDomain;
  var centerFraction = FROM_BL[ax.constraintoward];
  var center = inputDomain[0] + (inputDomain[1] - inputDomain[0]) * centerFraction;
  ax.domain = ax._input.domain = [center + (inputDomain[0] - center) / factor, center + (inputDomain[1] - center) / factor];
  ax.setScale();
}

var constraints = {
  handleDefaults: handleDefaults,
  enforce: enforce,
  getAxisGroup: getAxisGroup,
  clean: clean$1
};

var subroutines = createCommonjsModule(function (module, exports) {

  var enforceAxisConstraints = constraints.enforce;
  var cleanAxisConstraints = constraints.clean;
  var doAutoRange = autorange.doAutoRange;
  var SVG_TEXT_ANCHOR_START = 'start';
  var SVG_TEXT_ANCHOR_MIDDLE = 'middle';
  var SVG_TEXT_ANCHOR_END = 'end';

  exports.layoutStyles = function (gd) {
    return lib_1.syncOrAsync([plots_1.doAutoMargin, lsInner], gd);
  };

  function overlappingDomain(xDomain, yDomain, domains) {
    for (var i = 0; i < domains.length; i++) {
      var existingX = domains[i][0];
      var existingY = domains[i][1];

      if (existingX[0] >= xDomain[1] || existingX[1] <= xDomain[0]) {
        continue;
      }

      if (existingY[0] < yDomain[1] && existingY[1] > yDomain[0]) {
        return true;
      }
    }

    return false;
  }

  function lsInner(gd) {
    var fullLayout = gd._fullLayout;
    var gs = fullLayout._size;
    var pad = gs.p;
    var axList = axes_1.list(gd, '', true);
    var i, subplot, plotinfo, ax, xa, ya;

    fullLayout._paperdiv.style({
      width: gd._context.responsive && fullLayout.autosize && !gd._context._hasZeroWidth && !gd.layout.width ? '100%' : fullLayout.width + 'px',
      height: gd._context.responsive && fullLayout.autosize && !gd._context._hasZeroHeight && !gd.layout.height ? '100%' : fullLayout.height + 'px'
    }).selectAll('.main-svg').call(drawing_1.setSize, fullLayout.width, fullLayout.height);

    gd._context.setBackground(gd, fullLayout.paper_bgcolor);

    exports.drawMainTitle(gd);
    modebar.manage(gd); // _has('cartesian') means SVG specifically, not GL2D - but GL2D
    // can still get here because it makes some of the SVG structure
    // for shared features like selections.

    if (!fullLayout._has('cartesian')) {
      return plots_1.previousPromises(gd);
    }

    function getLinePosition(ax, counterAx, side) {
      var lwHalf = ax._lw / 2;

      if (ax._id.charAt(0) === 'x') {
        if (!counterAx) return gs.t + gs.h * (1 - (ax.position || 0)) + lwHalf % 1;else if (side === 'top') return counterAx._offset - pad - lwHalf;
        return counterAx._offset + counterAx._length + pad + lwHalf;
      }

      if (!counterAx) return gs.l + gs.w * (ax.position || 0) + lwHalf % 1;else if (side === 'right') return counterAx._offset + counterAx._length + pad + lwHalf;
      return counterAx._offset - pad - lwHalf;
    } // some preparation of axis position info


    for (i = 0; i < axList.length; i++) {
      ax = axList[i];
      var counterAx = ax._anchorAxis; // clear axis line positions, to be set in the subplot loop below

      ax._linepositions = {}; // stash crispRounded linewidth so we don't need to pass gd all over the place

      ax._lw = drawing_1.crispRound(gd, ax.linewidth, 1); // figure out the main axis line and main mirror line position.
      // it's easier to follow the logic if we handle these separately from
      // ax._linepositions, which are only used by mirror=allticks
      // for non-main-subplot ticks, and mirror=all(ticks)? for zero line
      // hiding logic

      ax._mainLinePosition = getLinePosition(ax, counterAx, ax.side);
      ax._mainMirrorPosition = ax.mirror && counterAx ? getLinePosition(ax, counterAx, alignment.OPPOSITE_SIDE[ax.side]) : null;
    } // figure out which backgrounds we need to draw,
    // and in which layers to put them


    var lowerBackgroundIDs = [];
    var backgroundIds = [];
    var lowerDomains = []; // no need to draw background when paper and plot color are the same color,
    // activate mode just for large splom (which benefit the most from this
    // optimization), but this could apply to all cartesian subplots.

    var noNeedForBg = color_1.opacity(fullLayout.paper_bgcolor) === 1 && color_1.opacity(fullLayout.plot_bgcolor) === 1 && fullLayout.paper_bgcolor === fullLayout.plot_bgcolor;

    for (subplot in fullLayout._plots) {
      plotinfo = fullLayout._plots[subplot];

      if (plotinfo.mainplot) {
        // mainplot is a reference to the main plot this one is overlaid on
        // so if it exists, this is an overlaid plot and we don't need to
        // give it its own background
        if (plotinfo.bg) {
          plotinfo.bg.remove();
        }

        plotinfo.bg = undefined;
      } else {
        var xDomain = plotinfo.xaxis.domain;
        var yDomain = plotinfo.yaxis.domain;
        var plotgroup = plotinfo.plotgroup;

        if (overlappingDomain(xDomain, yDomain, lowerDomains)) {
          var pgNode = plotgroup.node();
          var plotgroupBg = plotinfo.bg = lib_1.ensureSingle(plotgroup, 'rect', 'bg');
          pgNode.insertBefore(plotgroupBg.node(), pgNode.childNodes[0]);
          backgroundIds.push(subplot);
        } else {
          plotgroup.select('rect.bg').remove();
          lowerDomains.push([xDomain, yDomain]);

          if (!noNeedForBg) {
            lowerBackgroundIDs.push(subplot);
            backgroundIds.push(subplot);
          }
        }
      }
    } // now create all the lower-layer backgrounds at once now that
    // we have the list of subplots that need them


    var lowerBackgrounds = fullLayout._bgLayer.selectAll('.bg').data(lowerBackgroundIDs);

    lowerBackgrounds.enter().append('rect').classed('bg', true);
    lowerBackgrounds.exit().remove();
    lowerBackgrounds.each(function (subplot) {
      fullLayout._plots[subplot].bg = d3.select(this);
    }); // style all backgrounds

    for (i = 0; i < backgroundIds.length; i++) {
      plotinfo = fullLayout._plots[backgroundIds[i]];
      xa = plotinfo.xaxis;
      ya = plotinfo.yaxis;

      if (plotinfo.bg && xa._offset !== undefined && ya._offset !== undefined) {
        plotinfo.bg.call(drawing_1.setRect, xa._offset - pad, ya._offset - pad, xa._length + 2 * pad, ya._length + 2 * pad).call(color_1.fill, fullLayout.plot_bgcolor).style('stroke-width', 0);
      }
    }

    if (!fullLayout._hasOnlyLargeSploms) {
      for (subplot in fullLayout._plots) {
        plotinfo = fullLayout._plots[subplot];
        xa = plotinfo.xaxis;
        ya = plotinfo.yaxis; // Clip so that data only shows up on the plot area.

        var clipId = plotinfo.clipId = 'clip' + fullLayout._uid + subplot + 'plot';
        var plotClip = lib_1.ensureSingleById(fullLayout._clips, 'clipPath', clipId, function (s) {
          s.classed('plotclip', true).append('rect');
        });
        plotinfo.clipRect = plotClip.select('rect').attr({
          width: xa._length,
          height: ya._length
        });
        drawing_1.setTranslate(plotinfo.plot, xa._offset, ya._offset);
        var plotClipId;
        var layerClipId;

        if (plotinfo._hasClipOnAxisFalse) {
          plotClipId = null;
          layerClipId = clipId;
        } else {
          plotClipId = clipId;
          layerClipId = null;
        }

        drawing_1.setClipUrl(plotinfo.plot, plotClipId, gd); // stash layer clipId value (null or same as clipId)
        // to DRY up Drawing.setClipUrl calls on trace-module and trace layers
        // downstream

        plotinfo.layerClipId = layerClipId;
      }
    }

    var xLinesXLeft, xLinesXRight, xLinesYBottom, xLinesYTop, leftYLineWidth, rightYLineWidth;
    var yLinesYBottom, yLinesYTop, yLinesXLeft, yLinesXRight, connectYBottom, connectYTop;
    var extraSubplot;

    function xLinePath(y) {
      return 'M' + xLinesXLeft + ',' + y + 'H' + xLinesXRight;
    }

    function xLinePathFree(y) {
      return 'M' + xa._offset + ',' + y + 'h' + xa._length;
    }

    function yLinePath(x) {
      return 'M' + x + ',' + yLinesYTop + 'V' + yLinesYBottom;
    }

    function yLinePathFree(x) {
      return 'M' + x + ',' + ya._offset + 'v' + ya._length;
    }

    function mainPath(ax, pathFn, pathFnFree) {
      if (!ax.showline || subplot !== ax._mainSubplot) return '';
      if (!ax._anchorAxis) return pathFnFree(ax._mainLinePosition);
      var out = pathFn(ax._mainLinePosition);
      if (ax.mirror) out += pathFn(ax._mainMirrorPosition);
      return out;
    }

    for (subplot in fullLayout._plots) {
      plotinfo = fullLayout._plots[subplot];
      xa = plotinfo.xaxis;
      ya = plotinfo.yaxis;
      /*
       * x lines get longer where they meet y lines, to make a crisp corner.
       * The x lines get the padding (margin.pad) plus the y line width to
       * fill up the corner nicely. Free x lines are excluded - they always
       * span exactly the data area of the plot
       *
       *  | XXXXX
       *  | XXXXX
       *  |
       *  +------
       *     x1
       *    -----
       *     x2
       */

      var xPath = 'M0,0';

      if (shouldShowLinesOrTicks(xa, subplot)) {
        leftYLineWidth = findCounterAxisLineWidth(xa, 'left', ya, axList);
        xLinesXLeft = xa._offset - (leftYLineWidth ? pad + leftYLineWidth : 0);
        rightYLineWidth = findCounterAxisLineWidth(xa, 'right', ya, axList);
        xLinesXRight = xa._offset + xa._length + (rightYLineWidth ? pad + rightYLineWidth : 0);
        xLinesYBottom = getLinePosition(xa, ya, 'bottom');
        xLinesYTop = getLinePosition(xa, ya, 'top'); // save axis line positions for extra ticks to reference
        // each subplot that gets ticks from "allticks" gets an entry:
        //    [left or bottom, right or top]

        extraSubplot = !xa._anchorAxis || subplot !== xa._mainSubplot;

        if (extraSubplot && (xa.mirror === 'allticks' || xa.mirror === 'all')) {
          xa._linepositions[subplot] = [xLinesYBottom, xLinesYTop];
        }

        xPath = mainPath(xa, xLinePath, xLinePathFree);

        if (extraSubplot && xa.showline && (xa.mirror === 'all' || xa.mirror === 'allticks')) {
          xPath += xLinePath(xLinesYBottom) + xLinePath(xLinesYTop);
        }

        plotinfo.xlines.style('stroke-width', xa._lw + 'px').call(color_1.stroke, xa.showline ? xa.linecolor : 'rgba(0,0,0,0)');
      }

      plotinfo.xlines.attr('d', xPath);
      /*
       * y lines that meet x axes get longer only by margin.pad, because
       * the x axes fill in the corner space. Free y axes, like free x axes,
       * always span exactly the data area of the plot
       *
       *   |   | XXXX
       * y2| y1| XXXX
       *   |   | XXXX
       *       |
       *       +-----
       */

      var yPath = 'M0,0';

      if (shouldShowLinesOrTicks(ya, subplot)) {
        connectYBottom = findCounterAxisLineWidth(ya, 'bottom', xa, axList);
        yLinesYBottom = ya._offset + ya._length + (connectYBottom ? pad : 0);
        connectYTop = findCounterAxisLineWidth(ya, 'top', xa, axList);
        yLinesYTop = ya._offset - (connectYTop ? pad : 0);
        yLinesXLeft = getLinePosition(ya, xa, 'left');
        yLinesXRight = getLinePosition(ya, xa, 'right');
        extraSubplot = !ya._anchorAxis || subplot !== ya._mainSubplot;

        if (extraSubplot && (ya.mirror === 'allticks' || ya.mirror === 'all')) {
          ya._linepositions[subplot] = [yLinesXLeft, yLinesXRight];
        }

        yPath = mainPath(ya, yLinePath, yLinePathFree);

        if (extraSubplot && ya.showline && (ya.mirror === 'all' || ya.mirror === 'allticks')) {
          yPath += yLinePath(yLinesXLeft) + yLinePath(yLinesXRight);
        }

        plotinfo.ylines.style('stroke-width', ya._lw + 'px').call(color_1.stroke, ya.showline ? ya.linecolor : 'rgba(0,0,0,0)');
      }

      plotinfo.ylines.attr('d', yPath);
    }

    axes_1.makeClipPaths(gd);
    return plots_1.previousPromises(gd);
  }

  function shouldShowLinesOrTicks(ax, subplot) {
    return (ax.ticks || ax.showline) && (subplot === ax._mainSubplot || ax.mirror === 'all' || ax.mirror === 'allticks');
  }
  /*
   * should we draw a line on counterAx at this side of ax?
   * It's assumed that counterAx is known to overlay the subplot we're working on
   * but it may not be its main axis.
   */


  function shouldShowLineThisSide(ax, side, counterAx) {
    // does counterAx get a line at all?
    if (!counterAx.showline || !counterAx._lw) return false; // are we drawing *all* lines for counterAx?

    if (counterAx.mirror === 'all' || counterAx.mirror === 'allticks') return true;
    var anchorAx = counterAx._anchorAxis; // is this a free axis? free axes can only have a subplot side-line with all(ticks)? mirroring

    if (!anchorAx) return false; // in order to handle cases where the user forgot to anchor this axis correctly
    // (because its default anchor has the same domain on the relevant end)
    // check whether the relevant position is the same.

    var sideIndex = alignment.FROM_BL[side];

    if (counterAx.side === side) {
      return anchorAx.domain[sideIndex] === ax.domain[sideIndex];
    }

    return counterAx.mirror && anchorAx.domain[1 - sideIndex] === ax.domain[1 - sideIndex];
  }
  /*
   * Is there another axis intersecting `side` end of `ax`?
   * First look at `counterAx` (the axis for this subplot),
   * then at all other potential counteraxes on or overlaying this subplot.
   * Take the line width from the first one that has a line.
   */


  function findCounterAxisLineWidth(ax, side, counterAx, axList) {
    if (shouldShowLineThisSide(ax, side, counterAx)) {
      return counterAx._lw;
    }

    for (var i = 0; i < axList.length; i++) {
      var axi = axList[i];

      if (axi._mainAxis === counterAx._mainAxis && shouldShowLineThisSide(ax, side, axi)) {
        return axi._lw;
      }
    }

    return 0;
  }

  exports.drawMainTitle = function (gd) {
    var fullLayout = gd._fullLayout;
    var textAnchor = getMainTitleTextAnchor(fullLayout);
    var dy = getMainTitleDy(fullLayout);
    titles.draw(gd, 'gtitle', {
      propContainer: fullLayout,
      propName: 'title.text',
      placeholder: fullLayout._dfltTitle.plot,
      attributes: {
        x: getMainTitleX(fullLayout, textAnchor),
        y: getMainTitleY(fullLayout, dy),
        'text-anchor': textAnchor,
        dy: dy
      }
    });
  };

  function getMainTitleX(fullLayout, textAnchor) {
    var title = fullLayout.title;
    var gs = fullLayout._size;
    var hPadShift = 0;

    if (textAnchor === SVG_TEXT_ANCHOR_START) {
      hPadShift = title.pad.l;
    } else if (textAnchor === SVG_TEXT_ANCHOR_END) {
      hPadShift = -title.pad.r;
    }

    switch (title.xref) {
      case 'paper':
        return gs.l + gs.w * title.x + hPadShift;

      case 'container':
      default:
        return fullLayout.width * title.x + hPadShift;
    }
  }

  function getMainTitleY(fullLayout, dy) {
    var title = fullLayout.title;
    var gs = fullLayout._size;
    var vPadShift = 0;

    if (dy === '0em' || !dy) {
      vPadShift = -title.pad.b;
    } else if (dy === alignment.CAP_SHIFT + 'em') {
      vPadShift = title.pad.t;
    }

    if (title.y === 'auto') {
      return gs.t / 2;
    } else {
      switch (title.yref) {
        case 'paper':
          return gs.t + gs.h - gs.h * title.y + vPadShift;

        case 'container':
        default:
          return fullLayout.height - fullLayout.height * title.y + vPadShift;
      }
    }
  }

  function getMainTitleTextAnchor(fullLayout) {
    var title = fullLayout.title;
    var textAnchor = SVG_TEXT_ANCHOR_MIDDLE;

    if (lib_1.isRightAnchor(title)) {
      textAnchor = SVG_TEXT_ANCHOR_END;
    } else if (lib_1.isLeftAnchor(title)) {
      textAnchor = SVG_TEXT_ANCHOR_START;
    }

    return textAnchor;
  }

  function getMainTitleDy(fullLayout) {
    var title = fullLayout.title;
    var dy = '0em';

    if (lib_1.isTopAnchor(title)) {
      dy = alignment.CAP_SHIFT + 'em';
    } else if (lib_1.isMiddleAnchor(title)) {
      dy = alignment.MID_SHIFT + 'em';
    }

    return dy;
  }

  exports.doTraceStyle = function (gd) {
    var calcdata = gd.calcdata;
    var editStyleCalls = [];
    var i;

    for (i = 0; i < calcdata.length; i++) {
      var cd = calcdata[i];
      var cd0 = cd[0] || {};
      var trace = cd0.trace || {};

      var _module = trace._module || {}; // See if we need to do arraysToCalcdata
      // call it regardless of what change we made, in case
      // supplyDefaults brought in an array that was already
      // in gd.data but not in gd._fullData previously


      var arraysToCalcdata = _module.arraysToCalcdata;
      if (arraysToCalcdata) arraysToCalcdata(cd, trace);
      var editStyle = _module.editStyle;
      if (editStyle) editStyleCalls.push({
        fn: editStyle,
        cd0: cd0
      });
    }

    if (editStyleCalls.length) {
      for (i = 0; i < editStyleCalls.length; i++) {
        var edit = editStyleCalls[i];
        edit.fn(gd, edit.cd0);
      }

      clear_gl_canvases(gd);
      exports.redrawReglTraces(gd);
    }

    plots_1.style(gd);
    registry.getComponentMethod('legend', 'draw')(gd);
    return plots_1.previousPromises(gd);
  };

  exports.doColorBars = function (gd) {
    registry.getComponentMethod('colorbar', 'draw')(gd);
    return plots_1.previousPromises(gd);
  }; // force plot() to redo the layout and replot with the modified layout


  exports.layoutReplot = function (gd) {
    var layout = gd.layout;
    gd.layout = undefined;
    return registry.call('_doPlot', gd, '', layout);
  };

  exports.doLegend = function (gd) {
    registry.getComponentMethod('legend', 'draw')(gd);
    return plots_1.previousPromises(gd);
  };

  exports.doTicksRelayout = function (gd) {
    axes_1.draw(gd, 'redraw');

    if (gd._fullLayout._hasOnlyLargeSploms) {
      registry.subplotsRegistry.splom.updateGrid(gd);
      clear_gl_canvases(gd);
      exports.redrawReglTraces(gd);
    }

    exports.drawMainTitle(gd);
    return plots_1.previousPromises(gd);
  };

  exports.doModeBar = function (gd) {
    var fullLayout = gd._fullLayout;
    modebar.manage(gd);

    for (var i = 0; i < fullLayout._basePlotModules.length; i++) {
      var updateFx = fullLayout._basePlotModules[i].updateFx;
      if (updateFx) updateFx(gd);
    }

    return plots_1.previousPromises(gd);
  };

  exports.doCamera = function (gd) {
    var fullLayout = gd._fullLayout;
    var sceneIds = fullLayout._subplots.gl3d;

    for (var i = 0; i < sceneIds.length; i++) {
      var sceneLayout = fullLayout[sceneIds[i]];
      var scene = sceneLayout._scene;
      scene.setViewport(sceneLayout);
    }
  };

  exports.drawData = function (gd) {
    var fullLayout = gd._fullLayout;
    clear_gl_canvases(gd); // loop over the base plot modules present on graph

    var basePlotModules = fullLayout._basePlotModules;

    for (var i = 0; i < basePlotModules.length; i++) {
      basePlotModules[i].plot(gd);
    }

    exports.redrawReglTraces(gd); // styling separate from drawing

    plots_1.style(gd); // draw components that can be drawn on axes,
    // and that do not push the margins

    registry.getComponentMethod('shapes', 'draw')(gd);
    registry.getComponentMethod('annotations', 'draw')(gd);
    registry.getComponentMethod('images', 'draw')(gd); // Mark the first render as complete

    fullLayout._replotting = false;
    return plots_1.previousPromises(gd);
  }; // Draw (or redraw) all regl-based traces in one go,
  // useful during drag and selection where buffers of targeted traces are updated,
  // but all traces need to be redrawn following clearGlCanvases.
  //
  // Note that _module.plot for regl trace does NOT draw things
  // on the canvas, they only update the buffers.
  // Drawing is perform here.
  //
  // TODO try adding per-subplot option using gl.SCISSOR_TEST for
  // non-overlaying, disjoint subplots.
  //
  // TODO try to include parcoords in here.
  // https://github.com/plotly/plotly.js/issues/3069


  exports.redrawReglTraces = function (gd) {
    var fullLayout = gd._fullLayout;

    if (fullLayout._has('regl')) {
      var fullData = gd._fullData;
      var cartesianIds = [];
      var polarIds = [];
      var i, sp;

      if (fullLayout._hasOnlyLargeSploms) {
        fullLayout._splomGrid.draw();
      } // N.B.
      // - Loop over fullData (not _splomScenes) to preserve splom trace-to-trace ordering
      // - Fill list if subplot ids (instead of fullLayout._subplots) to handle cases where all traces
      //   of a given module are `visible !== true`


      for (i = 0; i < fullData.length; i++) {
        var trace = fullData[i];

        if (trace.visible === true && trace._length !== 0) {
          if (trace.type === 'splom') {
            fullLayout._splomScenes[trace.uid].draw();
          } else if (trace.type === 'scattergl') {
            lib_1.pushUnique(cartesianIds, trace.xaxis + trace.yaxis);
          } else if (trace.type === 'scatterpolargl') {
            lib_1.pushUnique(polarIds, trace.subplot);
          }
        }
      }

      for (i = 0; i < cartesianIds.length; i++) {
        sp = fullLayout._plots[cartesianIds[i]];
        if (sp._scene) sp._scene.draw();
      }

      for (i = 0; i < polarIds.length; i++) {
        sp = fullLayout[polarIds[i]]._subplot;
        if (sp._scene) sp._scene.draw();
      }
    }
  };

  exports.doAutoRangeAndConstraints = function (gd) {
    var axList = axes_1.list(gd, '', true);
    var ax;
    var autoRangeDone = {};

    for (var i = 0; i < axList.length; i++) {
      ax = axList[i];

      if (!autoRangeDone[ax._id]) {
        autoRangeDone[ax._id] = 1;
        cleanAxisConstraints(gd, ax);
        doAutoRange(gd, ax); // For matching axes, just propagate this autorange to the group.
        // The extra arg to doAutoRange avoids recalculating the range,
        // since doAutoRange by itself accounts for all matching axes. but
        // there are other side-effects of doAutoRange that we still want.

        var matchGroup = ax._matchGroup;

        if (matchGroup) {
          for (var id2 in matchGroup) {
            var ax2 = axes_1.getFromId(gd, id2);
            doAutoRange(gd, ax2, ax.range);
            autoRangeDone[id2] = 1;
          }
        }
      }
    }

    enforceAxisConstraints(gd);
  }; // An initial paint must be completed before these components can be
  // correctly sized and the whole plot re-margined. fullLayout._replotting must
  // be set to false before these will work properly.


  exports.finalDraw = function (gd) {
    // TODO: rangesliders really belong in marginPushers but they need to be
    // drawn after data - can we at least get the margin pushing part separated
    // out and done earlier?
    registry.getComponentMethod('rangeslider', 'draw')(gd); // TODO: rangeselector only needs to be here (in addition to drawMarginPushers)
    // because the margins need to be fully determined before we can call
    // autorange and update axis ranges (which rangeselector needs to know which
    // button is active). Can we break out its automargin step from its draw step?

    registry.getComponentMethod('rangeselector', 'draw')(gd);
  };

  exports.drawMarginPushers = function (gd) {
    registry.getComponentMethod('legend', 'draw')(gd);
    registry.getComponentMethod('rangeselector', 'draw')(gd);
    registry.getComponentMethod('sliders', 'draw')(gd);
    registry.getComponentMethod('updatemenus', 'draw')(gd);
    registry.getComponentMethod('colorbar', 'draw')(gd);
  };
});

// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
// MIT License
// Project Home: https://github.com/voidqk/polybooljs
//
// used strictly for logging the processing of the algorithm... only useful if you intend on
// looking under the covers (for pretty UI's or debugging)
//
function BuildLog() {
  var my;
  var nextSegmentId = 0;
  var curVert = false;

  function push(type, data) {
    my.list.push({
      type: type,
      data: data ? JSON.parse(JSON.stringify(data)) : void 0
    });
    return my;
  }

  my = {
    list: [],
    segmentId: function () {
      return nextSegmentId++;
    },
    checkIntersection: function (seg1, seg2) {
      return push('check', {
        seg1: seg1,
        seg2: seg2
      });
    },
    segmentChop: function (seg, end) {
      push('div_seg', {
        seg: seg,
        pt: end
      });
      return push('chop', {
        seg: seg,
        pt: end
      });
    },
    statusRemove: function (seg) {
      return push('pop_seg', {
        seg: seg
      });
    },
    segmentUpdate: function (seg) {
      return push('seg_update', {
        seg: seg
      });
    },
    segmentNew: function (seg, primary) {
      return push('new_seg', {
        seg: seg,
        primary: primary
      });
    },
    segmentRemove: function (seg) {
      return push('rem_seg', {
        seg: seg
      });
    },
    tempStatus: function (seg, above, below) {
      return push('temp_status', {
        seg: seg,
        above: above,
        below: below
      });
    },
    rewind: function (seg) {
      return push('rewind', {
        seg: seg
      });
    },
    status: function (seg, above, below) {
      return push('status', {
        seg: seg,
        above: above,
        below: below
      });
    },
    vert: function (x) {
      if (x === curVert) return my;
      curVert = x;
      return push('vert', {
        x: x
      });
    },
    log: function (data) {
      if (typeof data !== 'string') data = JSON.stringify(data, false, '  ');
      return push('log', {
        txt: data
      });
    },
    reset: function () {
      return push('reset');
    },
    selected: function (segs) {
      return push('selected', {
        segs: segs
      });
    },
    chainStart: function (seg) {
      return push('chain_start', {
        seg: seg
      });
    },
    chainRemoveHead: function (index, pt) {
      return push('chain_rem_head', {
        index: index,
        pt: pt
      });
    },
    chainRemoveTail: function (index, pt) {
      return push('chain_rem_tail', {
        index: index,
        pt: pt
      });
    },
    chainNew: function (pt1, pt2) {
      return push('chain_new', {
        pt1: pt1,
        pt2: pt2
      });
    },
    chainMatch: function (index) {
      return push('chain_match', {
        index: index
      });
    },
    chainClose: function (index) {
      return push('chain_close', {
        index: index
      });
    },
    chainAddHead: function (index, pt) {
      return push('chain_add_head', {
        index: index,
        pt: pt
      });
    },
    chainAddTail: function (index, pt) {
      return push('chain_add_tail', {
        index: index,
        pt: pt
      });
    },
    chainConnect: function (index1, index2) {
      return push('chain_con', {
        index1: index1,
        index2: index2
      });
    },
    chainReverse: function (index) {
      return push('chain_rev', {
        index: index
      });
    },
    chainJoin: function (index1, index2) {
      return push('chain_join', {
        index1: index1,
        index2: index2
      });
    },
    done: function () {
      return push('done');
    }
  };
  return my;
}

var buildLog$1 = BuildLog;

// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
// MIT License
// Project Home: https://github.com/voidqk/polybooljs
//
// provides the raw computation functions that takes epsilon into account
//
// zero is defined to be between (-epsilon, epsilon) exclusive
//
function Epsilon(eps) {
  if (typeof eps !== 'number') eps = 0.0000000001; // sane default? sure why not

  var my = {
    epsilon: function (v) {
      if (typeof v === 'number') eps = v;
      return eps;
    },
    pointAboveOrOnLine: function (pt, left, right) {
      var Ax = left[0];
      var Ay = left[1];
      var Bx = right[0];
      var By = right[1];
      var Cx = pt[0];
      var Cy = pt[1];
      return (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -eps;
    },
    pointBetween: function (p, left, right) {
      // p must be collinear with left->right
      // returns false if p == left, p == right, or left == right
      var d_py_ly = p[1] - left[1];
      var d_rx_lx = right[0] - left[0];
      var d_px_lx = p[0] - left[0];
      var d_ry_ly = right[1] - left[1];
      var dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly; // if `dot` is 0, then `p` == `left` or `left` == `right` (reject)
      // if `dot` is less than 0, then `p` is to the left of `left` (reject)

      if (dot < eps) return false;
      var sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly; // if `dot` > `sqlen`, then `p` is to the right of `right` (reject)
      // therefore, if `dot - sqlen` is greater than 0, then `p` is to the right of `right` (reject)

      if (dot - sqlen > -eps) return false;
      return true;
    },
    pointsSameX: function (p1, p2) {
      return Math.abs(p1[0] - p2[0]) < eps;
    },
    pointsSameY: function (p1, p2) {
      return Math.abs(p1[1] - p2[1]) < eps;
    },
    pointsSame: function (p1, p2) {
      return my.pointsSameX(p1, p2) && my.pointsSameY(p1, p2);
    },
    pointsCompare: function (p1, p2) {
      // returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal
      if (my.pointsSameX(p1, p2)) return my.pointsSameY(p1, p2) ? 0 : p1[1] < p2[1] ? -1 : 1;
      return p1[0] < p2[0] ? -1 : 1;
    },
    pointsCollinear: function (pt1, pt2, pt3) {
      // does pt1->pt2->pt3 make a straight line?
      // essentially this is just checking to see if the slope(pt1->pt2) === slope(pt2->pt3)
      // if slopes are equal, then they must be collinear, because they share pt2
      var dx1 = pt1[0] - pt2[0];
      var dy1 = pt1[1] - pt2[1];
      var dx2 = pt2[0] - pt3[0];
      var dy2 = pt2[1] - pt3[1];
      return Math.abs(dx1 * dy2 - dx2 * dy1) < eps;
    },
    linesIntersect: function (a0, a1, b0, b1) {
      // returns false if the lines are coincident (e.g., parallel or on top of each other)
      //
      // returns an object if the lines intersect:
      //   {
      //     pt: [x, y],    where the intersection point is at
      //     alongA: where intersection point is along A,
      //     alongB: where intersection point is along B
      //   }
      //
      //  alongA and alongB will each be one of: -2, -1, 0, 1, 2
      //
      //  with the following meaning:
      //
      //    -2   intersection point is before segment's first point
      //    -1   intersection point is directly on segment's first point
      //     0   intersection point is between segment's first and second points (exclusive)
      //     1   intersection point is directly on segment's second point
      //     2   intersection point is after segment's second point
      var adx = a1[0] - a0[0];
      var ady = a1[1] - a0[1];
      var bdx = b1[0] - b0[0];
      var bdy = b1[1] - b0[1];
      var axb = adx * bdy - ady * bdx;
      if (Math.abs(axb) < eps) return false; // lines are coincident

      var dx = a0[0] - b0[0];
      var dy = a0[1] - b0[1];
      var A = (bdx * dy - bdy * dx) / axb;
      var B = (adx * dy - ady * dx) / axb;
      var ret = {
        alongA: 0,
        alongB: 0,
        pt: [a0[0] + A * adx, a0[1] + A * ady]
      }; // categorize where intersection point is along A and B

      if (A <= -eps) ret.alongA = -2;else if (A < eps) ret.alongA = -1;else if (A - 1 <= -eps) ret.alongA = 0;else if (A - 1 < eps) ret.alongA = 1;else ret.alongA = 2;
      if (B <= -eps) ret.alongB = -2;else if (B < eps) ret.alongB = -1;else if (B - 1 <= -eps) ret.alongB = 0;else if (B - 1 < eps) ret.alongB = 1;else ret.alongB = 2;
      return ret;
    },
    pointInsideRegion: function (pt, region) {
      var x = pt[0];
      var y = pt[1];
      var last_x = region[region.length - 1][0];
      var last_y = region[region.length - 1][1];
      var inside = false;

      for (var i = 0; i < region.length; i++) {
        var curr_x = region[i][0];
        var curr_y = region[i][1]; // if y is between curr_y and last_y, and
        // x is to the right of the boundary created by the line

        if (curr_y - y > eps != last_y - y > eps && (last_x - curr_x) * (y - curr_y) / (last_y - curr_y) + curr_x - x > eps) inside = !inside;
        last_x = curr_x;
        last_y = curr_y;
      }

      return inside;
    }
  };
  return my;
}

var epsilon$1 = Epsilon;

// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
// MIT License
// Project Home: https://github.com/voidqk/polybooljs
//
// simple linked list implementation that allows you to traverse down nodes and save positions
//
var LinkedList = {
  create: function () {
    var my = {
      root: {
        root: true,
        next: null
      },
      exists: function (node) {
        if (node === null || node === my.root) return false;
        return true;
      },
      isEmpty: function () {
        return my.root.next === null;
      },
      getHead: function () {
        return my.root.next;
      },
      insertBefore: function (node, check) {
        var last = my.root;
        var here = my.root.next;

        while (here !== null) {
          if (check(here)) {
            node.prev = here.prev;
            node.next = here;
            here.prev.next = node;
            here.prev = node;
            return;
          }

          last = here;
          here = here.next;
        }

        last.next = node;
        node.prev = last;
        node.next = null;
      },
      findTransition: function (check) {
        var prev = my.root;
        var here = my.root.next;

        while (here !== null) {
          if (check(here)) break;
          prev = here;
          here = here.next;
        }

        return {
          before: prev === my.root ? null : prev,
          after: here,
          insert: function (node) {
            node.prev = prev;
            node.next = here;
            prev.next = node;
            if (here !== null) here.prev = node;
            return node;
          }
        };
      }
    };
    return my;
  },
  node: function (data) {
    data.prev = null;
    data.next = null;

    data.remove = function () {
      data.prev.next = data.next;
      if (data.next) data.next.prev = data.prev;
      data.prev = null;
      data.next = null;
    };

    return data;
  }
};
var linkedList = LinkedList;

// MIT License
// Project Home: https://github.com/voidqk/polybooljs
//
// this is the core work-horse
//

function Intersecter(selfIntersection, eps, buildLog) {
  // selfIntersection is true/false depending on the phase of the overall algorithm
  //
  // segment creation
  //
  function segmentNew(start, end) {
    return {
      id: buildLog ? buildLog.segmentId() : -1,
      start: start,
      end: end,
      myFill: {
        above: null,
        // is there fill above us?
        below: null // is there fill below us?

      },
      otherFill: null
    };
  }

  function segmentCopy(start, end, seg) {
    return {
      id: buildLog ? buildLog.segmentId() : -1,
      start: start,
      end: end,
      myFill: {
        above: seg.myFill.above,
        below: seg.myFill.below
      },
      otherFill: null
    };
  } //
  // event logic
  //


  var event_root = linkedList.create();

  function eventCompare(p1_isStart, p1_1, p1_2, p2_isStart, p2_1, p2_2) {
    // compare the selected points first
    var comp = eps.pointsCompare(p1_1, p2_1);
    if (comp !== 0) return comp; // the selected points are the same

    if (eps.pointsSame(p1_2, p2_2)) // if the non-selected points are the same too...
      return 0; // then the segments are equal

    if (p1_isStart !== p2_isStart) // if one is a start and the other isn't...
      return p1_isStart ? 1 : -1; // favor the one that isn't the start
    // otherwise, we'll have to calculate which one is below the other manually

    return eps.pointAboveOrOnLine(p1_2, p2_isStart ? p2_1 : p2_2, // order matters
    p2_isStart ? p2_2 : p2_1) ? 1 : -1;
  }

  function eventAdd(ev, other_pt) {
    event_root.insertBefore(ev, function (here) {
      // should ev be inserted before here?
      var comp = eventCompare(ev.isStart, ev.pt, other_pt, here.isStart, here.pt, here.other.pt);
      return comp < 0;
    });
  }

  function eventAddSegmentStart(seg, primary) {
    var ev_start = linkedList.node({
      isStart: true,
      pt: seg.start,
      seg: seg,
      primary: primary,
      other: null,
      status: null
    });
    eventAdd(ev_start, seg.end);
    return ev_start;
  }

  function eventAddSegmentEnd(ev_start, seg, primary) {
    var ev_end = linkedList.node({
      isStart: false,
      pt: seg.end,
      seg: seg,
      primary: primary,
      other: ev_start,
      status: null
    });
    ev_start.other = ev_end;
    eventAdd(ev_end, ev_start.pt);
  }

  function eventAddSegment(seg, primary) {
    var ev_start = eventAddSegmentStart(seg, primary);
    eventAddSegmentEnd(ev_start, seg, primary);
    return ev_start;
  }

  function eventUpdateEnd(ev, end) {
    // slides an end backwards
    //   (start)------------(end)    to:
    //   (start)---(end)
    if (buildLog) buildLog.segmentChop(ev.seg, end);
    ev.other.remove();
    ev.seg.end = end;
    ev.other.pt = end;
    eventAdd(ev.other, ev.pt);
  }

  function eventDivide(ev, pt) {
    var ns = segmentCopy(pt, ev.seg.end, ev.seg);
    eventUpdateEnd(ev, pt);
    return eventAddSegment(ns, ev.primary);
  }

  function calculate(primaryPolyInverted, secondaryPolyInverted) {
    // if selfIntersection is true then there is no secondary polygon, so that isn't used
    //
    // status logic
    //
    var status_root = linkedList.create();

    function statusCompare(ev1, ev2) {
      var a1 = ev1.seg.start;
      var a2 = ev1.seg.end;
      var b1 = ev2.seg.start;
      var b2 = ev2.seg.end;

      if (eps.pointsCollinear(a1, b1, b2)) {
        if (eps.pointsCollinear(a2, b1, b2)) return 1; //eventCompare(true, a1, a2, true, b1, b2);

        return eps.pointAboveOrOnLine(a2, b1, b2) ? 1 : -1;
      }

      return eps.pointAboveOrOnLine(a1, b1, b2) ? 1 : -1;
    }

    function statusFindSurrounding(ev) {
      return status_root.findTransition(function (here) {
        var comp = statusCompare(ev, here.ev);
        return comp > 0;
      });
    }

    function checkIntersection(ev1, ev2) {
      // returns the segment equal to ev1, or false if nothing equal
      var seg1 = ev1.seg;
      var seg2 = ev2.seg;
      var a1 = seg1.start;
      var a2 = seg1.end;
      var b1 = seg2.start;
      var b2 = seg2.end;
      if (buildLog) buildLog.checkIntersection(seg1, seg2);
      var i = eps.linesIntersect(a1, a2, b1, b2);

      if (i === false) {
        // segments are parallel or coincident
        // if points aren't collinear, then the segments are parallel, so no intersections
        if (!eps.pointsCollinear(a1, a2, b1)) return false; // otherwise, segments are on top of each other somehow (aka coincident)

        if (eps.pointsSame(a1, b2) || eps.pointsSame(a2, b1)) return false; // segments touch at endpoints... no intersection

        var a1_equ_b1 = eps.pointsSame(a1, b1);
        var a2_equ_b2 = eps.pointsSame(a2, b2);
        if (a1_equ_b1 && a2_equ_b2) return ev2; // segments are exactly equal

        var a1_between = !a1_equ_b1 && eps.pointBetween(a1, b1, b2);
        var a2_between = !a2_equ_b2 && eps.pointBetween(a2, b1, b2); // handy for debugging:
        // buildLog.log({
        //	a1_equ_b1: a1_equ_b1,
        //	a2_equ_b2: a2_equ_b2,
        //	a1_between: a1_between,
        //	a2_between: a2_between
        // });

        if (a1_equ_b1) {
          if (a2_between) {
            //  (a1)---(a2)
            //  (b1)----------(b2)
            eventDivide(ev2, a2);
          } else {
            //  (a1)----------(a2)
            //  (b1)---(b2)
            eventDivide(ev1, b2);
          }

          return ev2;
        } else if (a1_between) {
          if (!a2_equ_b2) {
            // make a2 equal to b2
            if (a2_between) {
              //         (a1)---(a2)
              //  (b1)-----------------(b2)
              eventDivide(ev2, a2);
            } else {
              //         (a1)----------(a2)
              //  (b1)----------(b2)
              eventDivide(ev1, b2);
            }
          } //         (a1)---(a2)
          //  (b1)----------(b2)


          eventDivide(ev2, a1);
        }
      } else {
        // otherwise, lines intersect at i.pt, which may or may not be between the endpoints
        // is A divided between its endpoints? (exclusive)
        if (i.alongA === 0) {
          if (i.alongB === -1) // yes, at exactly b1
            eventDivide(ev1, b1);else if (i.alongB === 0) // yes, somewhere between B's endpoints
            eventDivide(ev1, i.pt);else if (i.alongB === 1) // yes, at exactly b2
            eventDivide(ev1, b2);
        } // is B divided between its endpoints? (exclusive)


        if (i.alongB === 0) {
          if (i.alongA === -1) // yes, at exactly a1
            eventDivide(ev2, a1);else if (i.alongA === 0) // yes, somewhere between A's endpoints (exclusive)
            eventDivide(ev2, i.pt);else if (i.alongA === 1) // yes, at exactly a2
            eventDivide(ev2, a2);
        }
      }

      return false;
    } //
    // main event loop
    //


    var segments = [];

    while (!event_root.isEmpty()) {
      var ev = event_root.getHead();
      if (buildLog) buildLog.vert(ev.pt[0]);

      if (ev.isStart) {
        if (buildLog) buildLog.segmentNew(ev.seg, ev.primary);
        var surrounding = statusFindSurrounding(ev);
        var above = surrounding.before ? surrounding.before.ev : null;
        var below = surrounding.after ? surrounding.after.ev : null;

        if (buildLog) {
          buildLog.tempStatus(ev.seg, above ? above.seg : false, below ? below.seg : false);
        }

        function checkBothIntersections() {
          if (above) {
            var eve = checkIntersection(ev, above);
            if (eve) return eve;
          }

          if (below) return checkIntersection(ev, below);
          return false;
        }

        var eve = checkBothIntersections();

        if (eve) {
          // ev and eve are equal
          // we'll keep eve and throw away ev
          // merge ev.seg's fill information into eve.seg
          if (selfIntersection) {
            var toggle; // are we a toggling edge?

            if (ev.seg.myFill.below === null) toggle = true;else toggle = ev.seg.myFill.above !== ev.seg.myFill.below; // merge two segments that belong to the same polygon
            // think of this as sandwiching two segments together, where `eve.seg` is
            // the bottom -- this will cause the above fill flag to toggle

            if (toggle) eve.seg.myFill.above = !eve.seg.myFill.above;
          } else {
            // merge two segments that belong to different polygons
            // each segment has distinct knowledge, so no special logic is needed
            // note that this can only happen once per segment in this phase, because we
            // are guaranteed that all self-intersections are gone
            eve.seg.otherFill = ev.seg.myFill;
          }

          if (buildLog) buildLog.segmentUpdate(eve.seg);
          ev.other.remove();
          ev.remove();
        }

        if (event_root.getHead() !== ev) {
          // something was inserted before us in the event queue, so loop back around and
          // process it before continuing
          if (buildLog) buildLog.rewind(ev.seg);
          continue;
        } //
        // calculate fill flags
        //


        if (selfIntersection) {
          var toggle; // are we a toggling edge?

          if (ev.seg.myFill.below === null) // if we are a new segment...
            toggle = true; // then we toggle
          else // we are a segment that has previous knowledge from a division
            toggle = ev.seg.myFill.above !== ev.seg.myFill.below; // calculate toggle
          // next, calculate whether we are filled below us

          if (!below) {
            // if nothing is below us...
            // we are filled below us if the polygon is inverted
            ev.seg.myFill.below = primaryPolyInverted;
          } else {
            // otherwise, we know the answer -- it's the same if whatever is below
            // us is filled above it
            ev.seg.myFill.below = below.seg.myFill.above;
          } // since now we know if we're filled below us, we can calculate whether
          // we're filled above us by applying toggle to whatever is below us


          if (toggle) ev.seg.myFill.above = !ev.seg.myFill.below;else ev.seg.myFill.above = ev.seg.myFill.below;
        } else {
          // now we fill in any missing transition information, since we are all-knowing
          // at this point
          if (ev.seg.otherFill === null) {
            // if we don't have other information, then we need to figure out if we're
            // inside the other polygon
            var inside;

            if (!below) {
              // if nothing is below us, then we're inside if the other polygon is
              // inverted
              inside = ev.primary ? secondaryPolyInverted : primaryPolyInverted;
            } else {
              // otherwise, something is below us
              // so copy the below segment's other polygon's above
              if (ev.primary === below.primary) inside = below.seg.otherFill.above;else inside = below.seg.myFill.above;
            }

            ev.seg.otherFill = {
              above: inside,
              below: inside
            };
          }
        }

        if (buildLog) {
          buildLog.status(ev.seg, above ? above.seg : false, below ? below.seg : false);
        } // insert the status and remember it for later removal


        ev.other.status = surrounding.insert(linkedList.node({
          ev: ev
        }));
      } else {
        var st = ev.status;

        if (st === null) {
          throw new Error('PolyBool: Zero-length segment detected; your epsilon is ' + 'probably too small or too large');
        } // removing the status will create two new adjacent edges, so we'll need to check
        // for those


        if (status_root.exists(st.prev) && status_root.exists(st.next)) checkIntersection(st.prev.ev, st.next.ev);
        if (buildLog) buildLog.statusRemove(st.ev.seg); // remove the status

        st.remove(); // if we've reached this point, we've calculated everything there is to know, so
        // save the segment for reporting

        if (!ev.primary) {
          // make sure `seg.myFill` actually points to the primary polygon though
          var s = ev.seg.myFill;
          ev.seg.myFill = ev.seg.otherFill;
          ev.seg.otherFill = s;
        }

        segments.push(ev.seg);
      } // remove the event and continue


      event_root.getHead().remove();
    }

    if (buildLog) buildLog.done();
    return segments;
  } // return the appropriate API depending on what we're doing


  if (!selfIntersection) {
    // performing combination of polygons, so only deal with already-processed segments
    return {
      calculate: function (segments1, inverted1, segments2, inverted2) {
        // segmentsX come from the self-intersection API, or this API
        // invertedX is whether we treat that list of segments as an inverted polygon or not
        // returns segments that can be used for further operations
        segments1.forEach(function (seg) {
          eventAddSegment(segmentCopy(seg.start, seg.end, seg), true);
        });
        segments2.forEach(function (seg) {
          eventAddSegment(segmentCopy(seg.start, seg.end, seg), false);
        });
        return calculate(inverted1, inverted2);
      }
    };
  } // otherwise, performing self-intersection, so deal with regions


  return {
    addRegion: function (region) {
      // regions are a list of points:
      //  [ [0, 0], [100, 0], [50, 100] ]
      // you can add multiple regions before running calculate
      var pt1;
      var pt2 = region[region.length - 1];

      for (var i = 0; i < region.length; i++) {
        pt1 = pt2;
        pt2 = region[i];
        var forward = eps.pointsCompare(pt1, pt2);
        if (forward === 0) // points are equal, so we have a zero-length segment
          continue; // just skip it

        eventAddSegment(segmentNew(forward < 0 ? pt1 : pt2, forward < 0 ? pt2 : pt1), true);
      }
    },
    calculate: function (inverted) {
      // is the polygon inverted?
      // returns segments
      return calculate(inverted, false);
    }
  };
}

var intersecter = Intersecter;

// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
// MIT License
// Project Home: https://github.com/voidqk/polybooljs
//
// converts a list of segments into a list of regions, while also removing unnecessary verticies
//
function SegmentChainer(segments, eps, buildLog) {
  var chains = [];
  var regions = [];
  segments.forEach(function (seg) {
    var pt1 = seg.start;
    var pt2 = seg.end;

    if (eps.pointsSame(pt1, pt2)) {
      console.warn('PolyBool: Warning: Zero-length segment detected; your epsilon is ' + 'probably too small or too large');
      return;
    }

    if (buildLog) buildLog.chainStart(seg); // search for two chains that this segment matches

    var first_match = {
      index: 0,
      matches_head: false,
      matches_pt1: false
    };
    var second_match = {
      index: 0,
      matches_head: false,
      matches_pt1: false
    };
    var next_match = first_match;

    function setMatch(index, matches_head, matches_pt1) {
      // return true if we've matched twice
      next_match.index = index;
      next_match.matches_head = matches_head;
      next_match.matches_pt1 = matches_pt1;

      if (next_match === first_match) {
        next_match = second_match;
        return false;
      }

      next_match = null;
      return true; // we've matched twice, we're done here
    }

    for (var i = 0; i < chains.length; i++) {
      var chain = chains[i];
      var head = chain[0];
      chain[1];
      var tail = chain[chain.length - 1];
      chain[chain.length - 2];

      if (eps.pointsSame(head, pt1)) {
        if (setMatch(i, true, true)) break;
      } else if (eps.pointsSame(head, pt2)) {
        if (setMatch(i, true, false)) break;
      } else if (eps.pointsSame(tail, pt1)) {
        if (setMatch(i, false, true)) break;
      } else if (eps.pointsSame(tail, pt2)) {
        if (setMatch(i, false, false)) break;
      }
    }

    if (next_match === first_match) {
      // we didn't match anything, so create a new chain
      chains.push([pt1, pt2]);
      if (buildLog) buildLog.chainNew(pt1, pt2);
      return;
    }

    if (next_match === second_match) {
      // we matched a single chain
      if (buildLog) buildLog.chainMatch(first_match.index); // add the other point to the apporpriate end, and check to see if we've closed the
      // chain into a loop

      var index = first_match.index;
      var pt = first_match.matches_pt1 ? pt2 : pt1; // if we matched pt1, then we add pt2, etc

      var addToHead = first_match.matches_head; // if we matched at head, then add to the head

      var chain = chains[index];
      var grow = addToHead ? chain[0] : chain[chain.length - 1];
      var grow2 = addToHead ? chain[1] : chain[chain.length - 2];
      var oppo = addToHead ? chain[chain.length - 1] : chain[0];
      var oppo2 = addToHead ? chain[chain.length - 2] : chain[1];

      if (eps.pointsCollinear(grow2, grow, pt)) {
        // grow isn't needed because it's directly between grow2 and pt:
        // grow2 ---grow---> pt
        if (addToHead) {
          if (buildLog) buildLog.chainRemoveHead(first_match.index, pt);
          chain.shift();
        } else {
          if (buildLog) buildLog.chainRemoveTail(first_match.index, pt);
          chain.pop();
        }

        grow = grow2; // old grow is gone... new grow is what grow2 was
      }

      if (eps.pointsSame(oppo, pt)) {
        // we're closing the loop, so remove chain from chains
        chains.splice(index, 1);

        if (eps.pointsCollinear(oppo2, oppo, grow)) {
          // oppo isn't needed because it's directly between oppo2 and grow:
          // oppo2 ---oppo--->grow
          if (addToHead) {
            if (buildLog) buildLog.chainRemoveTail(first_match.index, grow);
            chain.pop();
          } else {
            if (buildLog) buildLog.chainRemoveHead(first_match.index, grow);
            chain.shift();
          }
        }

        if (buildLog) buildLog.chainClose(first_match.index); // we have a closed chain!

        regions.push(chain);
        return;
      } // not closing a loop, so just add it to the apporpriate side


      if (addToHead) {
        if (buildLog) buildLog.chainAddHead(first_match.index, pt);
        chain.unshift(pt);
      } else {
        if (buildLog) buildLog.chainAddTail(first_match.index, pt);
        chain.push(pt);
      }

      return;
    } // otherwise, we matched two chains, so we need to combine those chains together


    function reverseChain(index) {
      if (buildLog) buildLog.chainReverse(index);
      chains[index].reverse(); // gee, that's easy
    }

    function appendChain(index1, index2) {
      // index1 gets index2 appended to it, and index2 is removed
      var chain1 = chains[index1];
      var chain2 = chains[index2];
      var tail = chain1[chain1.length - 1];
      var tail2 = chain1[chain1.length - 2];
      var head = chain2[0];
      var head2 = chain2[1];

      if (eps.pointsCollinear(tail2, tail, head)) {
        // tail isn't needed because it's directly between tail2 and head
        // tail2 ---tail---> head
        if (buildLog) buildLog.chainRemoveTail(index1, tail);
        chain1.pop();
        tail = tail2; // old tail is gone... new tail is what tail2 was
      }

      if (eps.pointsCollinear(tail, head, head2)) {
        // head isn't needed because it's directly between tail and head2
        // tail ---head---> head2
        if (buildLog) buildLog.chainRemoveHead(index2, head);
        chain2.shift();
      }

      if (buildLog) buildLog.chainJoin(index1, index2);
      chains[index1] = chain1.concat(chain2);
      chains.splice(index2, 1);
    }

    var F = first_match.index;
    var S = second_match.index;
    if (buildLog) buildLog.chainConnect(F, S);
    var reverseF = chains[F].length < chains[S].length; // reverse the shorter chain, if needed

    if (first_match.matches_head) {
      if (second_match.matches_head) {
        if (reverseF) {
          // <<<< F <<<< --- >>>> S >>>>
          reverseChain(F); // >>>> F >>>> --- >>>> S >>>>

          appendChain(F, S);
        } else {
          // <<<< F <<<< --- >>>> S >>>>
          reverseChain(S); // <<<< F <<<< --- <<<< S <<<<   logically same as:
          // >>>> S >>>> --- >>>> F >>>>

          appendChain(S, F);
        }
      } else {
        // <<<< F <<<< --- <<<< S <<<<   logically same as:
        // >>>> S >>>> --- >>>> F >>>>
        appendChain(S, F);
      }
    } else {
      if (second_match.matches_head) {
        // >>>> F >>>> --- >>>> S >>>>
        appendChain(F, S);
      } else {
        if (reverseF) {
          // >>>> F >>>> --- <<<< S <<<<
          reverseChain(F); // <<<< F <<<< --- <<<< S <<<<   logically same as:
          // >>>> S >>>> --- >>>> F >>>>

          appendChain(S, F);
        } else {
          // >>>> F >>>> --- <<<< S <<<<
          reverseChain(S); // >>>> F >>>> --- >>>> S >>>>

          appendChain(F, S);
        }
      }
    }
  });
  return regions;
}

var segmentChainer = SegmentChainer;

// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
// MIT License
// Project Home: https://github.com/voidqk/polybooljs
//
// filter a list of segments based on boolean operations
//
function select$2(segments, selection, buildLog) {
  var result = [];
  segments.forEach(function (seg) {
    var index = (seg.myFill.above ? 8 : 0) + (seg.myFill.below ? 4 : 0) + (seg.otherFill && seg.otherFill.above ? 2 : 0) + (seg.otherFill && seg.otherFill.below ? 1 : 0);

    if (selection[index] !== 0) {
      // copy the segment to the results, while also calculating the fill status
      result.push({
        id: buildLog ? buildLog.segmentId() : -1,
        start: seg.start,
        end: seg.end,
        myFill: {
          above: selection[index] === 1,
          // 1 if filled above
          below: selection[index] === 2 // 2 if filled below

        },
        otherFill: null
      });
    }
  });
  if (buildLog) buildLog.selected(result);
  return result;
}

var SegmentSelector = {
  union: function (segments, buildLog) {
    // primary | secondary
    // above1 below1 above2 below2    Keep?               Value
    //    0      0      0      0   =>   no                  0
    //    0      0      0      1   =>   yes filled below    2
    //    0      0      1      0   =>   yes filled above    1
    //    0      0      1      1   =>   no                  0
    //    0      1      0      0   =>   yes filled below    2
    //    0      1      0      1   =>   yes filled below    2
    //    0      1      1      0   =>   no                  0
    //    0      1      1      1   =>   no                  0
    //    1      0      0      0   =>   yes filled above    1
    //    1      0      0      1   =>   no                  0
    //    1      0      1      0   =>   yes filled above    1
    //    1      0      1      1   =>   no                  0
    //    1      1      0      0   =>   no                  0
    //    1      1      0      1   =>   no                  0
    //    1      1      1      0   =>   no                  0
    //    1      1      1      1   =>   no                  0
    return select$2(segments, [0, 2, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], buildLog);
  },
  intersect: function (segments, buildLog) {
    // primary & secondary
    // above1 below1 above2 below2    Keep?               Value
    //    0      0      0      0   =>   no                  0
    //    0      0      0      1   =>   no                  0
    //    0      0      1      0   =>   no                  0
    //    0      0      1      1   =>   no                  0
    //    0      1      0      0   =>   no                  0
    //    0      1      0      1   =>   yes filled below    2
    //    0      1      1      0   =>   no                  0
    //    0      1      1      1   =>   yes filled below    2
    //    1      0      0      0   =>   no                  0
    //    1      0      0      1   =>   no                  0
    //    1      0      1      0   =>   yes filled above    1
    //    1      0      1      1   =>   yes filled above    1
    //    1      1      0      0   =>   no                  0
    //    1      1      0      1   =>   yes filled below    2
    //    1      1      1      0   =>   yes filled above    1
    //    1      1      1      1   =>   no                  0
    return select$2(segments, [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0], buildLog);
  },
  difference: function (segments, buildLog) {
    // primary - secondary
    // above1 below1 above2 below2    Keep?               Value
    //    0      0      0      0   =>   no                  0
    //    0      0      0      1   =>   no                  0
    //    0      0      1      0   =>   no                  0
    //    0      0      1      1   =>   no                  0
    //    0      1      0      0   =>   yes filled below    2
    //    0      1      0      1   =>   no                  0
    //    0      1      1      0   =>   yes filled below    2
    //    0      1      1      1   =>   no                  0
    //    1      0      0      0   =>   yes filled above    1
    //    1      0      0      1   =>   yes filled above    1
    //    1      0      1      0   =>   no                  0
    //    1      0      1      1   =>   no                  0
    //    1      1      0      0   =>   no                  0
    //    1      1      0      1   =>   yes filled above    1
    //    1      1      1      0   =>   yes filled below    2
    //    1      1      1      1   =>   no                  0
    return select$2(segments, [0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 0], buildLog);
  },
  differenceRev: function (segments, buildLog) {
    // secondary - primary
    // above1 below1 above2 below2    Keep?               Value
    //    0      0      0      0   =>   no                  0
    //    0      0      0      1   =>   yes filled below    2
    //    0      0      1      0   =>   yes filled above    1
    //    0      0      1      1   =>   no                  0
    //    0      1      0      0   =>   no                  0
    //    0      1      0      1   =>   no                  0
    //    0      1      1      0   =>   yes filled above    1
    //    0      1      1      1   =>   yes filled above    1
    //    1      0      0      0   =>   no                  0
    //    1      0      0      1   =>   yes filled below    2
    //    1      0      1      0   =>   no                  0
    //    1      0      1      1   =>   yes filled below    2
    //    1      1      0      0   =>   no                  0
    //    1      1      0      1   =>   no                  0
    //    1      1      1      0   =>   no                  0
    //    1      1      1      1   =>   no                  0
    return select$2(segments, [0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0], buildLog);
  },
  xor: function (segments, buildLog) {
    // primary ^ secondary
    // above1 below1 above2 below2    Keep?               Value
    //    0      0      0      0   =>   no                  0
    //    0      0      0      1   =>   yes filled below    2
    //    0      0      1      0   =>   yes filled above    1
    //    0      0      1      1   =>   no                  0
    //    0      1      0      0   =>   yes filled below    2
    //    0      1      0      1   =>   no                  0
    //    0      1      1      0   =>   no                  0
    //    0      1      1      1   =>   yes filled above    1
    //    1      0      0      0   =>   yes filled above    1
    //    1      0      0      1   =>   no                  0
    //    1      0      1      0   =>   no                  0
    //    1      0      1      1   =>   yes filled below    2
    //    1      1      0      0   =>   no                  0
    //    1      1      0      1   =>   yes filled above    1
    //    1      1      1      0   =>   yes filled below    2
    //    1      1      1      1   =>   no                  0
    return select$2(segments, [0, 2, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0], buildLog);
  }
};
var segmentSelector = SegmentSelector;

// (c) Copyright 2017, Sean Connelly (@voidqk), http://syntheti.cc
// MIT License
// Project Home: https://github.com/voidqk/polybooljs
//
// convert between PolyBool polygon format and GeoJSON formats (Polygon and MultiPolygon)
//
var GeoJSON = {
  // convert a GeoJSON object to a PolyBool polygon
  toPolygon: function (PolyBool, geojson) {
    // converts list of LineString's to segments
    function GeoPoly(coords) {
      // check for empty coords
      if (coords.length <= 0) return PolyBool.segments({
        inverted: false,
        regions: []
      }); // convert LineString to segments

      function LineString(ls) {
        // remove tail which should be the same as head
        var reg = ls.slice(0, ls.length - 1);
        return PolyBool.segments({
          inverted: false,
          regions: [reg]
        });
      } // the first LineString is considered the outside


      var out = LineString(coords[0]); // the rest of the LineStrings are considered interior holes, so subtract them from the
      // current result

      for (var i = 1; i < coords.length; i++) out = PolyBool.selectDifference(PolyBool.combine(out, LineString(coords[i])));

      return out;
    }

    if (geojson.type === 'Polygon') {
      // single polygon, so just convert it and we're done
      return PolyBool.polygon(GeoPoly(geojson.coordinates));
    } else if (geojson.type === 'MultiPolygon') {
      // multiple polygons, so union all the polygons together
      var out = PolyBool.segments({
        inverted: false,
        regions: []
      });

      for (var i = 0; i < geojson.coordinates.length; i++) out = PolyBool.selectUnion(PolyBool.combine(out, GeoPoly(geojson.coordinates[i])));

      return PolyBool.polygon(out);
    }

    throw new Error('PolyBool: Cannot convert GeoJSON object to PolyBool polygon');
  },
  // convert a PolyBool polygon to a GeoJSON object
  fromPolygon: function (PolyBool, eps, poly) {
    // make sure out polygon is clean
    poly = PolyBool.polygon(PolyBool.segments(poly)); // test if r1 is inside r2

    function regionInsideRegion(r1, r2) {
      // we're guaranteed no lines intersect (because the polygon is clean), but a vertex
      // could be on the edge -- so we just average pt[0] and pt[1] to produce a point on the
      // edge of the first line, which cannot be on an edge
      return eps.pointInsideRegion([(r1[0][0] + r1[1][0]) * 0.5, (r1[0][1] + r1[1][1]) * 0.5], r2);
    } // calculate inside heirarchy
    //
    //  _____________________   _______    roots -> A       -> F
    // |          A          | |   F   |            |          |
    // |  _______   _______  | |  ___  |            +-- B      +-- G
    // | |   B   | |   C   | | | |   | |            |   |
    // | |  ___  | |  ___  | | | |   | |            |   +-- D
    // | | | D | | | | E | | | | | G | |            |
    // | | |___| | | |___| | | | |   | |            +-- C
    // | |_______| |_______| | | |___| |                |
    // |_____________________| |_______|                +-- E


    function newNode(region) {
      return {
        region: region,
        children: []
      };
    }

    var roots = newNode(null);

    function addChild(root, region) {
      // first check if we're inside any children
      for (var i = 0; i < root.children.length; i++) {
        var child = root.children[i];

        if (regionInsideRegion(region, child.region)) {
          // we are, so insert inside them instead
          addChild(child, region);
          return;
        }
      } // not inside any children, so check to see if any children are inside us


      var node = newNode(region);

      for (var i = 0; i < root.children.length; i++) {
        var child = root.children[i];

        if (regionInsideRegion(child.region, region)) {
          // oops... move the child beneath us, and remove them from root
          node.children.push(child);
          root.children.splice(i, 1);
          i--;
        }
      } // now we can add ourselves


      root.children.push(node);
    } // add all regions to the root


    for (var i = 0; i < poly.regions.length; i++) {
      var region = poly.regions[i];
      if (region.length < 3) // regions must have at least 3 points (sanity check)
        continue;
      addChild(roots, region);
    } // with our heirarchy, we can distinguish between exterior borders, and interior holes
    // the root nodes are exterior, children are interior, children's children are exterior,
    // children's children's children are interior, etc
    // while we're at it, exteriors are counter-clockwise, and interiors are clockwise


    function forceWinding(region, clockwise) {
      // first, see if we're clockwise or counter-clockwise
      // https://en.wikipedia.org/wiki/Shoelace_formula
      var winding = 0;
      var last_x = region[region.length - 1][0];
      var last_y = region[region.length - 1][1];
      var copy = [];

      for (var i = 0; i < region.length; i++) {
        var curr_x = region[i][0];
        var curr_y = region[i][1];
        copy.push([curr_x, curr_y]); // create a copy while we're at it

        winding += curr_y * last_x - curr_x * last_y;
        last_x = curr_x;
        last_y = curr_y;
      } // this assumes Cartesian coordinates (Y is positive going up)


      var isclockwise = winding < 0;
      if (isclockwise !== clockwise) copy.reverse(); // while we're here, the last point must be the first point...

      copy.push([copy[0][0], copy[0][1]]);
      return copy;
    }

    var geopolys = [];

    function addExterior(node) {
      var poly = [forceWinding(node.region, false)];
      geopolys.push(poly); // children of exteriors are interior

      for (var i = 0; i < node.children.length; i++) poly.push(getInterior(node.children[i]));
    }

    function getInterior(node) {
      // children of interiors are exterior
      for (var i = 0; i < node.children.length; i++) addExterior(node.children[i]); // return the clockwise interior


      return forceWinding(node.region, true);
    } // root nodes are exterior


    for (var i = 0; i < roots.children.length; i++) addExterior(roots.children[i]); // lastly, construct the approrpriate GeoJSON object


    if (geopolys.length <= 0) // empty GeoJSON Polygon
      return {
        type: 'Polygon',
        coordinates: []
      };
    if (geopolys.length == 1) // use a GeoJSON Polygon
      return {
        type: 'Polygon',
        coordinates: geopolys[0]
      };
    return {
      // otherwise, use a GeoJSON MultiPolygon
      type: 'MultiPolygon',
      coordinates: geopolys
    };
  }
};
var geojson = GeoJSON;

/*
 * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc
 * @license MIT
 * @preserve Project Home: https://github.com/voidqk/polybooljs
 */
var buildLog = false;
var epsilon = epsilon$1();
var PolyBool;
PolyBool = {
  // getter/setter for buildLog
  buildLog: function (bl) {
    if (bl === true) buildLog = buildLog$1();else if (bl === false) buildLog = false;
    return buildLog === false ? false : buildLog.list;
  },
  // getter/setter for epsilon
  epsilon: function (v) {
    return epsilon.epsilon(v);
  },
  // core API
  segments: function (poly) {
    var i = intersecter(true, epsilon, buildLog);
    poly.regions.forEach(i.addRegion);
    return {
      segments: i.calculate(poly.inverted),
      inverted: poly.inverted
    };
  },
  combine: function (segments1, segments2) {
    var i3 = intersecter(false, epsilon, buildLog);
    return {
      combined: i3.calculate(segments1.segments, segments1.inverted, segments2.segments, segments2.inverted),
      inverted1: segments1.inverted,
      inverted2: segments2.inverted
    };
  },
  selectUnion: function (combined) {
    return {
      segments: segmentSelector.union(combined.combined, buildLog),
      inverted: combined.inverted1 || combined.inverted2
    };
  },
  selectIntersect: function (combined) {
    return {
      segments: segmentSelector.intersect(combined.combined, buildLog),
      inverted: combined.inverted1 && combined.inverted2
    };
  },
  selectDifference: function (combined) {
    return {
      segments: segmentSelector.difference(combined.combined, buildLog),
      inverted: combined.inverted1 && !combined.inverted2
    };
  },
  selectDifferenceRev: function (combined) {
    return {
      segments: segmentSelector.differenceRev(combined.combined, buildLog),
      inverted: !combined.inverted1 && combined.inverted2
    };
  },
  selectXor: function (combined) {
    return {
      segments: segmentSelector.xor(combined.combined, buildLog),
      inverted: combined.inverted1 !== combined.inverted2
    };
  },
  polygon: function (segments) {
    return {
      regions: segmentChainer(segments.segments, epsilon, buildLog),
      inverted: segments.inverted
    };
  },
  // GeoJSON converters
  polygonFromGeoJSON: function (geojson$1) {
    return geojson.toPolygon(PolyBool, geojson$1);
  },
  polygonToGeoJSON: function (poly) {
    return geojson.fromPolygon(PolyBool, epsilon, poly);
  },
  // helper functions for common operations
  union: function (poly1, poly2) {
    return operate(poly1, poly2, PolyBool.selectUnion);
  },
  intersect: function (poly1, poly2) {
    return operate(poly1, poly2, PolyBool.selectIntersect);
  },
  difference: function (poly1, poly2) {
    return operate(poly1, poly2, PolyBool.selectDifference);
  },
  differenceRev: function (poly1, poly2) {
    return operate(poly1, poly2, PolyBool.selectDifferenceRev);
  },
  xor: function (poly1, poly2) {
    return operate(poly1, poly2, PolyBool.selectXor);
  }
};

function operate(poly1, poly2, selector) {
  var seg1 = PolyBool.segments(poly1);
  var seg2 = PolyBool.segments(poly2);
  var comb = PolyBool.combine(seg1, seg2);
  var seg3 = selector(comb);
  return PolyBool.polygon(seg3);
}

if (typeof window === 'object') window.PolyBool = PolyBool;
var polybooljs = PolyBool;

var polygon_1 = createCommonjsModule(function (module) {

  var dot = matrix.dot;
  var BADNUM = numerical.BADNUM;
  var polygon = module.exports = {};
  /**
   * Turn an array of [x, y] pairs into a polygon object
   * that can test if points are inside it
   *
   * @param ptsIn Array of [x, y] pairs
   *
   * @returns polygon Object {xmin, xmax, ymin, ymax, pts, contains}
   *      (x|y)(min|max) are the bounding rect of the polygon
   *      pts is the original array, with the first pair repeated at the end
   *      contains is a function: (pt, omitFirstEdge)
   *          pt is the [x, y] pair to test
   *          omitFirstEdge truthy means points exactly on the first edge don't
   *              count. This is for use adding one polygon to another so we
   *              don't double-count the edge where they meet.
   *          returns boolean: is pt inside the polygon (including on its edges)
   */

  polygon.tester = function tester(ptsIn) {
    var pts = ptsIn.slice();
    var xmin = pts[0][0];
    var xmax = xmin;
    var ymin = pts[0][1];
    var ymax = ymin;
    var i;
    pts.push(pts[0]);

    for (i = 1; i < pts.length; i++) {
      xmin = Math.min(xmin, pts[i][0]);
      xmax = Math.max(xmax, pts[i][0]);
      ymin = Math.min(ymin, pts[i][1]);
      ymax = Math.max(ymax, pts[i][1]);
    } // do we have a rectangle? Handle this here, so we can use the same
    // tester for the rectangular case without sacrificing speed


    var isRect = false;
    var rectFirstEdgeTest;

    if (pts.length === 5) {
      if (pts[0][0] === pts[1][0]) {
        // vert, horz, vert, horz
        if (pts[2][0] === pts[3][0] && pts[0][1] === pts[3][1] && pts[1][1] === pts[2][1]) {
          isRect = true;

          rectFirstEdgeTest = function (pt) {
            return pt[0] === pts[0][0];
          };
        }
      } else if (pts[0][1] === pts[1][1]) {
        // horz, vert, horz, vert
        if (pts[2][1] === pts[3][1] && pts[0][0] === pts[3][0] && pts[1][0] === pts[2][0]) {
          isRect = true;

          rectFirstEdgeTest = function (pt) {
            return pt[1] === pts[0][1];
          };
        }
      }
    }

    function rectContains(pt, omitFirstEdge) {
      var x = pt[0];
      var y = pt[1];

      if (x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {
        // pt is outside the bounding box of polygon
        return false;
      }

      if (omitFirstEdge && rectFirstEdgeTest(pt)) return false;
      return true;
    }

    function contains(pt, omitFirstEdge) {
      var x = pt[0];
      var y = pt[1];

      if (x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {
        // pt is outside the bounding box of polygon
        return false;
      }

      var imax = pts.length;
      var x1 = pts[0][0];
      var y1 = pts[0][1];
      var crossings = 0;
      var i;
      var x0;
      var y0;
      var xmini;
      var ycross;

      for (i = 1; i < imax; i++) {
        // find all crossings of a vertical line upward from pt with
        // polygon segments
        // crossings exactly at xmax don't count, unless the point is
        // exactly on the segment, then it counts as inside.
        x0 = x1;
        y0 = y1;
        x1 = pts[i][0];
        y1 = pts[i][1];
        xmini = Math.min(x0, x1);

        if (x < xmini || x > Math.max(x0, x1) || y > Math.max(y0, y1)) {
          // outside the bounding box of this segment, it's only a crossing
          // if it's below the box.
          continue;
        } else if (y < Math.min(y0, y1)) {
          // don't count the left-most point of the segment as a crossing
          // because we don't want to double-count adjacent crossings
          // UNLESS the polygon turns past vertical at exactly this x
          // Note that this is repeated below, but we can't factor it out
          // because
          if (x !== xmini) crossings++;
        } else {
          // inside the bounding box, check the actual line intercept
          // vertical segment - we know already that the point is exactly
          // on the segment, so mark the crossing as exactly at the point.
          if (x1 === x0) ycross = y; // any other angle
          else ycross = y0 + (x - x0) * (y1 - y0) / (x1 - x0); // exactly on the edge: counts as inside the polygon, unless it's the
          // first edge and we're omitting it.

          if (y === ycross) {
            if (i === 1 && omitFirstEdge) return false;
            return true;
          }

          if (y <= ycross && x !== xmini) crossings++;
        }
      } // if we've gotten this far, odd crossings means inside, even is outside


      return crossings % 2 === 1;
    } // detect if poly is degenerate


    var degenerate = true;
    var lastPt = pts[0];

    for (i = 1; i < pts.length; i++) {
      if (lastPt[0] !== pts[i][0] || lastPt[1] !== pts[i][1]) {
        degenerate = false;
        break;
      }
    }

    return {
      xmin: xmin,
      xmax: xmax,
      ymin: ymin,
      ymax: ymax,
      pts: pts,
      contains: isRect ? rectContains : contains,
      isRect: isRect,
      degenerate: degenerate
    };
  };
  /**
   * Test if a segment of a points array is bent or straight
   *
   * @param pts Array of [x, y] pairs
   * @param start the index of the proposed start of the straight section
   * @param end the index of the proposed end point
   * @param tolerance the max distance off the line connecting start and end
   *      before the line counts as bent
   * @returns boolean: true means this segment is bent, false means straight
   */


  polygon.isSegmentBent = function isSegmentBent(pts, start, end, tolerance) {
    var startPt = pts[start];
    var segment = [pts[end][0] - startPt[0], pts[end][1] - startPt[1]];
    var segmentSquared = dot(segment, segment);
    var segmentLen = Math.sqrt(segmentSquared);
    var unitPerp = [-segment[1] / segmentLen, segment[0] / segmentLen];
    var i;
    var part;
    var partParallel;

    for (i = start + 1; i < end; i++) {
      part = [pts[i][0] - startPt[0], pts[i][1] - startPt[1]];
      partParallel = dot(part, segment);
      if (partParallel < 0 || partParallel > segmentSquared || Math.abs(dot(part, unitPerp)) > tolerance) return true;
    }

    return false;
  };
  /**
   * Make a filtering polygon, to minimize the number of segments
   *
   * @param pts Array of [x, y] pairs (must start with at least 1 pair)
   * @param tolerance the maximum deviation from straight allowed for
   *      removing points to simplify the polygon
   *
   * @returns Object {addPt, raw, filtered}
   *      addPt is a function(pt: [x, y] pair) to add a raw point and
   *          continue filtering
   *      raw is all the input points
   *      filtered is the resulting filtered Array of [x, y] pairs
   */


  polygon.filter = function filter(pts, tolerance) {
    var ptsFiltered = [pts[0]];
    var doneRawIndex = 0;
    var doneFilteredIndex = 0;

    function addPt(pt) {
      pts.push(pt);
      var prevFilterLen = ptsFiltered.length;
      var iLast = doneRawIndex;
      ptsFiltered.splice(doneFilteredIndex + 1);

      for (var i = iLast + 1; i < pts.length; i++) {
        if (i === pts.length - 1 || polygon.isSegmentBent(pts, iLast, i + 1, tolerance)) {
          ptsFiltered.push(pts[i]);

          if (ptsFiltered.length < prevFilterLen - 2) {
            doneRawIndex = i;
            doneFilteredIndex = ptsFiltered.length - 1;
          }

          iLast = i;
        }
      }
    }

    if (pts.length > 1) {
      var lastPt = pts.pop();
      addPt(lastPt);
    }

    return {
      addPt: addPt,
      raw: pts,
      filtered: ptsFiltered
    };
  };
});

var dashStyle = drawing_1.dashStyle;
var makeEventData = helpers$9.makeEventData;
var freeMode$1 = helpers$6.freeMode;
var rectMode = helpers$6.rectMode;
var drawMode = helpers$6.drawMode;
var openMode = helpers$6.openMode;
var selectMode = helpers$6.selectMode;
var handleEllipse = helpers$4.handleEllipse;
var getFromId$1 = axis_ids.getFromId;
var redrawReglTraces$1 = subroutines.redrawReglTraces;
var MINSELECT = constants$a.MINSELECT;
var filteredPolygon = polygon_1.filter;
var polygonTester$1 = polygon_1.tester;
var clearSelect$1 = handle_outline.clearSelect;
var p2r = helpers$5.p2r;
var axValue = helpers$5.axValue;
var getTransform = helpers$5.getTransform;

function prepSelect$1(e, startX, startY, dragOptions, mode) {
  var isFreeMode = freeMode$1(mode);
  var isRectMode = rectMode(mode);
  var isOpenMode = openMode(mode);
  var isDrawMode = drawMode(mode);
  var isSelectMode = selectMode(mode);
  var isLine = mode === 'drawline';
  var isEllipse = mode === 'drawcircle';
  var isLineOrEllipse = isLine || isEllipse; // cases with two start & end positions

  var gd = dragOptions.gd;
  var fullLayout = gd._fullLayout;
  var zoomLayer = fullLayout._zoomlayer;
  var dragBBox = dragOptions.element.getBoundingClientRect();
  var plotinfo = dragOptions.plotinfo;
  var transform = getTransform(plotinfo);
  var x0 = startX - dragBBox.left;
  var y0 = startY - dragBBox.top;

  fullLayout._calcInverseTransform(gd);

  var transformedCoords = lib_1.apply3DTransform(fullLayout._invTransform)(x0, y0);
  x0 = transformedCoords[0];
  y0 = transformedCoords[1];
  var scaleX = fullLayout._invScaleX;
  var scaleY = fullLayout._invScaleY;
  var x1 = x0;
  var y1 = y0;
  var path0 = 'M' + x0 + ',' + y0;
  var pw = dragOptions.xaxes[0]._length;
  var ph = dragOptions.yaxes[0]._length;
  var allAxes = dragOptions.xaxes.concat(dragOptions.yaxes);
  var subtract = e.altKey && !(drawMode(mode) && isOpenMode);
  var filterPoly, selectionTester, mergedPolygons, currentPolygon;
  var i, searchInfo, eventData;
  coerceSelectionsCache(e, gd, dragOptions);

  if (isFreeMode) {
    filterPoly = filteredPolygon([[x0, y0]], constants$a.BENDPX);
  }

  var outlines = zoomLayer.selectAll('path.select-outline-' + plotinfo.id).data(isDrawMode ? [0] : [1, 2]);
  var drwStyle = fullLayout.newshape;
  outlines.enter().append('path').attr('class', function (d) {
    return 'select-outline select-outline-' + d + ' select-outline-' + plotinfo.id;
  }).style(isDrawMode ? {
    opacity: drwStyle.opacity / 2,
    fill: isOpenMode ? undefined : drwStyle.fillcolor,
    stroke: drwStyle.line.color,
    'stroke-dasharray': dashStyle(drwStyle.line.dash, drwStyle.line.width),
    'stroke-width': drwStyle.line.width + 'px'
  } : {}).attr('fill-rule', drwStyle.fillrule).classed('cursor-move', isDrawMode ? true : false).attr('transform', transform).attr('d', path0 + 'Z');
  var corners = zoomLayer.append('path').attr('class', 'zoombox-corners').style({
    fill: color_1.background,
    stroke: color_1.defaultLine,
    'stroke-width': 1
  }).attr('transform', transform).attr('d', 'M0,0Z');
  var throttleID = fullLayout._uid + constants$a.SELECTID;
  var selection = []; // find the traces to search for selection points

  var searchTraces = determineSearchTraces(gd, dragOptions.xaxes, dragOptions.yaxes, dragOptions.subplot);

  function ascending(a, b) {
    return a - b;
  } // allow subplots to override fillRangeItems routine


  var fillRangeItems;

  if (plotinfo.fillRangeItems) {
    fillRangeItems = plotinfo.fillRangeItems;
  } else {
    if (isRectMode) {
      fillRangeItems = function (eventData, poly) {
        var ranges = eventData.range = {};

        for (i = 0; i < allAxes.length; i++) {
          var ax = allAxes[i];

          var axLetter = ax._id.charAt(0);

          ranges[ax._id] = [p2r(ax, poly[axLetter + 'min']), p2r(ax, poly[axLetter + 'max'])].sort(ascending);
        }
      };
    } else {
      // case of isFreeMode
      fillRangeItems = function (eventData, poly, filterPoly) {
        var dataPts = eventData.lassoPoints = {};

        for (i = 0; i < allAxes.length; i++) {
          var ax = allAxes[i];
          dataPts[ax._id] = filterPoly.filtered.map(axValue(ax));
        }
      };
    }
  }

  dragOptions.moveFn = function (dx0, dy0) {
    x1 = Math.max(0, Math.min(pw, scaleX * dx0 + x0));
    y1 = Math.max(0, Math.min(ph, scaleY * dy0 + y0));
    var dx = Math.abs(x1 - x0);
    var dy = Math.abs(y1 - y0);

    if (isRectMode) {
      var direction;
      var start, end;

      if (isSelectMode) {
        var q = fullLayout.selectdirection;

        if (q === 'any') {
          if (dy < Math.min(dx * 0.6, MINSELECT)) {
            direction = 'h';
          } else if (dx < Math.min(dy * 0.6, MINSELECT)) {
            direction = 'v';
          } else {
            direction = 'd';
          }
        } else {
          direction = q;
        }

        switch (direction) {
          case 'h':
            start = isEllipse ? ph / 2 : 0;
            end = ph;
            break;

          case 'v':
            start = isEllipse ? pw / 2 : 0;
            end = pw;
            break;
        }
      }

      if (isDrawMode) {
        switch (fullLayout.newshape.drawdirection) {
          case 'vertical':
            direction = 'h';
            start = isEllipse ? ph / 2 : 0;
            end = ph;
            break;

          case 'horizontal':
            direction = 'v';
            start = isEllipse ? pw / 2 : 0;
            end = pw;
            break;

          case 'ortho':
            if (dx < dy) {
              direction = 'h';
              start = y0;
              end = y1;
            } else {
              direction = 'v';
              start = x0;
              end = x1;
            }

            break;

          default:
            // i.e. case of 'diagonal'
            direction = 'd';
        }
      }

      if (direction === 'h') {
        // horizontal motion
        currentPolygon = isLineOrEllipse ? handleEllipse(isEllipse, [x1, start], [x1, end]) : // using x1 instead of x0 allows adjusting the line while drawing
        [[x0, start], [x0, end], [x1, end], [x1, start]]; // make a vertical box

        currentPolygon.xmin = isLineOrEllipse ? x1 : Math.min(x0, x1);
        currentPolygon.xmax = isLineOrEllipse ? x1 : Math.max(x0, x1);
        currentPolygon.ymin = Math.min(start, end);
        currentPolygon.ymax = Math.max(start, end); // extras to guide users in keeping a straight selection

        corners.attr('d', 'M' + currentPolygon.xmin + ',' + (y0 - MINSELECT) + 'h-4v' + 2 * MINSELECT + 'h4Z' + 'M' + (currentPolygon.xmax - 1) + ',' + (y0 - MINSELECT) + 'h4v' + 2 * MINSELECT + 'h-4Z');
      } else if (direction === 'v') {
        // vertical motion
        currentPolygon = isLineOrEllipse ? handleEllipse(isEllipse, [start, y1], [end, y1]) : // using y1 instead of y0 allows adjusting the line while drawing
        [[start, y0], [start, y1], [end, y1], [end, y0]]; // make a horizontal box

        currentPolygon.xmin = Math.min(start, end);
        currentPolygon.xmax = Math.max(start, end);
        currentPolygon.ymin = isLineOrEllipse ? y1 : Math.min(y0, y1);
        currentPolygon.ymax = isLineOrEllipse ? y1 : Math.max(y0, y1);
        corners.attr('d', 'M' + (x0 - MINSELECT) + ',' + currentPolygon.ymin + 'v-4h' + 2 * MINSELECT + 'v4Z' + 'M' + (x0 - MINSELECT) + ',' + (currentPolygon.ymax - 1) + 'v4h' + 2 * MINSELECT + 'v-4Z');
      } else if (direction === 'd') {
        // diagonal motion
        currentPolygon = isLineOrEllipse ? handleEllipse(isEllipse, [x0, y0], [x1, y1]) : [[x0, y0], [x0, y1], [x1, y1], [x1, y0]];
        currentPolygon.xmin = Math.min(x0, x1);
        currentPolygon.xmax = Math.max(x0, x1);
        currentPolygon.ymin = Math.min(y0, y1);
        currentPolygon.ymax = Math.max(y0, y1);
        corners.attr('d', 'M0,0Z');
      }
    } else if (isFreeMode) {
      filterPoly.addPt([x1, y1]);
      currentPolygon = filterPoly.filtered;
    } // create outline & tester


    if (dragOptions.selectionDefs && dragOptions.selectionDefs.length) {
      mergedPolygons = mergePolygons(dragOptions.mergedPolygons, currentPolygon, subtract);
      currentPolygon.subtract = subtract;
      selectionTester = multiTester(dragOptions.selectionDefs.concat([currentPolygon]));
    } else {
      mergedPolygons = [currentPolygon];
      selectionTester = polygonTester$1(currentPolygon);
    } // display polygons on the screen


    display_outlines(convertPoly(mergedPolygons, isOpenMode), outlines, dragOptions);

    if (isSelectMode) {
      throttle.throttle(throttleID, constants$a.SELECTDELAY, function () {
        selection = [];
        var thisSelection;
        var traceSelection;

        for (i = 0; i < searchTraces.length; i++) {
          searchInfo = searchTraces[i];
          traceSelection = searchInfo._module.selectPoints(searchInfo, selectionTester);
          thisSelection = fillSelectionItem(traceSelection, searchInfo);

          if (selection.length) {
            for (var j = 0; j < thisSelection.length; j++) {
              selection.push(thisSelection[j]);
            }
          } else selection = thisSelection;
        }

        eventData = {
          points: selection
        };
        updateSelectedState(gd, searchTraces, eventData);
        fillRangeItems(eventData, currentPolygon, filterPoly);
        dragOptions.gd.emit('plotly_selecting', eventData);
      });
    }
  };

  dragOptions.clickFn = function (numClicks, evt) {
    corners.remove();

    if (gd._fullLayout._activeShapeIndex >= 0) {
      gd._fullLayout._deactivateShape(gd);

      return;
    }

    if (isDrawMode) return;
    var clickmode = fullLayout.clickmode;
    throttle.done(throttleID).then(function () {
      throttle.clear(throttleID);

      if (numClicks === 2) {
        // clear selection on doubleclick
        outlines.remove();

        for (i = 0; i < searchTraces.length; i++) {
          searchInfo = searchTraces[i];

          searchInfo._module.selectPoints(searchInfo, false);
        }

        updateSelectedState(gd, searchTraces);
        clearSelectionsCache(dragOptions);
        gd.emit('plotly_deselect', null);
      } else {
        if (clickmode.indexOf('select') > -1) {
          selectOnClick$1(evt, gd, dragOptions.xaxes, dragOptions.yaxes, dragOptions.subplot, dragOptions, outlines);
        }

        if (clickmode === 'event') {
          // TODO: remove in v3 - this was probably never intended to work as it does,
          // but in case anyone depends on it we don't want to break it now.
          // Note that click-to-select introduced pre v3 also emitts proper
          // event data when clickmode is having 'select' in its flag list.
          gd.emit('plotly_selected', undefined);
        }
      }

      fx.click(gd, evt);
    }).catch(lib_1.error);
  };

  dragOptions.doneFn = function () {
    corners.remove();
    throttle.done(throttleID).then(function () {
      throttle.clear(throttleID);
      dragOptions.gd.emit('plotly_selected', eventData);

      if (currentPolygon && dragOptions.selectionDefs) {
        // save last polygons
        currentPolygon.subtract = subtract;
        dragOptions.selectionDefs.push(currentPolygon); // we have to keep reference to arrays container

        dragOptions.mergedPolygons.length = 0;
        [].push.apply(dragOptions.mergedPolygons, mergedPolygons);
      }

      if (dragOptions.doneFnCompleted) {
        dragOptions.doneFnCompleted(selection);
      }
    }).catch(lib_1.error);

    if (isDrawMode) {
      clearSelectionsCache(dragOptions);
    }
  };
}

function selectOnClick$1(evt, gd, xAxes, yAxes, subplot, dragOptions, polygonOutlines) {
  var hoverData = gd._hoverdata;
  var fullLayout = gd._fullLayout;
  var clickmode = fullLayout.clickmode;
  var sendEvents = clickmode.indexOf('event') > -1;
  var selection = [];
  var searchTraces, searchInfo, currentSelectionDef, selectionTester, traceSelection;
  var thisTracesSelection, pointOrBinSelected, subtract, eventData, i;

  if (isHoverDataSet(hoverData)) {
    coerceSelectionsCache(evt, gd, dragOptions);
    searchTraces = determineSearchTraces(gd, xAxes, yAxes, subplot);
    var clickedPtInfo = extractClickedPtInfo(hoverData, searchTraces);
    var isBinnedTrace = clickedPtInfo.pointNumbers.length > 0; // Note: potentially costly operation isPointOrBinSelected is
    // called as late as possible through the use of an assignment
    // in an if condition.

    if (isBinnedTrace ? isOnlyThisBinSelected(searchTraces, clickedPtInfo) : isOnlyOnePointSelected(searchTraces) && (pointOrBinSelected = isPointOrBinSelected(clickedPtInfo))) {
      if (polygonOutlines) polygonOutlines.remove();

      for (i = 0; i < searchTraces.length; i++) {
        searchInfo = searchTraces[i];

        searchInfo._module.selectPoints(searchInfo, false);
      }

      updateSelectedState(gd, searchTraces);
      clearSelectionsCache(dragOptions);

      if (sendEvents) {
        gd.emit('plotly_deselect', null);
      }
    } else {
      subtract = evt.shiftKey && (pointOrBinSelected !== undefined ? pointOrBinSelected : isPointOrBinSelected(clickedPtInfo));
      currentSelectionDef = newPointSelectionDef(clickedPtInfo.pointNumber, clickedPtInfo.searchInfo, subtract);
      var allSelectionDefs = dragOptions.selectionDefs.concat([currentSelectionDef]);
      selectionTester = multiTester(allSelectionDefs);

      for (i = 0; i < searchTraces.length; i++) {
        traceSelection = searchTraces[i]._module.selectPoints(searchTraces[i], selectionTester);
        thisTracesSelection = fillSelectionItem(traceSelection, searchTraces[i]);

        if (selection.length) {
          for (var j = 0; j < thisTracesSelection.length; j++) {
            selection.push(thisTracesSelection[j]);
          }
        } else selection = thisTracesSelection;
      }

      eventData = {
        points: selection
      };
      updateSelectedState(gd, searchTraces, eventData);

      if (currentSelectionDef && dragOptions) {
        dragOptions.selectionDefs.push(currentSelectionDef);
      }

      if (polygonOutlines) {
        var polygons = dragOptions.mergedPolygons;
        var isOpenMode = openMode(dragOptions.dragmode); // display polygons on the screen

        display_outlines(convertPoly(polygons, isOpenMode), polygonOutlines, dragOptions);
      }

      if (sendEvents) {
        gd.emit('plotly_selected', eventData);
      }
    }
  }
}
/**
 * Constructs a new point selection definition object.
 */


function newPointSelectionDef(pointNumber, searchInfo, subtract) {
  return {
    pointNumber: pointNumber,
    searchInfo: searchInfo,
    subtract: subtract
  };
}

function isPointSelectionDef(o) {
  return 'pointNumber' in o && 'searchInfo' in o;
}
/*
 * Constructs a new point number tester.
 */


function newPointNumTester(pointSelectionDef) {
  return {
    xmin: 0,
    xmax: 0,
    ymin: 0,
    ymax: 0,
    pts: [],
    contains: function (pt, omitFirstEdge, pointNumber, searchInfo) {
      var idxWantedTrace = pointSelectionDef.searchInfo.cd[0].trace._expandedIndex;
      var idxActualTrace = searchInfo.cd[0].trace._expandedIndex;
      return idxActualTrace === idxWantedTrace && pointNumber === pointSelectionDef.pointNumber;
    },
    isRect: false,
    degenerate: false,
    subtract: pointSelectionDef.subtract
  };
}
/**
 * Wraps multiple selection testers.
 *
 * @param {Array} list - An array of selection testers.
 *
 * @return a selection tester object with a contains function
 * that can be called to evaluate a point against all wrapped
 * selection testers that were passed in list.
 */


function multiTester(list) {
  var testers = [];
  var xmin = isPointSelectionDef(list[0]) ? 0 : list[0][0][0];
  var xmax = xmin;
  var ymin = isPointSelectionDef(list[0]) ? 0 : list[0][0][1];
  var ymax = ymin;

  for (var i = 0; i < list.length; i++) {
    if (isPointSelectionDef(list[i])) {
      testers.push(newPointNumTester(list[i]));
    } else {
      var tester = polygon_1.tester(list[i]);
      tester.subtract = list[i].subtract;
      testers.push(tester);
      xmin = Math.min(xmin, tester.xmin);
      xmax = Math.max(xmax, tester.xmax);
      ymin = Math.min(ymin, tester.ymin);
      ymax = Math.max(ymax, tester.ymax);
    }
  }
  /**
   * Tests if the given point is within this tester.
   *
   * @param {Array} pt - [0] is the x coordinate, [1] is the y coordinate of the point.
   * @param {*} arg - An optional parameter to pass down to wrapped testers.
   * @param {number} pointNumber - The point number of the point within the underlying data array.
   * @param {number} searchInfo - An object identifying the trace the point is contained in.
   *
   * @return {boolean} true if point is considered to be selected, false otherwise.
   */


  function contains(pt, arg, pointNumber, searchInfo) {
    var contained = false;

    for (var i = 0; i < testers.length; i++) {
      if (testers[i].contains(pt, arg, pointNumber, searchInfo)) {
        // if contained by subtract tester - exclude the point
        contained = testers[i].subtract === false;
      }
    }

    return contained;
  }

  return {
    xmin: xmin,
    xmax: xmax,
    ymin: ymin,
    ymax: ymax,
    pts: [],
    contains: contains,
    isRect: false,
    degenerate: false
  };
}

function coerceSelectionsCache(evt, gd, dragOptions) {
  gd._fullLayout._drawing = false;
  var fullLayout = gd._fullLayout;
  var plotinfo = dragOptions.plotinfo;
  var dragmode = dragOptions.dragmode;
  var selectingOnSameSubplot = fullLayout._lastSelectedSubplot && fullLayout._lastSelectedSubplot === plotinfo.id;
  var hasModifierKey = (evt.shiftKey || evt.altKey) && !(drawMode(dragmode) && openMode(dragmode));

  if (selectingOnSameSubplot && hasModifierKey && plotinfo.selection && plotinfo.selection.selectionDefs && !dragOptions.selectionDefs) {
    // take over selection definitions from prev mode, if any
    dragOptions.selectionDefs = plotinfo.selection.selectionDefs;
    dragOptions.mergedPolygons = plotinfo.selection.mergedPolygons;
  } else if (!hasModifierKey || !plotinfo.selection) {
    clearSelectionsCache(dragOptions);
  } // clear selection outline when selecting a different subplot


  if (!selectingOnSameSubplot) {
    clearSelect$1(gd);
    fullLayout._lastSelectedSubplot = plotinfo.id;
  }
}

function clearSelectionsCache(dragOptions) {
  var dragmode = dragOptions.dragmode;
  var plotinfo = dragOptions.plotinfo;
  var gd = dragOptions.gd;

  if (gd._fullLayout._activeShapeIndex >= 0) {
    gd._fullLayout._deactivateShape(gd);
  }

  if (drawMode(dragmode)) {
    var fullLayout = gd._fullLayout;
    var zoomLayer = fullLayout._zoomlayer;
    var outlines = zoomLayer.selectAll('.select-outline-' + plotinfo.id);

    if (outlines && gd._fullLayout._drawing) {
      // add shape
      var shapes = newshapes(outlines, dragOptions);

      if (shapes) {
        registry.call('_guiRelayout', gd, {
          shapes: shapes
        });
      }

      gd._fullLayout._drawing = false;
    }
  }

  plotinfo.selection = {};
  plotinfo.selection.selectionDefs = dragOptions.selectionDefs = [];
  plotinfo.selection.mergedPolygons = dragOptions.mergedPolygons = [];
}

function determineSearchTraces(gd, xAxes, yAxes, subplot) {
  var searchTraces = [];
  var xAxisIds = xAxes.map(function (ax) {
    return ax._id;
  });
  var yAxisIds = yAxes.map(function (ax) {
    return ax._id;
  });
  var cd, trace, i;

  for (i = 0; i < gd.calcdata.length; i++) {
    cd = gd.calcdata[i];
    trace = cd[0].trace;
    if (trace.visible !== true || !trace._module || !trace._module.selectPoints) continue;

    if (subplot && (trace.subplot === subplot || trace.geo === subplot)) {
      searchTraces.push(createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]));
    } else if (trace.type === 'splom' && // FIXME: make sure we don't have more than single axis for splom
    trace._xaxes[xAxisIds[0]] && trace._yaxes[yAxisIds[0]]) {
      var info = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);
      info.scene = gd._fullLayout._splomScenes[trace.uid];
      searchTraces.push(info);
    } else if (trace.type === 'sankey') {
      var sankeyInfo = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);
      searchTraces.push(sankeyInfo);
    } else {
      if (xAxisIds.indexOf(trace.xaxis) === -1) continue;
      if (yAxisIds.indexOf(trace.yaxis) === -1) continue;
      searchTraces.push(createSearchInfo(trace._module, cd, getFromId$1(gd, trace.xaxis), getFromId$1(gd, trace.yaxis)));
    }
  }

  return searchTraces;

  function createSearchInfo(module, calcData, xaxis, yaxis) {
    return {
      _module: module,
      cd: calcData,
      xaxis: xaxis,
      yaxis: yaxis
    };
  }
}

function isHoverDataSet(hoverData) {
  return hoverData && Array.isArray(hoverData) && hoverData[0].hoverOnBox !== true;
}

function extractClickedPtInfo(hoverData, searchTraces) {
  var hoverDatum = hoverData[0];
  var pointNumber = -1;
  var pointNumbers = [];
  var searchInfo, i;

  for (i = 0; i < searchTraces.length; i++) {
    searchInfo = searchTraces[i];

    if (hoverDatum.fullData._expandedIndex === searchInfo.cd[0].trace._expandedIndex) {
      // Special case for box (and violin)
      if (hoverDatum.hoverOnBox === true) {
        break;
      } // Hint: in some traces like histogram, one graphical element
      // doesn't correspond to one particular data point, but to
      // bins of data points. Thus, hoverDatum can have a binNumber
      // property instead of pointNumber.


      if (hoverDatum.pointNumber !== undefined) {
        pointNumber = hoverDatum.pointNumber;
      } else if (hoverDatum.binNumber !== undefined) {
        pointNumber = hoverDatum.binNumber;
        pointNumbers = hoverDatum.pointNumbers;
      }

      break;
    }
  }

  return {
    pointNumber: pointNumber,
    pointNumbers: pointNumbers,
    searchInfo: searchInfo
  };
}

function isPointOrBinSelected(clickedPtInfo) {
  var trace = clickedPtInfo.searchInfo.cd[0].trace;
  var ptNum = clickedPtInfo.pointNumber;
  var ptNums = clickedPtInfo.pointNumbers;
  var ptNumsSet = ptNums.length > 0; // When pointsNumbers is set (e.g. histogram's binning),
  // it is assumed that when the first point of
  // a bin is selected, all others are as well

  var ptNumToTest = ptNumsSet ? ptNums[0] : ptNum; // TODO potential performance improvement
  // Primarily we need this function to determine if a click adds
  // or subtracts from a selection.
  // In cases `trace.selectedpoints` is a huge array, indexOf
  // might be slow. One remedy would be to introduce a hash somewhere.

  return trace.selectedpoints ? trace.selectedpoints.indexOf(ptNumToTest) > -1 : false;
}

function isOnlyThisBinSelected(searchTraces, clickedPtInfo) {
  var tracesWithSelectedPts = [];
  var searchInfo, trace, isSameTrace, i;

  for (i = 0; i < searchTraces.length; i++) {
    searchInfo = searchTraces[i];

    if (searchInfo.cd[0].trace.selectedpoints && searchInfo.cd[0].trace.selectedpoints.length > 0) {
      tracesWithSelectedPts.push(searchInfo);
    }
  }

  if (tracesWithSelectedPts.length === 1) {
    isSameTrace = tracesWithSelectedPts[0] === clickedPtInfo.searchInfo;

    if (isSameTrace) {
      trace = clickedPtInfo.searchInfo.cd[0].trace;

      if (trace.selectedpoints.length === clickedPtInfo.pointNumbers.length) {
        for (i = 0; i < clickedPtInfo.pointNumbers.length; i++) {
          if (trace.selectedpoints.indexOf(clickedPtInfo.pointNumbers[i]) < 0) {
            return false;
          }
        }

        return true;
      }
    }
  }

  return false;
}

function isOnlyOnePointSelected(searchTraces) {
  var len = 0;
  var searchInfo, trace, i;

  for (i = 0; i < searchTraces.length; i++) {
    searchInfo = searchTraces[i];
    trace = searchInfo.cd[0].trace;

    if (trace.selectedpoints) {
      if (trace.selectedpoints.length > 1) return false;
      len += trace.selectedpoints.length;
      if (len > 1) return false;
    }
  }

  return len === 1;
}

function updateSelectedState(gd, searchTraces, eventData) {
  var i, searchInfo, cd, trace; // before anything else, update preGUI if necessary

  for (i = 0; i < searchTraces.length; i++) {
    var fullInputTrace = searchTraces[i].cd[0].trace._fullInput;
    var tracePreGUI = gd._fullLayout._tracePreGUI[fullInputTrace.uid] || {};

    if (tracePreGUI.selectedpoints === undefined) {
      tracePreGUI.selectedpoints = fullInputTrace._input.selectedpoints || null;
    }
  }

  if (eventData) {
    var pts = eventData.points || [];

    for (i = 0; i < searchTraces.length; i++) {
      trace = searchTraces[i].cd[0].trace;
      trace._input.selectedpoints = trace._fullInput.selectedpoints = [];
      if (trace._fullInput !== trace) trace.selectedpoints = [];
    }

    for (i = 0; i < pts.length; i++) {
      var pt = pts[i];
      var data = pt.data;
      var fullData = pt.fullData;

      if (pt.pointIndices) {
        [].push.apply(data.selectedpoints, pt.pointIndices);

        if (trace._fullInput !== trace) {
          [].push.apply(fullData.selectedpoints, pt.pointIndices);
        }
      } else {
        data.selectedpoints.push(pt.pointIndex);

        if (trace._fullInput !== trace) {
          fullData.selectedpoints.push(pt.pointIndex);
        }
      }
    }
  } else {
    for (i = 0; i < searchTraces.length; i++) {
      trace = searchTraces[i].cd[0].trace;
      delete trace.selectedpoints;
      delete trace._input.selectedpoints;

      if (trace._fullInput !== trace) {
        delete trace._fullInput.selectedpoints;
      }
    }
  }

  var hasRegl = false;

  for (i = 0; i < searchTraces.length; i++) {
    searchInfo = searchTraces[i];
    cd = searchInfo.cd;
    trace = cd[0].trace;

    if (registry.traceIs(trace, 'regl')) {
      hasRegl = true;
    }

    var _module = searchInfo._module;
    var fn = _module.styleOnSelect || _module.style;

    if (fn) {
      fn(gd, cd, cd[0].node3);
      if (cd[0].nodeRangePlot3) fn(gd, cd, cd[0].nodeRangePlot3);
    }
  }

  if (hasRegl) {
    clear_gl_canvases(gd);
    redrawReglTraces$1(gd);
  }
}

function mergePolygons(list, poly, subtract) {
  var res;

  if (subtract) {
    res = polybooljs.difference({
      regions: list,
      inverted: false
    }, {
      regions: [poly],
      inverted: false
    });
    return res.regions;
  }

  res = polybooljs.union({
    regions: list,
    inverted: false
  }, {
    regions: [poly],
    inverted: false
  });
  return res.regions;
}

function fillSelectionItem(selection, searchInfo) {
  if (Array.isArray(selection)) {
    var cd = searchInfo.cd;
    var trace = searchInfo.cd[0].trace;

    for (var i = 0; i < selection.length; i++) {
      selection[i] = makeEventData(selection[i], trace, cd);
    }
  }

  return selection;
}

function convertPoly(polygonsIn, isOpenMode) {
  // add M and L command to draft positions
  var polygonsOut = [];

  for (var i = 0; i < polygonsIn.length; i++) {
    polygonsOut[i] = [];

    for (var j = 0; j < polygonsIn[i].length; j++) {
      polygonsOut[i][j] = [];
      polygonsOut[i][j][0] = j ? 'L' : 'M';

      for (var k = 0; k < polygonsIn[i][j].length; k++) {
        polygonsOut[i][j].push(polygonsIn[i][j][k]);
      }
    }

    if (!isOpenMode) {
      polygonsOut[i].push(['Z', polygonsOut[i][0][1], // initial x
      polygonsOut[i][0][2] // initial y
      ]);
    }
  }

  return polygonsOut;
}

var select$1 = {
  prepSelect: prepSelect$1,
  clearSelect: clearSelect$1,
  clearSelectionsCache: clearSelectionsCache,
  selectOnClick: selectOnClick$1
};

var numberFormat = lib_1.numberFormat;
var strTranslate$6 = lib_1.strTranslate;
var selectingOrDrawing = helpers$6.selectingOrDrawing;
var freeMode = helpers$6.freeMode;
var FROM_TL$3 = alignment.FROM_TL;
var redrawReglTraces = subroutines.redrawReglTraces;
var getFromId = axis_ids.getFromId;
var prepSelect = select$1.prepSelect;
var clearSelect = select$1.clearSelect;
var selectOnClick = select$1.selectOnClick;
var MINDRAG = constants$a.MINDRAG;
var MINZOOM = constants$a.MINZOOM; // flag for showing "doubleclick to zoom out" only at the beginning

var SHOWZOOMOUTTIP = true; // dragBox: create an element to drag one or more axis ends
// inputs:
//      plotinfo - which subplot are we making dragboxes on?
//      x,y,w,h - left, top, width, height of the box
//      ns - how does this drag the vertical axis?
//          'n' - top only
//          's' - bottom only
//          'ns' - top and bottom together, difference unchanged
//      ew - same for horizontal axis

function makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {
  // mouseDown stores ms of first mousedown event in the last
  // `gd._context.doubleClickDelay` ms on the drag bars
  // numClicks stores how many mousedowns have been seen
  // within `gd._context.doubleClickDelay` so we can check for click or doubleclick events
  // dragged stores whether a drag has occurred, so we don't have to
  // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px
  var zoomlayer = gd._fullLayout._zoomlayer;
  var isMainDrag = ns + ew === 'nsew';
  var singleEnd = (ns + ew).length === 1; // main subplot x and y (i.e. found in plotinfo - the main ones)

  var xa0, ya0; // {ax._id: ax} hash objects

  var xaHash, yaHash; // xaHash/yaHash values (arrays)

  var xaxes, yaxes; // main axis offsets

  var xs, ys; // main axis lengths

  var pw, ph; // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'
  // which are the x/y {ax._id: ax} hash objects and their values
  // for linked axis relative to this subplot

  var links; // similar to `links` but for matching axes

  var matches; // set to ew/ns val when active, set to '' when inactive

  var xActive, yActive; // are all axes in this subplot are fixed?

  var allFixedRanges; // do we need to edit x/y ranges?

  var editX, editY; // graph-wide optimization flags

  var hasScatterGl, hasSplom, hasSVG; // collected changes to be made to the plot by relayout at the end

  var updates; // scaling factors from css transform

  var scaleX;
  var scaleY;

  function recomputeAxisLists() {
    xa0 = plotinfo.xaxis;
    ya0 = plotinfo.yaxis;
    pw = xa0._length;
    ph = ya0._length;
    xs = xa0._offset;
    ys = ya0._offset;
    xaHash = {};
    xaHash[xa0._id] = xa0;
    yaHash = {};
    yaHash[ya0._id] = ya0; // if we're dragging two axes at once, also drag overlays

    if (ns && ew) {
      var overlays = plotinfo.overlays;

      for (var i = 0; i < overlays.length; i++) {
        var xa = overlays[i].xaxis;
        xaHash[xa._id] = xa;
        var ya = overlays[i].yaxis;
        yaHash[ya._id] = ya;
      }
    }

    xaxes = hashValues(xaHash);
    yaxes = hashValues(yaHash);
    xActive = isDirectionActive(xaxes, ew);
    yActive = isDirectionActive(yaxes, ns);
    allFixedRanges = !yActive && !xActive;
    matches = calcLinks(gd, gd._fullLayout._axisMatchGroups, xaHash, yaHash);
    links = calcLinks(gd, gd._fullLayout._axisConstraintGroups, xaHash, yaHash, matches);
    var spConstrained = links.isSubplotConstrained || matches.isSubplotConstrained;
    editX = ew || spConstrained;
    editY = ns || spConstrained;
    var fullLayout = gd._fullLayout;
    hasScatterGl = fullLayout._has('scattergl');
    hasSplom = fullLayout._has('splom');
    hasSVG = fullLayout._has('svg');
  }

  recomputeAxisLists();
  var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);
  var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h); // still need to make the element if the axes are disabled
  // but nuke its events (except for maindrag which needs them for hover)
  // and stop there

  if (allFixedRanges && !isMainDrag) {
    dragger.onmousedown = null;
    dragger.style.pointerEvents = 'none';
    return dragger;
  }

  var dragOptions = {
    element: dragger,
    gd: gd,
    plotinfo: plotinfo
  };

  dragOptions.prepFn = function (e, startX, startY) {
    var dragModePrev = dragOptions.dragmode;
    var dragModeNow = gd._fullLayout.dragmode;

    if (dragModeNow !== dragModePrev) {
      dragOptions.dragmode = dragModeNow;
    }

    recomputeAxisLists();
    scaleX = gd._fullLayout._invScaleX;
    scaleY = gd._fullLayout._invScaleY;

    if (!allFixedRanges) {
      if (isMainDrag) {
        // main dragger handles all drag modes, and changes
        // to pan (or to zoom if it already is pan) on shift
        if (e.shiftKey) {
          if (dragModeNow === 'pan') dragModeNow = 'zoom';else if (!selectingOrDrawing(dragModeNow)) dragModeNow = 'pan';
        } else if (e.ctrlKey) {
          dragModeNow = 'pan';
        }
      } else {
        // all other draggers just pan
        dragModeNow = 'pan';
      }
    }

    if (freeMode(dragModeNow)) dragOptions.minDrag = 1;else dragOptions.minDrag = undefined;

    if (selectingOrDrawing(dragModeNow)) {
      dragOptions.xaxes = xaxes;
      dragOptions.yaxes = yaxes; // this attaches moveFn, clickFn, doneFn on dragOptions

      prepSelect(e, startX, startY, dragOptions, dragModeNow);
    } else {
      dragOptions.clickFn = clickFn;

      if (selectingOrDrawing(dragModePrev)) {
        // TODO Fix potential bug
        // Note: clearing / resetting selection state only happens, when user
        // triggers at least one interaction in pan/zoom mode. Otherwise, the
        // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection
        // cache isn't cleared. So when the user switches back to select/lasso and
        // 'adds to a selection' with Shift, the "old", seemingly removed outlines
        // are redrawn again because the selection cache still holds their coordinates.
        // However, this isn't easily solved, since plots.js would need
        // to have a reference to the dragOptions object (which holds the
        // selection cache).
        clearAndResetSelect();
      }

      if (!allFixedRanges) {
        if (dragModeNow === 'zoom') {
          dragOptions.moveFn = zoomMove;
          dragOptions.doneFn = zoomDone; // zoomMove takes care of the threshold, but we need to
          // minimize this so that constrained zoom boxes will flip
          // orientation at the right place

          dragOptions.minDrag = 1;
          zoomPrep(e, startX, startY);
        } else if (dragModeNow === 'pan') {
          dragOptions.moveFn = plotDrag;
          dragOptions.doneFn = dragTail;
        }
      }
    }

    gd._fullLayout._redrag = function () {
      var dragDataNow = gd._dragdata;

      if (dragDataNow && dragDataNow.element === dragger) {
        var dragModeNow = gd._fullLayout.dragmode;

        if (!selectingOrDrawing(dragModeNow)) {
          recomputeAxisLists();
          updateSubplots([0, 0, pw, ph]);
          dragOptions.moveFn(dragDataNow.dx, dragDataNow.dy);
        } // TODO should we try to "re-select" under select/lasso modes?
        // probably best to wait for https://github.com/plotly/plotly.js/issues/1851

      }
    };
  };

  function clearAndResetSelect() {
    // clear selection polygon cache (if any)
    dragOptions.plotinfo.selection = false; // clear selection outlines

    clearSelect(gd);
  }

  function clickFn(numClicks, evt) {
    var gd = dragOptions.gd;

    if (gd._fullLayout._activeShapeIndex >= 0) {
      gd._fullLayout._deactivateShape(gd);

      return;
    }

    var clickmode = gd._fullLayout.clickmode;
    removeZoombox(gd);
    if (numClicks === 2 && !singleEnd) doubleClick();

    if (isMainDrag) {
      if (clickmode.indexOf('select') > -1) {
        selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);
      }

      if (clickmode.indexOf('event') > -1) {
        fx.click(gd, evt, plotinfo.id);
      }
    } else if (numClicks === 1 && singleEnd) {
      var ax = ns ? ya0 : xa0;
      var end = ns === 's' || ew === 'w' ? 0 : 1;
      var attrStr = ax._name + '.range[' + end + ']';
      var initialText = getEndText(ax, end);
      var hAlign = 'left';
      var vAlign = 'middle';
      if (ax.fixedrange) return;

      if (ns) {
        vAlign = ns === 'n' ? 'top' : 'bottom';
        if (ax.side === 'right') hAlign = 'right';
      } else if (ew === 'e') hAlign = 'right';

      if (gd._context.showAxisRangeEntryBoxes) {
        d3.select(dragger).call(svg_text_utils.makeEditable, {
          gd: gd,
          immediate: true,
          background: gd._fullLayout.paper_bgcolor,
          text: String(initialText),
          fill: ax.tickfont ? ax.tickfont.color : '#444',
          horizontalAlign: hAlign,
          verticalAlign: vAlign
        }).on('edit', function (text) {
          var v = ax.d2r(text);

          if (v !== undefined) {
            registry.call('_guiRelayout', gd, attrStr, v);
          }
        });
      }
    }
  }

  dragelement.init(dragOptions); // x/y px position at start of drag

  var x0, y0; // bbox object of the zoombox

  var box; // luminance of bg behind zoombox

  var lum; // zoombox path outline

  var path0; // is zoombox dimmed (during drag)

  var dimmed; // 'x'-only, 'y' or 'xy' zooming

  var zoomMode; // zoombox d3 selection

  var zb; // zoombox corner d3 selection

  var corners; // zoom takes over minDrag, so it also has to take over gd._dragged

  var zoomDragged;

  function zoomPrep(e, startX, startY) {
    var dragBBox = dragger.getBoundingClientRect();
    x0 = startX - dragBBox.left;
    y0 = startY - dragBBox.top;

    gd._fullLayout._calcInverseTransform(gd);

    var transformedCoords = lib_1.apply3DTransform(gd._fullLayout._invTransform)(x0, y0);
    x0 = transformedCoords[0];
    y0 = transformedCoords[1];
    box = {
      l: x0,
      r: x0,
      w: 0,
      t: y0,
      b: y0,
      h: 0
    };
    lum = gd._hmpixcount ? gd._hmlumcount / gd._hmpixcount : tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();
    path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';
    dimmed = false;
    zoomMode = 'xy';
    zoomDragged = false;
    zb = makeZoombox(zoomlayer, lum, xs, ys, path0);
    corners = makeCorners(zoomlayer, xs, ys);
  }

  function zoomMove(dx0, dy0) {
    if (gd._transitioningWithDuration) {
      return false;
    }

    var x1 = Math.max(0, Math.min(pw, scaleX * dx0 + x0));
    var y1 = Math.max(0, Math.min(ph, scaleY * dy0 + y0));
    var dx = Math.abs(x1 - x0);
    var dy = Math.abs(y1 - y0);
    box.l = Math.min(x0, x1);
    box.r = Math.max(x0, x1);
    box.t = Math.min(y0, y1);
    box.b = Math.max(y0, y1);

    function noZoom() {
      zoomMode = '';
      box.r = box.l;
      box.t = box.b;
      corners.attr('d', 'M0,0Z');
    }

    if (links.isSubplotConstrained) {
      if (dx > MINZOOM || dy > MINZOOM) {
        zoomMode = 'xy';

        if (dx / pw > dy / ph) {
          dy = dx * ph / pw;
          if (y0 > y1) box.t = y0 - dy;else box.b = y0 + dy;
        } else {
          dx = dy * pw / ph;
          if (x0 > x1) box.l = x0 - dx;else box.r = x0 + dx;
        }

        corners.attr('d', xyCorners(box));
      } else {
        noZoom();
      }
    } else if (matches.isSubplotConstrained) {
      if (dx > MINZOOM || dy > MINZOOM) {
        zoomMode = 'xy';
        var r0 = Math.min(box.l / pw, (ph - box.b) / ph);
        var r1 = Math.max(box.r / pw, (ph - box.t) / ph);
        box.l = r0 * pw;
        box.r = r1 * pw;
        box.b = (1 - r0) * ph;
        box.t = (1 - r1) * ph;
        corners.attr('d', xyCorners(box));
      } else {
        noZoom();
      }
    } else if (!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {
      // look for small drags in one direction or the other,
      // and only drag the other axis
      if (dx < MINDRAG || !xActive) {
        noZoom();
      } else {
        box.t = 0;
        box.b = ph;
        zoomMode = 'x';
        corners.attr('d', xCorners(box, y0));
      }
    } else if (!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {
      box.l = 0;
      box.r = pw;
      zoomMode = 'y';
      corners.attr('d', yCorners(box, x0));
    } else {
      zoomMode = 'xy';
      corners.attr('d', xyCorners(box));
    }

    box.w = box.r - box.l;
    box.h = box.b - box.t;
    if (zoomMode) zoomDragged = true;
    gd._dragged = zoomDragged;
    updateZoombox(zb, corners, box, path0, dimmed, lum);
    computeZoomUpdates();
    gd.emit('plotly_relayouting', updates);
    dimmed = true;
  }

  function computeZoomUpdates() {
    updates = {}; // TODO: edit linked axes in zoomAxRanges and in dragTail

    if (zoomMode === 'xy' || zoomMode === 'x') {
      zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);
      updateMatchedAxRange('x', updates);
    }

    if (zoomMode === 'xy' || zoomMode === 'y') {
      zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);
      updateMatchedAxRange('y', updates);
    }
  }

  function zoomDone() {
    computeZoomUpdates();
    removeZoombox(gd);
    dragTail();
    showDoubleClickNotifier(gd);
  } // scroll zoom, on all draggers except corners


  var scrollViewBox = [0, 0, pw, ph]; // wait a little after scrolling before redrawing

  var redrawTimer = null;
  var REDRAWDELAY = constants$a.REDRAWDELAY;
  var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;

  function zoomWheel(e) {
    // deactivate mousewheel scrolling on embedded graphs
    // devs can override this with layout._enablescrollzoom,
    // but _ ensures this setting won't leave their page
    if (!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {
      return;
    }

    clearAndResetSelect(); // If a transition is in progress, then disable any behavior:

    if (gd._transitioningWithDuration) {
      e.preventDefault();
      e.stopPropagation();
      return;
    }

    recomputeAxisLists();
    clearTimeout(redrawTimer);
    var wheelDelta = -e.deltaY;
    if (!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;

    if (!isFinite(wheelDelta)) {
      lib_1.log('Did not find wheel motion attributes: ', e);
      return;
    }

    var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);
    var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();
    var xfrac = (e.clientX - gbb.left) / gbb.width;
    var yfrac = (gbb.bottom - e.clientY) / gbb.height;
    var i;

    function zoomWheelOneAxis(ax, centerFraction, zoom) {
      if (ax.fixedrange) return;
      var axRange = lib_1.simpleMap(ax.range, ax.r2l);
      var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;

      function doZoom(v) {
        return ax.l2r(v0 + (v - v0) * zoom);
      }

      ax.range = axRange.map(doZoom);
    }

    if (editX) {
      // if we're only zooming this axis because of constraints,
      // zoom it about the center
      if (!ew) xfrac = 0.5;

      for (i = 0; i < xaxes.length; i++) {
        zoomWheelOneAxis(xaxes[i], xfrac, zoom);
      }

      updateMatchedAxRange('x');
      scrollViewBox[2] *= zoom;
      scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);
    }

    if (editY) {
      if (!ns) yfrac = 0.5;

      for (i = 0; i < yaxes.length; i++) {
        zoomWheelOneAxis(yaxes[i], yfrac, zoom);
      }

      updateMatchedAxRange('y');
      scrollViewBox[3] *= zoom;
      scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);
    } // viewbox redraw at first


    updateSubplots(scrollViewBox);
    ticksAndAnnotations();
    gd.emit('plotly_relayouting', updates); // then replot after a delay to make sure
    // no more scrolling is coming

    redrawTimer = setTimeout(function () {
      if (!gd._fullLayout) return;
      scrollViewBox = [0, 0, pw, ph];
      dragTail();
    }, REDRAWDELAY);
    e.preventDefault();
    return;
  } // everything but the corners gets wheel zoom


  if (ns.length * ew.length !== 1) {
    attachWheelEventHandler(dragger, zoomWheel);
  } // plotDrag: move the plot in response to a drag


  function plotDrag(dx, dy) {
    dx = dx * scaleX;
    dy = dy * scaleY; // If a transition is in progress, then disable any behavior:

    if (gd._transitioningWithDuration) {
      return;
    } // prevent axis drawing from monkeying with margins until we're done


    gd._fullLayout._replotting = true;

    if (xActive === 'ew' || yActive === 'ns') {
      var spDx = xActive ? -dx : 0;
      var spDy = yActive ? -dy : 0;

      if (matches.isSubplotConstrained) {
        if (xActive && yActive) {
          var frac = (dx / pw - dy / ph) / 2;
          dx = frac * pw;
          dy = -frac * ph;
          spDx = -dx;
          spDy = -dy;
        }

        if (yActive) {
          spDx = -spDy * pw / ph;
        } else {
          spDy = -spDx * ph / pw;
        }
      }

      if (xActive) {
        dragAxList(xaxes, dx);
        updateMatchedAxRange('x');
      }

      if (yActive) {
        dragAxList(yaxes, dy);
        updateMatchedAxRange('y');
      }

      updateSubplots([spDx, spDy, pw, ph]);
      ticksAndAnnotations();
      gd.emit('plotly_relayouting', updates);
      return;
    } // dz: set a new value for one end (0 or 1) of an axis array axArray,
    // and return a pixel shift for that end for the viewbox
    // based on pixel drag distance d
    // TODO: this makes (generally non-fatal) errors when you get
    // near floating point limits


    function dz(axArray, end, d) {
      var otherEnd = 1 - end;
      var movedAx;
      var newLinearizedEnd;

      for (var i = 0; i < axArray.length; i++) {
        var axi = axArray[i];
        if (axi.fixedrange) continue;
        movedAx = axi;
        newLinearizedEnd = axi._rl[otherEnd] + (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);
        var newEnd = axi.l2r(newLinearizedEnd); // if l2r comes back false or undefined, it means we've dragged off
        // the end of valid ranges - so stop.

        if (newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;
      }

      return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) / (movedAx._rl[end] - movedAx._rl[otherEnd]);
    }

    var dxySign = xActive === 'w' === (yActive === 'n') ? 1 : -1;

    if (xActive && yActive && (links.isSubplotConstrained || matches.isSubplotConstrained)) {
      // dragging a corner of a constrained subplot:
      // respect the fixed corner, but harmonize dx and dy
      var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;
      dx = dxyFraction * pw;
      dy = dxySign * dxyFraction * ph;
    }

    var xStart, yStart;
    if (xActive === 'w') dx = dz(xaxes, 0, dx);else if (xActive === 'e') dx = dz(xaxes, 1, -dx);else if (!xActive) dx = 0;
    if (yActive === 'n') dy = dz(yaxes, 1, dy);else if (yActive === 's') dy = dz(yaxes, 0, -dy);else if (!yActive) dy = 0;
    xStart = xActive === 'w' ? dx : 0;
    yStart = yActive === 'n' ? dy : 0;

    if (links.isSubplotConstrained && !matches.isSubplotConstrained || // NW or SE on matching axes - create a symmetric zoom
    matches.isSubplotConstrained && xActive && yActive && dxySign > 0) {
      var i;

      if (matches.isSubplotConstrained || !xActive && yActive.length === 1) {
        // dragging one end of the y axis of a constrained subplot
        // scale the other axis the same about its middle
        for (i = 0; i < xaxes.length; i++) {
          xaxes[i].range = xaxes[i]._r.slice();
          scale_zoom(xaxes[i], 1 - dy / ph);
        }

        dx = dy * pw / ph;
        xStart = dx / 2;
      }

      if (matches.isSubplotConstrained || !yActive && xActive.length === 1) {
        for (i = 0; i < yaxes.length; i++) {
          yaxes[i].range = yaxes[i]._r.slice();
          scale_zoom(yaxes[i], 1 - dx / pw);
        }

        dy = dx * ph / pw;
        yStart = dy / 2;
      }
    }

    if (!matches.isSubplotConstrained || !yActive) {
      updateMatchedAxRange('x');
    }

    if (!matches.isSubplotConstrained || !xActive) {
      updateMatchedAxRange('y');
    }

    var xSize = pw - dx;
    var ySize = ph - dy;

    if (matches.isSubplotConstrained && !(xActive && yActive)) {
      if (xActive) {
        yStart = xStart ? 0 : dx * ph / pw;
        ySize = xSize * ph / pw;
      } else {
        xStart = yStart ? 0 : dy * pw / ph;
        xSize = ySize * pw / ph;
      }
    }

    updateSubplots([xStart, yStart, xSize, ySize]);
    ticksAndAnnotations();
    gd.emit('plotly_relayouting', updates);
  }

  function updateMatchedAxRange(axLetter, out) {
    var matchedAxes = matches.isSubplotConstrained ? {
      x: yaxes,
      y: xaxes
    }[axLetter] : matches[axLetter + 'axes'];
    var constrainedAxes = matches.isSubplotConstrained ? {
      x: xaxes,
      y: yaxes
    }[axLetter] : [];

    for (var i = 0; i < matchedAxes.length; i++) {
      var ax = matchedAxes[i];
      var axId = ax._id;
      var axId2 = matches.xLinks[axId] || matches.yLinks[axId];
      var ax2 = constrainedAxes[0] || xaHash[axId2] || yaHash[axId2];

      if (ax2) {
        if (out) {
          // zoombox case - don't mutate 'range', just add keys in 'updates'
          out[ax._name + '.range[0]'] = out[ax2._name + '.range[0]'];
          out[ax._name + '.range[1]'] = out[ax2._name + '.range[1]'];
        } else {
          ax.range = ax2.range.slice();
        }
      }
    }
  } // Draw ticks and annotations (and other components) when ranges change.
  // Also records the ranges that have changed for use by update at the end.


  function ticksAndAnnotations() {
    var activeAxIds = [];
    var i;

    function pushActiveAxIds(axList) {
      for (i = 0; i < axList.length; i++) {
        if (!axList[i].fixedrange) activeAxIds.push(axList[i]._id);
      }
    }

    if (editX) {
      pushActiveAxIds(xaxes);
      pushActiveAxIds(links.xaxes);
      pushActiveAxIds(matches.xaxes);
    }

    if (editY) {
      pushActiveAxIds(yaxes);
      pushActiveAxIds(links.yaxes);
      pushActiveAxIds(matches.yaxes);
    }

    updates = {};

    for (i = 0; i < activeAxIds.length; i++) {
      var axId = activeAxIds[i];
      var ax = getFromId(gd, axId);
      axes_1.drawOne(gd, ax, {
        skipTitle: true
      });
      updates[ax._name + '.range[0]'] = ax.range[0];
      updates[ax._name + '.range[1]'] = ax.range[1];
    }

    axes_1.redrawComponents(gd, activeAxIds);
  }

  function doubleClick() {
    if (gd._transitioningWithDuration) return;
    var doubleClickConfig = gd._context.doubleClick;
    var axList = [];
    if (xActive) axList = axList.concat(xaxes);
    if (yActive) axList = axList.concat(yaxes);
    if (matches.xaxes) axList = axList.concat(matches.xaxes);
    if (matches.yaxes) axList = axList.concat(matches.yaxes);
    var attrs = {};
    var ax, i, rangeInitial; // For reset+autosize mode:
    // If *any* of the main axes is not at its initial range
    // (or autoranged, if we have no initial range, to match the logic in
    // doubleClickConfig === 'reset' below), we reset.
    // If they are *all* at their initial ranges, then we autosize.

    if (doubleClickConfig === 'reset+autosize') {
      doubleClickConfig = 'autosize';

      for (i = 0; i < axList.length; i++) {
        ax = axList[i];

        if (ax._rangeInitial && (ax.range[0] !== ax._rangeInitial[0] || ax.range[1] !== ax._rangeInitial[1]) || !ax._rangeInitial && !ax.autorange) {
          doubleClickConfig = 'reset';
          break;
        }
      }
    }

    if (doubleClickConfig === 'autosize') {
      // don't set the linked axes here, so relayout marks them as shrinkable
      // and we autosize just to the requested axis/axes
      for (i = 0; i < axList.length; i++) {
        ax = axList[i];
        if (!ax.fixedrange) attrs[ax._name + '.autorange'] = true;
      }
    } else if (doubleClickConfig === 'reset') {
      // when we're resetting, reset all linked axes too, so we get back
      // to the fully-auto-with-constraints situation
      if (xActive || links.isSubplotConstrained) axList = axList.concat(links.xaxes);
      if (yActive && !links.isSubplotConstrained) axList = axList.concat(links.yaxes);

      if (links.isSubplotConstrained) {
        if (!xActive) axList = axList.concat(xaxes);else if (!yActive) axList = axList.concat(yaxes);
      }

      for (i = 0; i < axList.length; i++) {
        ax = axList[i];

        if (!ax.fixedrange) {
          if (!ax._rangeInitial) {
            attrs[ax._name + '.autorange'] = true;
          } else {
            rangeInitial = ax._rangeInitial;
            attrs[ax._name + '.range[0]'] = rangeInitial[0];
            attrs[ax._name + '.range[1]'] = rangeInitial[1];
          }
        }
      }
    }

    gd.emit('plotly_doubleclick', null);
    registry.call('_guiRelayout', gd, attrs);
  } // dragTail - finish a drag event with a redraw


  function dragTail() {
    // put the subplot viewboxes back to default (Because we're going to)
    // be repositioning the data in the relayout. But DON'T call
    // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`
    updateSubplots([0, 0, pw, ph]); // since we may have been redrawing some things during the drag, we may have
    // accumulated MathJax promises - wait for them before we relayout.

    lib_1.syncOrAsync([plots_1.previousPromises, function () {
      gd._fullLayout._replotting = false;
      registry.call('_guiRelayout', gd, updates);
    }], gd);
  } // updateSubplots - find all plot viewboxes that should be
  // affected by this drag, and update them. look for all plots
  // sharing an affected axis (including the one being dragged),
  // includes also scattergl and splom logic.


  function updateSubplots(viewBox) {
    var fullLayout = gd._fullLayout;
    var plotinfos = fullLayout._plots;
    var subplots = fullLayout._subplots.cartesian;
    var i, sp, xa, ya;

    if (hasSplom) {
      registry.subplotsRegistry.splom.drag(gd);
    }

    if (hasScatterGl) {
      for (i = 0; i < subplots.length; i++) {
        sp = plotinfos[subplots[i]];
        xa = sp.xaxis;
        ya = sp.yaxis;

        if (sp._scene) {
          var xrng = lib_1.simpleMap(xa.range, xa.r2l);
          var yrng = lib_1.simpleMap(ya.range, ya.r2l);

          sp._scene.update({
            range: [xrng[0], yrng[0], xrng[1], yrng[1]]
          });
        }
      }
    }

    if (hasSplom || hasScatterGl) {
      clear_gl_canvases(gd);
      redrawReglTraces(gd);
    }

    if (hasSVG) {
      var xScaleFactor = viewBox[2] / xa0._length;
      var yScaleFactor = viewBox[3] / ya0._length;

      for (i = 0; i < subplots.length; i++) {
        sp = plotinfos[subplots[i]];
        xa = sp.xaxis;
        ya = sp.yaxis;
        var editX2 = (editX || matches.isSubplotConstrained) && !xa.fixedrange && xaHash[xa._id];
        var editY2 = (editY || matches.isSubplotConstrained) && !ya.fixedrange && yaHash[ya._id];
        var xScaleFactor2, yScaleFactor2;
        var clipDx, clipDy;

        if (editX2) {
          xScaleFactor2 = xScaleFactor;
          clipDx = ew || matches.isSubplotConstrained ? viewBox[0] : getShift(xa, xScaleFactor2);
        } else if (matches.xaHash[xa._id]) {
          xScaleFactor2 = xScaleFactor;
          clipDx = viewBox[0] * xa._length / xa0._length;
        } else if (matches.yaHash[xa._id]) {
          xScaleFactor2 = yScaleFactor;
          clipDx = yActive === 'ns' ? -viewBox[1] * xa._length / ya0._length : getShift(xa, xScaleFactor2, {
            n: 'top',
            s: 'bottom'
          }[yActive]);
        } else {
          xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);
          clipDx = scaleAndGetShift(xa, xScaleFactor2);
        }

        if (editY2) {
          yScaleFactor2 = yScaleFactor;
          clipDy = ns || matches.isSubplotConstrained ? viewBox[1] : getShift(ya, yScaleFactor2);
        } else if (matches.yaHash[ya._id]) {
          yScaleFactor2 = yScaleFactor;
          clipDy = viewBox[1] * ya._length / ya0._length;
        } else if (matches.xaHash[ya._id]) {
          yScaleFactor2 = xScaleFactor;
          clipDy = xActive === 'ew' ? -viewBox[0] * ya._length / xa0._length : getShift(ya, yScaleFactor2, {
            e: 'right',
            w: 'left'
          }[xActive]);
        } else {
          yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);
          clipDy = scaleAndGetShift(ya, yScaleFactor2);
        } // don't scale at all if neither axis is scalable here


        if (!xScaleFactor2 && !yScaleFactor2) {
          continue;
        } // but if only one is, reset the other axis scaling


        if (!xScaleFactor2) xScaleFactor2 = 1;
        if (!yScaleFactor2) yScaleFactor2 = 1;
        var plotDx = xa._offset - clipDx / xScaleFactor2;
        var plotDy = ya._offset - clipDy / yScaleFactor2; // TODO could be more efficient here:
        // setTranslate and setScale do a lot of extra work
        // when working independently, should perhaps combine
        // them into a single routine.

        sp.clipRect.call(drawing_1.setTranslate, clipDx, clipDy).call(drawing_1.setScale, xScaleFactor2, yScaleFactor2);
        sp.plot.call(drawing_1.setTranslate, plotDx, plotDy).call(drawing_1.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2); // apply an inverse scale to individual points to counteract
        // the scale of the trace group.
        // apply only when scale changes, as adjusting the scale of
        // all the points can be expansive.

        if (xScaleFactor2 !== sp.xScaleFactor || yScaleFactor2 !== sp.yScaleFactor) {
          drawing_1.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);
          drawing_1.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);
        }

        drawing_1.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp); // update x/y scaleFactor stash

        sp.xScaleFactor = xScaleFactor2;
        sp.yScaleFactor = yScaleFactor2;
      }
    }
  } // Find the appropriate scaling for this axis, if it's linked to the
  // dragged axes by constraints. 0 is special, it means this axis shouldn't
  // ever be scaled (will be converted to 1 if the other axis is scaled)


  function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {
    if (ax.fixedrange) return 0;

    if (editX && links.xaHash[ax._id]) {
      return xScaleFactor;
    }

    if (editY && (links.isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {
      return yScaleFactor;
    }

    return 0;
  }

  function scaleAndGetShift(ax, scaleFactor) {
    if (scaleFactor) {
      ax.range = ax._r.slice();
      scale_zoom(ax, scaleFactor);
      return getShift(ax, scaleFactor);
    }

    return 0;
  }

  function getShift(ax, scaleFactor, from) {
    return ax._length * (1 - scaleFactor) * FROM_TL$3[from || ax.constraintoward || 'middle'];
  }

  return dragger;
}

function makeDragger(plotinfo, nodeName, dragClass, cursor) {
  var dragger3 = lib_1.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function (s) {
    s.classed('drag', true).style({
      fill: 'transparent',
      'stroke-width': 0
    }).attr('data-subplot', plotinfo.id);
  });
  dragger3.call(setcursor, cursor);
  return dragger3.node();
}

function makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {
  var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);
  d3.select(dragger).call(drawing_1.setRect, x, y, w, h);
  return dragger;
}

function isDirectionActive(axList, activeVal) {
  for (var i = 0; i < axList.length; i++) {
    if (!axList[i].fixedrange) return activeVal;
  }

  return '';
}

function getEndText(ax, end) {
  var initialVal = ax.range[end];
  var diff = Math.abs(initialVal - ax.range[1 - end]);
  var dig; // TODO: this should basically be ax.r2d but we're doing extra
  // rounding here... can we clean up at all?

  if (ax.type === 'date') {
    return initialVal;
  } else if (ax.type === 'log') {
    dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;
    return numberFormat('.' + dig + 'g')(Math.pow(10, initialVal));
  } else {
    // linear numeric (or category... but just show numbers here)
    dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) - Math.floor(Math.log(diff) / Math.LN10) + 4;
    return numberFormat('.' + String(dig) + 'g')(initialVal);
  }
}

function zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {
  for (var i = 0; i < axList.length; i++) {
    var axi = axList[i];
    if (axi.fixedrange) continue;

    if (axi.rangebreaks) {
      var isY = axi._id.charAt(0) === 'y';
      var r0F = isY ? 1 - r0Fraction : r0Fraction;
      var r1F = isY ? 1 - r1Fraction : r1Fraction;
      updates[axi._name + '.range[0]'] = axi.l2r(axi.p2l(r0F * axi._length));
      updates[axi._name + '.range[1]'] = axi.l2r(axi.p2l(r1F * axi._length));
    } else {
      var axRangeLinear0 = axi._rl[0];
      var axRangeLinearSpan = axi._rl[1] - axRangeLinear0;
      updates[axi._name + '.range[0]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction);
      updates[axi._name + '.range[1]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction);
    }
  } // zoom linked axes about their centers


  if (linkedAxes && linkedAxes.length) {
    var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;
    zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates, []);
  }
}

function dragAxList(axList, pix) {
  for (var i = 0; i < axList.length; i++) {
    var axi = axList[i];

    if (!axi.fixedrange) {
      if (axi.rangebreaks) {
        var p0 = 0;
        var p1 = axi._length;
        var d0 = axi.p2l(p0 + pix) - axi.p2l(p0);
        var d1 = axi.p2l(p1 + pix) - axi.p2l(p1);
        var delta = (d0 + d1) / 2;
        axi.range = [axi.l2r(axi._rl[0] - delta), axi.l2r(axi._rl[1] - delta)];
      } else {
        axi.range = [axi.l2r(axi._rl[0] - pix / axi._m), axi.l2r(axi._rl[1] - pix / axi._m)];
      }
    }
  }
} // common transform for dragging one end of an axis
// d>0 is compressing scale (cursor is over the plot,
//  the axis end should move with the cursor)
// d<0 is expanding (cursor is off the plot, axis end moves
//  nonlinearly so you can expand far)


function dZoom(d) {
  return 1 - (d >= 0 ? Math.min(d, 0.9) : 1 / (1 / Math.max(d, -0.3) + 3.222));
}

function getDragCursor(nsew, dragmode, isMainDrag) {
  if (!nsew) return 'pointer';

  if (nsew === 'nsew') {
    // in this case here, clear cursor and
    // use the cursor style set on <g .draglayer>
    if (isMainDrag) return '';
    if (dragmode === 'pan') return 'move';
    return 'crosshair';
  }

  return nsew.toLowerCase() + '-resize';
}

function makeZoombox(zoomlayer, lum, xs, ys, path0) {
  return zoomlayer.append('path').attr('class', 'zoombox').style({
    'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',
    'stroke-width': 0
  }).attr('transform', strTranslate$6(xs, ys)).attr('d', path0 + 'Z');
}

function makeCorners(zoomlayer, xs, ys) {
  return zoomlayer.append('path').attr('class', 'zoombox-corners').style({
    fill: color_1.background,
    stroke: color_1.defaultLine,
    'stroke-width': 1,
    opacity: 0
  }).attr('transform', strTranslate$6(xs, ys)).attr('d', 'M0,0Z');
}

function updateZoombox(zb, corners, box, path0, dimmed, lum) {
  zb.attr('d', path0 + 'M' + box.l + ',' + box.t + 'v' + box.h + 'h' + box.w + 'v-' + box.h + 'h-' + box.w + 'Z');
  transitionZoombox(zb, corners, dimmed, lum);
}

function transitionZoombox(zb, corners, dimmed, lum) {
  if (!dimmed) {
    zb.transition().style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' : 'rgba(255,255,255,0.3)').duration(200);
    corners.transition().style('opacity', 1).duration(200);
  }
}

function removeZoombox(gd) {
  d3.select(gd).selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners').remove();
}

function showDoubleClickNotifier(gd) {
  if (SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {
    lib_1.notifier(lib_1._(gd, 'Double-click to zoom back out'), 'long');
    SHOWZOOMOUTTIP = false;
  }
}

function xCorners(box, y0) {
  return 'M' + (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' + (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h3v' + (2 * MINZOOM + 1) + 'h-3Z';
}

function yCorners(box, x0) {
  return 'M' + (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) + 'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' + (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) + 'v3h' + (2 * MINZOOM + 1) + 'v-3Z';
}

function xyCorners(box) {
  var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);
  return 'M' + (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + -clen + 'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + -clen + 'h' + -clen + 'v-3h' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen + 'h' + -clen + 'v3h' + (clen + 3) + 'ZM' + (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen + 'h' + clen + 'v3h-' + (clen + 3) + 'Z';
}

function calcLinks(gd, groups, xaHash, yaHash, exclude) {
  var isSubplotConstrained = false;
  var xLinks = {};
  var yLinks = {};
  var xID, yID, xLinkID, yLinkID;
  var xExclude = (exclude || {}).xaHash;
  var yExclude = (exclude || {}).yaHash;

  for (var i = 0; i < groups.length; i++) {
    var group = groups[i]; // check if any of the x axes we're dragging is in this constraint group

    for (xID in xaHash) {
      if (group[xID]) {
        // put the rest of these axes into xLinks, if we're not already
        // dragging them, so we know to scale these axes automatically too
        // to match the changes in the dragged x axes
        for (xLinkID in group) {
          if (!(exclude && (xExclude[xLinkID] || yExclude[xLinkID])) && !(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]) {
            xLinks[xLinkID] = xID;
          }
        } // check if the x and y axes of THIS drag are linked


        for (yID in yaHash) {
          if (!(exclude && (xExclude[yID] || yExclude[yID])) && group[yID]) {
            isSubplotConstrained = true;
          }
        }
      }
    } // now check if any of the y axes we're dragging is in this constraint group
    // only look for outside links, as we've already checked for links within the dragger


    for (yID in yaHash) {
      if (group[yID]) {
        for (yLinkID in group) {
          if (!(exclude && (xExclude[yLinkID] || yExclude[yLinkID])) && !(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]) {
            yLinks[yLinkID] = yID;
          }
        }
      }
    }
  }

  if (isSubplotConstrained) {
    // merge xLinks and yLinks if the subplot is constrained,
    // since we'll always apply both anyway and the two will contain
    // duplicates
    lib_1.extendFlat(xLinks, yLinks);
    yLinks = {};
  }

  var xaHashLinked = {};
  var xaxesLinked = [];

  for (xLinkID in xLinks) {
    var xa = getFromId(gd, xLinkID);
    xaxesLinked.push(xa);
    xaHashLinked[xa._id] = xa;
  }

  var yaHashLinked = {};
  var yaxesLinked = [];

  for (yLinkID in yLinks) {
    var ya = getFromId(gd, yLinkID);
    yaxesLinked.push(ya);
    yaHashLinked[ya._id] = ya;
  }

  return {
    xaHash: xaHashLinked,
    yaHash: yaHashLinked,
    xaxes: xaxesLinked,
    yaxes: yaxesLinked,
    xLinks: xLinks,
    yLinks: yLinks,
    isSubplotConstrained: isSubplotConstrained
  };
} // still seems to be some confusion about onwheel vs onmousewheel...


function attachWheelEventHandler(element, handler) {
  {
    if (element.onwheel !== undefined) element.onwheel = handler;else if (element.onmousewheel !== undefined) element.onmousewheel = handler;else if (!element.isAddedWheelEvent) {
      element.isAddedWheelEvent = true;
      element.addEventListener('wheel', handler, {
        passive: false
      });
    }
  }
}

function hashValues(hash) {
  var out = [];

  for (var k in hash) out.push(hash[k]);

  return out;
}

var dragbox = {
  makeDragBox: makeDragBox,
  makeDragger: makeDragger,
  makeRectDragger: makeRectDragger,
  makeZoombox: makeZoombox,
  makeCorners: makeCorners,
  updateZoombox: updateZoombox,
  xyCorners: xyCorners,
  transitionZoombox: transitionZoombox,
  removeZoombox: removeZoombox,
  showDoubleClickNotifier: showDoubleClickNotifier,
  attachWheelEventHandler: attachWheelEventHandler
};

var graph_interact = createCommonjsModule(function (module, exports) {

  var makeDragBox = dragbox.makeDragBox;
  var DRAGGERSIZE = constants$a.DRAGGERSIZE;

  exports.initInteractions = function initInteractions(gd) {
    var fullLayout = gd._fullLayout;

    if (gd._context.staticPlot) {
      // this sweeps up more than just cartesian drag elements...
      d3.select(gd).selectAll('.drag').remove();
      return;
    }

    if (!fullLayout._has('cartesian') && !fullLayout._has('splom')) return;
    var subplots = Object.keys(fullLayout._plots || {}).sort(function (a, b) {
      // sort overlays last, then by x axis number, then y axis number
      if ((fullLayout._plots[a].mainplot && true) === (fullLayout._plots[b].mainplot && true)) {
        var aParts = a.split('y');
        var bParts = b.split('y');
        return aParts[0] === bParts[0] ? Number(aParts[1] || 1) - Number(bParts[1] || 1) : Number(aParts[0] || 1) - Number(bParts[0] || 1);
      }

      return fullLayout._plots[a].mainplot ? 1 : -1;
    });
    subplots.forEach(function (subplot) {
      var plotinfo = fullLayout._plots[subplot];
      var xa = plotinfo.xaxis;
      var ya = plotinfo.yaxis; // main and corner draggers need not be repeated for
      // overlaid subplots - these draggers drag them all

      if (!plotinfo.mainplot) {
        // main dragger goes over the grids and data, so we use its
        // mousemove events for all data hover effects
        var maindrag = makeDragBox(gd, plotinfo, xa._offset, ya._offset, xa._length, ya._length, 'ns', 'ew');

        maindrag.onmousemove = function (evt) {
          // This is on `gd._fullLayout`, *not* fullLayout because the reference
          // changes by the time this is called again.
          gd._fullLayout._rehover = function () {
            if (gd._fullLayout._hoversubplot === subplot && gd._fullLayout._plots[subplot]) {
              fx.hover(gd, evt, subplot);
            }
          };

          fx.hover(gd, evt, subplot); // Note that we have *not* used the cached fullLayout variable here
          // since that may be outdated when this is called as a callback later on

          gd._fullLayout._lasthover = maindrag;
          gd._fullLayout._hoversubplot = subplot;
        };
        /*
         * IMPORTANT:
         * We must check for the presence of the drag cover here.
         * If we don't, a 'mouseout' event is triggered on the
         * maindrag before each 'click' event, which has the effect
         * of clearing the hoverdata; thus, cancelling the click event.
         */


        maindrag.onmouseout = function (evt) {
          if (gd._dragging) return; // When the mouse leaves this maindrag, unset the hovered subplot.
          // This may cause problems if it leaves the subplot directly *onto*
          // another subplot, but that's a tiny corner case at the moment.

          gd._fullLayout._hoversubplot = null;
          dragelement.unhover(gd, evt);
        }; // corner draggers


        if (gd._context.showAxisDragHandles) {
          makeDragBox(gd, plotinfo, xa._offset - DRAGGERSIZE, ya._offset - DRAGGERSIZE, DRAGGERSIZE, DRAGGERSIZE, 'n', 'w');
          makeDragBox(gd, plotinfo, xa._offset + xa._length, ya._offset - DRAGGERSIZE, DRAGGERSIZE, DRAGGERSIZE, 'n', 'e');
          makeDragBox(gd, plotinfo, xa._offset - DRAGGERSIZE, ya._offset + ya._length, DRAGGERSIZE, DRAGGERSIZE, 's', 'w');
          makeDragBox(gd, plotinfo, xa._offset + xa._length, ya._offset + ya._length, DRAGGERSIZE, DRAGGERSIZE, 's', 'e');
        }
      }

      if (gd._context.showAxisDragHandles) {
        // x axis draggers - if you have overlaid plots,
        // these drag each axis separately
        if (subplot === xa._mainSubplot) {
          // the y position of the main x axis line
          var y0 = xa._mainLinePosition;
          if (xa.side === 'top') y0 -= DRAGGERSIZE;
          makeDragBox(gd, plotinfo, xa._offset + xa._length * 0.1, y0, xa._length * 0.8, DRAGGERSIZE, '', 'ew');
          makeDragBox(gd, plotinfo, xa._offset, y0, xa._length * 0.1, DRAGGERSIZE, '', 'w');
          makeDragBox(gd, plotinfo, xa._offset + xa._length * 0.9, y0, xa._length * 0.1, DRAGGERSIZE, '', 'e');
        } // y axis draggers


        if (subplot === ya._mainSubplot) {
          // the x position of the main y axis line
          var x0 = ya._mainLinePosition;
          if (ya.side !== 'right') x0 -= DRAGGERSIZE;
          makeDragBox(gd, plotinfo, x0, ya._offset + ya._length * 0.1, DRAGGERSIZE, ya._length * 0.8, 'ns', '');
          makeDragBox(gd, plotinfo, x0, ya._offset + ya._length * 0.9, DRAGGERSIZE, ya._length * 0.1, 's', '');
          makeDragBox(gd, plotinfo, x0, ya._offset, DRAGGERSIZE, ya._length * 0.1, 'n', '');
        }
      }
    }); // In case you mousemove over some hovertext, send it to Fx.hover too
    // we do this so that we can put the hover text in front of everything,
    // but still be able to interact with everything as if it isn't there

    var hoverLayer = fullLayout._hoverlayer.node();

    hoverLayer.onmousemove = function (evt) {
      evt.target = gd._fullLayout._lasthover;
      fx.hover(gd, evt, fullLayout._hoversubplot);
    };

    hoverLayer.onclick = function (evt) {
      evt.target = gd._fullLayout._lasthover;
      fx.click(gd, evt);
    }; // also delegate mousedowns... TODO: does this actually work?


    hoverLayer.onmousedown = function (evt) {
      gd._fullLayout._lasthover.onmousedown(evt);
    };

    exports.updateFx(gd);
  }; // Minimal set of update needed on 'modebar' edits.
  // We only need to update the <g .draglayer> cursor style.
  //
  // Note that changing the axis configuration and/or the fixedrange attribute
  // should trigger a full initInteractions.


  exports.updateFx = function (gd) {
    var fullLayout = gd._fullLayout;
    var cursor = fullLayout.dragmode === 'pan' ? 'move' : 'crosshair';
    setcursor(fullLayout._draggers, cursor);
  };
});

/*
 * containerArrayMatch: does this attribute string point into a
 * layout container array?
 *
 * @param {String} astr: an attribute string, like *annotations[2].text*
 *
 * @returns {Object | false} Returns false if `astr` doesn't match a container
 *  array. If it does, returns:
 *     {array: {String}, index: {Number}, property: {String}}
 *  ie the attribute string for the array, the index within the array (or ''
 *  if the whole array) and the property within that (or '' if the whole array
 *  or the whole object)
 */


var container_array_match = function containerArrayMatch(astr) {
  var rootContainers = registry.layoutArrayContainers;
  var regexpContainers = registry.layoutArrayRegexes;
  var rootPart = astr.split('[')[0];
  var arrayStr;
  var match; // look for regexp matches first, because they may be nested inside root matches
  // eg updatemenus[i].buttons is nested inside updatemenus

  for (var i = 0; i < regexpContainers.length; i++) {
    match = astr.match(regexpContainers[i]);

    if (match && match.index === 0) {
      arrayStr = match[0];
      break;
    }
  } // now look for root matches


  if (!arrayStr) arrayStr = rootContainers[rootContainers.indexOf(rootPart)];
  if (!arrayStr) return false;
  var tail = astr.substr(arrayStr.length);
  if (!tail) return {
    array: arrayStr,
    index: '',
    property: ''
  };
  match = tail.match(/^\[(0|[1-9][0-9]*)\](\.(.+))?$/);
  if (!match) return false;
  return {
    array: arrayStr,
    index: Number(match[1]),
    property: match[3] || ''
  };
};

var manage_arrays = createCommonjsModule(function (module, exports) {

  var sorterAsc = search.sorterAsc;
  exports.containerArrayMatch = container_array_match;

  var isAddVal = exports.isAddVal = function isAddVal(val) {
    return val === 'add' || is_plain_object(val);
  };

  var isRemoveVal = exports.isRemoveVal = function isRemoveVal(val) {
    return val === null || val === 'remove';
  };
  /*
   * applyContainerArrayChanges: for managing arrays of layout components in relayout
   * handles them all with a consistent interface.
   *
   * Here are the supported actions -> relayout calls -> edits we get here
   * (as prepared in _relayout):
   *
   * add an empty obj -> {'annotations[2]': 'add'} -> {2: {'': 'add'}}
   * add a specific obj -> {'annotations[2]': {attrs}} -> {2: {'': {attrs}}}
   * delete an obj -> {'annotations[2]': 'remove'} -> {2: {'': 'remove'}}
   *               -> {'annotations[2]': null} -> {2: {'': null}}
   * delete the whole array -> {'annotations': 'remove'} -> {'': {'': 'remove'}}
   *                        -> {'annotations': null} -> {'': {'': null}}
   * edit an object -> {'annotations[2].text': 'boo'} -> {2: {'text': 'boo'}}
   *
   * You can combine many edits to different objects. Objects are added and edited
   * in ascending order, then removed in descending order.
   * For example, starting with [a, b, c], if you want to:
   * - replace b with d:
   *   {'annotations[1]': d, 'annotations[2]': null} (b is item 2 after adding d)
   * - add a new item d between a and b, and edit b:
   *    {'annotations[1]': d, 'annotations[2].x': newX} (b is item 2 after adding d)
   * - delete b and edit c:
   *    {'annotations[1]': null, 'annotations[2].x': newX} (c is edited before b is removed)
   *
   * You CANNOT combine adding/deleting an item at index `i` with edits to the same index `i`
   * You CANNOT combine replacing/deleting the whole array with anything else (for the same array).
   *
   * @param {HTMLDivElement} gd
   *  the DOM element of the graph container div
   * @param {Lib.nestedProperty} componentType: the array we are editing
   * @param {Object} edits
   *  the changes to make; keys are indices to edit, values are themselves objects:
   *  {attr: newValue} of changes to make to that index (with add/remove behavior
   *  in special values of the empty attr)
   * @param {Object} flags
   *  the flags for which actions we're going to perform to display these (and
   *  any other) changes. If we're already `recalc`ing, we don't need to redraw
   *  individual items
   * @param {function} _nestedProperty
   *  a (possibly modified for gui edits) nestedProperty constructor
   *  The modified version takes a 3rd argument, for a prefix to the attribute
   *  string necessary for storing GUI edits
   *
   * @returns {bool} `true` if it managed to complete drawing of the changes
   *  `false` would mean the parent should replot.
   */


  exports.applyContainerArrayChanges = function applyContainerArrayChanges(gd, np, edits, flags, _nestedProperty) {
    var componentType = np.astr;
    var supplyComponentDefaults = registry.getComponentMethod(componentType, 'supplyLayoutDefaults');
    var draw = registry.getComponentMethod(componentType, 'draw');
    var drawOne = registry.getComponentMethod(componentType, 'drawOne');
    var replotLater = flags.replot || flags.recalc || supplyComponentDefaults === noop || draw === noop;
    var layout = gd.layout;
    var fullLayout = gd._fullLayout;

    if (edits['']) {
      if (Object.keys(edits).length > 1) {
        loggers_1.warn('Full array edits are incompatible with other edits', componentType);
      }

      var fullVal = edits[''][''];
      if (isRemoveVal(fullVal)) np.set(null);else if (Array.isArray(fullVal)) np.set(fullVal);else {
        loggers_1.warn('Unrecognized full array edit value', componentType, fullVal);
        return true;
      }
      if (replotLater) return false;
      supplyComponentDefaults(layout, fullLayout);
      draw(gd);
      return true;
    }

    var componentNums = Object.keys(edits).map(Number).sort(sorterAsc);
    var componentArrayIn = np.get();
    var componentArray = componentArrayIn || []; // componentArrayFull is used just to keep splices in line between
    // full and input arrays, so private keys can be copied over after
    // redoing supplyDefaults
    // TODO: this assumes componentArray is in gd.layout - which will not be
    // true after we extend this to restyle

    var componentArrayFull = _nestedProperty(fullLayout, componentType).get();

    var deletes = [];
    var firstIndexChange = -1;
    var maxIndex = componentArray.length;
    var i;
    var j;
    var componentNum;
    var objEdits;
    var objKeys;
    var objVal;
    var adding, prefix; // first make the add and edit changes

    for (i = 0; i < componentNums.length; i++) {
      componentNum = componentNums[i];
      objEdits = edits[componentNum];
      objKeys = Object.keys(objEdits);
      objVal = objEdits[''], adding = isAddVal(objVal);

      if (componentNum < 0 || componentNum > componentArray.length - (adding ? 0 : 1)) {
        loggers_1.warn('index out of range', componentType, componentNum);
        continue;
      }

      if (objVal !== undefined) {
        if (objKeys.length > 1) {
          loggers_1.warn('Insertion & removal are incompatible with edits to the same index.', componentType, componentNum);
        }

        if (isRemoveVal(objVal)) {
          deletes.push(componentNum);
        } else if (adding) {
          if (objVal === 'add') objVal = {};
          componentArray.splice(componentNum, 0, objVal);
          if (componentArrayFull) componentArrayFull.splice(componentNum, 0, {});
        } else {
          loggers_1.warn('Unrecognized full object edit value', componentType, componentNum, objVal);
        }

        if (firstIndexChange === -1) firstIndexChange = componentNum;
      } else {
        for (j = 0; j < objKeys.length; j++) {
          prefix = componentType + '[' + componentNum + '].';

          _nestedProperty(componentArray[componentNum], objKeys[j], prefix).set(objEdits[objKeys[j]]);
        }
      }
    } // now do deletes


    for (i = deletes.length - 1; i >= 0; i--) {
      componentArray.splice(deletes[i], 1); // TODO: this drops private keys that had been stored in componentArrayFull
      // does this have any ill effects?

      if (componentArrayFull) componentArrayFull.splice(deletes[i], 1);
    }

    if (!componentArray.length) np.set(null);else if (!componentArrayIn) np.set(componentArray);
    if (replotLater) return false;
    supplyComponentDefaults(layout, fullLayout); // finally draw all the components we need to
    // if we added or removed any, redraw all after it

    if (drawOne !== noop) {
      var indicesToDraw;

      if (firstIndexChange === -1) {
        // there's no re-indexing to do, so only redraw components that changed
        indicesToDraw = componentNums;
      } else {
        // in case the component array was shortened, we still need do call
        // drawOne on the latter items so they get properly removed
        maxIndex = Math.max(componentArray.length, maxIndex);
        indicesToDraw = [];

        for (i = 0; i < componentNums.length; i++) {
          componentNum = componentNums[i];
          if (componentNum >= firstIndexChange) break;
          indicesToDraw.push(componentNum);
        }

        for (i = firstIndexChange; i < maxIndex; i++) {
          indicesToDraw.push(i);
        }
      }

      for (i = 0; i < indicesToDraw.length; i++) {
        drawOne(gd, indicesToDraw[i]);
      }
    } else draw(gd);

    return true;
  };
});

var helpers$2 = createCommonjsModule(function (module, exports) {

  var cleanId = axis_ids.cleanId;
  var getFromTrace = axis_ids.getFromTrace;
  var traceIs = registry.traceIs; // clear the promise queue if one of them got rejected

  exports.clearPromiseQueue = function (gd) {
    if (Array.isArray(gd._promises) && gd._promises.length > 0) {
      lib_1.log('Clearing previous rejected promises from queue.');
    }

    gd._promises = [];
  }; // make a few changes to the layout right away
  // before it gets used for anything
  // backward compatibility and cleanup of nonstandard options


  exports.cleanLayout = function (layout) {
    var i, j;
    if (!layout) layout = {}; // cannot have (x|y)axis1, numbering goes axis, axis2, axis3...

    if (layout.xaxis1) {
      if (!layout.xaxis) layout.xaxis = layout.xaxis1;
      delete layout.xaxis1;
    }

    if (layout.yaxis1) {
      if (!layout.yaxis) layout.yaxis = layout.yaxis1;
      delete layout.yaxis1;
    }

    if (layout.scene1) {
      if (!layout.scene) layout.scene = layout.scene1;
      delete layout.scene1;
    }

    var axisAttrRegex = (plots_1.subplotsRegistry.cartesian || {}).attrRegex;
    var polarAttrRegex = (plots_1.subplotsRegistry.polar || {}).attrRegex;
    var ternaryAttrRegex = (plots_1.subplotsRegistry.ternary || {}).attrRegex;
    var sceneAttrRegex = (plots_1.subplotsRegistry.gl3d || {}).attrRegex;
    var keys = Object.keys(layout);

    for (i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (axisAttrRegex && axisAttrRegex.test(key)) {
        // modifications to cartesian axes
        var ax = layout[key];

        if (ax.anchor && ax.anchor !== 'free') {
          ax.anchor = cleanId(ax.anchor);
        }

        if (ax.overlaying) ax.overlaying = cleanId(ax.overlaying); // old method of axis type - isdate and islog (before category existed)

        if (!ax.type) {
          if (ax.isdate) ax.type = 'date';else if (ax.islog) ax.type = 'log';else if (ax.isdate === false && ax.islog === false) ax.type = 'linear';
        }

        if (ax.autorange === 'withzero' || ax.autorange === 'tozero') {
          ax.autorange = true;
          ax.rangemode = 'tozero';
        }

        delete ax.islog;
        delete ax.isdate;
        delete ax.categories; // replaced by _categories
        // prune empty domain arrays made before the new nestedProperty

        if (emptyContainer(ax, 'domain')) delete ax.domain; // autotick -> tickmode

        if (ax.autotick !== undefined) {
          if (ax.tickmode === undefined) {
            ax.tickmode = ax.autotick ? 'auto' : 'linear';
          }

          delete ax.autotick;
        }

        cleanTitle(ax);
      } else if (polarAttrRegex && polarAttrRegex.test(key)) {
        // modifications for polar
        var polar = layout[key];
        cleanTitle(polar.radialaxis);
      } else if (ternaryAttrRegex && ternaryAttrRegex.test(key)) {
        // modifications for ternary
        var ternary = layout[key];
        cleanTitle(ternary.aaxis);
        cleanTitle(ternary.baxis);
        cleanTitle(ternary.caxis);
      } else if (sceneAttrRegex && sceneAttrRegex.test(key)) {
        // modifications for 3D scenes
        var scene = layout[key]; // clean old Camera coords

        var cameraposition = scene.cameraposition;

        if (Array.isArray(cameraposition) && cameraposition[0].length === 4) {
          var rotation = cameraposition[0];
          var center = cameraposition[1];
          var radius = cameraposition[2];
          var mat = fromQuat_1([], rotation);
          var eye = [];

          for (j = 0; j < 3; ++j) {
            eye[j] = center[j] + radius * mat[2 + 4 * j];
          }

          scene.camera = {
            eye: {
              x: eye[0],
              y: eye[1],
              z: eye[2]
            },
            center: {
              x: center[0],
              y: center[1],
              z: center[2]
            },
            up: {
              x: 0,
              y: 0,
              z: 1
            } // we just ignore calculating camera z up in this case

          };
          delete scene.cameraposition;
        } // clean axis titles


        cleanTitle(scene.xaxis);
        cleanTitle(scene.yaxis);
        cleanTitle(scene.zaxis);
      }
    }

    var annotationsLen = Array.isArray(layout.annotations) ? layout.annotations.length : 0;

    for (i = 0; i < annotationsLen; i++) {
      var ann = layout.annotations[i];
      if (!lib_1.isPlainObject(ann)) continue;

      if (ann.ref) {
        if (ann.ref === 'paper') {
          ann.xref = 'paper';
          ann.yref = 'paper';
        } else if (ann.ref === 'data') {
          ann.xref = 'x';
          ann.yref = 'y';
        }

        delete ann.ref;
      }

      cleanAxRef(ann, 'xref');
      cleanAxRef(ann, 'yref');
    }

    var shapesLen = Array.isArray(layout.shapes) ? layout.shapes.length : 0;

    for (i = 0; i < shapesLen; i++) {
      var shape = layout.shapes[i];
      if (!lib_1.isPlainObject(shape)) continue;
      cleanAxRef(shape, 'xref');
      cleanAxRef(shape, 'yref');
    }

    var imagesLen = Array.isArray(layout.images) ? layout.images.length : 0;

    for (i = 0; i < imagesLen; i++) {
      var image = layout.images[i];
      if (!lib_1.isPlainObject(image)) continue;
      cleanAxRef(image, 'xref');
      cleanAxRef(image, 'yref');
    }

    var legend = layout.legend;

    if (legend) {
      // check for old-style legend positioning (x or y is +/- 100)
      if (legend.x > 3) {
        legend.x = 1.02;
        legend.xanchor = 'left';
      } else if (legend.x < -2) {
        legend.x = -0.02;
        legend.xanchor = 'right';
      }

      if (legend.y > 3) {
        legend.y = 1.02;
        legend.yanchor = 'bottom';
      } else if (legend.y < -2) {
        legend.y = -0.02;
        legend.yanchor = 'top';
      }
    } // clean plot title


    cleanTitle(layout);
    /*
     * Moved from rotate -> orbit for dragmode
     */

    if (layout.dragmode === 'rotate') layout.dragmode = 'orbit'; // sanitize rgb(fractions) and rgba(fractions) that old tinycolor
    // supported, but new tinycolor does not because they're not valid css

    color_1.clean(layout); // clean the layout container in layout.template

    if (layout.template && layout.template.layout) {
      exports.cleanLayout(layout.template.layout);
    }

    return layout;
  };

  function cleanAxRef(container, attr) {
    var valIn = container[attr];
    var axLetter = attr.charAt(0);

    if (valIn && valIn !== 'paper') {
      container[attr] = cleanId(valIn, axLetter, true);
    }
  }
  /**
   * Cleans up old title attribute structure (flat) in favor of the new one (nested).
   *
   * @param {Object} titleContainer - an object potentially including deprecated title attributes
   */


  function cleanTitle(titleContainer) {
    if (titleContainer) {
      // title -> title.text
      // (although title used to be a string attribute,
      // numbers are accepted as well)
      if (typeof titleContainer.title === 'string' || typeof titleContainer.title === 'number') {
        titleContainer.title = {
          text: titleContainer.title
        };
      }

      rewireAttr('titlefont', 'font');
      rewireAttr('titleposition', 'position');
      rewireAttr('titleside', 'side');
      rewireAttr('titleoffset', 'offset');
    }

    function rewireAttr(oldAttrName, newAttrName) {
      var oldAttrSet = titleContainer[oldAttrName];
      var newAttrSet = titleContainer.title && titleContainer.title[newAttrName];

      if (oldAttrSet && !newAttrSet) {
        // Ensure title object exists
        if (!titleContainer.title) {
          titleContainer.title = {};
        }

        titleContainer.title[newAttrName] = titleContainer[oldAttrName];
        delete titleContainer[oldAttrName];
      }
    }
  }
  /*
   * cleanData: Make a few changes to the data for backward compatibility
   * before it gets used for anything. Modifies the data traces users provide.
   *
   * Important: if you're going to add something here that modifies a data array,
   * update it in place so the new array === the old one.
   */


  exports.cleanData = function (data) {
    for (var tracei = 0; tracei < data.length; tracei++) {
      var trace = data[tracei];
      var i; // use xbins to bin data in x, and ybins to bin data in y

      if (trace.type === 'histogramy' && 'xbins' in trace && !('ybins' in trace)) {
        trace.ybins = trace.xbins;
        delete trace.xbins;
      } // error_y.opacity is obsolete - merge into color


      if (trace.error_y && 'opacity' in trace.error_y) {
        var dc = color_1.defaults;
        var yeColor = trace.error_y.color || (traceIs(trace, 'bar') ? color_1.defaultLine : dc[tracei % dc.length]);
        trace.error_y.color = color_1.addOpacity(color_1.rgb(yeColor), color_1.opacity(yeColor) * trace.error_y.opacity);
        delete trace.error_y.opacity;
      } // convert bardir to orientation, and put the data into
      // the axes it's eventually going to be used with


      if ('bardir' in trace) {
        if (trace.bardir === 'h' && (traceIs(trace, 'bar') || trace.type.substr(0, 9) === 'histogram')) {
          trace.orientation = 'h';
          exports.swapXYData(trace);
        }

        delete trace.bardir;
      } // now we have only one 1D histogram type, and whether
      // it uses x or y data depends on trace.orientation


      if (trace.type === 'histogramy') exports.swapXYData(trace);

      if (trace.type === 'histogramx' || trace.type === 'histogramy') {
        trace.type = 'histogram';
      } // scl->scale, reversescl->reversescale


      if ('scl' in trace && !('colorscale' in trace)) {
        trace.colorscale = trace.scl;
        delete trace.scl;
      }

      if ('reversescl' in trace && !('reversescale' in trace)) {
        trace.reversescale = trace.reversescl;
        delete trace.reversescl;
      } // axis ids x1 -> x, y1-> y


      if (trace.xaxis) trace.xaxis = cleanId(trace.xaxis, 'x');
      if (trace.yaxis) trace.yaxis = cleanId(trace.yaxis, 'y'); // scene ids scene1 -> scene

      if (traceIs(trace, 'gl3d') && trace.scene) {
        trace.scene = plots_1.subplotsRegistry.gl3d.cleanId(trace.scene);
      }

      if (!traceIs(trace, 'pie-like') && !traceIs(trace, 'bar-like')) {
        if (Array.isArray(trace.textposition)) {
          for (i = 0; i < trace.textposition.length; i++) {
            trace.textposition[i] = cleanTextPosition(trace.textposition[i]);
          }
        } else if (trace.textposition) {
          trace.textposition = cleanTextPosition(trace.textposition);
        }
      } // fix typo in colorscale definition


      var _module = registry.getModule(trace);

      if (_module && _module.colorbar) {
        var containerName = _module.colorbar.container;
        var container = containerName ? trace[containerName] : trace;

        if (container && container.colorscale) {
          if (container.colorscale === 'YIGnBu') container.colorscale = 'YlGnBu';
          if (container.colorscale === 'YIOrRd') container.colorscale = 'YlOrRd';
        }
      } // fix typo in surface 'highlight*' definitions


      if (trace.type === 'surface' && lib_1.isPlainObject(trace.contours)) {
        var dims = ['x', 'y', 'z'];

        for (i = 0; i < dims.length; i++) {
          var opts = trace.contours[dims[i]];
          if (!lib_1.isPlainObject(opts)) continue;

          if (opts.highlightColor) {
            opts.highlightcolor = opts.highlightColor;
            delete opts.highlightColor;
          }

          if (opts.highlightWidth) {
            opts.highlightwidth = opts.highlightWidth;
            delete opts.highlightWidth;
          }
        }
      } // fixes from converting finance from transforms to real trace types


      if (trace.type === 'candlestick' || trace.type === 'ohlc') {
        var increasingShowlegend = (trace.increasing || {}).showlegend !== false;
        var decreasingShowlegend = (trace.decreasing || {}).showlegend !== false;
        var increasingName = cleanFinanceDir(trace.increasing);
        var decreasingName = cleanFinanceDir(trace.decreasing); // now figure out something smart to do with the separate direction
        // names we removed

        if (increasingName !== false && decreasingName !== false) {
          // both sub-names existed: base name previously had no effect
          // so ignore it and try to find a shared part of the sub-names
          var newName = commonPrefix(increasingName, decreasingName, increasingShowlegend, decreasingShowlegend); // if no common part, leave whatever name was (or wasn't) there

          if (newName) trace.name = newName;
        } else if ((increasingName || decreasingName) && !trace.name) {
          // one sub-name existed but not the base name - just use the sub-name
          trace.name = increasingName || decreasingName;
        }
      } // transforms backward compatibility fixes


      if (Array.isArray(trace.transforms)) {
        var transforms = trace.transforms;

        for (i = 0; i < transforms.length; i++) {
          var transform = transforms[i];
          if (!lib_1.isPlainObject(transform)) continue;

          switch (transform.type) {
            case 'filter':
              if (transform.filtersrc) {
                transform.target = transform.filtersrc;
                delete transform.filtersrc;
              }

              if (transform.calendar) {
                if (!transform.valuecalendar) {
                  transform.valuecalendar = transform.calendar;
                }

                delete transform.calendar;
              }

              break;

            case 'groupby':
              // Name has changed from `style` to `styles`, so use `style` but prefer `styles`:
              transform.styles = transform.styles || transform.style;

              if (transform.styles && !Array.isArray(transform.styles)) {
                var prevStyles = transform.styles;
                var styleKeys = Object.keys(prevStyles);
                transform.styles = [];

                for (var j = 0; j < styleKeys.length; j++) {
                  transform.styles.push({
                    target: styleKeys[j],
                    value: prevStyles[styleKeys[j]]
                  });
                }
              }

              break;
          }
        }
      } // prune empty containers made before the new nestedProperty


      if (emptyContainer(trace, 'line')) delete trace.line;

      if ('marker' in trace) {
        if (emptyContainer(trace.marker, 'line')) delete trace.marker.line;
        if (emptyContainer(trace, 'marker')) delete trace.marker;
      } // sanitize rgb(fractions) and rgba(fractions) that old tinycolor
      // supported, but new tinycolor does not because they're not valid css


      color_1.clean(trace); // remove obsolete autobin(x|y) attributes, but only if true
      // if false, this needs to happen in Histogram.calc because it
      // can be a one-time autobin so we need to know the results before
      // we can push them back into the trace.

      if (trace.autobinx) {
        delete trace.autobinx;
        delete trace.xbins;
      }

      if (trace.autobiny) {
        delete trace.autobiny;
        delete trace.ybins;
      }

      cleanTitle(trace);
      if (trace.colorbar) cleanTitle(trace.colorbar);
      if (trace.marker && trace.marker.colorbar) cleanTitle(trace.marker.colorbar);
      if (trace.line && trace.line.colorbar) cleanTitle(trace.line.colorbar);
      if (trace.aaxis) cleanTitle(trace.aaxis);
      if (trace.baxis) cleanTitle(trace.baxis);
    }
  };

  function cleanFinanceDir(dirContainer) {
    if (!lib_1.isPlainObject(dirContainer)) return false;
    var dirName = dirContainer.name;
    delete dirContainer.name;
    delete dirContainer.showlegend;
    return (typeof dirName === 'string' || typeof dirName === 'number') && String(dirName);
  }

  function commonPrefix(name1, name2, show1, show2) {
    // if only one is shown in the legend, use that
    if (show1 && !show2) return name1;
    if (show2 && !show1) return name2; // if both or neither are in the legend, check if one is blank (or whitespace)
    // and use the other one
    // note that hover labels can still use the name even if the legend doesn't

    if (!name1.trim()) return name2;
    if (!name2.trim()) return name1;
    var minLen = Math.min(name1.length, name2.length);
    var i;

    for (i = 0; i < minLen; i++) {
      if (name1.charAt(i) !== name2.charAt(i)) break;
    }

    var out = name1.substr(0, i);
    return out.trim();
  } // textposition - support partial attributes (ie just 'top')
  // and incorrect use of middle / center etc.


  function cleanTextPosition(textposition) {
    var posY = 'middle';
    var posX = 'center';

    if (typeof textposition === 'string') {
      if (textposition.indexOf('top') !== -1) posY = 'top';else if (textposition.indexOf('bottom') !== -1) posY = 'bottom';
      if (textposition.indexOf('left') !== -1) posX = 'left';else if (textposition.indexOf('right') !== -1) posX = 'right';
    }

    return posY + ' ' + posX;
  }

  function emptyContainer(outer, innerStr) {
    return innerStr in outer && typeof outer[innerStr] === 'object' && Object.keys(outer[innerStr]).length === 0;
  } // swap all the data and data attributes associated with x and y


  exports.swapXYData = function (trace) {
    var i;
    lib_1.swapAttrs(trace, ['?', '?0', 'd?', '?bins', 'nbins?', 'autobin?', '?src', 'error_?']);

    if (Array.isArray(trace.z) && Array.isArray(trace.z[0])) {
      if (trace.transpose) delete trace.transpose;else trace.transpose = true;
    }

    if (trace.error_x && trace.error_y) {
      var errorY = trace.error_y;
      var copyYstyle = 'copy_ystyle' in errorY ? errorY.copy_ystyle : !(errorY.color || errorY.thickness || errorY.width);
      lib_1.swapAttrs(trace, ['error_?.copy_ystyle']);

      if (copyYstyle) {
        lib_1.swapAttrs(trace, ['error_?.color', 'error_?.thickness', 'error_?.width']);
      }
    }

    if (typeof trace.hoverinfo === 'string') {
      var hoverInfoParts = trace.hoverinfo.split('+');

      for (i = 0; i < hoverInfoParts.length; i++) {
        if (hoverInfoParts[i] === 'x') hoverInfoParts[i] = 'y';else if (hoverInfoParts[i] === 'y') hoverInfoParts[i] = 'x';
      }

      trace.hoverinfo = hoverInfoParts.join('+');
    }
  }; // coerce traceIndices input to array of trace indices


  exports.coerceTraceIndices = function (gd, traceIndices) {
    if (fastIsnumeric(traceIndices)) {
      return [traceIndices];
    } else if (!Array.isArray(traceIndices) || !traceIndices.length) {
      return gd.data.map(function (_, i) {
        return i;
      });
    } else if (Array.isArray(traceIndices)) {
      var traceIndicesOut = [];

      for (var i = 0; i < traceIndices.length; i++) {
        if (lib_1.isIndex(traceIndices[i], gd.data.length)) {
          traceIndicesOut.push(traceIndices[i]);
        } else {
          lib_1.warn('trace index (', traceIndices[i], ') is not a number or is out of bounds');
        }
      }

      return traceIndicesOut;
    }

    return traceIndices;
  };
  /**
   * Manages logic around array container item creation / deletion / update
   * that nested property alone can't handle.
   *
   * @param {Object} np
   *  nested property of update attribute string about trace or layout object
   * @param {*} newVal
   *  update value passed to restyle / relayout / update
   * @param {Object} undoit
   *  undo hash (N.B. undoit may be mutated here).
   *
   */


  exports.manageArrayContainers = function (np, newVal, undoit) {
    var obj = np.obj;
    var parts = np.parts;
    var pLength = parts.length;
    var pLast = parts[pLength - 1];
    var pLastIsNumber = fastIsnumeric(pLast);

    if (pLastIsNumber && newVal === null) {
      // delete item
      // Clear item in array container when new value is null
      var contPath = parts.slice(0, pLength - 1).join('.');
      var cont = lib_1.nestedProperty(obj, contPath).get();
      cont.splice(pLast, 1); // Note that nested property clears null / undefined at end of
      // array container, but not within them.
    } else if (pLastIsNumber && np.get() === undefined) {
      // create item
      // When adding a new item, make sure undo command will remove it
      if (np.get() === undefined) undoit[np.astr] = null;
      np.set(newVal);
    } else {
      // update item
      // If the last part of attribute string isn't a number,
      // np.set is all we need.
      np.set(newVal);
    }
  };
  /*
   * Match the part to strip off to turn an attribute into its parent
   * really it should be either '.some_characters' or '[number]'
   * but we're a little more permissive here and match either
   * '.not_brackets_or_dot' or '[not_brackets_or_dot]'
   */


  var ATTR_TAIL_RE = /(\.[^\[\]\.]+|\[[^\[\]\.]+\])$/;

  function getParent(attr) {
    var tail = attr.search(ATTR_TAIL_RE);
    if (tail > 0) return attr.substr(0, tail);
  }
  /*
   * hasParent: does an attribute object contain a parent of the given attribute?
   * for example, given 'images[2].x' do we also have 'images' or 'images[2]'?
   *
   * @param {Object} aobj
   *  update object, whose keys are attribute strings and values are their new settings
   * @param {string} attr
   *  the attribute string to test against
   * @returns {Boolean}
   *  is a parent of attr present in aobj?
   */


  exports.hasParent = function (aobj, attr) {
    var attrParent = getParent(attr);

    while (attrParent) {
      if (attrParent in aobj) return true;
      attrParent = getParent(attrParent);
    }

    return false;
  };
  /**
   * Empty out types for all axes containing these traces so we auto-set them again
   *
   * @param {object} gd
   * @param {[integer]} traces: trace indices to search for axes to clear the types of
   * @param {object} layoutUpdate: any update being done concurrently to the layout,
   *   which may supercede clearing the axis types
   */


  var axLetters = ['x', 'y', 'z'];

  exports.clearAxisTypes = function (gd, traces, layoutUpdate) {
    for (var i = 0; i < traces.length; i++) {
      var trace = gd._fullData[i];

      for (var j = 0; j < 3; j++) {
        var ax = getFromTrace(gd, trace, axLetters[j]); // do not clear log type - that's never an auto result so must have been intentional

        if (ax && ax.type !== 'log') {
          var axAttr = ax._name;

          var sceneName = ax._id.substr(1);

          if (sceneName.substr(0, 5) === 'scene') {
            if (layoutUpdate[sceneName] !== undefined) continue;
            axAttr = sceneName + '.' + axAttr;
          }

          var typeAttr = axAttr + '.type';

          if (layoutUpdate[axAttr] === undefined && layoutUpdate[typeAttr] === undefined) {
            lib_1.nestedProperty(gd.layout, typeAttr).set(null);
          }
        }
      }
    }
  };
});

var plot_api$1 = createCommonjsModule(function (module, exports) {

  var nestedProperty = lib_1.nestedProperty;
  var initInteractions = graph_interact.initInteractions;
  var clearSelect = select$1.clearSelect;
  var dfltConfig = plot_config.dfltConfig;
  var AX_NAME_PATTERN = constants$a.AX_NAME_PATTERN;
  var numericNameWarningCount = 0;
  var numericNameWarningCountLimit = 5;
  /**
   * Internal plot-creation function
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   * @param {array of objects} data
   *      array of traces, containing the data and display information for each trace
   * @param {object} layout
   *      object describing the overall display of the plot,
   *      all the stuff that doesn't pertain to any individual trace
   * @param {object} config
   *      configuration options (see ./plot_config.js for more info)
   *
   * OR
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   * @param {object} figure
   *      object containing `data`, `layout`, `config`, and `frames` members
   *
   */

  function _doPlot(gd, data, layout, config) {
    var frames;
    gd = lib_1.getGraphDiv(gd); // Events.init is idempotent and bails early if gd has already been init'd

    events.init(gd);

    if (lib_1.isPlainObject(data)) {
      var obj = data;
      data = obj.data;
      layout = obj.layout;
      config = obj.config;
      frames = obj.frames;
    }

    var okToPlot = events.triggerHandler(gd, 'plotly_beforeplot', [data, layout, config]);
    if (okToPlot === false) return Promise.reject(); // if there's no data or layout, and this isn't yet a plotly plot
    // container, log a warning to help plotly.js users debug

    if (!data && !layout && !lib_1.isPlotDiv(gd)) {
      lib_1.warn('Calling _doPlot as if redrawing ' + 'but this container doesn\'t yet have a plot.', gd);
    }

    function addFrames() {
      if (frames) {
        return exports.addFrames(gd, frames);
      }
    } // transfer configuration options to gd until we move over to
    // a more OO like model


    setPlotContext(gd, config);
    if (!layout) layout = {}; // hook class for plots main container (in case of plotly.js
    // this won't be #embedded-graph or .js-tab-contents)

    d3.select(gd).classed('js-plotly-plot', true); // off-screen getBoundingClientRect testing space,
    // in #js-plotly-tester (and stored as Drawing.tester)
    // so we can share cached text across tabs

    drawing_1.makeTester(); // collect promises for any async actions during plotting
    // any part of the plotting code can push to gd._promises, then
    // before we move to the next step, we check that they're all
    // complete, and empty out the promise list again.

    if (!Array.isArray(gd._promises)) gd._promises = [];
    var graphWasEmpty = (gd.data || []).length === 0 && Array.isArray(data); // if there is already data on the graph, append the new data
    // if you only want to redraw, pass a non-array for data

    if (Array.isArray(data)) {
      helpers$2.cleanData(data);
      if (graphWasEmpty) gd.data = data;else gd.data.push.apply(gd.data, data); // for routines outside graph_obj that want a clean tab
      // (rather than appending to an existing one) gd.empty
      // is used to determine whether to make a new tab

      gd.empty = false;
    }

    if (!gd.layout || graphWasEmpty) {
      gd.layout = helpers$2.cleanLayout(layout);
    }

    plots_1.supplyDefaults(gd);
    var fullLayout = gd._fullLayout;

    var hasCartesian = fullLayout._has('cartesian'); // so we don't try to re-call _doPlot from inside
    // legend and colorbar, if margins changed


    fullLayout._replotting = true; // make or remake the framework if we need to

    if (graphWasEmpty || fullLayout._shouldCreateBgLayer) {
      makePlotFramework(gd);

      if (fullLayout._shouldCreateBgLayer) {
        delete fullLayout._shouldCreateBgLayer;
      }
    } // clear gradient and pattern defs on each .plot call, because we know we'll loop through all traces


    drawing_1.initGradients(gd);
    drawing_1.initPatterns(gd); // save initial show spikes once per graph

    if (graphWasEmpty) axes_1.saveShowSpikeInitial(gd); // prepare the data and find the autorange
    // generate calcdata, if we need to
    // to force redoing calcdata, just delete it before calling _doPlot

    var recalc = !gd.calcdata || gd.calcdata.length !== (gd._fullData || []).length;
    if (recalc) plots_1.doCalcdata(gd); // in case it has changed, attach fullData traces to calcdata

    for (var i = 0; i < gd.calcdata.length; i++) {
      gd.calcdata[i][0].trace = gd._fullData[i];
    } // make the figure responsive


    if (gd._context.responsive) {
      if (!gd._responsiveChartHandler) {
        // Keep a reference to the resize handler to purge it down the road
        gd._responsiveChartHandler = function () {
          if (!lib_1.isHidden(gd)) plots_1.resize(gd);
        }; // Listen to window resize


        window.addEventListener('resize', gd._responsiveChartHandler);
      }
    } else {
      lib_1.clearResponsive(gd);
    }
    /*
     * start async-friendly code - now we're actually drawing things
     */


    var oldMargins = lib_1.extendFlat({}, fullLayout._size); // draw framework first so that margin-pushing
    // components can position themselves correctly

    var drawFrameworkCalls = 0;

    function drawFramework() {
      var basePlotModules = fullLayout._basePlotModules;

      for (var i = 0; i < basePlotModules.length; i++) {
        if (basePlotModules[i].drawFramework) {
          basePlotModules[i].drawFramework(gd);
        }
      }

      if (!fullLayout._glcanvas && fullLayout._has('gl')) {
        fullLayout._glcanvas = fullLayout._glcontainer.selectAll('.gl-canvas').data([{
          key: 'contextLayer',
          context: true,
          pick: false
        }, {
          key: 'focusLayer',
          context: false,
          pick: false
        }, {
          key: 'pickLayer',
          context: false,
          pick: true
        }], function (d) {
          return d.key;
        });

        fullLayout._glcanvas.enter().append('canvas').attr('class', function (d) {
          return 'gl-canvas gl-canvas-' + d.key.replace('Layer', '');
        }).style({
          position: 'absolute',
          top: 0,
          left: 0,
          overflow: 'visible',
          'pointer-events': 'none'
        });
      }

      var plotGlPixelRatio = gd._context.plotGlPixelRatio;

      if (fullLayout._glcanvas) {
        fullLayout._glcanvas.attr('width', fullLayout.width * plotGlPixelRatio).attr('height', fullLayout.height * plotGlPixelRatio).style('width', fullLayout.width + 'px').style('height', fullLayout.height + 'px');

        var regl = fullLayout._glcanvas.data()[0].regl;

        if (regl) {
          // Unfortunately, this can happen when relayouting to large
          // width/height on some browsers.
          if (Math.floor(fullLayout.width * plotGlPixelRatio) !== regl._gl.drawingBufferWidth || Math.floor(fullLayout.height * plotGlPixelRatio) !== regl._gl.drawingBufferHeight) {
            var msg = 'WebGL context buffer and canvas dimensions do not match due to browser/WebGL bug.';

            if (drawFrameworkCalls) {
              lib_1.error(msg);
            } else {
              lib_1.log(msg + ' Clearing graph and plotting again.');
              plots_1.cleanPlot([], {}, gd._fullData, fullLayout);
              plots_1.supplyDefaults(gd);
              fullLayout = gd._fullLayout;
              plots_1.doCalcdata(gd);
              drawFrameworkCalls++;
              return drawFramework();
            }
          }
        }
      }

      if (fullLayout.modebar.orientation === 'h') {
        fullLayout._modebardiv.style('height', null).style('width', '100%');
      } else {
        fullLayout._modebardiv.style('width', null).style('height', fullLayout.height + 'px');
      }

      return plots_1.previousPromises(gd);
    } // draw anything that can affect margins.


    function marginPushers() {
      // First reset the list of things that are allowed to change the margins
      // So any deleted traces or components will be wiped out of the
      // automargin calculation.
      // This means *every* margin pusher must be listed here, even if it
      // doesn't actually try to push the margins until later.
      plots_1.clearAutoMarginIds(gd);
      subroutines.drawMarginPushers(gd);
      axes_1.allowAutoMargin(gd); // TODO can this be moved elsewhere?

      if (fullLayout._has('pie')) {
        var fullData = gd._fullData;

        for (var i = 0; i < fullData.length; i++) {
          var trace = fullData[i];

          if (trace.type === 'pie' && trace.automargin) {
            plots_1.allowAutoMargin(gd, 'pie.' + trace.uid + '.automargin');
          }
        }
      }

      plots_1.doAutoMargin(gd);
      return plots_1.previousPromises(gd);
    } // in case the margins changed, draw margin pushers again


    function marginPushersAgain() {
      if (!plots_1.didMarginChange(oldMargins, fullLayout._size)) return;
      return lib_1.syncOrAsync([marginPushers, subroutines.layoutStyles], gd);
    }

    function positionAndAutorange() {
      if (!recalc) {
        doAutoRangeAndConstraints();
        return;
      } // TODO: autosize extra for text markers and images
      // see https://github.com/plotly/plotly.js/issues/1111


      return lib_1.syncOrAsync([registry.getComponentMethod('shapes', 'calcAutorange'), registry.getComponentMethod('annotations', 'calcAutorange'), doAutoRangeAndConstraints], gd);
    }

    function doAutoRangeAndConstraints() {
      if (gd._transitioning) return;
      subroutines.doAutoRangeAndConstraints(gd); // store initial ranges *after* enforcing constraints, otherwise
      // we will never look like we're at the initial ranges

      if (graphWasEmpty) axes_1.saveRangeInitial(gd); // this one is different from shapes/annotations calcAutorange
      // the others incorporate those components into ax._extremes,
      // this one actually sets the ranges in rangesliders.

      registry.getComponentMethod('rangeslider', 'calcAutorange')(gd);
    } // draw ticks, titles, and calculate axis scaling (._b, ._m)


    function drawAxes() {
      return axes_1.draw(gd, graphWasEmpty ? '' : 'redraw');
    }

    var seq = [plots_1.previousPromises, addFrames, drawFramework, marginPushers, marginPushersAgain];
    if (hasCartesian) seq.push(positionAndAutorange);
    seq.push(subroutines.layoutStyles);

    if (hasCartesian) {
      seq.push(drawAxes, function insideTickLabelsAutorange(gd) {
        if (gd._fullLayout._insideTickLabelsAutorange) {
          relayout(gd, gd._fullLayout._insideTickLabelsAutorange).then(function () {
            gd._fullLayout._insideTickLabelsAutorange = undefined;
          });
        }
      });
    }

    seq.push(subroutines.drawData, subroutines.finalDraw, initInteractions, plots_1.addLinks, plots_1.rehover, plots_1.redrag, // TODO: doAutoMargin is only needed here for axis automargin, which
    // happens outside of marginPushers where all the other automargins are
    // calculated. Would be much better to separate margin calculations from
    // component drawing - see https://github.com/plotly/plotly.js/issues/2704
    plots_1.doAutoMargin, saveRangeInitialForInsideTickLabels, plots_1.previousPromises);

    function saveRangeInitialForInsideTickLabels(gd) {
      if (gd._fullLayout._insideTickLabelsAutorange) {
        if (graphWasEmpty) axes_1.saveRangeInitial(gd, true);
      }
    } // even if everything we did was synchronous, return a promise
    // so that the caller doesn't care which route we took


    var plotDone = lib_1.syncOrAsync(seq, gd);
    if (!plotDone || !plotDone.then) plotDone = Promise.resolve();
    return plotDone.then(function () {
      emitAfterPlot(gd);
      return gd;
    });
  }

  function emitAfterPlot(gd) {
    var fullLayout = gd._fullLayout;

    if (fullLayout._redrawFromAutoMarginCount) {
      fullLayout._redrawFromAutoMarginCount--;
    } else {
      gd.emit('plotly_afterplot');
    }
  }

  function setPlotConfig(obj) {
    return lib_1.extendFlat(dfltConfig, obj);
  }

  function setBackground(gd, bgColor) {
    try {
      gd._fullLayout._paper.style('background', bgColor);
    } catch (e) {
      lib_1.error(e);
    }
  }

  function opaqueSetBackground(gd, bgColor) {
    var blend = color_1.combine(bgColor, 'white');
    setBackground(gd, blend);
  }

  function setPlotContext(gd, config) {
    if (!gd._context) {
      gd._context = lib_1.extendDeep({}, dfltConfig); // stash <base> href, used to make robust clipPath URLs

      var base = d3.select('base');
      gd._context._baseUrl = base.size() && base.attr('href') ? window.location.href.split('#')[0] : '';
    }

    var context = gd._context;
    var i, keys, key;

    if (config) {
      keys = Object.keys(config);

      for (i = 0; i < keys.length; i++) {
        key = keys[i];
        if (key === 'editable' || key === 'edits') continue;

        if (key in context) {
          if (key === 'setBackground' && config[key] === 'opaque') {
            context[key] = opaqueSetBackground;
          } else {
            context[key] = config[key];
          }
        }
      } // map plot3dPixelRatio to plotGlPixelRatio for backward compatibility


      if (config.plot3dPixelRatio && !context.plotGlPixelRatio) {
        context.plotGlPixelRatio = context.plot3dPixelRatio;
      } // now deal with editable and edits - first editable overrides
      // everything, then edits refines


      var editable = config.editable;

      if (editable !== undefined) {
        // we're not going to *use* context.editable, we're only going to
        // use context.edits... but keep it for the record
        context.editable = editable;
        keys = Object.keys(context.edits);

        for (i = 0; i < keys.length; i++) {
          context.edits[keys[i]] = editable;
        }
      }

      if (config.edits) {
        keys = Object.keys(config.edits);

        for (i = 0; i < keys.length; i++) {
          key = keys[i];

          if (key in context.edits) {
            context.edits[key] = config.edits[key];
          }
        }
      } // not part of the user-facing config options


      context._exportedPlot = config._exportedPlot;
    } // staticPlot forces a bunch of others:


    if (context.staticPlot) {
      context.editable = false;
      context.edits = {};
      context.autosizable = false;
      context.scrollZoom = false;
      context.doubleClick = false;
      context.showTips = false;
      context.showLink = false;
      context.displayModeBar = false;
    } // make sure hover-only devices have mode bar visible


    if (context.displayModeBar === 'hover' && !hasHover_1) {
      context.displayModeBar = true;
    } // default and fallback for setBackground


    if (context.setBackground === 'transparent' || typeof context.setBackground !== 'function') {
      context.setBackground = setBackground;
    } // Check if gd has a specified widht/height to begin with


    context._hasZeroHeight = context._hasZeroHeight || gd.clientHeight === 0;
    context._hasZeroWidth = context._hasZeroWidth || gd.clientWidth === 0; // fill context._scrollZoom helper to help manage scrollZoom flaglist

    var szIn = context.scrollZoom;
    var szOut = context._scrollZoom = {};

    if (szIn === true) {
      szOut.cartesian = 1;
      szOut.gl3d = 1;
      szOut.geo = 1;
      szOut.mapbox = 1;
    } else if (typeof szIn === 'string') {
      var parts = szIn.split('+');

      for (i = 0; i < parts.length; i++) {
        szOut[parts[i]] = 1;
      }
    } else if (szIn !== false) {
      szOut.gl3d = 1;
      szOut.geo = 1;
      szOut.mapbox = 1;
    }
  } // convenience function to force a full redraw, mostly for use by plotly.js


  function redraw(gd) {
    gd = lib_1.getGraphDiv(gd);

    if (!lib_1.isPlotDiv(gd)) {
      throw new Error('This element is not a Plotly plot: ' + gd);
    }

    helpers$2.cleanData(gd.data);
    helpers$2.cleanLayout(gd.layout);
    gd.calcdata = undefined;
    return exports._doPlot(gd).then(function () {
      gd.emit('plotly_redraw');
      return gd;
    });
  }
  /**
   * Convenience function to make idempotent plot option obvious to users.
   *
   * @param gd
   * @param {Object[]} data
   * @param {Object} layout
   * @param {Object} config
   */


  function newPlot(gd, data, layout, config) {
    gd = lib_1.getGraphDiv(gd); // remove gl contexts

    plots_1.cleanPlot([], {}, gd._fullData || [], gd._fullLayout || {});
    plots_1.purge(gd);
    return exports._doPlot(gd, data, layout, config);
  }
  /**
   * Wrap negative indicies to their positive counterparts.
   *
   * @param {Number[]} indices An array of indices
   * @param {Number} maxIndex The maximum index allowable (arr.length - 1)
   */


  function positivifyIndices(indices, maxIndex) {
    var parentLength = maxIndex + 1;
    var positiveIndices = [];
    var i;
    var index;

    for (i = 0; i < indices.length; i++) {
      index = indices[i];

      if (index < 0) {
        positiveIndices.push(parentLength + index);
      } else {
        positiveIndices.push(index);
      }
    }

    return positiveIndices;
  }
  /**
   * Ensures that an index array for manipulating gd.data is valid.
   *
   * Intended for use with addTraces, deleteTraces, and moveTraces.
   *
   * @param gd
   * @param indices
   * @param arrayName
   */


  function assertIndexArray(gd, indices, arrayName) {
    var i, index;

    for (i = 0; i < indices.length; i++) {
      index = indices[i]; // validate that indices are indeed integers

      if (index !== parseInt(index, 10)) {
        throw new Error('all values in ' + arrayName + ' must be integers');
      } // check that all indices are in bounds for given gd.data array length


      if (index >= gd.data.length || index < -gd.data.length) {
        throw new Error(arrayName + ' must be valid indices for gd.data.');
      } // check that indices aren't repeated


      if (indices.indexOf(index, i + 1) > -1 || index >= 0 && indices.indexOf(-gd.data.length + index) > -1 || index < 0 && indices.indexOf(gd.data.length + index) > -1) {
        throw new Error('each index in ' + arrayName + ' must be unique.');
      }
    }
  }
  /**
   * Private function used by Plotly.moveTraces to check input args
   *
   * @param gd
   * @param currentIndices
   * @param newIndices
   */


  function checkMoveTracesArgs(gd, currentIndices, newIndices) {
    // check that gd has attribute 'data' and 'data' is array
    if (!Array.isArray(gd.data)) {
      throw new Error('gd.data must be an array.');
    } // validate currentIndices array


    if (typeof currentIndices === 'undefined') {
      throw new Error('currentIndices is a required argument.');
    } else if (!Array.isArray(currentIndices)) {
      currentIndices = [currentIndices];
    }

    assertIndexArray(gd, currentIndices, 'currentIndices'); // validate newIndices array if it exists

    if (typeof newIndices !== 'undefined' && !Array.isArray(newIndices)) {
      newIndices = [newIndices];
    }

    if (typeof newIndices !== 'undefined') {
      assertIndexArray(gd, newIndices, 'newIndices');
    } // check currentIndices and newIndices are the same length if newIdices exists


    if (typeof newIndices !== 'undefined' && currentIndices.length !== newIndices.length) {
      throw new Error('current and new indices must be of equal length.');
    }
  }
  /**
   * A private function to reduce the type checking clutter in addTraces.
   *
   * @param gd
   * @param traces
   * @param newIndices
   */


  function checkAddTracesArgs(gd, traces, newIndices) {
    var i, value; // check that gd has attribute 'data' and 'data' is array

    if (!Array.isArray(gd.data)) {
      throw new Error('gd.data must be an array.');
    } // make sure traces exists


    if (typeof traces === 'undefined') {
      throw new Error('traces must be defined.');
    } // make sure traces is an array


    if (!Array.isArray(traces)) {
      traces = [traces];
    } // make sure each value in traces is an object


    for (i = 0; i < traces.length; i++) {
      value = traces[i];

      if (typeof value !== 'object' || Array.isArray(value) || value === null) {
        throw new Error('all values in traces array must be non-array objects');
      }
    } // make sure we have an index for each trace


    if (typeof newIndices !== 'undefined' && !Array.isArray(newIndices)) {
      newIndices = [newIndices];
    }

    if (typeof newIndices !== 'undefined' && newIndices.length !== traces.length) {
      throw new Error('if indices is specified, traces.length must equal indices.length');
    }
  }
  /**
   * A private function to reduce the type checking clutter in spliceTraces.
   * Get all update Properties from gd.data. Validate inputs and outputs.
   * Used by prependTrace and extendTraces
   *
   * @param gd
   * @param update
   * @param indices
   * @param maxPoints
   */


  function assertExtendTracesArgs(gd, update, indices, maxPoints) {
    var maxPointsIsObject = lib_1.isPlainObject(maxPoints);

    if (!Array.isArray(gd.data)) {
      throw new Error('gd.data must be an array');
    }

    if (!lib_1.isPlainObject(update)) {
      throw new Error('update must be a key:value object');
    }

    if (typeof indices === 'undefined') {
      throw new Error('indices must be an integer or array of integers');
    }

    assertIndexArray(gd, indices, 'indices');

    for (var key in update) {
      /*
       * Verify that the attribute to be updated contains as many trace updates
       * as indices. Failure must result in throw and no-op
       */
      if (!Array.isArray(update[key]) || update[key].length !== indices.length) {
        throw new Error('attribute ' + key + ' must be an array of length equal to indices array length');
      }
      /*
       * if maxPoints is an object it must match keys and array lengths of 'update' 1:1
       */


      if (maxPointsIsObject && (!(key in maxPoints) || !Array.isArray(maxPoints[key]) || maxPoints[key].length !== update[key].length)) {
        throw new Error('when maxPoints is set as a key:value object it must contain a 1:1 ' + 'corrispondence with the keys and number of traces in the update object');
      }
    }
  }
  /**
   * A private function to reduce the type checking clutter in spliceTraces.
   *
   * @param {Object|HTMLDivElement} gd
   * @param {Object} update
   * @param {Number[]} indices
   * @param {Number||Object} maxPoints
   * @return {Object[]}
   */


  function getExtendProperties(gd, update, indices, maxPoints) {
    var maxPointsIsObject = lib_1.isPlainObject(maxPoints);
    var updateProps = [];
    var trace, target, prop, insert, maxp; // allow scalar index to represent a single trace position

    if (!Array.isArray(indices)) indices = [indices]; // negative indices are wrapped around to their positive value. Equivalent to python indexing.

    indices = positivifyIndices(indices, gd.data.length - 1); // loop through all update keys and traces and harvest validated data.

    for (var key in update) {
      for (var j = 0; j < indices.length; j++) {
        /*
         * Choose the trace indexed by the indices map argument and get the prop setter-getter
         * instance that references the key and value for this particular trace.
         */
        trace = gd.data[indices[j]];
        prop = nestedProperty(trace, key);
        /*
         * Target is the existing gd.data.trace.dataArray value like "x" or "marker.size"
         * Target must exist as an Array to allow the extend operation to be performed.
         */

        target = prop.get();
        insert = update[key][j];

        if (!lib_1.isArrayOrTypedArray(insert)) {
          throw new Error('attribute: ' + key + ' index: ' + j + ' must be an array');
        }

        if (!lib_1.isArrayOrTypedArray(target)) {
          throw new Error('cannot extend missing or non-array attribute: ' + key);
        }

        if (target.constructor !== insert.constructor) {
          throw new Error('cannot extend array with an array of a different type: ' + key);
        }
        /*
         * maxPoints may be an object map or a scalar. If object select the key:value, else
         * Use the scalar maxPoints for all key and trace combinations.
         */


        maxp = maxPointsIsObject ? maxPoints[key][j] : maxPoints; // could have chosen null here, -1 just tells us to not take a window

        if (!fastIsnumeric(maxp)) maxp = -1;
        /*
         * Wrap the nestedProperty in an object containing required data
         * for lengthening and windowing this particular trace - key combination.
         * Flooring maxp mirrors the behaviour of floats in the Array.slice JSnative function.
         */

        updateProps.push({
          prop: prop,
          target: target,
          insert: insert,
          maxp: Math.floor(maxp)
        });
      }
    } // all target and insertion data now validated


    return updateProps;
  }
  /**
   * A private function to key Extend and Prepend traces DRY
   *
   * @param {Object|HTMLDivElement} gd
   * @param {Object} update
   * @param {Number[]} indices
   * @param {Number||Object} maxPoints
   * @param {Function} updateArray
   * @return {Object}
   */


  function spliceTraces(gd, update, indices, maxPoints, updateArray) {
    assertExtendTracesArgs(gd, update, indices, maxPoints);
    var updateProps = getExtendProperties(gd, update, indices, maxPoints);
    var undoUpdate = {};
    var undoPoints = {};

    for (var i = 0; i < updateProps.length; i++) {
      var prop = updateProps[i].prop;
      var maxp = updateProps[i].maxp; // return new array and remainder

      var out = updateArray(updateProps[i].target, updateProps[i].insert, maxp);
      prop.set(out[0]); // build the inverse update object for the undo operation

      if (!Array.isArray(undoUpdate[prop.astr])) undoUpdate[prop.astr] = [];
      undoUpdate[prop.astr].push(out[1]); // build the matching maxPoints undo object containing original trace lengths

      if (!Array.isArray(undoPoints[prop.astr])) undoPoints[prop.astr] = [];
      undoPoints[prop.astr].push(updateProps[i].target.length);
    }

    return {
      update: undoUpdate,
      maxPoints: undoPoints
    };
  }

  function concatTypedArray(arr0, arr1) {
    var arr2 = new arr0.constructor(arr0.length + arr1.length);
    arr2.set(arr0);
    arr2.set(arr1, arr0.length);
    return arr2;
  }
  /**
   * extend && prepend traces at indices with update arrays, window trace lengths to maxPoints
   *
   * Extend and Prepend have identical APIs. Prepend inserts an array at the head while Extend
   * inserts an array off the tail. Prepend truncates the tail of the array - counting maxPoints
   * from the head, whereas Extend truncates the head of the array, counting backward maxPoints
   * from the tail.
   *
   * If maxPoints is undefined, nonNumeric, negative or greater than extended trace length no
   * truncation / windowing will be performed. If its zero, well the whole trace is truncated.
   *
   * @param {Object|HTMLDivElement} gd The graph div
   * @param {Object} update The key:array map of target attributes to extend
   * @param {Number|Number[]} indices The locations of traces to be extended
   * @param {Number|Object} [maxPoints] Number of points for trace window after lengthening.
   *
   */


  function extendTraces(gd, update, indices, maxPoints) {
    gd = lib_1.getGraphDiv(gd);

    function updateArray(target, insert, maxp) {
      var newArray, remainder;

      if (lib_1.isTypedArray(target)) {
        if (maxp < 0) {
          var none = new target.constructor(0);
          var both = concatTypedArray(target, insert);

          if (maxp < 0) {
            newArray = both;
            remainder = none;
          } else {
            newArray = none;
            remainder = both;
          }
        } else {
          newArray = new target.constructor(maxp);
          remainder = new target.constructor(target.length + insert.length - maxp);

          if (maxp === insert.length) {
            newArray.set(insert);
            remainder.set(target);
          } else if (maxp < insert.length) {
            var numberOfItemsFromInsert = insert.length - maxp;
            newArray.set(insert.subarray(numberOfItemsFromInsert));
            remainder.set(target);
            remainder.set(insert.subarray(0, numberOfItemsFromInsert), target.length);
          } else {
            var numberOfItemsFromTarget = maxp - insert.length;
            var targetBegin = target.length - numberOfItemsFromTarget;
            newArray.set(target.subarray(targetBegin));
            newArray.set(insert, numberOfItemsFromTarget);
            remainder.set(target.subarray(0, targetBegin));
          }
        }
      } else {
        newArray = target.concat(insert);
        remainder = maxp >= 0 && maxp < newArray.length ? newArray.splice(0, newArray.length - maxp) : [];
      }

      return [newArray, remainder];
    }

    var undo = spliceTraces(gd, update, indices, maxPoints, updateArray);
    var promise = exports.redraw(gd);
    var undoArgs = [gd, undo.update, indices, undo.maxPoints];
    queue_1.add(gd, exports.prependTraces, undoArgs, extendTraces, arguments);
    return promise;
  }

  function prependTraces(gd, update, indices, maxPoints) {
    gd = lib_1.getGraphDiv(gd);

    function updateArray(target, insert, maxp) {
      var newArray, remainder;

      if (lib_1.isTypedArray(target)) {
        if (maxp <= 0) {
          var none = new target.constructor(0);
          var both = concatTypedArray(insert, target);

          if (maxp < 0) {
            newArray = both;
            remainder = none;
          } else {
            newArray = none;
            remainder = both;
          }
        } else {
          newArray = new target.constructor(maxp);
          remainder = new target.constructor(target.length + insert.length - maxp);

          if (maxp === insert.length) {
            newArray.set(insert);
            remainder.set(target);
          } else if (maxp < insert.length) {
            var numberOfItemsFromInsert = insert.length - maxp;
            newArray.set(insert.subarray(0, numberOfItemsFromInsert));
            remainder.set(insert.subarray(numberOfItemsFromInsert));
            remainder.set(target, numberOfItemsFromInsert);
          } else {
            var numberOfItemsFromTarget = maxp - insert.length;
            newArray.set(insert);
            newArray.set(target.subarray(0, numberOfItemsFromTarget), insert.length);
            remainder.set(target.subarray(numberOfItemsFromTarget));
          }
        }
      } else {
        newArray = insert.concat(target);
        remainder = maxp >= 0 && maxp < newArray.length ? newArray.splice(maxp, newArray.length) : [];
      }

      return [newArray, remainder];
    }

    var undo = spliceTraces(gd, update, indices, maxPoints, updateArray);
    var promise = exports.redraw(gd);
    var undoArgs = [gd, undo.update, indices, undo.maxPoints];
    queue_1.add(gd, exports.extendTraces, undoArgs, prependTraces, arguments);
    return promise;
  }
  /**
   * Add data traces to an existing graph div.
   *
   * @param {Object|HTMLDivElement} gd The graph div
   * @param {Object[]} gd.data The array of traces we're adding to
   * @param {Object[]|Object} traces The object or array of objects to add
   * @param {Number[]|Number} [newIndices=[gd.data.length]] Locations to add traces
   *
   */


  function addTraces(gd, traces, newIndices) {
    gd = lib_1.getGraphDiv(gd);
    var currentIndices = [];
    var undoFunc = exports.deleteTraces;
    var redoFunc = addTraces;
    var undoArgs = [gd, currentIndices];
    var redoArgs = [gd, traces]; // no newIndices here

    var i;
    var promise; // all validation is done elsewhere to remove clutter here

    checkAddTracesArgs(gd, traces, newIndices); // make sure traces is an array

    if (!Array.isArray(traces)) {
      traces = [traces];
    } // make sure traces do not repeat existing ones


    traces = traces.map(function (trace) {
      return lib_1.extendFlat({}, trace);
    });
    helpers$2.cleanData(traces); // add the traces to gd.data (no redrawing yet!)

    for (i = 0; i < traces.length; i++) {
      gd.data.push(traces[i]);
    } // to continue, we need to call moveTraces which requires currentIndices


    for (i = 0; i < traces.length; i++) {
      currentIndices.push(-traces.length + i);
    } // if the user didn't define newIndices, they just want the traces appended
    // i.e., we can simply redraw and be done


    if (typeof newIndices === 'undefined') {
      promise = exports.redraw(gd);
      queue_1.add(gd, undoFunc, undoArgs, redoFunc, redoArgs);
      return promise;
    } // make sure indices is property defined


    if (!Array.isArray(newIndices)) {
      newIndices = [newIndices];
    }

    try {
      // this is redundant, but necessary to not catch later possible errors!
      checkMoveTracesArgs(gd, currentIndices, newIndices);
    } catch (error) {
      // something went wrong, reset gd to be safe and rethrow error
      gd.data.splice(gd.data.length - traces.length, traces.length);
      throw error;
    } // if we're here, the user has defined specific places to place the new traces
    // this requires some extra work that moveTraces will do


    queue_1.startSequence(gd);
    queue_1.add(gd, undoFunc, undoArgs, redoFunc, redoArgs);
    promise = exports.moveTraces(gd, currentIndices, newIndices);
    queue_1.stopSequence(gd);
    return promise;
  }
  /**
   * Delete traces at `indices` from gd.data array.
   *
   * @param {Object|HTMLDivElement} gd The graph div
   * @param {Object[]} gd.data The array of traces we're removing from
   * @param {Number|Number[]} indices The indices
   */


  function deleteTraces(gd, indices) {
    gd = lib_1.getGraphDiv(gd);
    var traces = [];
    var undoFunc = exports.addTraces;
    var redoFunc = deleteTraces;
    var undoArgs = [gd, traces, indices];
    var redoArgs = [gd, indices];
    var i;
    var deletedTrace; // make sure indices are defined

    if (typeof indices === 'undefined') {
      throw new Error('indices must be an integer or array of integers.');
    } else if (!Array.isArray(indices)) {
      indices = [indices];
    }

    assertIndexArray(gd, indices, 'indices'); // convert negative indices to positive indices

    indices = positivifyIndices(indices, gd.data.length - 1); // we want descending here so that splicing later doesn't affect indexing

    indices.sort(lib_1.sorterDes);

    for (i = 0; i < indices.length; i += 1) {
      deletedTrace = gd.data.splice(indices[i], 1)[0];
      traces.push(deletedTrace);
    }

    var promise = exports.redraw(gd);
    queue_1.add(gd, undoFunc, undoArgs, redoFunc, redoArgs);
    return promise;
  }
  /**
   * Move traces at currentIndices array to locations in newIndices array.
   *
   * If newIndices is omitted, currentIndices will be moved to the end. E.g.,
   * these are equivalent:
   *
   * Plotly.moveTraces(gd, [1, 2, 3], [-3, -2, -1])
   * Plotly.moveTraces(gd, [1, 2, 3])
   *
   * @param {Object|HTMLDivElement} gd The graph div
   * @param {Object[]} gd.data The array of traces we're removing from
   * @param {Number|Number[]} currentIndices The locations of traces to be moved
   * @param {Number|Number[]} [newIndices] The locations to move traces to
   *
   * Example calls:
   *
   *      // move trace i to location x
   *      Plotly.moveTraces(gd, i, x)
   *
   *      // move trace i to end of array
   *      Plotly.moveTraces(gd, i)
   *
   *      // move traces i, j, k to end of array (i != j != k)
   *      Plotly.moveTraces(gd, [i, j, k])
   *
   *      // move traces [i, j, k] to [x, y, z] (i != j != k) (x != y != z)
   *      Plotly.moveTraces(gd, [i, j, k], [x, y, z])
   *
   *      // reorder all traces (assume there are 5--a, b, c, d, e)
   *      Plotly.moveTraces(gd, [b, d, e, a, c])  // same as 'move to end'
   */


  function moveTraces(gd, currentIndices, newIndices) {
    gd = lib_1.getGraphDiv(gd);
    var newData = [];
    var movingTraceMap = [];
    var undoFunc = moveTraces;
    var redoFunc = moveTraces;
    var undoArgs = [gd, newIndices, currentIndices];
    var redoArgs = [gd, currentIndices, newIndices];
    var i; // to reduce complexity here, check args elsewhere
    // this throws errors where appropriate

    checkMoveTracesArgs(gd, currentIndices, newIndices); // make sure currentIndices is an array

    currentIndices = Array.isArray(currentIndices) ? currentIndices : [currentIndices]; // if undefined, define newIndices to point to the end of gd.data array

    if (typeof newIndices === 'undefined') {
      newIndices = [];

      for (i = 0; i < currentIndices.length; i++) {
        newIndices.push(-currentIndices.length + i);
      }
    } // make sure newIndices is an array if it's user-defined


    newIndices = Array.isArray(newIndices) ? newIndices : [newIndices]; // convert negative indices to positive indices (they're the same length)

    currentIndices = positivifyIndices(currentIndices, gd.data.length - 1);
    newIndices = positivifyIndices(newIndices, gd.data.length - 1); // at this point, we've coerced the index arrays into predictable forms
    // get the traces that aren't being moved around

    for (i = 0; i < gd.data.length; i++) {
      // if index isn't in currentIndices, include it in ignored!
      if (currentIndices.indexOf(i) === -1) {
        newData.push(gd.data[i]);
      }
    } // get a mapping of indices to moving traces


    for (i = 0; i < currentIndices.length; i++) {
      movingTraceMap.push({
        newIndex: newIndices[i],
        trace: gd.data[currentIndices[i]]
      });
    } // reorder this mapping by newIndex, ascending


    movingTraceMap.sort(function (a, b) {
      return a.newIndex - b.newIndex;
    }); // now, add the moving traces back in, in order!

    for (i = 0; i < movingTraceMap.length; i += 1) {
      newData.splice(movingTraceMap[i].newIndex, 0, movingTraceMap[i].trace);
    }

    gd.data = newData;
    var promise = exports.redraw(gd);
    queue_1.add(gd, undoFunc, undoArgs, redoFunc, redoArgs);
    return promise;
  }
  /**
   * restyle: update trace attributes of an existing plot
   *
   * Can be called two ways.
   *
   * Signature 1:
   * @param {String | HTMLDivElement} gd
   *  the id or DOM element of the graph container div
   * @param {String} astr
   *  attribute string (like `'marker.symbol'`) to update
   * @param {*} val
   *  value to give this attribute
   * @param {Number[] | Number} [traces]
   *  integer or array of integers for the traces to alter (all if omitted)
   *
   * Signature 2:
   * @param {String | HTMLDivElement} gd
   *  (as in signature 1)
   * @param {Object} aobj
   *  attribute object `{astr1: val1, astr2: val2 ...}`
   *  allows setting multiple attributes simultaneously
   * @param {Number[] | Number} [traces]
   *  (as in signature 1)
   *
   * `val` (or `val1`, `val2` ... in the object form) can be an array,
   * to apply different values to each trace.
   *
   * If the array is too short, it will wrap around (useful for
   * style files that want to specify cyclical default values).
   */


  function restyle(gd, astr, val, _traces) {
    gd = lib_1.getGraphDiv(gd);
    helpers$2.clearPromiseQueue(gd);
    var aobj = {};
    if (typeof astr === 'string') aobj[astr] = val;else if (lib_1.isPlainObject(astr)) {
      // the 3-arg form
      aobj = lib_1.extendFlat({}, astr);
      if (_traces === undefined) _traces = val;
    } else {
      lib_1.warn('Restyle fail.', astr, val, _traces);
      return Promise.reject();
    }
    if (Object.keys(aobj).length) gd.changed = true;
    var traces = helpers$2.coerceTraceIndices(gd, _traces);

    var specs = _restyle(gd, aobj, traces);

    var flags = specs.flags; // clear calcdata and/or axis types if required so they get regenerated

    if (flags.calc) gd.calcdata = undefined;
    if (flags.clearAxisTypes) helpers$2.clearAxisTypes(gd, traces, {}); // fill in redraw sequence

    var seq = [];

    if (flags.fullReplot) {
      seq.push(exports._doPlot);
    } else {
      seq.push(plots_1.previousPromises); // maybe only call Plots.supplyDataDefaults in the splom case,
      // to skip over long and slow axes defaults

      plots_1.supplyDefaults(gd);

      if (flags.markerSize) {
        plots_1.doCalcdata(gd);
        addAxRangeSequence(seq); // TODO
        // if all axes have autorange:false, then
        // proceed to subroutines.doTraceStyle(),
        // otherwise we must go through addAxRangeSequence,
        // which in general must redraws 'all' axes
      }

      if (flags.style) seq.push(subroutines.doTraceStyle);
      if (flags.colorbars) seq.push(subroutines.doColorBars);
      seq.push(emitAfterPlot);
    }

    seq.push(plots_1.rehover, plots_1.redrag);
    queue_1.add(gd, restyle, [gd, specs.undoit, specs.traces], restyle, [gd, specs.redoit, specs.traces]);
    var plotDone = lib_1.syncOrAsync(seq, gd);
    if (!plotDone || !plotDone.then) plotDone = Promise.resolve();
    return plotDone.then(function () {
      gd.emit('plotly_restyle', specs.eventData);
      return gd;
    });
  } // for undo: undefined initial vals must be turned into nulls
  // so that we unset rather than ignore them


  function undefinedToNull(val) {
    if (val === undefined) return null;
    return val;
  }
  /**
   * Factory function to wrap nestedProperty with GUI edits if necessary
   * with GUI edits we add an optional prefix to the nestedProperty constructor
   * to prepend to the attribute string in the preGUI store.
   */


  function makeNP(preGUI, guiEditFlag) {
    if (!guiEditFlag) return nestedProperty;
    return function (container, attr, prefix) {
      var np = nestedProperty(container, attr);
      var npSet = np.set;

      np.set = function (val) {
        var fullAttr = (prefix || '') + attr;
        storeCurrent(fullAttr, np.get(), val, preGUI);
        npSet(val);
      };

      return np;
    };
  }

  function storeCurrent(attr, val, newVal, preGUI) {
    if (Array.isArray(val) || Array.isArray(newVal)) {
      var arrayVal = Array.isArray(val) ? val : [];
      var arrayNew = Array.isArray(newVal) ? newVal : [];
      var maxLen = Math.max(arrayVal.length, arrayNew.length);

      for (var i = 0; i < maxLen; i++) {
        storeCurrent(attr + '[' + i + ']', arrayVal[i], arrayNew[i], preGUI);
      }
    } else if (lib_1.isPlainObject(val) || lib_1.isPlainObject(newVal)) {
      var objVal = lib_1.isPlainObject(val) ? val : {};
      var objNew = lib_1.isPlainObject(newVal) ? newVal : {};
      var objBoth = lib_1.extendFlat({}, objVal, objNew);

      for (var key in objBoth) {
        storeCurrent(attr + '.' + key, objVal[key], objNew[key], preGUI);
      }
    } else if (preGUI[attr] === undefined) {
      preGUI[attr] = undefinedToNull(val);
    }
  }
  /**
   * storeDirectGUIEdit: for routines that skip restyle/relayout and mock it
   * by emitting a plotly_restyle or plotly_relayout event, this routine
   * keeps track of the initial state in _preGUI for use by uirevision
   * Does *not* apply these changes to data/layout - that's the responsibility
   * of the calling routine.
   *
   * @param {object} container: the input attributes container (eg `layout` or a `trace`)
   * @param {object} preGUI: where original values should be stored, either
   *     `layout._preGUI` or `layout._tracePreGUI[uid]`
   * @param {object} edits: the {attr: val} object as normally passed to `relayout` etc
   */


  function _storeDirectGUIEdit(container, preGUI, edits) {
    for (var attr in edits) {
      var np = nestedProperty(container, attr);
      storeCurrent(attr, np.get(), edits[attr], preGUI);
    }
  }

  function _restyle(gd, aobj, traces) {
    var fullLayout = gd._fullLayout;
    var fullData = gd._fullData;
    var data = gd.data;
    var guiEditFlag = fullLayout._guiEditing;
    var layoutNP = makeNP(fullLayout._preGUI, guiEditFlag);
    var eventData = lib_1.extendDeepAll({}, aobj);
    var i;
    cleanDeprecatedAttributeKeys(aobj); // initialize flags

    var flags = edit_types.traceFlags(); // copies of the change (and previous values of anything affected)
    // for the undo / redo queue

    var redoit = {};
    var undoit = {};
    var axlist; // make a new empty vals array for undoit

    function a0() {
      return traces.map(function () {
        return undefined;
      });
    } // for autoranging multiple axes


    function addToAxlist(axid) {
      var axName = axes_1.id2name(axid);
      if (axlist.indexOf(axName) === -1) axlist.push(axName);
    }

    function autorangeAttr(axName) {
      return 'LAYOUT' + axName + '.autorange';
    }

    function rangeAttr(axName) {
      return 'LAYOUT' + axName + '.range';
    }

    function getFullTrace(traceIndex) {
      // usually fullData maps 1:1 onto data, but with groupby transforms
      // the fullData index can be greater. Take the *first* matching trace.
      for (var j = traceIndex; j < fullData.length; j++) {
        if (fullData[j]._input === data[traceIndex]) return fullData[j];
      } // should never get here - and if we *do* it should cause an error
      // later on undefined fullTrace is passed to nestedProperty.

    } // for attrs that interact (like scales & autoscales), save the
    // old vals before making the change
    // val=undefined will not set a value, just record what the value was.
    // val=null will delete the attribute
    // attr can be an array to set several at once (all to the same val)


    function doextra(attr, val, i) {
      if (Array.isArray(attr)) {
        attr.forEach(function (a) {
          doextra(a, val, i);
        });
        return;
      } // quit if explicitly setting this elsewhere


      if (attr in aobj || helpers$2.hasParent(aobj, attr)) return;
      var extraparam;

      if (attr.substr(0, 6) === 'LAYOUT') {
        extraparam = layoutNP(gd.layout, attr.replace('LAYOUT', ''));
      } else {
        var tracei = traces[i];

        var preGUI = fullLayout._tracePreGUI[getFullTrace(tracei)._fullInput.uid];

        extraparam = makeNP(preGUI, guiEditFlag)(data[tracei], attr);
      }

      if (!(attr in undoit)) {
        undoit[attr] = a0();
      }

      if (undoit[attr][i] === undefined) {
        undoit[attr][i] = undefinedToNull(extraparam.get());
      }

      if (val !== undefined) {
        extraparam.set(val);
      }
    }

    function allBins(binAttr) {
      return function (j) {
        return fullData[j][binAttr];
      };
    }

    function arrayBins(binAttr) {
      return function (vij, j) {
        return vij === false ? fullData[traces[j]][binAttr] : null;
      };
    } // now make the changes to gd.data (and occasionally gd.layout)
    // and figure out what kind of graphics update we need to do


    for (var ai in aobj) {
      if (helpers$2.hasParent(aobj, ai)) {
        throw new Error('cannot set ' + ai + ' and a parent attribute simultaneously');
      }

      var vi = aobj[ai];
      var cont;
      var contFull;
      var param;
      var oldVal;
      var newVal;
      var valObject; // Backward compatibility shim for turning histogram autobin on,
      // or freezing previous autobinned values.
      // Replace obsolete `autobin(x|y): true` with `(x|y)bins: null`
      // and `autobin(x|y): false` with the `(x|y)bins` in `fullData`

      if (ai === 'autobinx' || ai === 'autobiny') {
        ai = ai.charAt(ai.length - 1) + 'bins';
        if (Array.isArray(vi)) vi = vi.map(arrayBins(ai));else if (vi === false) vi = traces.map(allBins(ai));else vi = null;
      }

      redoit[ai] = vi;

      if (ai.substr(0, 6) === 'LAYOUT') {
        param = layoutNP(gd.layout, ai.replace('LAYOUT', ''));
        undoit[ai] = [undefinedToNull(param.get())]; // since we're allowing val to be an array, allow it here too,
        // even though that's meaningless

        param.set(Array.isArray(vi) ? vi[0] : vi); // ironically, the layout attrs in restyle only require replot,
        // not relayout

        flags.calc = true;
        continue;
      } // set attribute in gd.data


      undoit[ai] = a0();

      for (i = 0; i < traces.length; i++) {
        cont = data[traces[i]];
        contFull = getFullTrace(traces[i]);
        var preGUI = fullLayout._tracePreGUI[contFull._fullInput.uid];
        param = makeNP(preGUI, guiEditFlag)(cont, ai);
        oldVal = param.get();
        newVal = Array.isArray(vi) ? vi[i % vi.length] : vi;
        if (newVal === undefined) continue;
        var finalPart = param.parts[param.parts.length - 1];
        var prefix = ai.substr(0, ai.length - finalPart.length - 1);
        var prefixDot = prefix ? prefix + '.' : '';
        var innerContFull = prefix ? nestedProperty(contFull, prefix).get() : contFull;
        valObject = plot_schema.getTraceValObject(contFull, param.parts);

        if (valObject && valObject.impliedEdits && newVal !== null) {
          for (var impliedKey in valObject.impliedEdits) {
            doextra(lib_1.relativeAttr(ai, impliedKey), valObject.impliedEdits[impliedKey], i);
          }
        } else if ((finalPart === 'thicknessmode' || finalPart === 'lenmode') && oldVal !== newVal && (newVal === 'fraction' || newVal === 'pixels') && innerContFull) {
          // changing colorbar size modes,
          // make the resulting size not change
          // note that colorbar fractional sizing is based on the
          // original plot size, before anything (like a colorbar)
          // increases the margins
          var gs = fullLayout._size;
          var orient = innerContFull.orient;
          var topOrBottom = orient === 'top' || orient === 'bottom';

          if (finalPart === 'thicknessmode') {
            var thicknorm = topOrBottom ? gs.h : gs.w;
            doextra(prefixDot + 'thickness', innerContFull.thickness * (newVal === 'fraction' ? 1 / thicknorm : thicknorm), i);
          } else {
            var lennorm = topOrBottom ? gs.w : gs.h;
            doextra(prefixDot + 'len', innerContFull.len * (newVal === 'fraction' ? 1 / lennorm : lennorm), i);
          }
        } else if (ai === 'type' && (newVal === 'pie' !== (oldVal === 'pie') || newVal === 'funnelarea' !== (oldVal === 'funnelarea'))) {
          var labelsTo = 'x';
          var valuesTo = 'y';

          if ((newVal === 'bar' || oldVal === 'bar') && cont.orientation === 'h') {
            labelsTo = 'y';
            valuesTo = 'x';
          }

          lib_1.swapAttrs(cont, ['?', '?src'], 'labels', labelsTo);
          lib_1.swapAttrs(cont, ['d?', '?0'], 'label', labelsTo);
          lib_1.swapAttrs(cont, ['?', '?src'], 'values', valuesTo);

          if (oldVal === 'pie' || oldVal === 'funnelarea') {
            nestedProperty(cont, 'marker.color').set(nestedProperty(cont, 'marker.colors').get()); // super kludgy - but if all pies are gone we won't remove them otherwise

            fullLayout._pielayer.selectAll('g.trace').remove();
          } else if (registry.traceIs(cont, 'cartesian')) {
            nestedProperty(cont, 'marker.colors').set(nestedProperty(cont, 'marker.color').get());
          }
        }

        undoit[ai][i] = undefinedToNull(oldVal); // set the new value - if val is an array, it's one el per trace
        // first check for attributes that get more complex alterations

        var swapAttrs = ['swapxy', 'swapxyaxes', 'orientation', 'orientationaxes'];

        if (swapAttrs.indexOf(ai) !== -1) {
          // setting an orientation: make sure it's changing
          // before we swap everything else
          if (ai === 'orientation') {
            param.set(newVal); // obnoxious that we need this level of coupling... but in order to
            // properly handle setting orientation to `null` we need to mimic
            // the logic inside Bars.supplyDefaults for default orientation

            var defaultOrientation = cont.x && !cont.y ? 'h' : 'v';

            if ((param.get() || defaultOrientation) === contFull.orientation) {
              continue;
            }
          } else if (ai === 'orientationaxes') {
            // orientationaxes has no value,
            // it flips everything and the axes
            cont.orientation = {
              v: 'h',
              h: 'v'
            }[contFull.orientation];
          }

          helpers$2.swapXYData(cont);
          flags.calc = flags.clearAxisTypes = true;
        } else if (plots_1.dataArrayContainers.indexOf(param.parts[0]) !== -1) {
          // TODO: use manageArrays.applyContainerArrayChanges here too
          helpers$2.manageArrayContainers(param, newVal, undoit);
          flags.calc = true;
        } else {
          if (valObject) {
            // must redo calcdata when restyling array values of arrayOk attributes
            // ... but no need to this for regl-based traces
            if (valObject.arrayOk && !registry.traceIs(contFull, 'regl') && (lib_1.isArrayOrTypedArray(newVal) || lib_1.isArrayOrTypedArray(oldVal))) {
              flags.calc = true;
            } else edit_types.update(flags, valObject);
          } else {
            /*
             * if we couldn't find valObject,  assume a full recalc.
             * This can happen if you're changing type and making
             * some other edits too, so the modules we're
             * looking at don't have these attributes in them.
             */
            flags.calc = true;
          } // all the other ones, just modify that one attribute


          param.set(newVal);
        }
      } // swap the data attributes of the relevant x and y axes?


      if (['swapxyaxes', 'orientationaxes'].indexOf(ai) !== -1) {
        axes_1.swap(gd, traces);
      } // swap hovermode if set to "compare x/y data"


      if (ai === 'orientationaxes') {
        var hovermode = nestedProperty(gd.layout, 'hovermode');
        var h = hovermode.get();

        if (h === 'x') {
          hovermode.set('y');
        } else if (h === 'y') {
          hovermode.set('x');
        } else if (h === 'x unified') {
          hovermode.set('y unified');
        } else if (h === 'y unified') {
          hovermode.set('x unified');
        }
      } // Major enough changes deserve autoscale and
      // non-reversed axes so people don't get confused
      //
      // Note: autobin (or its new analog bin clearing) is not included here
      // since we're not pushing bins back to gd.data, so if we have bin
      // info it was explicitly provided by the user.


      if (['orientation', 'type'].indexOf(ai) !== -1) {
        axlist = [];

        for (i = 0; i < traces.length; i++) {
          var trace = data[traces[i]];

          if (registry.traceIs(trace, 'cartesian')) {
            addToAxlist(trace.xaxis || 'x');
            addToAxlist(trace.yaxis || 'y');
          }
        }

        doextra(axlist.map(autorangeAttr), true, 0);
        doextra(axlist.map(rangeAttr), [0, 1], 0);
      }
    }

    if (flags.calc || flags.plot) {
      flags.fullReplot = true;
    }

    return {
      flags: flags,
      undoit: undoit,
      redoit: redoit,
      traces: traces,
      eventData: lib_1.extendDeepNoArrays([], [eventData, traces])
    };
  }
  /**
   * Converts deprecated attribute keys to
   * the current API to ensure backwards compatibility.
   *
   * This is needed for the update mechanism to determine which
   * subroutines to run based on the actual attribute
   * definitions (that don't include the deprecated ones).
   *
   * E.g. Maps {'xaxis.title': 'A chart'} to {'xaxis.title.text': 'A chart'}
   * and {titlefont: {...}} to {'title.font': {...}}.
   *
   * @param aobj
   */


  function cleanDeprecatedAttributeKeys(aobj) {
    var oldAxisTitleRegex = lib_1.counterRegex('axis', '\.title', false, false);
    var colorbarRegex = /colorbar\.title$/;
    var keys = Object.keys(aobj);
    var i, key, value;

    for (i = 0; i < keys.length; i++) {
      key = keys[i];
      value = aobj[key];

      if ((key === 'title' || oldAxisTitleRegex.test(key) || colorbarRegex.test(key)) && (typeof value === 'string' || typeof value === 'number')) {
        replace(key, key.replace('title', 'title.text'));
      } else if (key.indexOf('titlefont') > -1 && key.indexOf('grouptitlefont') === -1) {
        replace(key, key.replace('titlefont', 'title.font'));
      } else if (key.indexOf('titleposition') > -1) {
        replace(key, key.replace('titleposition', 'title.position'));
      } else if (key.indexOf('titleside') > -1) {
        replace(key, key.replace('titleside', 'title.side'));
      } else if (key.indexOf('titleoffset') > -1) {
        replace(key, key.replace('titleoffset', 'title.offset'));
      }
    }

    function replace(oldAttrStr, newAttrStr) {
      aobj[newAttrStr] = aobj[oldAttrStr];
      delete aobj[oldAttrStr];
    }
  }
  /**
   * relayout: update layout attributes of an existing plot
   *
   * Can be called two ways:
   *
   * Signature 1:
   * @param {String | HTMLDivElement} gd
   *  the id or dom element of the graph container div
   * @param {String} astr
   *  attribute string (like `'xaxis.range[0]'`) to update
   * @param {*} val
   *  value to give this attribute
   *
   * Signature 2:
   * @param {String | HTMLDivElement} gd
   *  (as in signature 1)
   * @param {Object} aobj
   *  attribute object `{astr1: val1, astr2: val2 ...}`
   *  allows setting multiple attributes simultaneously
   */


  function relayout(gd, astr, val) {
    gd = lib_1.getGraphDiv(gd);
    helpers$2.clearPromiseQueue(gd);
    var aobj = {};

    if (typeof astr === 'string') {
      aobj[astr] = val;
    } else if (lib_1.isPlainObject(astr)) {
      aobj = lib_1.extendFlat({}, astr);
    } else {
      lib_1.warn('Relayout fail.', astr, val);
      return Promise.reject();
    }

    if (Object.keys(aobj).length) gd.changed = true;

    var specs = _relayout(gd, aobj);

    var flags = specs.flags; // clear calcdata if required

    if (flags.calc) gd.calcdata = undefined; // fill in redraw sequence
    // even if we don't have anything left in aobj,
    // something may have happened within relayout that we
    // need to wait for

    var seq = [plots_1.previousPromises];

    if (flags.layoutReplot) {
      seq.push(subroutines.layoutReplot);
    } else if (Object.keys(aobj).length) {
      axRangeSupplyDefaultsByPass(gd, flags, specs) || plots_1.supplyDefaults(gd);
      if (flags.legend) seq.push(subroutines.doLegend);
      if (flags.layoutstyle) seq.push(subroutines.layoutStyles);
      if (flags.axrange) addAxRangeSequence(seq, specs.rangesAltered);
      if (flags.ticks) seq.push(subroutines.doTicksRelayout);
      if (flags.modebar) seq.push(subroutines.doModeBar);
      if (flags.camera) seq.push(subroutines.doCamera);
      if (flags.colorbars) seq.push(subroutines.doColorBars);
      seq.push(emitAfterPlot);
    }

    seq.push(plots_1.rehover, plots_1.redrag);
    queue_1.add(gd, relayout, [gd, specs.undoit], relayout, [gd, specs.redoit]);
    var plotDone = lib_1.syncOrAsync(seq, gd);
    if (!plotDone || !plotDone.then) plotDone = Promise.resolve(gd);
    return plotDone.then(function () {
      gd.emit('plotly_relayout', specs.eventData);
      return gd;
    });
  } // Optimization mostly for large splom traces where
  // Plots.supplyDefaults can take > 100ms


  function axRangeSupplyDefaultsByPass(gd, flags, specs) {
    var fullLayout = gd._fullLayout;
    if (!flags.axrange) return false;

    for (var k in flags) {
      if (k !== 'axrange' && flags[k]) return false;
    }

    for (var axId in specs.rangesAltered) {
      var axName = axes_1.id2name(axId);
      var axIn = gd.layout[axName];
      var axOut = fullLayout[axName];
      axOut.autorange = axIn.autorange;

      if (axIn.range) {
        axOut.range = axIn.range.slice();
      }

      axOut.cleanRange();

      if (axOut._matchGroup) {
        for (var axId2 in axOut._matchGroup) {
          if (axId2 !== axId) {
            var ax2 = fullLayout[axes_1.id2name(axId2)];
            ax2.autorange = axOut.autorange;
            ax2.range = axOut.range.slice();
            ax2._input.range = axOut.range.slice();
          }
        }
      }
    }

    return true;
  }

  function addAxRangeSequence(seq, rangesAltered) {
    // N.B. leave as sequence of subroutines (for now) instead of
    // subroutine of its own so that finalDraw always gets
    // executed after drawData
    var drawAxes = rangesAltered ? function (gd) {
      var axIds = [];
      var skipTitle = true;

      for (var id in rangesAltered) {
        var ax = axes_1.getFromId(gd, id);
        axIds.push(id);

        if ((ax.ticklabelposition || '').indexOf('inside') !== -1) {
          if (ax._anchorAxis) {
            axIds.push(ax._anchorAxis._id);
          }
        }

        if (ax._matchGroup) {
          for (var id2 in ax._matchGroup) {
            if (!rangesAltered[id2]) {
              axIds.push(id2);
            }
          }
        }

        if (ax.automargin) skipTitle = false;
      }

      return axes_1.draw(gd, axIds, {
        skipTitle: skipTitle
      });
    } : function (gd) {
      return axes_1.draw(gd, 'redraw');
    };
    seq.push(clearSelect, subroutines.doAutoRangeAndConstraints, drawAxes, subroutines.drawData, subroutines.finalDraw);
  }

  var AX_RANGE_RE = /^[xyz]axis[0-9]*\.range(\[[0|1]\])?$/;
  var AX_AUTORANGE_RE = /^[xyz]axis[0-9]*\.autorange$/;
  var AX_DOMAIN_RE = /^[xyz]axis[0-9]*\.domain(\[[0|1]\])?$/;

  function _relayout(gd, aobj) {
    var layout = gd.layout;
    var fullLayout = gd._fullLayout;
    var guiEditFlag = fullLayout._guiEditing;
    var layoutNP = makeNP(fullLayout._preGUI, guiEditFlag);
    var keys = Object.keys(aobj);
    var axes = axes_1.list(gd);
    var eventData = lib_1.extendDeepAll({}, aobj);
    var arrayEdits = {};
    var arrayStr, i, j;
    cleanDeprecatedAttributeKeys(aobj);
    keys = Object.keys(aobj); // look for 'allaxes', split out into all axes
    // in case of 3D the axis are nested within a scene which is held in _id

    for (i = 0; i < keys.length; i++) {
      if (keys[i].indexOf('allaxes') === 0) {
        for (j = 0; j < axes.length; j++) {
          var scene = axes[j]._id.substr(1);

          var axisAttr = scene.indexOf('scene') !== -1 ? scene + '.' : '';
          var newkey = keys[i].replace('allaxes', axisAttr + axes[j]._name);
          if (!aobj[newkey]) aobj[newkey] = aobj[keys[i]];
        }

        delete aobj[keys[i]];
      }
    } // initialize flags


    var flags = edit_types.layoutFlags(); // copies of the change (and previous values of anything affected)
    // for the undo / redo queue

    var redoit = {};
    var undoit = {}; // for attrs that interact (like scales & autoscales), save the
    // old vals before making the change
    // val=undefined will not set a value, just record what the value was.
    // attr can be an array to set several at once (all to the same val)

    function doextra(attr, val) {
      if (Array.isArray(attr)) {
        attr.forEach(function (a) {
          doextra(a, val);
        });
        return;
      } // if we have another value for this attribute (explicitly or
      // via a parent) do not override with this auto-generated extra


      if (attr in aobj || helpers$2.hasParent(aobj, attr)) return;
      var p = layoutNP(layout, attr);

      if (!(attr in undoit)) {
        undoit[attr] = undefinedToNull(p.get());
      }

      if (val !== undefined) p.set(val);
    } // for constraint enforcement: keep track of all axes (as {id: name})
    // we're editing the (auto)range of, so we can tell the others constrained
    // to scale with them that it's OK for them to shrink


    var rangesAltered = {};
    var ax;

    function recordAlteredAxis(pleafPlus) {
      var axId = axes_1.name2id(pleafPlus.split('.')[0]);
      rangesAltered[axId] = 1;
      return axId;
    } // alter gd.layout


    for (var ai in aobj) {
      if (helpers$2.hasParent(aobj, ai)) {
        throw new Error('cannot set ' + ai + ' and a parent attribute simultaneously');
      }

      var p = layoutNP(layout, ai);
      var vi = aobj[ai];
      var plen = p.parts.length; // p.parts may end with an index integer if the property is an array

      var pend = plen - 1;

      while (pend > 0 && typeof p.parts[pend] !== 'string') pend--; // last property in chain (leaf node)


      var pleaf = p.parts[pend]; // leaf plus immediate parent

      var pleafPlus = p.parts[pend - 1] + '.' + pleaf; // trunk nodes (everything except the leaf)

      var ptrunk = p.parts.slice(0, pend).join('.');
      var parentIn = nestedProperty(gd.layout, ptrunk).get();
      var parentFull = nestedProperty(fullLayout, ptrunk).get();
      var vOld = p.get();
      if (vi === undefined) continue;
      redoit[ai] = vi; // axis reverse is special - it is its own inverse
      // op and has no flag.

      undoit[ai] = pleaf === 'reverse' ? vi : undefinedToNull(vOld);
      var valObject = plot_schema.getLayoutValObject(fullLayout, p.parts);

      if (valObject && valObject.impliedEdits && vi !== null) {
        for (var impliedKey in valObject.impliedEdits) {
          doextra(lib_1.relativeAttr(ai, impliedKey), valObject.impliedEdits[impliedKey]);
        }
      } // Setting width or height to null must reset the graph's width / height
      // back to its initial value as computed during the first pass in Plots.plotAutoSize.
      //
      // To do so, we must manually set them back here using the _initialAutoSize cache.
      // can't use impliedEdits for this because behavior depends on vi


      if (['width', 'height'].indexOf(ai) !== -1) {
        if (vi) {
          doextra('autosize', null); // currently we don't support autosize one dim only - so
          // explicitly set the other one. Note that doextra will
          // ignore this if the same relayout call also provides oppositeAttr

          var oppositeAttr = ai === 'height' ? 'width' : 'height';
          doextra(oppositeAttr, fullLayout[oppositeAttr]);
        } else {
          fullLayout[ai] = gd._initialAutoSize[ai];
        }
      } else if (ai === 'autosize') {
        // depends on vi here too, so again can't use impliedEdits
        doextra('width', vi ? null : fullLayout.width);
        doextra('height', vi ? null : fullLayout.height);
      } else if (pleafPlus.match(AX_RANGE_RE)) {
        // check autorange vs range
        recordAlteredAxis(pleafPlus);
        nestedProperty(fullLayout, ptrunk + '._inputRange').set(null);
      } else if (pleafPlus.match(AX_AUTORANGE_RE)) {
        recordAlteredAxis(pleafPlus);
        nestedProperty(fullLayout, ptrunk + '._inputRange').set(null);
        var axFull = nestedProperty(fullLayout, ptrunk).get();

        if (axFull._inputDomain) {
          // if we're autoranging and this axis has a constrained domain,
          // reset it so we don't get locked into a shrunken size
          axFull._input.domain = axFull._inputDomain.slice();
        }
      } else if (pleafPlus.match(AX_DOMAIN_RE)) {
        nestedProperty(fullLayout, ptrunk + '._inputDomain').set(null);
      } // toggling axis type between log and linear: we need to convert
      // positions for components that are still using linearized values,
      // not data values like newer components.
      // previously we did this for log <-> not-log, but now only do it
      // for log <-> linear


      if (pleaf === 'type') {
        ax = parentIn;
        var toLog = parentFull.type === 'linear' && vi === 'log';
        var fromLog = parentFull.type === 'log' && vi === 'linear';

        if (toLog || fromLog) {
          if (!ax || !ax.range) {
            // 2D never gets here, but 3D does
            // I don't think this is needed, but left here in case there
            // are edge cases I'm not thinking of.
            doextra(ptrunk + '.autorange', true);
          } else if (!parentFull.autorange) {
            // toggling log without autorange: need to also recalculate ranges
            // because log axes use linearized values for range endpoints
            var r0 = ax.range[0];
            var r1 = ax.range[1];

            if (toLog) {
              // if both limits are negative, autorange
              if (r0 <= 0 && r1 <= 0) {
                doextra(ptrunk + '.autorange', true);
              } // if one is negative, set it 6 orders below the other.


              if (r0 <= 0) r0 = r1 / 1e6;else if (r1 <= 0) r1 = r0 / 1e6; // now set the range values as appropriate

              doextra(ptrunk + '.range[0]', Math.log(r0) / Math.LN10);
              doextra(ptrunk + '.range[1]', Math.log(r1) / Math.LN10);
            } else {
              doextra(ptrunk + '.range[0]', Math.pow(10, r0));
              doextra(ptrunk + '.range[1]', Math.pow(10, r1));
            }
          } else if (toLog) {
            // just make sure the range is positive and in the right
            // order, it'll get recalculated later
            ax.range = ax.range[1] > ax.range[0] ? [1, 2] : [2, 1];
          } // clear polar view initial stash for radial range so that
          // value get recomputed in correct units


          if (Array.isArray(fullLayout._subplots.polar) && fullLayout._subplots.polar.length && fullLayout[p.parts[0]] && p.parts[1] === 'radialaxis') {
            delete fullLayout[p.parts[0]]._subplot.viewInitial['radialaxis.range'];
          } // Annotations and images also need to convert to/from linearized coords
          // Shapes do not need this :)


          registry.getComponentMethod('annotations', 'convertCoords')(gd, parentFull, vi, doextra);
          registry.getComponentMethod('images', 'convertCoords')(gd, parentFull, vi, doextra);
        } else {
          // any other type changes: the range from the previous type
          // will not make sense, so autorange it.
          doextra(ptrunk + '.autorange', true);
          doextra(ptrunk + '.range', null);
        }

        nestedProperty(fullLayout, ptrunk + '._inputRange').set(null);
      } else if (pleaf.match(AX_NAME_PATTERN)) {
        var fullProp = nestedProperty(fullLayout, ai).get();
        var newType = (vi || {}).type; // This can potentially cause strange behavior if the autotype is not
        // numeric (linear, because we don't auto-log) but the previous type
        // was log. That's a very strange edge case though

        if (!newType || newType === '-') newType = 'linear';
        registry.getComponentMethod('annotations', 'convertCoords')(gd, fullProp, newType, doextra);
        registry.getComponentMethod('images', 'convertCoords')(gd, fullProp, newType, doextra);
      } // alter gd.layout
      // collect array component edits for execution all together
      // so we can ensure consistent behavior adding/removing items
      // and order-independence for add/remove/edit all together in
      // one relayout call


      var containerArrayMatch = manage_arrays.containerArrayMatch(ai);

      if (containerArrayMatch) {
        arrayStr = containerArrayMatch.array;
        i = containerArrayMatch.index;
        var propStr = containerArrayMatch.property;
        var updateValObject = valObject || {
          editType: 'calc'
        };

        if (i !== '' && propStr === '') {
          // special handling of undoit if we're adding or removing an element
          // ie 'annotations[2]' which can be {...} (add) or null,
          // does not work when replacing the entire array
          if (manage_arrays.isAddVal(vi)) {
            undoit[ai] = null;
          } else if (manage_arrays.isRemoveVal(vi)) {
            undoit[ai] = (nestedProperty(layout, arrayStr).get() || [])[i];
          } else {
            lib_1.warn('unrecognized full object value', aobj);
          }
        }

        edit_types.update(flags, updateValObject); // prepare the edits object we'll send to applyContainerArrayChanges

        if (!arrayEdits[arrayStr]) arrayEdits[arrayStr] = {};
        var objEdits = arrayEdits[arrayStr][i];
        if (!objEdits) objEdits = arrayEdits[arrayStr][i] = {};
        objEdits[propStr] = vi;
        delete aobj[ai];
      } else if (pleaf === 'reverse') {
        // handle axis reversal explicitly, as there's no 'reverse' attribute
        if (parentIn.range) parentIn.range.reverse();else {
          doextra(ptrunk + '.autorange', true);
          parentIn.range = [1, 0];
        }
        if (parentFull.autorange) flags.calc = true;else flags.plot = true;
      } else {
        if (fullLayout._has('scatter-like') && fullLayout._has('regl') && ai === 'dragmode' && (vi === 'lasso' || vi === 'select') && !(vOld === 'lasso' || vOld === 'select')) {
          flags.plot = true;
        } else if (fullLayout._has('gl2d')) {
          flags.plot = true;
        } else if (valObject) edit_types.update(flags, valObject);else flags.calc = true;

        p.set(vi);
      }
    } // now we've collected component edits - execute them all together


    for (arrayStr in arrayEdits) {
      var finished = manage_arrays.applyContainerArrayChanges(gd, layoutNP(layout, arrayStr), arrayEdits[arrayStr], flags, layoutNP);
      if (!finished) flags.plot = true;
    } // figure out if we need to recalculate axis constraints


    for (var axId in rangesAltered) {
      ax = axes_1.getFromId(gd, axId);
      var group = ax && ax._constraintGroup;

      if (group) {
        // Always recalc if we're changing constrained ranges.
        // Otherwise it's possible to violate the constraints by
        // specifying arbitrary ranges for all axes in the group.
        // this way some ranges may expand beyond what's specified,
        // as they do at first draw, to satisfy the constraints.
        flags.calc = true;

        for (var groupAxId in group) {
          if (!rangesAltered[groupAxId]) {
            axes_1.getFromId(gd, groupAxId)._constraintShrinkable = true;
          }
        }
      }
    } // If the autosize changed or height or width was explicitly specified,
    // this triggers a redraw
    // TODO: do we really need special aobj.height/width handling here?
    // couldn't editType do this?


    if (updateAutosize(gd) || aobj.height || aobj.width) flags.plot = true;

    if (flags.plot || flags.calc) {
      flags.layoutReplot = true;
    } // now all attribute mods are done, as are
    // redo and undo so we can save them


    return {
      flags: flags,
      rangesAltered: rangesAltered,
      undoit: undoit,
      redoit: redoit,
      eventData: eventData
    };
  }
  /*
   * updateAutosize: we made a change, does it change the autosize result?
   * puts the new size into fullLayout
   * returns true if either height or width changed
   */


  function updateAutosize(gd) {
    var fullLayout = gd._fullLayout;
    var oldWidth = fullLayout.width;
    var oldHeight = fullLayout.height; // calculate autosizing

    if (gd.layout.autosize) plots_1.plotAutoSize(gd, gd.layout, fullLayout);
    return fullLayout.width !== oldWidth || fullLayout.height !== oldHeight;
  }
  /**
   * update: update trace and layout attributes of an existing plot
   *
   * @param {String | HTMLDivElement} gd
   *  the id or DOM element of the graph container div
   * @param {Object} traceUpdate
   *  attribute object `{astr1: val1, astr2: val2 ...}`
   *  corresponding to updates in the plot's traces
   * @param {Object} layoutUpdate
   *  attribute object `{astr1: val1, astr2: val2 ...}`
   *  corresponding to updates in the plot's layout
   * @param {Number[] | Number} [traces]
   *  integer or array of integers for the traces to alter (all if omitted)
   *
   */


  function update(gd, traceUpdate, layoutUpdate, _traces) {
    gd = lib_1.getGraphDiv(gd);
    helpers$2.clearPromiseQueue(gd);
    if (!lib_1.isPlainObject(traceUpdate)) traceUpdate = {};
    if (!lib_1.isPlainObject(layoutUpdate)) layoutUpdate = {};
    if (Object.keys(traceUpdate).length) gd.changed = true;
    if (Object.keys(layoutUpdate).length) gd.changed = true;
    var traces = helpers$2.coerceTraceIndices(gd, _traces);

    var restyleSpecs = _restyle(gd, lib_1.extendFlat({}, traceUpdate), traces);

    var restyleFlags = restyleSpecs.flags;

    var relayoutSpecs = _relayout(gd, lib_1.extendFlat({}, layoutUpdate));

    var relayoutFlags = relayoutSpecs.flags; // clear calcdata and/or axis types if required

    if (restyleFlags.calc || relayoutFlags.calc) gd.calcdata = undefined;
    if (restyleFlags.clearAxisTypes) helpers$2.clearAxisTypes(gd, traces, layoutUpdate); // fill in redraw sequence

    var seq = [];

    if (relayoutFlags.layoutReplot) {
      // N.B. works fine when both
      // relayoutFlags.layoutReplot and restyleFlags.fullReplot are true
      seq.push(subroutines.layoutReplot);
    } else if (restyleFlags.fullReplot) {
      seq.push(exports._doPlot);
    } else {
      seq.push(plots_1.previousPromises);
      axRangeSupplyDefaultsByPass(gd, relayoutFlags, relayoutSpecs) || plots_1.supplyDefaults(gd);
      if (restyleFlags.style) seq.push(subroutines.doTraceStyle);
      if (restyleFlags.colorbars || relayoutFlags.colorbars) seq.push(subroutines.doColorBars);
      if (relayoutFlags.legend) seq.push(subroutines.doLegend);
      if (relayoutFlags.layoutstyle) seq.push(subroutines.layoutStyles);
      if (relayoutFlags.axrange) addAxRangeSequence(seq, relayoutSpecs.rangesAltered);
      if (relayoutFlags.ticks) seq.push(subroutines.doTicksRelayout);
      if (relayoutFlags.modebar) seq.push(subroutines.doModeBar);
      if (relayoutFlags.camera) seq.push(subroutines.doCamera);
      seq.push(emitAfterPlot);
    }

    seq.push(plots_1.rehover, plots_1.redrag);
    queue_1.add(gd, update, [gd, restyleSpecs.undoit, relayoutSpecs.undoit, restyleSpecs.traces], update, [gd, restyleSpecs.redoit, relayoutSpecs.redoit, restyleSpecs.traces]);
    var plotDone = lib_1.syncOrAsync(seq, gd);
    if (!plotDone || !plotDone.then) plotDone = Promise.resolve(gd);
    return plotDone.then(function () {
      gd.emit('plotly_update', {
        data: restyleSpecs.eventData,
        layout: relayoutSpecs.eventData
      });
      return gd;
    });
  }
  /*
   * internal-use-only restyle/relayout/update variants that record the initial
   * values in (fullLayout|fullTrace)._preGUI so changes can be persisted across
   * Plotly.react data updates, dependent on uirevision attributes
   */


  function guiEdit(func) {
    return function wrappedEdit(gd) {
      gd._fullLayout._guiEditing = true;
      var p = func.apply(null, arguments);
      gd._fullLayout._guiEditing = false;
      return p;
    };
  } // For connecting edited layout attributes to uirevision attrs
  // If no `attr` we use `match[1] + '.uirevision'`
  // Ordered by most common edits first, to minimize our search time


  var layoutUIControlPatterns = [{
    pattern: /^hiddenlabels/,
    attr: 'legend.uirevision'
  }, {
    pattern: /^((x|y)axis\d*)\.((auto)?range|title\.text)/
  }, // showspikes and modes include those nested inside scenes
  {
    pattern: /axis\d*\.showspikes$/,
    attr: 'modebar.uirevision'
  }, {
    pattern: /(hover|drag)mode$/,
    attr: 'modebar.uirevision'
  }, {
    pattern: /^(scene\d*)\.camera/
  }, {
    pattern: /^(geo\d*)\.(projection|center|fitbounds)/
  }, {
    pattern: /^(ternary\d*\.[abc]axis)\.(min|title\.text)$/
  }, {
    pattern: /^(polar\d*\.radialaxis)\.((auto)?range|angle|title\.text)/
  }, {
    pattern: /^(polar\d*\.angularaxis)\.rotation/
  }, {
    pattern: /^(mapbox\d*)\.(center|zoom|bearing|pitch)/
  }, {
    pattern: /^legend\.(x|y)$/,
    attr: 'editrevision'
  }, {
    pattern: /^(shapes|annotations)/,
    attr: 'editrevision'
  }, {
    pattern: /^title\.text$/,
    attr: 'editrevision'
  }]; // same for trace attributes: if `attr` is given it's in layout,
  // or with no `attr` we use `trace.uirevision`

  var traceUIControlPatterns = [{
    pattern: /^selectedpoints$/,
    attr: 'selectionrevision'
  }, // "visible" includes trace.transforms[i].styles[j].value.visible
  {
    pattern: /(^|value\.)visible$/,
    attr: 'legend.uirevision'
  }, {
    pattern: /^dimensions\[\d+\]\.constraintrange/
  }, {
    pattern: /^node\.(x|y|groups)/
  }, // for Sankey nodes
  {
    pattern: /^level$/
  }, // for Sunburst, Treemap and Icicle traces
  // below this you must be in editable: true mode
  // TODO: I still put name and title with `trace.uirevision`
  // reasonable or should these be `editrevision`?
  // Also applies to axis titles up in the layout section
  // "name" also includes transform.styles
  {
    pattern: /(^|value\.)name$/
  }, // including nested colorbar attributes (ie marker.colorbar)
  {
    pattern: /colorbar\.title\.text$/
  }, {
    pattern: /colorbar\.(x|y)$/,
    attr: 'editrevision'
  }];

  function findUIPattern(key, patternSpecs) {
    for (var i = 0; i < patternSpecs.length; i++) {
      var spec = patternSpecs[i];
      var match = key.match(spec.pattern);

      if (match) {
        var head = match[1] || '';
        return {
          head: head,
          tail: key.substr(head.length + 1),
          attr: spec.attr
        };
      }
    }
  } // We're finding the new uirevision before supplyDefaults, so do the
  // inheritance manually. Note that only `undefined` inherits - other
  // falsy values are returned.


  function getNewRev(revAttr, container) {
    var newRev = nestedProperty(container, revAttr).get();
    if (newRev !== undefined) return newRev;
    var parts = revAttr.split('.');
    parts.pop();

    while (parts.length > 1) {
      parts.pop();
      newRev = nestedProperty(container, parts.join('.') + '.uirevision').get();
      if (newRev !== undefined) return newRev;
    }

    return container.uirevision;
  }

  function getFullTraceIndexFromUid(uid, fullData) {
    for (var i = 0; i < fullData.length; i++) {
      if (fullData[i]._fullInput.uid === uid) return i;
    }

    return -1;
  }

  function getTraceIndexFromUid(uid, data, tracei) {
    for (var i = 0; i < data.length; i++) {
      if (data[i].uid === uid) return i;
    } // fall back on trace order, but only if user didn't provide a uid for that trace


    return !data[tracei] || data[tracei].uid ? -1 : tracei;
  }

  function valsMatch(v1, v2) {
    var v1IsObj = lib_1.isPlainObject(v1);
    var v1IsArray = Array.isArray(v1);

    if (v1IsObj || v1IsArray) {
      return (v1IsObj && lib_1.isPlainObject(v2) || v1IsArray && Array.isArray(v2)) && JSON.stringify(v1) === JSON.stringify(v2);
    }

    return v1 === v2;
  }

  function applyUIRevisions(data, layout, oldFullData, oldFullLayout) {
    var layoutPreGUI = oldFullLayout._preGUI;
    var key, revAttr, oldRev, newRev, match, preGUIVal, newNP, newVal, head, tail;
    var bothInheritAutorange = [];
    var newAutorangeIn = {};
    var newRangeAccepted = {};

    for (key in layoutPreGUI) {
      match = findUIPattern(key, layoutUIControlPatterns);

      if (match) {
        head = match.head;
        tail = match.tail;
        revAttr = match.attr || head + '.uirevision';
        oldRev = nestedProperty(oldFullLayout, revAttr).get();
        newRev = oldRev && getNewRev(revAttr, layout);

        if (newRev && newRev === oldRev) {
          preGUIVal = layoutPreGUI[key];
          if (preGUIVal === null) preGUIVal = undefined;
          newNP = nestedProperty(layout, key);
          newVal = newNP.get();

          if (valsMatch(newVal, preGUIVal)) {
            if (newVal === undefined && tail === 'autorange') {
              bothInheritAutorange.push(head);
            }

            newNP.set(undefinedToNull(nestedProperty(oldFullLayout, key).get()));
            continue;
          } else if (tail === 'autorange' || tail.substr(0, 6) === 'range[') {
            // Special case for (auto)range since we push it back into the layout
            // so all null should be treated equivalently to autorange: true with any range
            var pre0 = layoutPreGUI[head + '.range[0]'];
            var pre1 = layoutPreGUI[head + '.range[1]'];
            var preAuto = layoutPreGUI[head + '.autorange'];

            if (preAuto || preAuto === null && pre0 === null && pre1 === null) {
              // Only read the input layout once and stash the result,
              // so we get it before we start modifying it
              if (!(head in newAutorangeIn)) {
                var newContainer = nestedProperty(layout, head).get();
                newAutorangeIn[head] = newContainer && (newContainer.autorange || newContainer.autorange !== false && (!newContainer.range || newContainer.range.length !== 2));
              }

              if (newAutorangeIn[head]) {
                newNP.set(undefinedToNull(nestedProperty(oldFullLayout, key).get()));
                continue;
              }
            }
          }
        }
      } else {
        lib_1.warn('unrecognized GUI edit: ' + key);
      } // if we got this far, the new value was accepted as the new starting
      // point (either because it changed or revision changed)
      // so remove it from _preGUI for next time.


      delete layoutPreGUI[key];

      if (match && match.tail.substr(0, 6) === 'range[') {
        newRangeAccepted[match.head] = 1;
      }
    } // More special logic for `autorange`, since it interacts with `range`:
    // If the new figure's matching `range` was kept, and `autorange`
    // wasn't supplied explicitly in either the original or the new figure,
    // we shouldn't alter that - but we may just have done that, so fix it.


    for (var i = 0; i < bothInheritAutorange.length; i++) {
      var axAttr = bothInheritAutorange[i];

      if (newRangeAccepted[axAttr]) {
        var newAx = nestedProperty(layout, axAttr).get();
        if (newAx) delete newAx.autorange;
      }
    } // Now traces - try to match them up by uid (in case we added/deleted in
    // the middle), then fall back on index.


    var allTracePreGUI = oldFullLayout._tracePreGUI;

    for (var uid in allTracePreGUI) {
      var tracePreGUI = allTracePreGUI[uid];
      var newTrace = null;
      var fullInput;

      for (key in tracePreGUI) {
        // wait until we know we have preGUI values to look for traces
        // but if we don't find both, stop looking at this uid
        if (!newTrace) {
          var fulli = getFullTraceIndexFromUid(uid, oldFullData);

          if (fulli < 0) {
            // Somehow we didn't even have this trace in oldFullData...
            // I guess this could happen with `deleteTraces` or something
            delete allTracePreGUI[uid];
            break;
          }

          var fullTrace = oldFullData[fulli];
          fullInput = fullTrace._fullInput;
          var newTracei = getTraceIndexFromUid(uid, data, fullInput.index);

          if (newTracei < 0) {
            // No match in new data
            delete allTracePreGUI[uid];
            break;
          }

          newTrace = data[newTracei];
        }

        match = findUIPattern(key, traceUIControlPatterns);

        if (match) {
          if (match.attr) {
            oldRev = nestedProperty(oldFullLayout, match.attr).get();
            newRev = oldRev && getNewRev(match.attr, layout);
          } else {
            oldRev = fullInput.uirevision; // inheritance for trace.uirevision is simple, just layout.uirevision

            newRev = newTrace.uirevision;
            if (newRev === undefined) newRev = layout.uirevision;
          }

          if (newRev && newRev === oldRev) {
            preGUIVal = tracePreGUI[key];
            if (preGUIVal === null) preGUIVal = undefined;
            newNP = nestedProperty(newTrace, key);
            newVal = newNP.get();

            if (valsMatch(newVal, preGUIVal)) {
              newNP.set(undefinedToNull(nestedProperty(fullInput, key).get()));
              continue;
            }
          }
        } else {
          lib_1.warn('unrecognized GUI edit: ' + key + ' in trace uid ' + uid);
        }

        delete tracePreGUI[key];
      }
    }
  }
  /**
   * Plotly.react:
   * A plot/update method that takes the full plot state (same API as plot/newPlot)
   * and diffs to determine the minimal update pathway
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   * @param {array of objects} data
   *      array of traces, containing the data and display information for each trace
   * @param {object} layout
   *      object describing the overall display of the plot,
   *      all the stuff that doesn't pertain to any individual trace
   * @param {object} config
   *      configuration options (see ./plot_config.js for more info)
   *
   * OR
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   * @param {object} figure
   *      object containing `data`, `layout`, `config`, and `frames` members
   *
   */


  function react(gd, data, layout, config) {
    var frames, plotDone;

    function addFrames() {
      return exports.addFrames(gd, frames);
    }

    gd = lib_1.getGraphDiv(gd);
    helpers$2.clearPromiseQueue(gd);
    var oldFullData = gd._fullData;
    var oldFullLayout = gd._fullLayout; // you can use this as the initial draw as well as to update

    if (!lib_1.isPlotDiv(gd) || !oldFullData || !oldFullLayout) {
      plotDone = exports.newPlot(gd, data, layout, config);
    } else {
      if (lib_1.isPlainObject(data)) {
        var obj = data;
        data = obj.data;
        layout = obj.layout;
        config = obj.config;
        frames = obj.frames;
      }

      var configChanged = false; // assume that if there's a config at all, we're reacting to it too,
      // and completely replace the previous config

      if (config) {
        var oldConfig = lib_1.extendDeep({}, gd._context);
        gd._context = undefined;
        setPlotContext(gd, config);
        configChanged = diffConfig(oldConfig, gd._context);
      }

      gd.data = data || [];
      helpers$2.cleanData(gd.data);
      gd.layout = layout || {};
      helpers$2.cleanLayout(gd.layout);
      applyUIRevisions(gd.data, gd.layout, oldFullData, oldFullLayout); // "true" skips updating calcdata and remapping arrays from calcTransforms,
      // which supplyDefaults usually does at the end, but we may need to NOT do
      // if the diff (which we haven't determined yet) says we'll recalc

      plots_1.supplyDefaults(gd, {
        skipUpdateCalc: true
      });
      var newFullData = gd._fullData;
      var newFullLayout = gd._fullLayout;
      var immutable = newFullLayout.datarevision === undefined;
      var transition = newFullLayout.transition;
      var relayoutFlags = diffLayout(gd, oldFullLayout, newFullLayout, immutable, transition);
      var newDataRevision = relayoutFlags.newDataRevision;
      var restyleFlags = diffData(gd, oldFullData, newFullData, immutable, transition, newDataRevision); // TODO: how to translate this part of relayout to Plotly.react?
      // // Setting width or height to null must reset the graph's width / height
      // // back to its initial value as computed during the first pass in Plots.plotAutoSize.
      // //
      // // To do so, we must manually set them back here using the _initialAutoSize cache.
      // if(['width', 'height'].indexOf(ai) !== -1 && vi === null) {
      //     fullLayout[ai] = gd._initialAutoSize[ai];
      // }

      if (updateAutosize(gd)) relayoutFlags.layoutReplot = true; // clear calcdata and empty categories if required

      if (restyleFlags.calc || relayoutFlags.calc) {
        gd.calcdata = undefined;
        var allNames = Object.getOwnPropertyNames(newFullLayout);

        for (var q = 0; q < allNames.length; q++) {
          var name = allNames[q];
          var start = name.substring(0, 5);

          if (start === 'xaxis' || start === 'yaxis') {
            var emptyCategories = newFullLayout[name]._emptyCategories;
            if (emptyCategories) emptyCategories();
          }
        } // otherwise do the calcdata updates and calcTransform array remaps that we skipped earlier

      } else {
        plots_1.supplyDefaultsUpdateCalc(gd.calcdata, newFullData);
      } // Note: what restyle/relayout use impliedEdits and clearAxisTypes for
      // must be handled by the user when using Plotly.react.
      // fill in redraw sequence


      var seq = [];

      if (frames) {
        gd._transitionData = {};
        plots_1.createTransitionData(gd);
        seq.push(addFrames);
      } // Transition pathway,
      // only used when 'transition' is set by user and
      // when at least one animatable attribute has changed,
      // N.B. config changed aren't animatable


      if (newFullLayout.transition && !configChanged && (restyleFlags.anim || relayoutFlags.anim)) {
        if (relayoutFlags.ticks) seq.push(subroutines.doTicksRelayout);
        plots_1.doCalcdata(gd);
        subroutines.doAutoRangeAndConstraints(gd);
        seq.push(function () {
          return plots_1.transitionFromReact(gd, restyleFlags, relayoutFlags, oldFullLayout);
        });
      } else if (restyleFlags.fullReplot || relayoutFlags.layoutReplot || configChanged) {
        gd._fullLayout._skipDefaults = true;
        seq.push(exports._doPlot);
      } else {
        for (var componentType in relayoutFlags.arrays) {
          var indices = relayoutFlags.arrays[componentType];

          if (indices.length) {
            var drawOne = registry.getComponentMethod(componentType, 'drawOne');

            if (drawOne !== lib_1.noop) {
              for (var i = 0; i < indices.length; i++) {
                drawOne(gd, indices[i]);
              }
            } else {
              var draw = registry.getComponentMethod(componentType, 'draw');

              if (draw === lib_1.noop) {
                throw new Error('cannot draw components: ' + componentType);
              }

              draw(gd);
            }
          }
        }

        seq.push(plots_1.previousPromises);
        if (restyleFlags.style) seq.push(subroutines.doTraceStyle);
        if (restyleFlags.colorbars || relayoutFlags.colorbars) seq.push(subroutines.doColorBars);
        if (relayoutFlags.legend) seq.push(subroutines.doLegend);
        if (relayoutFlags.layoutstyle) seq.push(subroutines.layoutStyles);
        if (relayoutFlags.axrange) addAxRangeSequence(seq);
        if (relayoutFlags.ticks) seq.push(subroutines.doTicksRelayout);
        if (relayoutFlags.modebar) seq.push(subroutines.doModeBar);
        if (relayoutFlags.camera) seq.push(subroutines.doCamera);
        seq.push(emitAfterPlot);
      }

      seq.push(plots_1.rehover, plots_1.redrag);
      plotDone = lib_1.syncOrAsync(seq, gd);
      if (!plotDone || !plotDone.then) plotDone = Promise.resolve(gd);
    }

    return plotDone.then(function () {
      gd.emit('plotly_react', {
        data: data,
        layout: layout
      });
      return gd;
    });
  }

  function diffData(gd, oldFullData, newFullData, immutable, transition, newDataRevision) {
    var sameTraceLength = oldFullData.length === newFullData.length;

    if (!transition && !sameTraceLength) {
      return {
        fullReplot: true,
        calc: true
      };
    }

    var flags = edit_types.traceFlags();
    flags.arrays = {};
    flags.nChanges = 0;
    flags.nChangesAnim = 0;
    var i, trace;

    function getTraceValObject(parts) {
      var out = plot_schema.getTraceValObject(trace, parts);

      if (!trace._module.animatable && out.anim) {
        out.anim = false;
      }

      return out;
    }

    var diffOpts = {
      getValObject: getTraceValObject,
      flags: flags,
      immutable: immutable,
      transition: transition,
      newDataRevision: newDataRevision,
      gd: gd
    };
    var seenUIDs = {};

    for (i = 0; i < oldFullData.length; i++) {
      if (newFullData[i]) {
        trace = newFullData[i]._fullInput;
        if (plots_1.hasMakesDataTransform(trace)) trace = newFullData[i];
        if (seenUIDs[trace.uid]) continue;
        seenUIDs[trace.uid] = 1;
        getDiffFlags(oldFullData[i]._fullInput, trace, [], diffOpts);
      }
    }

    if (flags.calc || flags.plot) {
      flags.fullReplot = true;
    }

    if (transition && flags.nChanges && flags.nChangesAnim) {
      flags.anim = flags.nChanges === flags.nChangesAnim && sameTraceLength ? 'all' : 'some';
    }

    return flags;
  }

  function diffLayout(gd, oldFullLayout, newFullLayout, immutable, transition) {
    var flags = edit_types.layoutFlags();
    flags.arrays = {};
    flags.rangesAltered = {};
    flags.nChanges = 0;
    flags.nChangesAnim = 0;

    function getLayoutValObject(parts) {
      return plot_schema.getLayoutValObject(newFullLayout, parts);
    }

    var diffOpts = {
      getValObject: getLayoutValObject,
      flags: flags,
      immutable: immutable,
      transition: transition,
      gd: gd
    };
    getDiffFlags(oldFullLayout, newFullLayout, [], diffOpts);

    if (flags.plot || flags.calc) {
      flags.layoutReplot = true;
    }

    if (transition && flags.nChanges && flags.nChangesAnim) {
      flags.anim = flags.nChanges === flags.nChangesAnim ? 'all' : 'some';
    }

    return flags;
  }

  function getDiffFlags(oldContainer, newContainer, outerparts, opts) {
    var valObject, key, astr;
    var getValObject = opts.getValObject;
    var flags = opts.flags;
    var immutable = opts.immutable;
    var inArray = opts.inArray;
    var arrayIndex = opts.arrayIndex;

    function changed() {
      var editType = valObject.editType;

      if (inArray && editType.indexOf('arraydraw') !== -1) {
        lib_1.pushUnique(flags.arrays[inArray], arrayIndex);
        return;
      }

      edit_types.update(flags, valObject);

      if (editType !== 'none') {
        flags.nChanges++;
      } // track animatable changes


      if (opts.transition && valObject.anim) {
        flags.nChangesAnim++;
      } // track cartesian axes with altered ranges


      if (AX_RANGE_RE.test(astr) || AX_AUTORANGE_RE.test(astr)) {
        flags.rangesAltered[outerparts[0]] = 1;
      } // clear _inputDomain on cartesian axes with altered domains


      if (AX_DOMAIN_RE.test(astr)) {
        nestedProperty(newContainer, '_inputDomain').set(null);
      } // track datarevision changes


      if (key === 'datarevision') {
        flags.newDataRevision = 1;
      }
    }

    function valObjectCanBeDataArray(valObject) {
      return valObject.valType === 'data_array' || valObject.arrayOk;
    }

    for (key in oldContainer) {
      // short-circuit based on previous calls or previous keys that already maximized the pathway
      if (flags.calc && !opts.transition) return;
      var oldVal = oldContainer[key];
      var newVal = newContainer[key];
      var parts = outerparts.concat(key);
      astr = parts.join('.');
      if (key.charAt(0) === '_' || typeof oldVal === 'function' || oldVal === newVal) continue; // FIXME: ax.tick0 and dtick get filled in during plotting (except for geo subplots),
      // and unlike other auto values they don't make it back into the input,
      // so newContainer won't have them.

      if ((key === 'tick0' || key === 'dtick') && outerparts[0] !== 'geo') {
        var tickMode = newContainer.tickmode;
        if (tickMode === 'auto' || tickMode === 'array' || !tickMode) continue;
      } // FIXME: Similarly for axis ranges for 3D
      // contourcarpet doesn't HAVE zmin/zmax, they're just auto-added. It needs them.


      if (key === 'range' && newContainer.autorange) continue;
      if ((key === 'zmin' || key === 'zmax') && newContainer.type === 'contourcarpet') continue;
      valObject = getValObject(parts); // in case type changed, we may not even *have* a valObject.

      if (!valObject) continue;
      if (valObject._compareAsJSON && JSON.stringify(oldVal) === JSON.stringify(newVal)) continue;
      var valType = valObject.valType;
      var i;
      var canBeDataArray = valObjectCanBeDataArray(valObject);
      var wasArray = Array.isArray(oldVal);
      var nowArray = Array.isArray(newVal); // hack for traces that modify the data in supplyDefaults, like
      // converting 1D to 2D arrays, which will always create new objects

      if (wasArray && nowArray) {
        var inputKey = '_input_' + key;
        var oldValIn = oldContainer[inputKey];
        var newValIn = newContainer[inputKey];
        if (Array.isArray(oldValIn) && oldValIn === newValIn) continue;
      }

      if (newVal === undefined) {
        if (canBeDataArray && wasArray) flags.calc = true;else changed();
      } else if (valObject._isLinkedToArray) {
        var arrayEditIndices = [];
        var extraIndices = false;
        if (!inArray) flags.arrays[key] = arrayEditIndices;
        var minLen = Math.min(oldVal.length, newVal.length);
        var maxLen = Math.max(oldVal.length, newVal.length);

        if (minLen !== maxLen) {
          if (valObject.editType === 'arraydraw') {
            extraIndices = true;
          } else {
            changed();
            continue;
          }
        }

        for (i = 0; i < minLen; i++) {
          getDiffFlags(oldVal[i], newVal[i], parts.concat(i), // add array indices, but not if we're already in an array
          lib_1.extendFlat({
            inArray: key,
            arrayIndex: i
          }, opts));
        } // put this at the end so that we know our collected array indices are sorted
        // but the check for length changes happens up front so we can short-circuit
        // diffing if appropriate


        if (extraIndices) {
          for (i = minLen; i < maxLen; i++) {
            arrayEditIndices.push(i);
          }
        }
      } else if (!valType && lib_1.isPlainObject(oldVal)) {
        getDiffFlags(oldVal, newVal, parts, opts);
      } else if (canBeDataArray) {
        if (wasArray && nowArray) {
          // don't try to diff two data arrays. If immutable we know the data changed,
          // if not, assume it didn't and let `layout.datarevision` tell us if it did
          if (immutable) {
            flags.calc = true;
          } // look for animatable attributes when the data changed


          if (immutable || opts.newDataRevision) {
            changed();
          }
        } else if (wasArray !== nowArray) {
          flags.calc = true;
        } else changed();
      } else if (wasArray && nowArray) {
        // info array, colorscale, 'any' - these are short, just stringify.
        // I don't *think* that covers up any real differences post-validation, does it?
        // otherwise we need to dive in 1 (info_array) or 2 (colorscale) levels and compare
        // all elements.
        if (oldVal.length !== newVal.length || String(oldVal) !== String(newVal)) {
          changed();
        }
      } else {
        changed();
      }
    }

    for (key in newContainer) {
      if (!(key in oldContainer || key.charAt(0) === '_' || typeof newContainer[key] === 'function')) {
        valObject = getValObject(outerparts.concat(key));

        if (valObjectCanBeDataArray(valObject) && Array.isArray(newContainer[key])) {
          flags.calc = true;
          return;
        } else changed();
      }
    }
  }
  /*
   * simple diff for config - for now, just treat all changes as equivalent
   */


  function diffConfig(oldConfig, newConfig) {
    var key;

    for (key in oldConfig) {
      if (key.charAt(0) === '_') continue;
      var oldVal = oldConfig[key];
      var newVal = newConfig[key];

      if (oldVal !== newVal) {
        if (lib_1.isPlainObject(oldVal) && lib_1.isPlainObject(newVal)) {
          if (diffConfig(oldVal, newVal)) {
            return true;
          }
        } else if (Array.isArray(oldVal) && Array.isArray(newVal)) {
          if (oldVal.length !== newVal.length) {
            return true;
          }

          for (var i = 0; i < oldVal.length; i++) {
            if (oldVal[i] !== newVal[i]) {
              if (lib_1.isPlainObject(oldVal[i]) && lib_1.isPlainObject(newVal[i])) {
                if (diffConfig(oldVal[i], newVal[i])) {
                  return true;
                }
              } else {
                return true;
              }
            }
          }
        } else {
          return true;
        }
      }
    }
  }
  /**
   * Animate to a frame, sequence of frame, frame group, or frame definition
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   *
   * @param {string or object or array of strings or array of objects} frameOrGroupNameOrFrameList
   *      a single frame, array of frames, or group to which to animate. The intent is
   *      inferred by the type of the input. Valid inputs are:
   *
   *      - string, e.g. 'groupname': animate all frames of a given `group` in the order
   *            in which they are defined via `Plotly.addFrames`.
   *
   *      - array of strings, e.g. ['frame1', frame2']: a list of frames by name to which
   *            to animate in sequence
   *
   *      - object: {data: ...}: a frame definition to which to animate. The frame is not
   *            and does not need to be added via `Plotly.addFrames`. It may contain any of
   *            the properties of a frame, including `data`, `layout`, and `traces`. The
   *            frame is used as provided and does not use the `baseframe` property.
   *
   *      - array of objects, e.g. [{data: ...}, {data: ...}]: a list of frame objects,
   *            each following the same rules as a single `object`.
   *
   * @param {object} animationOpts
   *      configuration for the animation
   */


  function animate(gd, frameOrGroupNameOrFrameList, animationOpts) {
    gd = lib_1.getGraphDiv(gd);

    if (!lib_1.isPlotDiv(gd)) {
      throw new Error('This element is not a Plotly plot: ' + gd + '. It\'s likely that you\'ve failed ' + 'to create a plot before animating it. For more details, see ' + 'https://plotly.com/javascript/animations/');
    }

    var trans = gd._transitionData; // This is the queue of frames that will be animated as soon as possible. They
    // are popped immediately upon the *start* of a transition:

    if (!trans._frameQueue) {
      trans._frameQueue = [];
    }

    animationOpts = plots_1.supplyAnimationDefaults(animationOpts);
    var transitionOpts = animationOpts.transition;
    var frameOpts = animationOpts.frame; // Since frames are popped immediately, an empty queue only means all frames have
    // *started* to transition, not that the animation is complete. To solve that,
    // track a separate counter that increments at the same time as frames are added
    // to the queue, but decrements only when the transition is complete.

    if (trans._frameWaitingCnt === undefined) {
      trans._frameWaitingCnt = 0;
    }

    function getTransitionOpts(i) {
      if (Array.isArray(transitionOpts)) {
        if (i >= transitionOpts.length) {
          return transitionOpts[0];
        } else {
          return transitionOpts[i];
        }
      } else {
        return transitionOpts;
      }
    }

    function getFrameOpts(i) {
      if (Array.isArray(frameOpts)) {
        if (i >= frameOpts.length) {
          return frameOpts[0];
        } else {
          return frameOpts[i];
        }
      } else {
        return frameOpts;
      }
    } // Execute a callback after the wrapper function has been called n times.
    // This is used to defer the resolution until a transition has resolved *and*
    // the frame has completed. If it's not done this way, then we get a race
    // condition in which the animation might resolve before a transition is complete
    // or vice versa.


    function callbackOnNthTime(cb, n) {
      var cnt = 0;
      return function () {
        if (cb && ++cnt === n) {
          return cb();
        }
      };
    }

    return new Promise(function (resolve, reject) {
      function discardExistingFrames() {
        if (trans._frameQueue.length === 0) {
          return;
        }

        while (trans._frameQueue.length) {
          var next = trans._frameQueue.pop();

          if (next.onInterrupt) {
            next.onInterrupt();
          }
        }

        gd.emit('plotly_animationinterrupted', []);
      }

      function queueFrames(frameList) {
        if (frameList.length === 0) return;

        for (var i = 0; i < frameList.length; i++) {
          var computedFrame;

          if (frameList[i].type === 'byname') {
            // If it's a named frame, compute it:
            computedFrame = plots_1.computeFrame(gd, frameList[i].name);
          } else {
            // Otherwise we must have been given a simple object, so treat
            // the input itself as the computed frame.
            computedFrame = frameList[i].data;
          }

          var frameOpts = getFrameOpts(i);
          var transitionOpts = getTransitionOpts(i); // It doesn't make much sense for the transition duration to be greater than
          // the frame duration, so limit it:

          transitionOpts.duration = Math.min(transitionOpts.duration, frameOpts.duration);
          var nextFrame = {
            frame: computedFrame,
            name: frameList[i].name,
            frameOpts: frameOpts,
            transitionOpts: transitionOpts
          };

          if (i === frameList.length - 1) {
            // The last frame in this .animate call stores the promise resolve
            // and reject callbacks. This is how we ensure that the animation
            // loop (which may exist as a result of a *different* .animate call)
            // still resolves or rejecdts this .animate call's promise. once it's
            // complete.
            nextFrame.onComplete = callbackOnNthTime(resolve, 2);
            nextFrame.onInterrupt = reject;
          }

          trans._frameQueue.push(nextFrame);
        } // Set it as never having transitioned to a frame. This will cause the animation
        // loop to immediately transition to the next frame (which, for immediate mode,
        // is the first frame in the list since all others would have been discarded
        // below)


        if (animationOpts.mode === 'immediate') {
          trans._lastFrameAt = -Infinity;
        } // Only it's not already running, start a RAF loop. This could be avoided in the
        // case that there's only one frame, but it significantly complicated the logic
        // and only sped things up by about 5% or so for a lorenz attractor simulation.
        // It would be a fine thing to implement, but the benefit of that optimization
        // doesn't seem worth the extra complexity.


        if (!trans._animationRaf) {
          beginAnimationLoop();
        }
      }

      function stopAnimationLoop() {
        gd.emit('plotly_animated'); // Be sure to unset also since it's how we know whether a loop is already running:

        window.cancelAnimationFrame(trans._animationRaf);
        trans._animationRaf = null;
      }

      function nextFrame() {
        if (trans._currentFrame && trans._currentFrame.onComplete) {
          // Execute the callback and unset it to ensure it doesn't
          // accidentally get called twice
          trans._currentFrame.onComplete();
        }

        var newFrame = trans._currentFrame = trans._frameQueue.shift();

        if (newFrame) {
          // Since it's sometimes necessary to do deep digging into frame data,
          // we'll consider it not 100% impossible for nulls or numbers to sneak through,
          // so check when casting the name, just to be absolutely certain:
          var stringName = newFrame.name ? newFrame.name.toString() : null;
          gd._fullLayout._currentFrame = stringName;
          trans._lastFrameAt = Date.now();
          trans._timeToNext = newFrame.frameOpts.duration; // This is simply called and it's left to .transition to decide how to manage
          // interrupting current transitions. That means we don't need to worry about
          // how it resolves or what happens after this:

          plots_1.transition(gd, newFrame.frame.data, newFrame.frame.layout, helpers$2.coerceTraceIndices(gd, newFrame.frame.traces), newFrame.frameOpts, newFrame.transitionOpts).then(function () {
            if (newFrame.onComplete) {
              newFrame.onComplete();
            }
          });
          gd.emit('plotly_animatingframe', {
            name: stringName,
            frame: newFrame.frame,
            animation: {
              frame: newFrame.frameOpts,
              transition: newFrame.transitionOpts
            }
          });
        } else {
          // If there are no more frames, then stop the RAF loop:
          stopAnimationLoop();
        }
      }

      function beginAnimationLoop() {
        gd.emit('plotly_animating'); // If no timer is running, then set last frame = long ago so that the next
        // frame is immediately transitioned:

        trans._lastFrameAt = -Infinity;
        trans._timeToNext = 0;
        trans._runningTransitions = 0;
        trans._currentFrame = null;

        var doFrame = function () {
          // This *must* be requested before nextFrame since nextFrame may decide
          // to cancel it if there's nothing more to animated:
          trans._animationRaf = window.requestAnimationFrame(doFrame); // Check if we're ready for a new frame:

          if (Date.now() - trans._lastFrameAt > trans._timeToNext) {
            nextFrame();
          }
        };

        doFrame();
      } // This is an animate-local counter that helps match up option input list
      // items with the particular frame.


      var configCounter = 0;

      function setTransitionConfig(frame) {
        if (Array.isArray(transitionOpts)) {
          if (configCounter >= transitionOpts.length) {
            frame.transitionOpts = transitionOpts[configCounter];
          } else {
            frame.transitionOpts = transitionOpts[0];
          }
        } else {
          frame.transitionOpts = transitionOpts;
        }

        configCounter++;
        return frame;
      } // Disambiguate what's sort of frames have been received


      var i, frame;
      var frameList = [];
      var allFrames = frameOrGroupNameOrFrameList === undefined || frameOrGroupNameOrFrameList === null;
      var isFrameArray = Array.isArray(frameOrGroupNameOrFrameList);
      var isSingleFrame = !allFrames && !isFrameArray && lib_1.isPlainObject(frameOrGroupNameOrFrameList);

      if (isSingleFrame) {
        // In this case, a simple object has been passed to animate.
        frameList.push({
          type: 'object',
          data: setTransitionConfig(lib_1.extendFlat({}, frameOrGroupNameOrFrameList))
        });
      } else if (allFrames || ['string', 'number'].indexOf(typeof frameOrGroupNameOrFrameList) !== -1) {
        // In this case, null or undefined has been passed so that we want to
        // animate *all* currently defined frames
        for (i = 0; i < trans._frames.length; i++) {
          frame = trans._frames[i];
          if (!frame) continue;

          if (allFrames || String(frame.group) === String(frameOrGroupNameOrFrameList)) {
            frameList.push({
              type: 'byname',
              name: String(frame.name),
              data: setTransitionConfig({
                name: frame.name
              })
            });
          }
        }
      } else if (isFrameArray) {
        for (i = 0; i < frameOrGroupNameOrFrameList.length; i++) {
          var frameOrName = frameOrGroupNameOrFrameList[i];

          if (['number', 'string'].indexOf(typeof frameOrName) !== -1) {
            frameOrName = String(frameOrName); // In this case, there's an array and this frame is a string name:

            frameList.push({
              type: 'byname',
              name: frameOrName,
              data: setTransitionConfig({
                name: frameOrName
              })
            });
          } else if (lib_1.isPlainObject(frameOrName)) {
            frameList.push({
              type: 'object',
              data: setTransitionConfig(lib_1.extendFlat({}, frameOrName))
            });
          }
        }
      } // Verify that all of these frames actually exist; return and reject if not:


      for (i = 0; i < frameList.length; i++) {
        frame = frameList[i];

        if (frame.type === 'byname' && !trans._frameHash[frame.data.name]) {
          lib_1.warn('animate failure: frame not found: "' + frame.data.name + '"');
          reject();
          return;
        }
      } // If the mode is either next or immediate, then all currently queued frames must
      // be dumped and the corresponding .animate promises rejected.


      if (['next', 'immediate'].indexOf(animationOpts.mode) !== -1) {
        discardExistingFrames();
      }

      if (animationOpts.direction === 'reverse') {
        frameList.reverse();
      }

      var currentFrame = gd._fullLayout._currentFrame;

      if (currentFrame && animationOpts.fromcurrent) {
        var idx = -1;

        for (i = 0; i < frameList.length; i++) {
          frame = frameList[i];

          if (frame.type === 'byname' && frame.name === currentFrame) {
            idx = i;
            break;
          }
        }

        if (idx > 0 && idx < frameList.length - 1) {
          var filteredFrameList = [];

          for (i = 0; i < frameList.length; i++) {
            frame = frameList[i];

            if (frameList[i].type !== 'byname' || i > idx) {
              filteredFrameList.push(frame);
            }
          }

          frameList = filteredFrameList;
        }
      }

      if (frameList.length > 0) {
        queueFrames(frameList);
      } else {
        // This is the case where there were simply no frames. It's a little strange
        // since there's not much to do:
        gd.emit('plotly_animated');
        resolve();
      }
    });
  }
  /**
   * Register new frames
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   *
   * @param {array of objects} frameList
   *      list of frame definitions, in which each object includes any of:
   *      - name: {string} name of frame to add
   *      - data: {array of objects} trace data
   *      - layout {object} layout definition
   *      - traces {array} trace indices
   *      - baseframe {string} name of frame from which this frame gets defaults
   *
   *  @param {array of integers} indices
   *      an array of integer indices matching the respective frames in `frameList`. If not
   *      provided, an index will be provided in serial order. If already used, the frame
   *      will be overwritten.
   */


  function addFrames(gd, frameList, indices) {
    gd = lib_1.getGraphDiv(gd);

    if (frameList === null || frameList === undefined) {
      return Promise.resolve();
    }

    if (!lib_1.isPlotDiv(gd)) {
      throw new Error('This element is not a Plotly plot: ' + gd + '. It\'s likely that you\'ve failed ' + 'to create a plot before adding frames. For more details, see ' + 'https://plotly.com/javascript/animations/');
    }

    var i, frame, j, idx;
    var _frames = gd._transitionData._frames;
    var _frameHash = gd._transitionData._frameHash;

    if (!Array.isArray(frameList)) {
      throw new Error('addFrames failure: frameList must be an Array of frame definitions' + frameList);
    } // Create a sorted list of insertions since we run into lots of problems if these
    // aren't in ascending order of index:
    //
    // Strictly for sorting. Make sure this is guaranteed to never collide with any
    // already-exisisting indices:


    var bigIndex = _frames.length + frameList.length * 2;
    var insertions = [];
    var _frameHashLocal = {};

    for (i = frameList.length - 1; i >= 0; i--) {
      if (!lib_1.isPlainObject(frameList[i])) continue; // The entire logic for checking for this type of name collision can be removed once we migrate to ES6 and
      // use a Map instead of an Object instance, as Map keys aren't converted to strings.

      var lookupName = frameList[i].name;
      var name = (_frameHash[lookupName] || _frameHashLocal[lookupName] || {}).name;
      var newName = frameList[i].name;
      var collisionPresent = _frameHash[name] || _frameHashLocal[name];

      if (name && newName && typeof newName === 'number' && collisionPresent && numericNameWarningCount < numericNameWarningCountLimit) {
        numericNameWarningCount++;
        lib_1.warn('addFrames: overwriting frame "' + (_frameHash[name] || _frameHashLocal[name]).name + '" with a frame whose name of type "number" also equates to "' + name + '". This is valid but may potentially lead to unexpected ' + 'behavior since all plotly.js frame names are stored internally ' + 'as strings.');

        if (numericNameWarningCount === numericNameWarningCountLimit) {
          lib_1.warn('addFrames: This API call has yielded too many of these warnings. ' + 'For the rest of this call, further warnings about numeric frame ' + 'names will be suppressed.');
        }
      }

      _frameHashLocal[lookupName] = {
        name: lookupName
      };
      insertions.push({
        frame: plots_1.supplyFrameDefaults(frameList[i]),
        index: indices && indices[i] !== undefined && indices[i] !== null ? indices[i] : bigIndex + i
      });
    } // Sort this, taking note that undefined insertions end up at the end:


    insertions.sort(function (a, b) {
      if (a.index > b.index) return -1;
      if (a.index < b.index) return 1;
      return 0;
    });
    var ops = [];
    var revops = [];
    var frameCount = _frames.length;

    for (i = insertions.length - 1; i >= 0; i--) {
      frame = insertions[i].frame;

      if (typeof frame.name === 'number') {
        lib_1.warn('Warning: addFrames accepts frames with numeric names, but the numbers are' + 'implicitly cast to strings');
      }

      if (!frame.name) {
        // Repeatedly assign a default name, incrementing the counter each time until
        // we get a name that's not in the hashed lookup table:
        while (_frameHash[frame.name = 'frame ' + gd._transitionData._counter++]);
      }

      if (_frameHash[frame.name]) {
        // If frame is present, overwrite its definition:
        for (j = 0; j < _frames.length; j++) {
          if ((_frames[j] || {}).name === frame.name) break;
        }

        ops.push({
          type: 'replace',
          index: j,
          value: frame
        });
        revops.unshift({
          type: 'replace',
          index: j,
          value: _frames[j]
        });
      } else {
        // Otherwise insert it at the end of the list:
        idx = Math.max(0, Math.min(insertions[i].index, frameCount));
        ops.push({
          type: 'insert',
          index: idx,
          value: frame
        });
        revops.unshift({
          type: 'delete',
          index: idx
        });
        frameCount++;
      }
    }

    var undoFunc = plots_1.modifyFrames;
    var redoFunc = plots_1.modifyFrames;
    var undoArgs = [gd, revops];
    var redoArgs = [gd, ops];
    if (queue_1) queue_1.add(gd, undoFunc, undoArgs, redoFunc, redoArgs);
    return plots_1.modifyFrames(gd, ops);
  }
  /**
   * Delete frame
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   *
   * @param {array of integers} frameList
   *      list of integer indices of frames to be deleted
   */


  function deleteFrames(gd, frameList) {
    gd = lib_1.getGraphDiv(gd);

    if (!lib_1.isPlotDiv(gd)) {
      throw new Error('This element is not a Plotly plot: ' + gd);
    }

    var i, idx;
    var _frames = gd._transitionData._frames;
    var ops = [];
    var revops = [];

    if (!frameList) {
      frameList = [];

      for (i = 0; i < _frames.length; i++) {
        frameList.push(i);
      }
    }

    frameList = frameList.slice();
    frameList.sort();

    for (i = frameList.length - 1; i >= 0; i--) {
      idx = frameList[i];
      ops.push({
        type: 'delete',
        index: idx
      });
      revops.unshift({
        type: 'insert',
        index: idx,
        value: _frames[idx]
      });
    }

    var undoFunc = plots_1.modifyFrames;
    var redoFunc = plots_1.modifyFrames;
    var undoArgs = [gd, revops];
    var redoArgs = [gd, ops];
    if (queue_1) queue_1.add(gd, undoFunc, undoArgs, redoFunc, redoArgs);
    return plots_1.modifyFrames(gd, ops);
  }
  /**
   * Purge a graph container div back to its initial pre-_doPlot state
   *
   * @param {string id or DOM element} gd
   *      the id or DOM element of the graph container div
   */


  function purge(gd) {
    gd = lib_1.getGraphDiv(gd);
    var fullLayout = gd._fullLayout || {};
    var fullData = gd._fullData || []; // remove gl contexts

    plots_1.cleanPlot([], {}, fullData, fullLayout); // purge properties

    plots_1.purge(gd); // purge event emitter methods

    events.purge(gd); // remove plot container

    if (fullLayout._container) fullLayout._container.remove(); // in contrast to _doPlots.purge which does NOT clear _context!

    delete gd._context;
    return gd;
  } // determines if the graph div requires a recalculation of its inverse matrix transforms by comparing old + new bounding boxes.


  function calcInverseTransform(gd) {
    var fullLayout = gd._fullLayout;
    var newBBox = gd.getBoundingClientRect();
    if (lib_1.equalDomRects(newBBox, fullLayout._lastBBox)) return;
    var m = fullLayout._invTransform = lib_1.inverseTransformMatrix(lib_1.getFullTransformMatrix(gd));
    fullLayout._invScaleX = Math.sqrt(m[0][0] * m[0][0] + m[0][1] * m[0][1] + m[0][2] * m[0][2]);
    fullLayout._invScaleY = Math.sqrt(m[1][0] * m[1][0] + m[1][1] * m[1][1] + m[1][2] * m[1][2]);
    fullLayout._lastBBox = newBBox;
  } // -------------------------------------------------------
  // makePlotFramework: Create the plot container and axes
  // -------------------------------------------------------


  function makePlotFramework(gd) {
    var gd3 = d3.select(gd);
    var fullLayout = gd._fullLayout;
    fullLayout._calcInverseTransform = calcInverseTransform;

    fullLayout._calcInverseTransform(gd); // Plot container


    fullLayout._container = gd3.selectAll('.plot-container').data([0]);

    fullLayout._container.enter().insert('div', ':first-child').classed('plot-container', true).classed('plotly', true); // Make the svg container


    fullLayout._paperdiv = fullLayout._container.selectAll('.svg-container').data([0]);

    fullLayout._paperdiv.enter().append('div').classed('user-select-none', true).classed('svg-container', true).style('position', 'relative'); // Make the graph containers
    // start fresh each time we get here, so we know the order comes out
    // right, rather than enter/exit which can muck up the order
    // TODO: sort out all the ordering so we don't have to
    // explicitly delete anything
    // FIXME: parcoords reuses this object, not the best pattern


    fullLayout._glcontainer = fullLayout._paperdiv.selectAll('.gl-container').data([{}]);

    fullLayout._glcontainer.enter().append('div').classed('gl-container', true);

    fullLayout._paperdiv.selectAll('.main-svg').remove();

    fullLayout._paperdiv.select('.modebar-container').remove();

    fullLayout._paper = fullLayout._paperdiv.insert('svg', ':first-child').classed('main-svg', true);
    fullLayout._toppaper = fullLayout._paperdiv.append('svg').classed('main-svg', true);
    fullLayout._modebardiv = fullLayout._paperdiv.append('div');
    delete fullLayout._modeBar;
    fullLayout._hoverpaper = fullLayout._paperdiv.append('svg').classed('main-svg', true);

    if (!fullLayout._uid) {
      var otherUids = {};
      d3.selectAll('defs').each(function () {
        if (this.id) otherUids[this.id.split('-')[1]] = 1;
      });
      fullLayout._uid = lib_1.randstr(otherUids);
    }

    fullLayout._paperdiv.selectAll('.main-svg').attr(xmlns_namespaces.svgAttrs);

    fullLayout._defs = fullLayout._paper.append('defs').attr('id', 'defs-' + fullLayout._uid);
    fullLayout._clips = fullLayout._defs.append('g').classed('clips', true);
    fullLayout._topdefs = fullLayout._toppaper.append('defs').attr('id', 'topdefs-' + fullLayout._uid);
    fullLayout._topclips = fullLayout._topdefs.append('g').classed('clips', true);
    fullLayout._bgLayer = fullLayout._paper.append('g').classed('bglayer', true);
    fullLayout._draggers = fullLayout._paper.append('g').classed('draglayer', true); // lower shape/image layer - note that this is behind
    // all subplots data/grids but above the backgrounds
    // except inset subplots, whose backgrounds are drawn
    // inside their own group so that they appear above
    // the data for the main subplot
    // lower shapes and images which are fully referenced to
    // a subplot still get drawn within the subplot's group
    // so they will work correctly on insets

    var layerBelow = fullLayout._paper.append('g').classed('layer-below', true);

    fullLayout._imageLowerLayer = layerBelow.append('g').classed('imagelayer', true);
    fullLayout._shapeLowerLayer = layerBelow.append('g').classed('shapelayer', true); // single cartesian layer for the whole plot

    fullLayout._cartesianlayer = fullLayout._paper.append('g').classed('cartesianlayer', true); // single polar layer for the whole plot

    fullLayout._polarlayer = fullLayout._paper.append('g').classed('polarlayer', true); // single smith layer for the whole plot

    fullLayout._smithlayer = fullLayout._paper.append('g').classed('smithlayer', true); // single ternary layer for the whole plot

    fullLayout._ternarylayer = fullLayout._paper.append('g').classed('ternarylayer', true); // single geo layer for the whole plot

    fullLayout._geolayer = fullLayout._paper.append('g').classed('geolayer', true); // single funnelarea layer for the whole plot

    fullLayout._funnelarealayer = fullLayout._paper.append('g').classed('funnelarealayer', true); // single pie layer for the whole plot

    fullLayout._pielayer = fullLayout._paper.append('g').classed('pielayer', true); // single treemap layer for the whole plot

    fullLayout._iciclelayer = fullLayout._paper.append('g').classed('iciclelayer', true); // single treemap layer for the whole plot

    fullLayout._treemaplayer = fullLayout._paper.append('g').classed('treemaplayer', true); // single sunburst layer for the whole plot

    fullLayout._sunburstlayer = fullLayout._paper.append('g').classed('sunburstlayer', true); // single indicator layer for the whole plot

    fullLayout._indicatorlayer = fullLayout._toppaper.append('g').classed('indicatorlayer', true); // fill in image server scrape-svg

    fullLayout._glimages = fullLayout._paper.append('g').classed('glimages', true); // lastly upper shapes, info (legend, annotations) and hover layers go on top
    // these are in a different svg element normally, but get collapsed into a single
    // svg when exporting (after inserting 3D)
    // upper shapes/images are only those drawn above the whole plot, including subplots

    var layerAbove = fullLayout._toppaper.append('g').classed('layer-above', true);

    fullLayout._imageUpperLayer = layerAbove.append('g').classed('imagelayer', true);
    fullLayout._shapeUpperLayer = layerAbove.append('g').classed('shapelayer', true);
    fullLayout._infolayer = fullLayout._toppaper.append('g').classed('infolayer', true);
    fullLayout._menulayer = fullLayout._toppaper.append('g').classed('menulayer', true);
    fullLayout._zoomlayer = fullLayout._toppaper.append('g').classed('zoomlayer', true);
    fullLayout._hoverlayer = fullLayout._hoverpaper.append('g').classed('hoverlayer', true); // Make the modebar container

    fullLayout._modebardiv.classed('modebar-container', true).style('position', 'absolute').style('top', '0px').style('right', '0px');

    gd.emit('plotly_framework');
  }

  exports.animate = animate;
  exports.addFrames = addFrames;
  exports.deleteFrames = deleteFrames;
  exports.addTraces = addTraces;
  exports.deleteTraces = deleteTraces;
  exports.extendTraces = extendTraces;
  exports.moveTraces = moveTraces;
  exports.prependTraces = prependTraces;
  exports.newPlot = newPlot;
  exports._doPlot = _doPlot;
  exports.purge = purge;
  exports.react = react;
  exports.redraw = redraw;
  exports.relayout = relayout;
  exports.restyle = restyle;
  exports.setPlotConfig = setPlotConfig;
  exports.update = update;
  exports._guiRelayout = guiEdit(relayout);
  exports._guiRestyle = guiEdit(restyle);
  exports._guiUpdate = guiEdit(update);
  exports._storeDirectGUIEdit = _storeDirectGUIEdit;
});

var getDelay = function (fullLayout) {
  if (!fullLayout._has) return 0;
  return fullLayout._has('gl3d') || fullLayout._has('gl2d') || fullLayout._has('mapbox') ? 500 : 0;
};

var getRedrawFunc = function (gd) {
  return function () {
    registry.getComponentMethod('colorbar', 'draw')(gd);
  };
};

var encodeSVG = function (svg) {
  return 'data:image/svg+xml,' + encodeURIComponent(svg);
};

var encodeJSON = function (json) {
  return 'data:application/json,' + encodeURIComponent(json);
};

var DOM_URL = window.URL || window.webkitURL;

var createObjectURL = function (blob) {
  return DOM_URL.createObjectURL(blob);
};

var revokeObjectURL = function (url) {
  return DOM_URL.revokeObjectURL(url);
};

var createBlob = function (url, format) {
  if (format === 'svg') {
    return new window.Blob([url], {
      type: 'image/svg+xml;charset=utf-8'
    });
  } else if (format === 'full-json') {
    return new window.Blob([url], {
      type: 'application/json;charset=utf-8'
    });
  } else {
    var binary = fixBinary(window.atob(url));
    return new window.Blob([binary], {
      type: 'image/' + format
    });
  }
};

var octetStream = function (s) {
  document.location.href = 'data:application/octet-stream' + s;
}; // Taken from https://bl.ocks.org/nolanlawson/0eac306e4dac2114c752


function fixBinary(b) {
  var len = b.length;
  var buf = new ArrayBuffer(len);
  var arr = new Uint8Array(buf);

  for (var i = 0; i < len; i++) {
    arr[i] = b.charCodeAt(i);
  }

  return buf;
}

var IMAGE_URL_PREFIX = /^data:image\/\w+;base64,/;
var MSG_IE_BAD_FORMAT = 'Sorry IE does not support downloading from canvas. Try {format:\'svg\'} instead.';
var helpers$1 = {
  getDelay: getDelay,
  getRedrawFunc: getRedrawFunc,
  encodeSVG: encodeSVG,
  encodeJSON: encodeJSON,
  createObjectURL: createObjectURL,
  revokeObjectURL: revokeObjectURL,
  createBlob: createBlob,
  octetStream: octetStream,
  IMAGE_URL_PREFIX: IMAGE_URL_PREFIX,
  MSG_IE_BAD_FORMAT: MSG_IE_BAD_FORMAT
};

var DOUBLEQUOTE_REGEX = /"/g;
var DUMMY_SUB = 'TOBESTRIPPED';
var DUMMY_REGEX = new RegExp('("' + DUMMY_SUB + ')|(' + DUMMY_SUB + '")', 'g');

function htmlEntityDecode(s) {
  var hiddenDiv = d3.select('body').append('div').style({
    display: 'none'
  }).html('');
  var replaced = s.replace(/(&[^;]*;)/gi, function (d) {
    if (d === '&lt;') {
      return '&#60;';
    } // special handling for brackets


    if (d === '&rt;') {
      return '&#62;';
    }

    if (d.indexOf('<') !== -1 || d.indexOf('>') !== -1) {
      return '';
    }

    return hiddenDiv.html(d).text(); // everything else, let the browser decode it to unicode
  });
  hiddenDiv.remove();
  return replaced;
}

function xmlEntityEncode(str) {
  return str.replace(/&(?!\w+;|\#[0-9]+;| \#x[0-9A-F]+;)/g, '&amp;');
}

var tosvg = function toSVG(gd, format, scale) {
  var fullLayout = gd._fullLayout;
  var svg = fullLayout._paper;
  var toppaper = fullLayout._toppaper;
  var width = fullLayout.width;
  var height = fullLayout.height;
  var i; // make background color a rect in the svg, then revert after scraping
  // all other alterations have been dealt with by properly preparing the svg
  // in the first place... like setting cursors with css classes so we don't
  // have to remove them, and providing the right namespaces in the svg to
  // begin with

  svg.insert('rect', ':first-child').call(drawing_1.setRect, 0, 0, width, height).call(color_1.fill, fullLayout.paper_bgcolor); // subplot-specific to-SVG methods
  // which notably add the contents of the gl-container
  // into the main svg node

  var basePlotModules = fullLayout._basePlotModules || [];

  for (i = 0; i < basePlotModules.length; i++) {
    var _module = basePlotModules[i];
    if (_module.toSVG) _module.toSVG(gd);
  } // add top items above them assumes everything in toppaper is either
  // a group or a defs, and if it's empty (like hoverlayer) we can ignore it.


  if (toppaper) {
    var nodes = toppaper.node().childNodes; // make copy of nodes as childNodes prop gets mutated in loop below

    var topGroups = Array.prototype.slice.call(nodes);

    for (i = 0; i < topGroups.length; i++) {
      var topGroup = topGroups[i];
      if (topGroup.childNodes.length) svg.node().appendChild(topGroup);
    }
  } // remove draglayer for Adobe Illustrator compatibility


  if (fullLayout._draggers) {
    fullLayout._draggers.remove();
  } // in case the svg element had an explicit background color, remove this
  // we want the rect to get the color so it's the right size; svg bg will
  // fill whatever container it's displayed in regardless of plot size.


  svg.node().style.background = '';
  svg.selectAll('text').attr({
    'data-unformatted': null,
    'data-math': null
  }).each(function () {
    var txt = d3.select(this); // hidden text is pre-formatting mathjax, the browser ignores it
    // but in a static plot it's useless and it can confuse batik
    // we've tried to standardize on display:none but make sure we still
    // catch visibility:hidden if it ever arises

    if (this.style.visibility === 'hidden' || this.style.display === 'none') {
      txt.remove();
      return;
    } else {
      // clear other visibility/display values to default
      // to not potentially confuse non-browser SVG implementations
      txt.style({
        visibility: null,
        display: null
      });
    } // Font family styles break things because of quotation marks,
    // so we must remove them *after* the SVG DOM has been serialized
    // to a string (browsers convert singles back)


    var ff = this.style.fontFamily;

    if (ff && ff.indexOf('"') !== -1) {
      txt.style('font-family', ff.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));
    }
  });
  svg.selectAll('.gradient_filled,.pattern_filled').each(function () {
    var pt = d3.select(this); // similar to font family styles above,
    // we must remove " after the SVG DOM has been serialized

    var fill = this.style.fill;

    if (fill && fill.indexOf('url(') !== -1) {
      pt.style('fill', fill.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));
    }

    var stroke = this.style.stroke;

    if (stroke && stroke.indexOf('url(') !== -1) {
      pt.style('stroke', stroke.replace(DOUBLEQUOTE_REGEX, DUMMY_SUB));
    }
  });

  if (format === 'pdf' || format === 'eps') {
    // these formats make the extra line MathJax adds around symbols look super thick in some cases
    // it looks better if this is removed entirely.
    svg.selectAll('#MathJax_SVG_glyphs path').attr('stroke-width', 0);
  } // fix for IE namespacing quirk?
  // http://stackoverflow.com/questions/19610089/unwanted-namespaces-on-svg-markup-when-using-xmlserializer-in-javascript-with-ie


  svg.node().setAttributeNS(xmlns_namespaces.xmlns, 'xmlns', xmlns_namespaces.svg);
  svg.node().setAttributeNS(xmlns_namespaces.xmlns, 'xmlns:xlink', xmlns_namespaces.xlink);

  if (format === 'svg' && scale) {
    svg.attr('width', scale * width);
    svg.attr('height', scale * height);
    svg.attr('viewBox', '0 0 ' + width + ' ' + height);
  }

  var s = new window.XMLSerializer().serializeToString(svg.node());
  s = htmlEntityDecode(s);
  s = xmlEntityEncode(s); // Fix quotations around font strings and gradient URLs

  s = s.replace(DUMMY_REGEX, '\''); // Do we need this process now that IE9 and IE10 are not supported?
  // IE is very strict, so we will need to clean
  //  svg with the following regex
  //  yes this is messy, but do not know a better way
  // Even with this IE will not work due to tainted canvas
  //  see https://github.com/kangax/fabric.js/issues/1957
  //      http://stackoverflow.com/questions/18112047/canvas-todataurl-working-in-all-browsers-except-ie10
  // Leave here just in case the CORS/tainted IE issue gets resolved

  if (lib_1.isIE()) {
    // replace double quote with single quote
    s = s.replace(/"/gi, '\''); // url in svg are single quoted
    //   since we changed double to single
    //   we'll need to change these to double-quoted

    s = s.replace(/(\('#)([^']*)('\))/gi, '(\"#$2\")'); // font names with spaces will be escaped single-quoted
    //   we'll need to change these to double-quoted

    s = s.replace(/(\\')/gi, '\"');
  }

  return s;
};

var EventEmitter$1 = events$1.EventEmitter;

function svgToImg(opts) {
  var ev = opts.emitter || new EventEmitter$1();
  var promise = new Promise(function (resolve, reject) {
    var Image = window.Image;
    var svg = opts.svg;
    var format = opts.format || 'png'; // IE only support svg

    if (lib_1.isIE() && format !== 'svg') {
      var ieSvgError = new Error(helpers$1.MSG_IE_BAD_FORMAT);
      reject(ieSvgError); // eventually remove the ev
      //  in favor of promises

      if (!opts.promise) {
        return ev.emit('error', ieSvgError);
      } else {
        return promise;
      }
    }

    var canvas = opts.canvas;
    var scale = opts.scale || 1;
    var w0 = opts.width || 300;
    var h0 = opts.height || 150;
    var w1 = scale * w0;
    var h1 = scale * h0;
    var ctx = canvas.getContext('2d');
    var img = new Image();
    var svgBlob, url;

    if (format === 'svg' || lib_1.isSafari()) {
      url = helpers$1.encodeSVG(svg);
    } else {
      svgBlob = helpers$1.createBlob(svg, 'svg');
      url = helpers$1.createObjectURL(svgBlob);
    }

    canvas.width = w1;
    canvas.height = h1;

    img.onload = function () {
      var imgData;
      svgBlob = null;
      helpers$1.revokeObjectURL(url); // don't need to draw to canvas if svg
      //  save some time and also avoid failure on IE

      if (format !== 'svg') {
        ctx.drawImage(img, 0, 0, w1, h1);
      }

      switch (format) {
        case 'jpeg':
          imgData = canvas.toDataURL('image/jpeg');
          break;

        case 'png':
          imgData = canvas.toDataURL('image/png');
          break;

        case 'webp':
          imgData = canvas.toDataURL('image/webp');
          break;

        case 'svg':
          imgData = url;
          break;

        default:
          var errorMsg = 'Image format is not jpeg, png, svg or webp.';
          reject(new Error(errorMsg)); // eventually remove the ev
          //  in favor of promises

          if (!opts.promise) {
            return ev.emit('error', errorMsg);
          }

      }

      resolve(imgData); // eventually remove the ev
      //  in favor of promises

      if (!opts.promise) {
        ev.emit('success', imgData);
      }
    };

    img.onerror = function (err) {
      svgBlob = null;
      helpers$1.revokeObjectURL(url);
      reject(err); // eventually remove the ev
      //  in favor of promises

      if (!opts.promise) {
        return ev.emit('error', err);
      }
    };

    img.src = url;
  }); // temporary for backward compatibility
  //  move to only Promise in 2.0.0
  //  and eliminate the EventEmitter

  if (opts.promise) {
    return promise;
  }

  return ev;
}

var svgtoimg = svgToImg;

var version = version$2.version;
var attrs = {
  format: {
    valType: 'enumerated',
    values: ['png', 'jpeg', 'webp', 'svg', 'full-json'],
    dflt: 'png',
    description: 'Sets the format of exported image.'
  },
  width: {
    valType: 'number',
    min: 1,
    description: ['Sets the exported image width.', 'Defaults to the value found in `layout.width`', 'If set to *null*, the exported image width will match the current graph width.'].join(' ')
  },
  height: {
    valType: 'number',
    min: 1,
    description: ['Sets the exported image height.', 'Defaults to the value found in `layout.height`', 'If set to *null*, the exported image height will match the current graph height.'].join(' ')
  },
  scale: {
    valType: 'number',
    min: 0,
    dflt: 1,
    description: ['Sets a scaling for the generated image.', 'If set, all features of a graphs (e.g. text, line width)', 'are scaled, unlike simply setting', 'a bigger *width* and *height*.'].join(' ')
  },
  setBackground: {
    valType: 'any',
    dflt: false,
    description: ['Sets the image background mode.', 'By default, the image background is determined by `layout.paper_bgcolor`,', 'the *transparent* mode.', 'One might consider setting `setBackground` to *opaque*', 'when exporting a *jpeg* image as JPEGs do not support opacity.'].join(' ')
  },
  imageDataOnly: {
    valType: 'boolean',
    dflt: false,
    description: ['Determines whether or not the return value is prefixed by', 'the image format\'s corresponding \'data:image;\' spec.'].join(' ')
  }
};
/** Plotly.toImage
 *
 * @param {object | string | HTML div} gd
 *   can either be a data/layout/config object
 *   or an existing graph <div>
 *   or an id to an existing graph <div>
 * @param {object} opts (see above)
 * @return {promise}
 */

function toImage$2(gd, opts) {
  opts = opts || {};
  var data;
  var layout;
  var config;
  var fullLayout;

  if (lib_1.isPlainObject(gd)) {
    data = gd.data || [];
    layout = gd.layout || {};
    config = gd.config || {};
    fullLayout = {};
  } else {
    gd = lib_1.getGraphDiv(gd);
    data = lib_1.extendDeep([], gd.data);
    layout = lib_1.extendDeep({}, gd.layout);
    config = gd._context;
    fullLayout = gd._fullLayout || {};
  }

  function isImpliedOrValid(attr) {
    return !(attr in opts) || lib_1.validate(opts[attr], attrs[attr]);
  }

  if (!isImpliedOrValid('width') && opts.width !== null || !isImpliedOrValid('height') && opts.height !== null) {
    throw new Error('Height and width should be pixel values.');
  }

  if (!isImpliedOrValid('format')) {
    throw new Error('Export format is not ' + lib_1.join2(attrs.format.values, ', ', ' or ') + '.');
  }

  var fullOpts = {};

  function coerce(attr, dflt) {
    return lib_1.coerce(opts, fullOpts, attrs, attr, dflt);
  }

  var format = coerce('format');
  var width = coerce('width');
  var height = coerce('height');
  var scale = coerce('scale');
  var setBackground = coerce('setBackground');
  var imageDataOnly = coerce('imageDataOnly'); // put the cloned div somewhere off screen before attaching to DOM

  var clonedGd = document.createElement('div');
  clonedGd.style.position = 'absolute';
  clonedGd.style.left = '-5000px';
  document.body.appendChild(clonedGd); // extend layout with image options

  var layoutImage = lib_1.extendFlat({}, layout);

  if (width) {
    layoutImage.width = width;
  } else if (opts.width === null && fastIsnumeric(fullLayout.width)) {
    layoutImage.width = fullLayout.width;
  }

  if (height) {
    layoutImage.height = height;
  } else if (opts.height === null && fastIsnumeric(fullLayout.height)) {
    layoutImage.height = fullLayout.height;
  } // extend config for static plot


  var configImage = lib_1.extendFlat({}, config, {
    _exportedPlot: true,
    staticPlot: true,
    setBackground: setBackground
  });
  var redrawFunc = helpers$1.getRedrawFunc(clonedGd);

  function wait() {
    return new Promise(function (resolve) {
      setTimeout(resolve, helpers$1.getDelay(clonedGd._fullLayout));
    });
  }

  function convert() {
    return new Promise(function (resolve, reject) {
      var svg = tosvg(clonedGd, format, scale);
      var width = clonedGd._fullLayout.width;
      var height = clonedGd._fullLayout.height;

      function cleanup() {
        plot_api$1.purge(clonedGd);
        document.body.removeChild(clonedGd);
      }

      if (format === 'full-json') {
        var json = plots_1.graphJson(clonedGd, false, 'keepdata', 'object', true, true);
        json.version = version;
        json = JSON.stringify(json);
        cleanup();

        if (imageDataOnly) {
          return resolve(json);
        } else {
          return resolve(helpers$1.encodeJSON(json));
        }
      }

      cleanup();

      if (format === 'svg') {
        if (imageDataOnly) {
          return resolve(svg);
        } else {
          return resolve(helpers$1.encodeSVG(svg));
        }
      }

      var canvas = document.createElement('canvas');
      canvas.id = lib_1.randstr();
      svgtoimg({
        format: format,
        width: width,
        height: height,
        scale: scale,
        canvas: canvas,
        svg: svg,
        // ask svgToImg to return a Promise
        //  rather than EventEmitter
        //  leave EventEmitter for backward
        //  compatibility
        promise: true
      }).then(resolve).catch(reject);
    });
  }

  function urlToImageData(url) {
    if (imageDataOnly) {
      return url.replace(helpers$1.IMAGE_URL_PREFIX, '');
    } else {
      return url;
    }
  }

  return new Promise(function (resolve, reject) {
    plot_api$1.newPlot(clonedGd, data, layoutImage, configImage).then(redrawFunc).then(wait).then(convert).then(function (url) {
      resolve(urlToImageData(url));
    }).catch(function (err) {
      reject(err);
    });
  });
}

var to_image = toImage$2;

var dfltConfig$1 = plot_config.dfltConfig;
var isPlainObject$1 = lib_1.isPlainObject;
var isArray = Array.isArray;
var isArrayOrTypedArray$2 = lib_1.isArrayOrTypedArray;
/**
 * Validate a data array and layout object.
 *
 * @param {array} data
 * @param {object} layout
 *
 * @return {array} array of error objects each containing:
 *  - {string} code
 *      error code ('object', 'array', 'schema', 'unused', 'invisible' or 'value')
 *  - {string} container
 *      container where the error occurs ('data' or 'layout')
 *  - {number} trace
 *      trace index of the 'data' container where the error occurs
 *  - {array} path
 *      nested path to the key that causes the error
 *  - {string} astr
 *      attribute string variant of 'path' compatible with Plotly.restyle and
 *      Plotly.relayout.
 *  - {string} msg
 *      error message (shown in console in logger config argument is enable)
 */

var validate$1 = function validate(data, layout) {
  if (data === undefined) data = [];
  if (layout === undefined) layout = {};
  var schema = plot_schema.get();
  var errorList = [];
  var gd = {
    _context: lib_1.extendFlat({}, dfltConfig$1)
  };
  var dataIn, layoutIn;

  if (isArray(data)) {
    gd.data = lib_1.extendDeep([], data);
    dataIn = data;
  } else {
    gd.data = [];
    dataIn = [];
    errorList.push(format$1('array', 'data'));
  }

  if (isPlainObject$1(layout)) {
    gd.layout = lib_1.extendDeep({}, layout);
    layoutIn = layout;
  } else {
    gd.layout = {};
    layoutIn = {};

    if (arguments.length > 1) {
      errorList.push(format$1('object', 'layout'));
    }
  } // N.B. dataIn and layoutIn are in general not the same as
  // gd.data and gd.layout after supplyDefaults as some attributes
  // in gd.data and gd.layout (still) get mutated during this step.


  plots_1.supplyDefaults(gd);
  var dataOut = gd._fullData;
  var len = dataIn.length;

  for (var i = 0; i < len; i++) {
    var traceIn = dataIn[i];
    var base = ['data', i];

    if (!isPlainObject$1(traceIn)) {
      errorList.push(format$1('object', base));
      continue;
    }

    var traceOut = dataOut[i];
    var traceType = traceOut.type;
    var traceSchema = schema.traces[traceType].attributes; // PlotSchema does something fancy with trace 'type', reset it here
    // to make the trace schema compatible with Lib.validate.

    traceSchema.type = {
      valType: 'enumerated',
      values: [traceType]
    };

    if (traceOut.visible === false && traceIn.visible !== false) {
      errorList.push(format$1('invisible', base));
    }

    crawl(traceIn, traceOut, traceSchema, errorList, base);
    var transformsIn = traceIn.transforms;
    var transformsOut = traceOut.transforms;

    if (transformsIn) {
      if (!isArray(transformsIn)) {
        errorList.push(format$1('array', base, ['transforms']));
      }

      base.push('transforms');

      for (var j = 0; j < transformsIn.length; j++) {
        var path = ['transforms', j];
        var transformType = transformsIn[j].type;

        if (!isPlainObject$1(transformsIn[j])) {
          errorList.push(format$1('object', base, path));
          continue;
        }

        var transformSchema = schema.transforms[transformType] ? schema.transforms[transformType].attributes : {}; // add 'type' to transform schema to validate the transform type

        transformSchema.type = {
          valType: 'enumerated',
          values: Object.keys(schema.transforms)
        };
        crawl(transformsIn[j], transformsOut[j], transformSchema, errorList, base, path);
      }
    }
  }

  var layoutOut = gd._fullLayout;
  var layoutSchema = fillLayoutSchema(schema, dataOut);
  crawl(layoutIn, layoutOut, layoutSchema, errorList, 'layout'); // return undefined if no validation errors were found

  return errorList.length === 0 ? void 0 : errorList;
};

function crawl(objIn, objOut, schema, list, base, path) {
  path = path || [];
  var keys = Object.keys(objIn);

  for (var i = 0; i < keys.length; i++) {
    var k = keys[i]; // transforms are handled separately

    if (k === 'transforms') continue;
    var p = path.slice();
    p.push(k);
    var valIn = objIn[k];
    var valOut = objOut[k];
    var nestedSchema = getNestedSchema(schema, k);
    var nestedValType = (nestedSchema || {}).valType;
    var isInfoArray = nestedValType === 'info_array';
    var isColorscale = nestedValType === 'colorscale';
    var items = (nestedSchema || {}).items;

    if (!isInSchema(schema, k)) {
      list.push(format$1('schema', base, p));
    } else if (isPlainObject$1(valIn) && isPlainObject$1(valOut) && nestedValType !== 'any') {
      crawl(valIn, valOut, nestedSchema, list, base, p);
    } else if (isInfoArray && isArray(valIn)) {
      if (valIn.length > valOut.length) {
        list.push(format$1('unused', base, p.concat(valOut.length)));
      }

      var len = valOut.length;
      var arrayItems = Array.isArray(items);
      if (arrayItems) len = Math.min(len, items.length);
      var m, n, item, valInPart, valOutPart;

      if (nestedSchema.dimensions === 2) {
        for (n = 0; n < len; n++) {
          if (isArray(valIn[n])) {
            if (valIn[n].length > valOut[n].length) {
              list.push(format$1('unused', base, p.concat(n, valOut[n].length)));
            }

            var len2 = valOut[n].length;

            for (m = 0; m < (arrayItems ? Math.min(len2, items[n].length) : len2); m++) {
              item = arrayItems ? items[n][m] : items;
              valInPart = valIn[n][m];
              valOutPart = valOut[n][m];

              if (!lib_1.validate(valInPart, item)) {
                list.push(format$1('value', base, p.concat(n, m), valInPart));
              } else if (valOutPart !== valInPart && valOutPart !== +valInPart) {
                list.push(format$1('dynamic', base, p.concat(n, m), valInPart, valOutPart));
              }
            }
          } else {
            list.push(format$1('array', base, p.concat(n), valIn[n]));
          }
        }
      } else {
        for (n = 0; n < len; n++) {
          item = arrayItems ? items[n] : items;
          valInPart = valIn[n];
          valOutPart = valOut[n];

          if (!lib_1.validate(valInPart, item)) {
            list.push(format$1('value', base, p.concat(n), valInPart));
          } else if (valOutPart !== valInPart && valOutPart !== +valInPart) {
            list.push(format$1('dynamic', base, p.concat(n), valInPart, valOutPart));
          }
        }
      }
    } else if (nestedSchema.items && !isInfoArray && isArray(valIn)) {
      var _nestedSchema = items[Object.keys(items)[0]];
      var indexList = [];

      var j, _p; // loop over valOut items while keeping track of their
      // corresponding input container index (given by _index)


      for (j = 0; j < valOut.length; j++) {
        var _index = valOut[j]._index || j;

        _p = p.slice();

        _p.push(_index);

        if (isPlainObject$1(valIn[_index]) && isPlainObject$1(valOut[j])) {
          indexList.push(_index);
          var valInj = valIn[_index];
          var valOutj = valOut[j];

          if (isPlainObject$1(valInj) && valInj.visible !== false && valOutj.visible === false) {
            list.push(format$1('invisible', base, _p));
          } else crawl(valInj, valOutj, _nestedSchema, list, base, _p);
        }
      } // loop over valIn to determine where it went wrong for some items


      for (j = 0; j < valIn.length; j++) {
        _p = p.slice();

        _p.push(j);

        if (!isPlainObject$1(valIn[j])) {
          list.push(format$1('object', base, _p, valIn[j]));
        } else if (indexList.indexOf(j) === -1) {
          list.push(format$1('unused', base, _p));
        }
      }
    } else if (!isPlainObject$1(valIn) && isPlainObject$1(valOut)) {
      list.push(format$1('object', base, p, valIn));
    } else if (!isArrayOrTypedArray$2(valIn) && isArrayOrTypedArray$2(valOut) && !isInfoArray && !isColorscale) {
      list.push(format$1('array', base, p, valIn));
    } else if (!(k in objOut)) {
      list.push(format$1('unused', base, p, valIn));
    } else if (!lib_1.validate(valIn, nestedSchema)) {
      list.push(format$1('value', base, p, valIn));
    } else if (nestedSchema.valType === 'enumerated' && (nestedSchema.coerceNumber && valIn !== +valOut || valIn !== valOut)) {
      list.push(format$1('dynamic', base, p, valIn, valOut));
    }
  }

  return list;
} // the 'full' layout schema depends on the traces types presents


function fillLayoutSchema(schema, dataOut) {
  var layoutSchema = schema.layout.layoutAttributes;

  for (var i = 0; i < dataOut.length; i++) {
    var traceOut = dataOut[i];
    var traceSchema = schema.traces[traceOut.type];
    var traceLayoutAttr = traceSchema.layoutAttributes;

    if (traceLayoutAttr) {
      if (traceOut.subplot) {
        lib_1.extendFlat(layoutSchema[traceSchema.attributes.subplot.dflt], traceLayoutAttr);
      } else {
        lib_1.extendFlat(layoutSchema, traceLayoutAttr);
      }
    }
  }

  return layoutSchema;
} // validation error codes


var code2msgFunc = {
  object: function (base, astr) {
    var prefix;
    if (base === 'layout' && astr === '') prefix = 'The layout argument';else if (base[0] === 'data' && astr === '') {
      prefix = 'Trace ' + base[1] + ' in the data argument';
    } else prefix = inBase(base) + 'key ' + astr;
    return prefix + ' must be linked to an object container';
  },
  array: function (base, astr) {
    var prefix;
    if (base === 'data') prefix = 'The data argument';else prefix = inBase(base) + 'key ' + astr;
    return prefix + ' must be linked to an array container';
  },
  schema: function (base, astr) {
    return inBase(base) + 'key ' + astr + ' is not part of the schema';
  },
  unused: function (base, astr, valIn) {
    var target = isPlainObject$1(valIn) ? 'container' : 'key';
    return inBase(base) + target + ' ' + astr + ' did not get coerced';
  },
  dynamic: function (base, astr, valIn, valOut) {
    return [inBase(base) + 'key', astr, '(set to \'' + valIn + '\')', 'got reset to', '\'' + valOut + '\'', 'during defaults.'].join(' ');
  },
  invisible: function (base, astr) {
    return (astr ? inBase(base) + 'item ' + astr : 'Trace ' + base[1]) + ' got defaulted to be not visible';
  },
  value: function (base, astr, valIn) {
    return [inBase(base) + 'key ' + astr, 'is set to an invalid value (' + valIn + ')'].join(' ');
  }
};

function inBase(base) {
  if (isArray(base)) return 'In data trace ' + base[1] + ', ';
  return 'In ' + base + ', ';
}

function format$1(code, base, path, valIn, valOut) {
  path = path || '';
  var container, trace; // container is either 'data' or 'layout
  // trace is the trace index if 'data', null otherwise

  if (isArray(base)) {
    container = base[0];
    trace = base[1];
  } else {
    container = base;
    trace = null;
  }

  var astr = convertPathToAttributeString(path);
  var msg = code2msgFunc[code](base, astr, valIn, valOut); // log to console if logger config option is enabled

  lib_1.log(msg);
  return {
    code: code,
    container: container,
    trace: trace,
    path: path,
    astr: astr,
    msg: msg
  };
}

function isInSchema(schema, key) {
  var parts = splitKey(key);
  var keyMinusId = parts.keyMinusId;
  var id = parts.id;

  if (keyMinusId in schema && schema[keyMinusId]._isSubplotObj && id) {
    return true;
  }

  return key in schema;
}

function getNestedSchema(schema, key) {
  if (key in schema) return schema[key];
  var parts = splitKey(key);
  return schema[parts.keyMinusId];
}

var idRegex$1 = lib_1.counterRegex('([a-z]+)');

function splitKey(key) {
  var idMatch = key.match(idRegex$1);
  return {
    keyMinusId: idMatch && idMatch[1],
    id: idMatch && idMatch[2]
  };
}

function convertPathToAttributeString(path) {
  if (!isArray(path)) return String(path);
  var astr = '';

  for (var i = 0; i < path.length; i++) {
    var p = path[i];

    if (typeof p === 'number') {
      astr = astr.substr(0, astr.length - 1) + '[' + p + ']';
    } else {
      astr += p;
    }

    if (i < path.length - 1) astr += '.';
  }

  return astr;
}

/*
* substantial portions of this code from FileSaver.js
* https://github.com/eligrey/FileSaver.js
* License: https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
* FileSaver.js
* A saveAs() FileSaver implementation.
* 1.1.20160328
*
* By Eli Grey, http://eligrey.com
* License: MIT
*   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
*/


function fileSaver(url, name, format) {
  var saveLink = document.createElement('a');
  var canUseSaveLink = ('download' in saveLink);
  var promise = new Promise(function (resolve, reject) {
    var blob;
    var objectUrl; // IE 10+ (native saveAs)

    if (lib_1.isIE()) {
      // At this point we are only dealing with a decoded SVG as
      // a data URL (since IE only supports SVG)
      blob = helpers$1.createBlob(url, 'svg');
      window.navigator.msSaveBlob(blob, name);
      blob = null;
      return resolve(name);
    }

    if (canUseSaveLink) {
      blob = helpers$1.createBlob(url, format);
      objectUrl = helpers$1.createObjectURL(blob);
      saveLink.href = objectUrl;
      saveLink.download = name;
      document.body.appendChild(saveLink);
      saveLink.click();
      document.body.removeChild(saveLink);
      helpers$1.revokeObjectURL(objectUrl);
      blob = null;
      return resolve(name);
    } // Older versions of Safari did not allow downloading of blob urls


    if (lib_1.isSafari()) {
      var prefix = format === 'svg' ? ',' : ';base64,';
      helpers$1.octetStream(prefix + encodeURIComponent(url));
      return resolve(name);
    }

    reject(new Error('download error'));
  });
  return promise;
}

var filesaver = fileSaver;

/**
 * Plotly.downloadImage
 *
 * @param {object | string | HTML div} gd
 *   can either be a data/layout/config object
 *   or an existing graph <div>
 *   or an id to an existing graph <div>
 * @param {object} opts (see Plotly.toImage in ../plot_api/to_image)
 * @return {promise}
 */


function downloadImage$1(gd, opts) {
  var _gd;

  if (!lib_1.isPlainObject(gd)) _gd = lib_1.getGraphDiv(gd);
  opts = opts || {};
  opts.format = opts.format || 'png';
  opts.width = opts.width || null;
  opts.height = opts.height || null;
  opts.imageDataOnly = true;
  return new Promise(function (resolve, reject) {
    if (_gd && _gd._snapshotInProgress) {
      reject(new Error('Snapshotting already in progress.'));
    } // see comments within svgtoimg for additional
    //   discussion of problems with IE
    //   can now draw to canvas, but CORS tainted canvas
    //   does not allow toDataURL
    //   svg format will work though


    if (lib_1.isIE() && opts.format !== 'svg') {
      reject(new Error(helpers$1.MSG_IE_BAD_FORMAT));
    }

    if (_gd) _gd._snapshotInProgress = true;
    var promise = to_image(gd, opts);
    var filename = opts.filename || gd.fn || 'newplot';
    filename += '.' + opts.format.replace('-', '.');
    promise.then(function (result) {
      if (_gd) _gd._snapshotInProgress = false;
      return filesaver(result, filename, opts.format);
    }).then(function (name) {
      resolve(name);
    }).catch(function (err) {
      if (_gd) _gd._snapshotInProgress = false;
      reject(err);
    });
  });
}

var download = downloadImage$1;

var isPlainObject = lib_1.isPlainObject;
var dfltConfig = plot_config.dfltConfig;
/**
 * Plotly.makeTemplate: create a template off an existing figure to reuse
 * style attributes on other figures.
 *
 * Note: separated from the rest of templates because otherwise we get circular
 * references due to PlotSchema.
 *
 * @param {object|DOM element|string} figure: The figure to base the template on
 *     should contain a trace array `figure.data`
 *     and a layout object `figure.layout`
 * @returns {object} template: the extracted template - can then be used as
 *     `layout.template` in another figure.
 */

var makeTemplate$1 = function (figure) {
  figure = lib_1.isPlainObject(figure) ? figure : lib_1.getGraphDiv(figure);
  figure = lib_1.extendDeep({
    _context: dfltConfig
  }, {
    data: figure.data,
    layout: figure.layout
  });
  plots_1.supplyDefaults(figure);
  var data = figure.data || [];
  var layout = figure.layout || {}; // copy over a few items to help follow the schema

  layout._basePlotModules = figure._fullLayout._basePlotModules;
  layout._modules = figure._fullLayout._modules;
  var template = {
    data: {},
    layout: {}
  };
  /*
   * Note: we do NOT validate template values, we just take what's in the
   * user inputs data and layout, not the validated values in fullData and
   * fullLayout. Even if we were to validate here, there's no guarantee that
   * these values would still be valid when applied to a new figure, which
   * may contain different trace modes, different axes, etc. So it's
   * important that when applying a template we still validate the template
   * values, rather than just using them as defaults.
   */

  data.forEach(function (trace) {
    // TODO: What if no style info is extracted for this trace. We may
    // not want an empty object as the null value.
    // TODO: allow transforms to contribute to templates?
    // as it stands they are ignored, which may be for the best...
    var traceTemplate = {};
    walkStyleKeys(trace, traceTemplate, getTraceInfo.bind(null, trace));
    var traceType = lib_1.coerce(trace, {}, attributes$k, 'type');
    var typeTemplates = template.data[traceType];
    if (!typeTemplates) typeTemplates = template.data[traceType] = [];
    typeTemplates.push(traceTemplate);
  });
  walkStyleKeys(layout, template.layout, getLayoutInfo.bind(null, layout));
  /*
   * Compose the new template with an existing one to the same effect
   *
   * NOTE: there's a possibility of slightly different behavior: if the plot
   * has an invalid value and the old template has a valid value for the same
   * attribute, the plot will use the old template value but this routine
   * will pull the invalid value (resulting in the original default).
   * In the general case it's not possible to solve this with a single value,
   * since valid options can be context-dependent. It could be solved with
   * a *list* of values, but that would be huge complexity for little gain.
   */

  delete template.layout.template;
  var oldTemplate = layout.template;

  if (isPlainObject(oldTemplate)) {
    var oldLayoutTemplate = oldTemplate.layout;
    var i, traceType, oldTypeTemplates, oldTypeLen, typeTemplates, typeLen;

    if (isPlainObject(oldLayoutTemplate)) {
      mergeTemplates(oldLayoutTemplate, template.layout);
    }

    var oldDataTemplate = oldTemplate.data;

    if (isPlainObject(oldDataTemplate)) {
      for (traceType in template.data) {
        oldTypeTemplates = oldDataTemplate[traceType];

        if (Array.isArray(oldTypeTemplates)) {
          typeTemplates = template.data[traceType];
          typeLen = typeTemplates.length;
          oldTypeLen = oldTypeTemplates.length;

          for (i = 0; i < typeLen; i++) {
            mergeTemplates(oldTypeTemplates[i % oldTypeLen], typeTemplates[i]);
          }

          for (i = typeLen; i < oldTypeLen; i++) {
            typeTemplates.push(lib_1.extendDeep({}, oldTypeTemplates[i]));
          }
        }
      }

      for (traceType in oldDataTemplate) {
        if (!(traceType in template.data)) {
          template.data[traceType] = lib_1.extendDeep([], oldDataTemplate[traceType]);
        }
      }
    }
  }

  return template;
};

function mergeTemplates(oldTemplate, newTemplate) {
  // we don't care about speed here, just make sure we have a totally
  // distinct object from the previous template
  oldTemplate = lib_1.extendDeep({}, oldTemplate); // sort keys so we always get annotationdefaults before annotations etc
  // so arrayTemplater will work right

  var oldKeys = Object.keys(oldTemplate).sort();
  var i, j;

  function mergeOne(oldVal, newVal, key) {
    if (isPlainObject(newVal) && isPlainObject(oldVal)) {
      mergeTemplates(oldVal, newVal);
    } else if (Array.isArray(newVal) && Array.isArray(oldVal)) {
      // Note: omitted `inclusionAttr` from arrayTemplater here,
      // it's irrelevant as we only want the resulting `_template`.
      var templater = plot_template.arrayTemplater({
        _template: oldTemplate
      }, key);

      for (j = 0; j < newVal.length; j++) {
        var item = newVal[j];

        var oldItem = templater.newItem(item)._template;

        if (oldItem) mergeTemplates(oldItem, item);
      }

      var defaultItems = templater.defaultItems();

      for (j = 0; j < defaultItems.length; j++) newVal.push(defaultItems[j]._template); // templateitemname only applies to receiving plots


      for (j = 0; j < newVal.length; j++) delete newVal[j].templateitemname;
    }
  }

  for (i = 0; i < oldKeys.length; i++) {
    var key = oldKeys[i];
    var oldVal = oldTemplate[key];

    if (key in newTemplate) {
      mergeOne(oldVal, newTemplate[key], key);
    } else newTemplate[key] = oldVal; // if this is a base key from the old template (eg xaxis), look for
    // extended keys (eg xaxis2) in the new template to merge into


    if (getBaseKey(key) === key) {
      for (var key2 in newTemplate) {
        var baseKey2 = getBaseKey(key2);

        if (key2 !== baseKey2 && baseKey2 === key && !(key2 in oldTemplate)) {
          mergeOne(oldVal, newTemplate[key2], key);
        }
      }
    }
  }
}

function getBaseKey(key) {
  return key.replace(/[0-9]+$/, '');
}

function walkStyleKeys(parent, templateOut, getAttributeInfo, path, basePath) {
  var pathAttr = basePath && getAttributeInfo(basePath);

  for (var key in parent) {
    var child = parent[key];
    var nextPath = getNextPath(parent, key, path);
    var nextBasePath = getNextPath(parent, key, basePath);
    var attr = getAttributeInfo(nextBasePath);

    if (!attr) {
      var baseKey = getBaseKey(key);

      if (baseKey !== key) {
        nextBasePath = getNextPath(parent, baseKey, basePath);
        attr = getAttributeInfo(nextBasePath);
      }
    } // we'll get an attr if path starts with a valid part, then has an
    // invalid ending. Make sure we got all the way to the end.


    if (pathAttr && pathAttr === attr) continue;

    if (!attr || attr._noTemplating || attr.valType === 'data_array' || attr.arrayOk && Array.isArray(child)) {
      continue;
    }

    if (!attr.valType && isPlainObject(child)) {
      walkStyleKeys(child, templateOut, getAttributeInfo, nextPath, nextBasePath);
    } else if (attr._isLinkedToArray && Array.isArray(child)) {
      var dfltDone = false;
      var namedIndex = 0;
      var usedNames = {};

      for (var i = 0; i < child.length; i++) {
        var item = child[i];

        if (isPlainObject(item)) {
          var name = item.name;

          if (name) {
            if (!usedNames[name]) {
              // named array items: allow all attributes except data arrays
              walkStyleKeys(item, templateOut, getAttributeInfo, getNextPath(child, namedIndex, nextPath), getNextPath(child, namedIndex, nextBasePath));
              namedIndex++;
              usedNames[name] = 1;
            }
          } else if (!dfltDone) {
            var dfltKey = plot_template.arrayDefaultKey(key);
            var dfltPath = getNextPath(parent, dfltKey, path); // getAttributeInfo will fail if we try to use dfltKey directly.
            // Instead put this item into the next array element, then
            // pull it out and move it to dfltKey.

            var pathInArray = getNextPath(child, namedIndex, nextPath);
            walkStyleKeys(item, templateOut, getAttributeInfo, pathInArray, getNextPath(child, namedIndex, nextBasePath));
            var itemPropInArray = lib_1.nestedProperty(templateOut, pathInArray);
            var dfltProp = lib_1.nestedProperty(templateOut, dfltPath);
            dfltProp.set(itemPropInArray.get());
            itemPropInArray.set(null);
            dfltDone = true;
          }
        }
      }
    } else {
      var templateProp = lib_1.nestedProperty(templateOut, nextPath);
      templateProp.set(child);
    }
  }
}

function getLayoutInfo(layout, path) {
  return plot_schema.getLayoutValObject(layout, lib_1.nestedProperty({}, path).parts);
}

function getTraceInfo(trace, path) {
  return plot_schema.getTraceValObject(trace, lib_1.nestedProperty({}, path).parts);
}

function getNextPath(parent, key, path) {
  var nextPath;
  if (!path) nextPath = key;else if (Array.isArray(parent)) nextPath = path + '[' + key + ']';else nextPath = path + '.' + key;
  return nextPath;
}
/**
 * validateTemplate: Test for consistency between the given figure and
 * a template, either already included in the figure or given separately.
 * Note that not every issue we identify here is necessarily a problem,
 * it depends on what you're using the template for.
 *
 * @param {object|DOM element} figure: the plot, with {data, layout} members,
 *     to test the template against
 * @param {Optional(object)} template: the template, with its own {data, layout},
 *     to test. If omitted, we will look for a template already attached as the
 *     plot's `layout.template` attribute.
 *
 * @returns {array} array of error objects each containing:
 *  - {string} code
 *      error code ('missing', 'unused', 'reused', 'noLayout', 'noData')
 *  - {string} msg
 *      a full readable description of the issue.
 */


var validateTemplate$1 = function (figureIn, template) {
  var figure = lib_1.extendDeep({}, {
    _context: dfltConfig,
    data: figureIn.data,
    layout: figureIn.layout
  });
  var layout = figure.layout || {};
  if (!isPlainObject(template)) template = layout.template || {};
  var layoutTemplate = template.layout;
  var dataTemplate = template.data;
  var errorList = [];
  figure.layout = layout;
  figure.layout.template = template;
  plots_1.supplyDefaults(figure);
  var fullLayout = figure._fullLayout;
  var fullData = figure._fullData;
  var layoutPaths = {};

  function crawlLayoutForContainers(obj, paths) {
    for (var key in obj) {
      if (key.charAt(0) !== '_' && isPlainObject(obj[key])) {
        var baseKey = getBaseKey(key);
        var nextPaths = [];
        var i;

        for (i = 0; i < paths.length; i++) {
          nextPaths.push(getNextPath(obj, key, paths[i]));
          if (baseKey !== key) nextPaths.push(getNextPath(obj, baseKey, paths[i]));
        }

        for (i = 0; i < nextPaths.length; i++) {
          layoutPaths[nextPaths[i]] = 1;
        }

        crawlLayoutForContainers(obj[key], nextPaths);
      }
    }
  }

  function crawlLayoutTemplateForContainers(obj, path) {
    for (var key in obj) {
      if (key.indexOf('defaults') === -1 && isPlainObject(obj[key])) {
        var nextPath = getNextPath(obj, key, path);

        if (layoutPaths[nextPath]) {
          crawlLayoutTemplateForContainers(obj[key], nextPath);
        } else {
          errorList.push({
            code: 'unused',
            path: nextPath
          });
        }
      }
    }
  }

  if (!isPlainObject(layoutTemplate)) {
    errorList.push({
      code: 'layout'
    });
  } else {
    crawlLayoutForContainers(fullLayout, ['layout']);
    crawlLayoutTemplateForContainers(layoutTemplate, 'layout');
  }

  if (!isPlainObject(dataTemplate)) {
    errorList.push({
      code: 'data'
    });
  } else {
    var typeCount = {};
    var traceType;

    for (var i = 0; i < fullData.length; i++) {
      var fullTrace = fullData[i];
      traceType = fullTrace.type;
      typeCount[traceType] = (typeCount[traceType] || 0) + 1;

      if (!fullTrace._fullInput._template) {
        // this takes care of the case of traceType in the data but not
        // the template
        errorList.push({
          code: 'missing',
          index: fullTrace._fullInput.index,
          traceType: traceType
        });
      }
    }

    for (traceType in dataTemplate) {
      var templateCount = dataTemplate[traceType].length;
      var dataCount = typeCount[traceType] || 0;

      if (templateCount > dataCount) {
        errorList.push({
          code: 'unused',
          traceType: traceType,
          templateCount: templateCount,
          dataCount: dataCount
        });
      } else if (dataCount > templateCount) {
        errorList.push({
          code: 'reused',
          traceType: traceType,
          templateCount: templateCount,
          dataCount: dataCount
        });
      }
    }
  } // _template: false is when someone tried to modify an array item
  // but there was no template with matching name


  function crawlForMissingTemplates(obj, path) {
    for (var key in obj) {
      if (key.charAt(0) === '_') continue;
      var val = obj[key];
      var nextPath = getNextPath(obj, key, path);

      if (isPlainObject(val)) {
        if (Array.isArray(obj) && val._template === false && val.templateitemname) {
          errorList.push({
            code: 'missing',
            path: nextPath,
            templateitemname: val.templateitemname
          });
        }

        crawlForMissingTemplates(val, nextPath);
      } else if (Array.isArray(val) && hasPlainObject(val)) {
        crawlForMissingTemplates(val, nextPath);
      }
    }
  }

  crawlForMissingTemplates({
    data: fullData,
    layout: fullLayout
  }, '');
  if (errorList.length) return errorList.map(format);
};

function hasPlainObject(arr) {
  for (var i = 0; i < arr.length; i++) {
    if (isPlainObject(arr[i])) return true;
  }
}

function format(opts) {
  var msg;

  switch (opts.code) {
    case 'data':
      msg = 'The template has no key data.';
      break;

    case 'layout':
      msg = 'The template has no key layout.';
      break;

    case 'missing':
      if (opts.path) {
        msg = 'There are no templates for item ' + opts.path + ' with name ' + opts.templateitemname;
      } else {
        msg = 'There are no templates for trace ' + opts.index + ', of type ' + opts.traceType + '.';
      }

      break;

    case 'unused':
      if (opts.path) {
        msg = 'The template item at ' + opts.path + ' was not used in constructing the plot.';
      } else if (opts.dataCount) {
        msg = 'Some of the templates of type ' + opts.traceType + ' were not used. The template has ' + opts.templateCount + ' traces, the data only has ' + opts.dataCount + ' of this type.';
      } else {
        msg = 'The template has ' + opts.templateCount + ' traces of type ' + opts.traceType + ' but there are none in the data.';
      }

      break;

    case 'reused':
      msg = 'Some of the templates of type ' + opts.traceType + ' were used more than once. The template has ' + opts.templateCount + ' traces, the data has ' + opts.dataCount + ' of this type.';
      break;
  }

  opts.msg = msg;
  return opts;
}

var template_api = {
  makeTemplate: makeTemplate$1,
  validateTemplate: validateTemplate$1
};

var _doPlot = plot_api$1._doPlot;
var newPlot = plot_api$1.newPlot;
var restyle = plot_api$1.restyle;
var relayout = plot_api$1.relayout;
var redraw = plot_api$1.redraw;
var update = plot_api$1.update;
var _guiRestyle = plot_api$1._guiRestyle;
var _guiRelayout = plot_api$1._guiRelayout;
var _guiUpdate = plot_api$1._guiUpdate;
var _storeDirectGUIEdit = plot_api$1._storeDirectGUIEdit;
var react = plot_api$1.react;
var extendTraces = plot_api$1.extendTraces;
var prependTraces = plot_api$1.prependTraces;
var addTraces = plot_api$1.addTraces;
var deleteTraces = plot_api$1.deleteTraces;
var moveTraces = plot_api$1.moveTraces;
var purge = plot_api$1.purge;
var addFrames = plot_api$1.addFrames;
var deleteFrames = plot_api$1.deleteFrames;
var animate = plot_api$1.animate;
var setPlotConfig = plot_api$1.setPlotConfig;
var toImage$1 = to_image;
var validate = validate$1;
var downloadImage = download;
var makeTemplate = template_api.makeTemplate;
var validateTemplate = template_api.validateTemplate;
var plot_api = {
  _doPlot: _doPlot,
  newPlot: newPlot,
  restyle: restyle,
  relayout: relayout,
  redraw: redraw,
  update: update,
  _guiRestyle: _guiRestyle,
  _guiRelayout: _guiRelayout,
  _guiUpdate: _guiUpdate,
  _storeDirectGUIEdit: _storeDirectGUIEdit,
  react: react,
  extendTraces: extendTraces,
  prependTraces: prependTraces,
  addTraces: addTraces,
  deleteTraces: deleteTraces,
  moveTraces: moveTraces,
  purge: purge,
  addFrames: addFrames,
  deleteFrames: deleteFrames,
  animate: animate,
  setPlotConfig: setPlotConfig,
  toImage: toImage$1,
  validate: validate,
  downloadImage: downloadImage,
  makeTemplate: makeTemplate,
  validateTemplate: validateTemplate
};

var FORMAT_LINK = docs.FORMAT_LINK;
var DATE_FORMAT_LINK = docs.DATE_FORMAT_LINK;

function templateFormatStringDescription(opts) {
  var supportOther = opts && opts.supportOther;
  return ['Variables are inserted using %{variable},', 'for example "y: %{y}"' + (supportOther ? ' as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown.' : '.'), 'Numbers are formatted using d3-format\'s syntax %{variable:d3-format}, for example "Price: %{y:$.2f}".', FORMAT_LINK, 'for details on the formatting syntax.', 'Dates are formatted using d3-time-format\'s syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}".', DATE_FORMAT_LINK, 'for details on the date formatting syntax.'].join(' ');
}

function describeVariables(extra) {
  var descPart = extra.description ? ' ' + extra.description : '';
  var keys = extra.keys || [];

  if (keys.length > 0) {
    var quotedKeys = [];

    for (var i = 0; i < keys.length; i++) {
      quotedKeys[i] = '`' + keys[i] + '`';
    }

    descPart = descPart + 'Finally, the template string has access to ';

    if (keys.length === 1) {
      descPart = 'variable ' + quotedKeys[0];
    } else {
      descPart = 'variables ' + quotedKeys.slice(0, -1).join(', ') + ' and ' + quotedKeys.slice(-1) + '.';
    }
  }

  return descPart;
}

var hovertemplateAttrs$1 = function (opts, extra) {
  opts = opts || {};
  extra = extra || {};
  var descPart = describeVariables(extra);
  var hovertemplate = {
    valType: 'string',
    dflt: '',
    editType: opts.editType || 'none',
    description: ['Template string used for rendering the information that appear on hover box.', 'Note that this will override `hoverinfo`.', templateFormatStringDescription({
      supportOther: true
    }), 'The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.', 'Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart, 'Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>".', 'To hide the secondary box completely, use an empty tag `<extra></extra>`.'].join(' ')
  };

  if (opts.arrayOk !== false) {
    hovertemplate.arrayOk = true;
  }

  return hovertemplate;
};

var texttemplateAttrs$1 = function (opts, extra) {
  opts = opts || {};
  extra = extra || {};
  var descPart = describeVariables(extra);
  var texttemplate = {
    valType: 'string',
    dflt: '',
    editType: opts.editType || 'calc',
    description: ['Template string used for rendering the information text that appear on points.', 'Note that this will override `textinfo`.', templateFormatStringDescription(), 'Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart].join(' ')
  };

  if (opts.arrayOk !== false) {
    texttemplate.arrayOk = true;
  }

  return texttemplate;
};

var template_attributes = {
  hovertemplateAttrs: hovertemplateAttrs$1,
  texttemplateAttrs: texttemplateAttrs$1
};

var constants$5 = {
  PTS_LINESONLY: 20,
  // fixed parameters of clustering and clipping algorithms
  // fraction of clustering tolerance "so close we don't even consider it a new point"
  minTolerance: 0.2,
  // how fast does clustering tolerance increase as you get away from the visible region
  toleranceGrowth: 10,
  // number of viewport sizes away from the visible region
  // at which we clip all lines to the perimeter
  maxScreensAway: 20,
  eventDataKeys: []
};

var axisHoverFormat = axis_format_attributes.axisHoverFormat;
var texttemplateAttrs = template_attributes.texttemplateAttrs;
var hovertemplateAttrs = template_attributes.hovertemplateAttrs;
var dash$1 = attributes$i.dash;
var pattern = attributes$i.pattern;
var extendFlat$5 = extend.extendFlat;

function axisPeriod(axis) {
  return {
    valType: 'any',
    dflt: 0,
    editType: 'calc',
    description: ['Only relevant when the axis `type` is *date*.', 'Sets the period positioning in milliseconds or *M<n>* on the ' + axis + ' axis.', 'Special values in the form of *M<n>* could be used to declare', 'the number of months. In this case `n` must be a positive integer.'].join(' ')
  };
}

function axisPeriod0(axis) {
  return {
    valType: 'any',
    editType: 'calc',
    description: ['Only relevant when the axis `type` is *date*.', 'Sets the base for period positioning in milliseconds or date string on the ' + axis + ' axis.', 'When `' + axis + 'period` is round number of weeks,', 'the `' + axis + 'period0` by default would be on a Sunday i.e. 2000-01-02,', 'otherwise it would be at 2000-01-01.'].join(' ')
  };
}

function axisPeriodAlignment(axis) {
  return {
    valType: 'enumerated',
    values: ['start', 'middle', 'end'],
    dflt: 'middle',
    editType: 'calc',
    description: ['Only relevant when the axis `type` is *date*.', 'Sets the alignment of data points on the ' + axis + ' axis.'].join(' ')
  };
}

var attributes$c = {
  x: {
    valType: 'data_array',
    editType: 'calc+clearAxisTypes',
    anim: true,
    description: 'Sets the x coordinates.'
  },
  x0: {
    valType: 'any',
    dflt: 0,
    editType: 'calc+clearAxisTypes',
    anim: true,
    description: ['Alternate to `x`.', 'Builds a linear space of x coordinates.', 'Use with `dx`', 'where `x0` is the starting coordinate and `dx` the step.'].join(' ')
  },
  dx: {
    valType: 'number',
    dflt: 1,
    editType: 'calc',
    anim: true,
    description: ['Sets the x coordinate step.', 'See `x0` for more info.'].join(' ')
  },
  y: {
    valType: 'data_array',
    editType: 'calc+clearAxisTypes',
    anim: true,
    description: 'Sets the y coordinates.'
  },
  y0: {
    valType: 'any',
    dflt: 0,
    editType: 'calc+clearAxisTypes',
    anim: true,
    description: ['Alternate to `y`.', 'Builds a linear space of y coordinates.', 'Use with `dy`', 'where `y0` is the starting coordinate and `dy` the step.'].join(' ')
  },
  dy: {
    valType: 'number',
    dflt: 1,
    editType: 'calc',
    anim: true,
    description: ['Sets the y coordinate step.', 'See `y0` for more info.'].join(' ')
  },
  xperiod: axisPeriod('x'),
  yperiod: axisPeriod('y'),
  xperiod0: axisPeriod0('x0'),
  yperiod0: axisPeriod0('y0'),
  xperiodalignment: axisPeriodAlignment('x'),
  yperiodalignment: axisPeriodAlignment('y'),
  xhoverformat: axisHoverFormat('x'),
  yhoverformat: axisHoverFormat('y'),
  stackgroup: {
    valType: 'string',
    dflt: '',
    editType: 'calc',
    description: ['Set several scatter traces (on the same subplot) to the same', 'stackgroup in order to add their y values (or their x values if', '`orientation` is *h*). If blank or omitted this trace will not be', 'stacked. Stacking also turns `fill` on by default, using *tonexty*', '(*tonextx*) if `orientation` is *h* (*v*) and sets the default', '`mode` to *lines* irrespective of point count.', 'You can only stack on a numeric (linear or log) axis.', 'Traces in a `stackgroup` will only fill to (or be filled to) other', 'traces in the same group. With multiple `stackgroup`s or some', 'traces stacked and some not, if fill-linked traces are not already', 'consecutive, the later ones will be pushed down in the drawing order.'].join(' ')
  },
  orientation: {
    valType: 'enumerated',
    values: ['v', 'h'],
    editType: 'calc',
    description: ['Only relevant when `stackgroup` is used, and only the first', '`orientation` found in the `stackgroup` will be used - including', 'if `visible` is *legendonly* but not if it is `false`. Sets the', 'stacking direction. With *v* (*h*), the y (x) values of subsequent', 'traces are added. Also affects the default value of `fill`.'].join(' ')
  },
  groupnorm: {
    valType: 'enumerated',
    values: ['', 'fraction', 'percent'],
    dflt: '',
    editType: 'calc',
    description: ['Only relevant when `stackgroup` is used, and only the first', '`groupnorm` found in the `stackgroup` will be used - including', 'if `visible` is *legendonly* but not if it is `false`.', 'Sets the normalization for the sum of this `stackgroup`.', 'With *fraction*, the value of each trace at each location is', 'divided by the sum of all trace values at that location.', '*percent* is the same but multiplied by 100 to show percentages.', 'If there are multiple subplots, or multiple `stackgroup`s on one', 'subplot, each will be normalized within its own set.'].join(' ')
  },
  stackgaps: {
    valType: 'enumerated',
    values: ['infer zero', 'interpolate'],
    dflt: 'infer zero',
    editType: 'calc',
    description: ['Only relevant when `stackgroup` is used, and only the first', '`stackgaps` found in the `stackgroup` will be used - including', 'if `visible` is *legendonly* but not if it is `false`.', 'Determines how we handle locations at which other traces in this', 'group have data but this one does not.', 'With *infer zero* we insert a zero at these locations.', 'With *interpolate* we linearly interpolate between existing', 'values, and extrapolate a constant beyond the existing values.' // TODO - implement interrupt mode
    // '*interrupt* omits this trace from the stack at this location by',
    // 'dropping abruptly, midway between the existing and missing locations.'
    ].join(' ')
  },
  text: {
    valType: 'string',
    dflt: '',
    arrayOk: true,
    editType: 'calc',
    description: ['Sets text elements associated with each (x,y) pair.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\'s (x,y) coordinates.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')
  },
  texttemplate: texttemplateAttrs({}, {}),
  hovertext: {
    valType: 'string',
    dflt: '',
    arrayOk: true,
    editType: 'style',
    description: ['Sets hover text elements associated with each (x,y) pair.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\'s (x,y) coordinates.', 'To be seen, trace `hoverinfo` must contain a *text* flag.'].join(' ')
  },
  mode: {
    valType: 'flaglist',
    flags: ['lines', 'markers', 'text'],
    extras: ['none'],
    editType: 'calc',
    description: ['Determines the drawing mode for this scatter trace.', 'If the provided `mode` includes *text* then the `text` elements', 'appear at the coordinates. Otherwise, the `text` elements', 'appear on hover.', 'If there are less than ' + constants$5.PTS_LINESONLY + ' points', 'and the trace is not stacked', 'then the default is *lines+markers*. Otherwise, *lines*.'].join(' ')
  },
  hoveron: {
    valType: 'flaglist',
    flags: ['points', 'fills'],
    editType: 'style',
    description: ['Do the hover effects highlight individual points (markers or', 'line points) or do they highlight filled regions?', 'If the fill is *toself* or *tonext* and there are no markers', 'or text, then the default is *fills*, otherwise it is *points*.'].join(' ')
  },
  hovertemplate: hovertemplateAttrs({}, {
    keys: constants$5.eventDataKeys
  }),
  line: {
    color: {
      valType: 'color',
      editType: 'style',
      anim: true,
      description: 'Sets the line color.'
    },
    width: {
      valType: 'number',
      min: 0,
      dflt: 2,
      editType: 'style',
      anim: true,
      description: 'Sets the line width (in px).'
    },
    shape: {
      valType: 'enumerated',
      values: ['linear', 'spline', 'hv', 'vh', 'hvh', 'vhv'],
      dflt: 'linear',
      editType: 'plot',
      description: ['Determines the line shape.', 'With *spline* the lines are drawn using spline interpolation.', 'The other available values correspond to step-wise line shapes.'].join(' ')
    },
    smoothing: {
      valType: 'number',
      min: 0,
      max: 1.3,
      dflt: 1,
      editType: 'plot',
      description: ['Has an effect only if `shape` is set to *spline*', 'Sets the amount of smoothing.', '*0* corresponds to no smoothing (equivalent to a *linear* shape).'].join(' ')
    },
    dash: extendFlat$5({}, dash$1, {
      editType: 'style'
    }),
    simplify: {
      valType: 'boolean',
      dflt: true,
      editType: 'plot',
      description: ['Simplifies lines by removing nearly-collinear points. When transitioning', 'lines, it may be desirable to disable this so that the number of points', 'along the resulting SVG path is unaffected.'].join(' ')
    },
    editType: 'plot'
  },
  connectgaps: {
    valType: 'boolean',
    dflt: false,
    editType: 'calc',
    description: ['Determines whether or not gaps', '(i.e. {nan} or missing values)', 'in the provided data arrays are connected.'].join(' ')
  },
  cliponaxis: {
    valType: 'boolean',
    dflt: true,
    editType: 'plot',
    description: ['Determines whether or not markers and text nodes', 'are clipped about the subplot axes.', 'To show markers and text nodes above axis lines and tick labels,', 'make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.'].join(' ')
  },
  fill: {
    valType: 'enumerated',
    values: ['none', 'tozeroy', 'tozerox', 'tonexty', 'tonextx', 'toself', 'tonext'],
    editType: 'calc',
    description: ['Sets the area to fill with a solid color.', 'Defaults to *none* unless this trace is stacked, then it gets', '*tonexty* (*tonextx*) if `orientation` is *v* (*h*)', 'Use with `fillcolor` if not *none*.', '*tozerox* and *tozeroy* fill to x=0 and y=0 respectively.', '*tonextx* and *tonexty* fill between the endpoints of this', 'trace and the endpoints of the trace before it, connecting those', 'endpoints with straight lines (to make a stacked area graph);', 'if there is no trace before it, they behave like *tozerox* and', '*tozeroy*.', '*toself* connects the endpoints of the trace (or each segment', 'of the trace if it has gaps) into a closed shape.', '*tonext* fills the space between two traces if one completely', 'encloses the other (eg consecutive contour lines), and behaves like', '*toself* if there is no trace before it. *tonext* should not be', 'used if one trace does not enclose the other.', 'Traces in a `stackgroup` will only fill to (or be filled to) other', 'traces in the same group. With multiple `stackgroup`s or some', 'traces stacked and some not, if fill-linked traces are not already', 'consecutive, the later ones will be pushed down in the drawing order.'].join(' ')
  },
  fillcolor: {
    valType: 'color',
    editType: 'style',
    anim: true,
    description: ['Sets the fill color.', 'Defaults to a half-transparent variant of the line color,', 'marker color, or marker line color, whichever is available.'].join(' ')
  },
  fillpattern: pattern,
  marker: extendFlat$5({
    symbol: {
      valType: 'enumerated',
      values: drawing_1.symbolList,
      dflt: 'circle',
      arrayOk: true,
      editType: 'style',
      description: ['Sets the marker symbol type.', 'Adding 100 is equivalent to appending *-open* to a symbol name.', 'Adding 200 is equivalent to appending *-dot* to a symbol name.', 'Adding 300 is equivalent to appending *-open-dot*', 'or *dot-open* to a symbol name.'].join(' ')
    },
    opacity: {
      valType: 'number',
      min: 0,
      max: 1,
      arrayOk: true,
      editType: 'style',
      anim: true,
      description: 'Sets the marker opacity.'
    },
    size: {
      valType: 'number',
      min: 0,
      dflt: 6,
      arrayOk: true,
      editType: 'calc',
      anim: true,
      description: 'Sets the marker size (in px).'
    },
    maxdisplayed: {
      valType: 'number',
      min: 0,
      dflt: 0,
      editType: 'plot',
      description: ['Sets a maximum number of points to be drawn on the graph.', '*0* corresponds to no limit.'].join(' ')
    },
    sizeref: {
      valType: 'number',
      dflt: 1,
      editType: 'calc',
      description: ['Has an effect only if `marker.size` is set to a numerical array.', 'Sets the scale factor used to determine the rendered size of', 'marker points. Use with `sizemin` and `sizemode`.'].join(' ')
    },
    sizemin: {
      valType: 'number',
      min: 0,
      dflt: 0,
      editType: 'calc',
      description: ['Has an effect only if `marker.size` is set to a numerical array.', 'Sets the minimum size (in px) of the rendered marker points.'].join(' ')
    },
    sizemode: {
      valType: 'enumerated',
      values: ['diameter', 'area'],
      dflt: 'diameter',
      editType: 'calc',
      description: ['Has an effect only if `marker.size` is set to a numerical array.', 'Sets the rule for which the data in `size` is converted', 'to pixels.'].join(' ')
    },
    line: extendFlat$5({
      width: {
        valType: 'number',
        min: 0,
        arrayOk: true,
        editType: 'style',
        anim: true,
        description: 'Sets the width (in px) of the lines bounding the marker points.'
      },
      editType: 'calc'
    }, attributes$f('marker.line', {
      anim: true
    })),
    gradient: {
      type: {
        valType: 'enumerated',
        values: ['radial', 'horizontal', 'vertical', 'none'],
        arrayOk: true,
        dflt: 'none',
        editType: 'calc',
        description: ['Sets the type of gradient used to fill the markers'].join(' ')
      },
      color: {
        valType: 'color',
        arrayOk: true,
        editType: 'calc',
        description: ['Sets the final color of the gradient fill:', 'the center color for radial, the right for horizontal,', 'or the bottom for vertical.'].join(' ')
      },
      editType: 'calc'
    },
    editType: 'calc'
  }, attributes$f('marker', {
    anim: true
  })),
  selected: {
    marker: {
      opacity: {
        valType: 'number',
        min: 0,
        max: 1,
        editType: 'style',
        description: 'Sets the marker opacity of selected points.'
      },
      color: {
        valType: 'color',
        editType: 'style',
        description: 'Sets the marker color of selected points.'
      },
      size: {
        valType: 'number',
        min: 0,
        editType: 'style',
        description: 'Sets the marker size of selected points.'
      },
      editType: 'style'
    },
    textfont: {
      color: {
        valType: 'color',
        editType: 'style',
        description: 'Sets the text font color of selected points.'
      },
      editType: 'style'
    },
    editType: 'style'
  },
  unselected: {
    marker: {
      opacity: {
        valType: 'number',
        min: 0,
        max: 1,
        editType: 'style',
        description: 'Sets the marker opacity of unselected points, applied only when a selection exists.'
      },
      color: {
        valType: 'color',
        editType: 'style',
        description: 'Sets the marker color of unselected points, applied only when a selection exists.'
      },
      size: {
        valType: 'number',
        min: 0,
        editType: 'style',
        description: 'Sets the marker size of unselected points, applied only when a selection exists.'
      },
      editType: 'style'
    },
    textfont: {
      color: {
        valType: 'color',
        editType: 'style',
        description: 'Sets the text font color of unselected points, applied only when a selection exists.'
      },
      editType: 'style'
    },
    editType: 'style'
  },
  textposition: {
    valType: 'enumerated',
    values: ['top left', 'top center', 'top right', 'middle left', 'middle center', 'middle right', 'bottom left', 'bottom center', 'bottom right'],
    dflt: 'middle center',
    arrayOk: true,
    editType: 'calc',
    description: ['Sets the positions of the `text` elements', 'with respects to the (x,y) coordinates.'].join(' ')
  },
  textfont: font_attributes({
    editType: 'calc',
    colorEditType: 'style',
    arrayOk: true,
    description: 'Sets the text font.'
  })
};

var xy_defaults = function handleXYDefaults(traceIn, traceOut, layout, coerce) {
  var x = coerce('x');
  var y = coerce('y');
  var len;
  var handleCalendarDefaults = registry.getComponentMethod('calendars', 'handleTraceDefaults');
  handleCalendarDefaults(traceIn, traceOut, ['x', 'y'], layout);

  if (x) {
    var xlen = lib_1.minRowLength(x);

    if (y) {
      len = Math.min(xlen, lib_1.minRowLength(y));
    } else {
      len = xlen;
      coerce('y0');
      coerce('dy');
    }
  } else {
    if (!y) return 0;
    len = lib_1.minRowLength(y);
    coerce('x0');
    coerce('dx');
  }

  traceOut._length = len;
  return len;
};

var dateTick0 = lib_1.dateTick0;
var ONEWEEK = numerical.ONEWEEK;

function getPeriod0Dflt(period, calendar) {
  if (period % ONEWEEK === 0) {
    return dateTick0(calendar, 1); // Sunday
  }

  return dateTick0(calendar, 0);
}

var period_defaults = function handlePeriodDefaults(traceIn, traceOut, layout, coerce, opts) {
  if (!opts) {
    opts = {
      x: true,
      y: true
    };
  }

  if (opts.x) {
    var xperiod = coerce('xperiod');

    if (xperiod) {
      coerce('xperiod0', getPeriod0Dflt(xperiod, traceOut.xcalendar));
      coerce('xperiodalignment');
    }
  }

  if (opts.y) {
    var yperiod = coerce('yperiod');

    if (yperiod) {
      coerce('yperiod0', getPeriod0Dflt(yperiod, traceOut.ycalendar));
      coerce('yperiodalignment');
    }
  }
};

var perStackAttrs = ['orientation', 'groupnorm', 'stackgaps'];

var stack_defaults = function handleStackDefaults(traceIn, traceOut, layout, coerce) {
  var stackOpts = layout._scatterStackOpts;
  var stackGroup = coerce('stackgroup');

  if (stackGroup) {
    // use independent stacking options per subplot
    var subplot = traceOut.xaxis + traceOut.yaxis;
    var subplotStackOpts = stackOpts[subplot];
    if (!subplotStackOpts) subplotStackOpts = stackOpts[subplot] = {};
    var groupOpts = subplotStackOpts[stackGroup];
    var firstTrace = false;

    if (groupOpts) {
      groupOpts.traces.push(traceOut);
    } else {
      groupOpts = subplotStackOpts[stackGroup] = {
        // keep track of trace indices for use during stacking calculations
        // this will be filled in during `calc` and used during `crossTraceCalc`
        // so it's OK if we don't recreate it during a non-calc edit
        traceIndices: [],
        // Hold on to the whole set of prior traces
        // First one is most important, so we can clear defaults
        // there if we find explicit values only in later traces.
        // We're only going to *use* the values stored in groupOpts,
        // but for the editor and validate we want things self-consistent
        // The full set of traces is used only to fix `fill` default if
        // we find `orientation: 'h'` beyond the first trace
        traces: [traceOut]
      };
      firstTrace = true;
    } // TODO: how is this going to work with groupby transforms?
    // in principle it should be OK I guess, as long as explicit group styles
    // don't override explicit base-trace styles?


    var dflts = {
      orientation: traceOut.x && !traceOut.y ? 'h' : 'v'
    };

    for (var i = 0; i < perStackAttrs.length; i++) {
      var attr = perStackAttrs[i];
      var attrFound = attr + 'Found';

      if (!groupOpts[attrFound]) {
        var traceHasAttr = traceIn[attr] !== undefined;
        var isOrientation = attr === 'orientation';

        if (traceHasAttr || firstTrace) {
          groupOpts[attr] = coerce(attr, dflts[attr]);

          if (isOrientation) {
            groupOpts.fillDflt = groupOpts[attr] === 'h' ? 'tonextx' : 'tonexty';
          }

          if (traceHasAttr) {
            // Note: this will show a value here even if it's invalid
            // in which case it will revert to default.
            groupOpts[attrFound] = true; // Note: only one trace in the stack will get a _fullData
            // entry for a given stack-wide attribute. If no traces
            // (or the first trace) specify that attribute, the
            // first trace will get it. If the first trace does NOT
            // specify it but some later trace does, then it gets
            // removed from the first trace and only included in the
            // one that specified it. This is mostly important for
            // editors (that want to see the full values to know
            // what settings are available) and Plotly.react diffing.
            // Editors may want to use fullLayout._scatterStackOpts
            // directly and make these settings available from all
            // traces in the stack... then set the new value into
            // the first trace, and clear all later traces.

            if (!firstTrace) {
              delete groupOpts.traces[0][attr]; // orientation can affect default fill of previous traces

              if (isOrientation) {
                for (var j = 0; j < groupOpts.traces.length - 1; j++) {
                  var trace2 = groupOpts.traces[j];

                  if (trace2._input.fill !== trace2.fill) {
                    trace2.fill = groupOpts.fillDflt;
                  }
                }
              }
            }
          }
        }
      }
    }

    return groupOpts;
  }
};

var hasColorscale$2 = helpers$a.hasColorscale;
/*
 * opts: object of flags to control features not all marker users support
 *   noLine: caller does not support marker lines
 *   gradient: caller supports gradients
 *   noSelect: caller does not support selected/unselected attribute containers
 */

var marker_defaults = function markerDefaults(traceIn, traceOut, defaultColor, layout, coerce, opts) {
  var isBubble = subtypes.isBubble(traceIn);
  var lineColor = (traceIn.line || {}).color;
  var defaultMLC;
  opts = opts || {}; // marker.color inherit from line.color (even if line.color is an array)

  if (lineColor) defaultColor = lineColor;
  coerce('marker.symbol');
  coerce('marker.opacity', isBubble ? 0.7 : 1);
  coerce('marker.size');
  coerce('marker.color', defaultColor);

  if (hasColorscale$2(traceIn, 'marker')) {
    defaults$f(traceIn, traceOut, layout, coerce, {
      prefix: 'marker.',
      cLetter: 'c'
    });
  }

  if (!opts.noSelect) {
    coerce('selected.marker.color');
    coerce('unselected.marker.color');
    coerce('selected.marker.size');
    coerce('unselected.marker.size');
  }

  if (!opts.noLine) {
    // if there's a line with a different color than the marker, use
    // that line color as the default marker line color
    // (except when it's an array)
    // mostly this is for transparent markers to behave nicely
    if (lineColor && !Array.isArray(lineColor) && traceOut.marker.color !== lineColor) {
      defaultMLC = lineColor;
    } else if (isBubble) defaultMLC = color_1.background;else defaultMLC = color_1.defaultLine;

    coerce('marker.line.color', defaultMLC);

    if (hasColorscale$2(traceIn, 'marker.line')) {
      defaults$f(traceIn, traceOut, layout, coerce, {
        prefix: 'marker.line.',
        cLetter: 'c'
      });
    }

    coerce('marker.line.width', isBubble ? 1 : 0);
  }

  if (isBubble) {
    coerce('marker.sizeref');
    coerce('marker.sizemin');
    coerce('marker.sizemode');
  }

  if (opts.gradient) {
    var gradientType = coerce('marker.gradient.type');

    if (gradientType !== 'none') {
      coerce('marker.gradient.color');
    }
  }
};

var isArrayOrTypedArray$1 = lib_1.isArrayOrTypedArray;
var hasColorscale$1 = helpers$a.hasColorscale;

var line_defaults = function lineDefaults(traceIn, traceOut, defaultColor, layout, coerce, opts) {
  var markerColor = (traceIn.marker || {}).color;
  coerce('line.color', defaultColor);

  if (hasColorscale$1(traceIn, 'line')) {
    defaults$f(traceIn, traceOut, layout, coerce, {
      prefix: 'line.',
      cLetter: 'c'
    });
  } else {
    var lineColorDflt = (isArrayOrTypedArray$1(markerColor) ? false : markerColor) || defaultColor;
    coerce('line.color', lineColorDflt);
  }

  coerce('line.width');
  if (!(opts || {}).noDash) coerce('line.dash');
};

var line_shape_defaults = function handleLineShapeDefaults(traceIn, traceOut, coerce) {
  var shape = coerce('line.shape');
  if (shape === 'spline') coerce('line.smoothing');
};

/*
 * opts: object of flags to control features not all text users support
 *   noSelect: caller does not support selected/unselected attribute containers
 */


var text_defaults = function (traceIn, traceOut, layout, coerce, opts) {
  opts = opts || {};
  coerce('textposition');
  lib_1.coerceFont(coerce, 'textfont', layout.font);

  if (!opts.noSelect) {
    coerce('selected.textfont.color');
    coerce('unselected.textfont.color');
  }
};

var isArrayOrTypedArray = lib_1.isArrayOrTypedArray;

var fillcolor_defaults = function fillColorDefaults(traceIn, traceOut, defaultColor, coerce) {
  var inheritColorFromMarker = false;

  if (traceOut.marker) {
    // don't try to inherit a color array
    var markerColor = traceOut.marker.color;
    var markerLineColor = (traceOut.marker.line || {}).color;

    if (markerColor && !isArrayOrTypedArray(markerColor)) {
      inheritColorFromMarker = markerColor;
    } else if (markerLineColor && !isArrayOrTypedArray(markerLineColor)) {
      inheritColorFromMarker = markerLineColor;
    }
  }

  coerce('fillcolor', color_1.addOpacity((traceOut.line || {}).color || inheritColorFromMarker || defaultColor, 0.5));
};

var coercePattern = lib_1.coercePattern;

var defaults$b = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {
  function coerce(attr, dflt) {
    return lib_1.coerce(traceIn, traceOut, attributes$c, attr, dflt);
  }

  var len = xy_defaults(traceIn, traceOut, layout, coerce);
  if (!len) traceOut.visible = false;
  if (!traceOut.visible) return;
  period_defaults(traceIn, traceOut, layout, coerce);
  coerce('xhoverformat');
  coerce('yhoverformat');
  var stackGroupOpts = stack_defaults(traceIn, traceOut, layout, coerce);
  var defaultMode = !stackGroupOpts && len < constants$5.PTS_LINESONLY ? 'lines+markers' : 'lines';
  coerce('text');
  coerce('hovertext');
  coerce('mode', defaultMode);

  if (subtypes.hasLines(traceOut)) {
    line_defaults(traceIn, traceOut, defaultColor, layout, coerce);
    line_shape_defaults(traceIn, traceOut, coerce);
    coerce('connectgaps');
    coerce('line.simplify');
  }

  if (subtypes.hasMarkers(traceOut)) {
    marker_defaults(traceIn, traceOut, defaultColor, layout, coerce, {
      gradient: true
    });
  }

  if (subtypes.hasText(traceOut)) {
    coerce('texttemplate');
    text_defaults(traceIn, traceOut, layout, coerce);
  }

  var dfltHoverOn = [];

  if (subtypes.hasMarkers(traceOut) || subtypes.hasText(traceOut)) {
    coerce('cliponaxis');
    coerce('marker.maxdisplayed');
    dfltHoverOn.push('points');
  } // It's possible for this default to be changed by a later trace.
  // We handle that case in some hacky code inside handleStackDefaults.


  coerce('fill', stackGroupOpts ? stackGroupOpts.fillDflt : 'none');

  if (traceOut.fill !== 'none') {
    fillcolor_defaults(traceIn, traceOut, defaultColor, coerce);
    if (!subtypes.hasLines(traceOut)) line_shape_defaults(traceIn, traceOut, coerce);
    coercePattern(coerce, 'fillpattern', traceOut.fillcolor, false);
  }

  var lineColor = (traceOut.line || {}).color;
  var markerColor = (traceOut.marker || {}).color;

  if (traceOut.fill === 'tonext' || traceOut.fill === 'toself') {
    dfltHoverOn.push('fills');
  }

  coerce('hoveron', dfltHoverOn.join('+') || 'points');
  if (traceOut.hoveron !== 'fills') coerce('hovertemplate');
  var errorBarsSupplyDefaults = registry.getComponentMethod('errorbars', 'supplyDefaults');
  errorBarsSupplyDefaults(traceIn, traceOut, lineColor || markerColor || defaultColor, {
    axis: 'y'
  });
  errorBarsSupplyDefaults(traceIn, traceOut, lineColor || markerColor || defaultColor, {
    axis: 'x',
    inherit: 'y'
  });
  lib_1.coerceSelectionMarkerOpacity(traceOut, coerce);
};

var cross_trace_defaults = function crossTraceDefaults(fullData) {
  for (var i = 0; i < fullData.length; i++) {
    var tracei = fullData[i];
    if (tracei.type !== 'scatter') continue;
    var filli = tracei.fill;
    if (filli === 'none' || filli === 'toself') continue;
    tracei.opacity = undefined;

    if (filli === 'tonexty' || filli === 'tonextx') {
      for (var j = i - 1; j >= 0; j--) {
        var tracej = fullData[j];

        if (tracej.type === 'scatter' && tracej.xaxis === tracei.xaxis && tracej.yaxis === tracei.yaxis) {
          tracej.opacity = undefined;
          break;
        }
      }
    }
  }
};

var dateTime2ms = lib_1.dateTime2ms;
var incrementMonth = lib_1.incrementMonth;
var ONEAVGMONTH = numerical.ONEAVGMONTH;

var align_period = function alignPeriod(trace, ax, axLetter, vals) {
  if (ax.type !== 'date') return {
    vals: vals
  };
  var alignment = trace[axLetter + 'periodalignment'];
  if (!alignment) return {
    vals: vals
  };
  var period = trace[axLetter + 'period'];
  var mPeriod;

  if (fastIsnumeric(period)) {
    period = +period;
    if (period <= 0) return {
      vals: vals
    };
  } else if (typeof period === 'string' && period.charAt(0) === 'M') {
    var n = +period.substring(1);

    if (n > 0 && Math.round(n) === n) {
      mPeriod = n;
    } else return {
      vals: vals
    };
  }

  var calendar = ax.calendar;
  var isStart = 'start' === alignment; // var isMiddle = 'middle' === alignment;

  var isEnd = 'end' === alignment;
  var period0 = trace[axLetter + 'period0'];
  var base = dateTime2ms(period0, calendar) || 0;
  var newVals = [];
  var starts = [];
  var ends = [];
  var len = vals.length;

  for (var i = 0; i < len; i++) {
    var v = vals[i];
    var nEstimated, startTime, endTime;

    if (mPeriod) {
      // guess at how many periods away from base we are
      nEstimated = Math.round((v - base) / (mPeriod * ONEAVGMONTH));
      endTime = incrementMonth(base, mPeriod * nEstimated, calendar); // iterate to get the exact bounds before and after v
      // there may be ways to make this faster, but most of the time
      // we'll only execute each loop zero or one time.

      while (endTime > v) {
        endTime = incrementMonth(endTime, -mPeriod, calendar);
      }

      while (endTime <= v) {
        endTime = incrementMonth(endTime, mPeriod, calendar);
      } // now we know endTime is the boundary immediately after v
      // so startTime is obtained by incrementing backward one period.


      startTime = incrementMonth(endTime, -mPeriod, calendar);
    } else {
      // case of ms
      nEstimated = Math.round((v - base) / period);
      endTime = base + nEstimated * period;

      while (endTime > v) {
        endTime -= period;
      }

      while (endTime <= v) {
        endTime += period;
      }

      startTime = endTime - period;
    }

    newVals[i] = isStart ? startTime : isEnd ? endTime : (startTime + endTime) / 2;
    starts[i] = startTime;
    ends[i] = endTime;
  }

  return {
    vals: newVals,
    starts: starts,
    ends: ends
  };
};

var hasColorscale = helpers$a.hasColorscale;

var colorscale_calc = function calcMarkerColorscale(gd, trace) {
  if (subtypes.hasLines(trace) && hasColorscale(trace, 'line')) {
    calc$3(gd, trace, {
      vals: trace.line.color,
      containerStr: 'line',
      cLetter: 'c'
    });
  }

  if (subtypes.hasMarkers(trace)) {
    if (hasColorscale(trace, 'marker')) {
      calc$3(gd, trace, {
        vals: trace.marker.color,
        containerStr: 'marker',
        cLetter: 'c'
      });
    }

    if (hasColorscale(trace, 'marker.line')) {
      calc$3(gd, trace, {
        vals: trace.marker.line.color,
        containerStr: 'marker.line',
        cLetter: 'c'
      });
    }
  }
};

var arrays_to_calcdata = function arraysToCalcdata(cd, trace) {
  // so each point knows which index it originally came from
  for (var i = 0; i < cd.length; i++) cd[i].i = i;

  lib_1.mergeArray(trace.text, cd, 'tx');
  lib_1.mergeArray(trace.texttemplate, cd, 'txt');
  lib_1.mergeArray(trace.hovertext, cd, 'htx');
  lib_1.mergeArray(trace.customdata, cd, 'data');
  lib_1.mergeArray(trace.textposition, cd, 'tp');

  if (trace.textfont) {
    lib_1.mergeArrayCastPositive(trace.textfont.size, cd, 'ts');
    lib_1.mergeArray(trace.textfont.color, cd, 'tc');
    lib_1.mergeArray(trace.textfont.family, cd, 'tf');
  }

  var marker = trace.marker;

  if (marker) {
    lib_1.mergeArrayCastPositive(marker.size, cd, 'ms');
    lib_1.mergeArrayCastPositive(marker.opacity, cd, 'mo');
    lib_1.mergeArray(marker.symbol, cd, 'mx');
    lib_1.mergeArray(marker.color, cd, 'mc');
    var markerLine = marker.line;

    if (marker.line) {
      lib_1.mergeArray(markerLine.color, cd, 'mlc');
      lib_1.mergeArrayCastPositive(markerLine.width, cd, 'mlw');
    }

    var markerGradient = marker.gradient;

    if (markerGradient && markerGradient.type !== 'none') {
      lib_1.mergeArray(markerGradient.type, cd, 'mgt');
      lib_1.mergeArray(markerGradient.color, cd, 'mgc');
    }
  }
};

var calc_selection = function calcSelection(cd, trace) {
  if (lib_1.isArrayOrTypedArray(trace.selectedpoints)) {
    lib_1.tagSelected(cd, trace);
  }
};

var BADNUM$1 = numerical.BADNUM;

function calc$1(gd, trace) {
  var fullLayout = gd._fullLayout;
  var xa = axes_1.getFromId(gd, trace.xaxis || 'x');
  var ya = axes_1.getFromId(gd, trace.yaxis || 'y');
  var origX = xa.makeCalcdata(trace, 'x');
  var origY = ya.makeCalcdata(trace, 'y');
  var xObj = align_period(trace, xa, 'x', origX);
  var yObj = align_period(trace, ya, 'y', origY);
  var x = xObj.vals;
  var y = yObj.vals;
  var serieslen = trace._length;
  var cd = new Array(serieslen);
  var ids = trace.ids;
  var stackGroupOpts = getStackOpts(trace, fullLayout, xa, ya);
  var interpolateGaps = false;
  var isV, i, j, k, interpolate, vali;
  setFirstScatter(fullLayout, trace);
  var xAttr = 'x';
  var yAttr = 'y';
  var posAttr;

  if (stackGroupOpts) {
    lib_1.pushUnique(stackGroupOpts.traceIndices, trace._expandedIndex);
    isV = stackGroupOpts.orientation === 'v'; // size, like we use for bar

    if (isV) {
      yAttr = 's';
      posAttr = 'x';
    } else {
      xAttr = 's';
      posAttr = 'y';
    }

    interpolate = stackGroupOpts.stackgaps === 'interpolate';
  } else {
    var ppad = calcMarkerSize(trace, serieslen);
    calcAxisExpansion$1(gd, trace, xa, ya, x, y, ppad);
  }

  var hasPeriodX = !!trace.xperiodalignment;
  var hasPeriodY = !!trace.yperiodalignment;

  for (i = 0; i < serieslen; i++) {
    var cdi = cd[i] = {};
    var xValid = fastIsnumeric(x[i]);
    var yValid = fastIsnumeric(y[i]);

    if (xValid && yValid) {
      cdi[xAttr] = x[i];
      cdi[yAttr] = y[i];

      if (hasPeriodX) {
        cdi.orig_x = origX[i]; // used by hover

        cdi.xEnd = xObj.ends[i];
        cdi.xStart = xObj.starts[i];
      }

      if (hasPeriodY) {
        cdi.orig_y = origY[i]; // used by hover

        cdi.yEnd = yObj.ends[i];
        cdi.yStart = yObj.starts[i];
      }
    } else if (stackGroupOpts && (isV ? xValid : yValid)) {
      // if we're stacking we need to hold on to all valid positions
      // even with invalid sizes
      cdi[posAttr] = isV ? x[i] : y[i];
      cdi.gap = true;

      if (interpolate) {
        cdi.s = BADNUM$1;
        interpolateGaps = true;
      } else {
        cdi.s = 0;
      }
    } else {
      cdi[xAttr] = cdi[yAttr] = BADNUM$1;
    }

    if (ids) {
      cdi.id = String(ids[i]);
    }
  }

  arrays_to_calcdata(cd, trace);
  colorscale_calc(gd, trace);
  calc_selection(cd, trace);

  if (stackGroupOpts) {
    // remove bad positions and sort
    // note that original indices get added to cd in arraysToCalcdata
    i = 0;

    while (i < cd.length) {
      if (cd[i][posAttr] === BADNUM$1) {
        cd.splice(i, 1);
      } else i++;
    }

    lib_1.sort(cd, function (a, b) {
      return a[posAttr] - b[posAttr] || a.i - b.i;
    });

    if (interpolateGaps) {
      // first fill the beginning with constant from the first point
      i = 0;

      while (i < cd.length - 1 && cd[i].gap) {
        i++;
      }

      vali = cd[i].s;
      if (!vali) vali = cd[i].s = 0; // in case of no data AT ALL in this trace - use 0

      for (j = 0; j < i; j++) {
        cd[j].s = vali;
      } // then fill the end with constant from the last point


      k = cd.length - 1;

      while (k > i && cd[k].gap) {
        k--;
      }

      vali = cd[k].s;

      for (j = cd.length - 1; j > k; j--) {
        cd[j].s = vali;
      } // now interpolate internal gaps linearly


      while (i < k) {
        i++;

        if (cd[i].gap) {
          j = i + 1;

          while (cd[j].gap) {
            j++;
          }

          var pos0 = cd[i - 1][posAttr];
          var size0 = cd[i - 1].s;
          var m = (cd[j].s - size0) / (cd[j][posAttr] - pos0);

          while (i < j) {
            cd[i].s = size0 + (cd[i][posAttr] - pos0) * m;
            i++;
          }
        }
      }
    }
  }

  return cd;
}

function calcAxisExpansion$1(gd, trace, xa, ya, x, y, ppad) {
  var serieslen = trace._length;
  var fullLayout = gd._fullLayout;
  var xId = xa._id;
  var yId = ya._id;
  var firstScatter = fullLayout._firstScatter[firstScatterGroup(trace)] === trace.uid;
  var stackOrientation = (getStackOpts(trace, fullLayout, xa, ya) || {}).orientation;
  var fill = trace.fill; // cancel minimum tick spacings (only applies to bars and boxes)

  xa._minDtick = 0;
  ya._minDtick = 0; // check whether bounds should be tight, padded, extended to zero...
  // most cases both should be padded on both ends, so start with that.

  var xOptions = {
    padded: true
  };
  var yOptions = {
    padded: true
  };

  if (ppad) {
    xOptions.ppad = yOptions.ppad = ppad;
  } // TODO: text size


  var openEnded = serieslen < 2 || x[0] !== x[serieslen - 1] || y[0] !== y[serieslen - 1];

  if (openEnded && (fill === 'tozerox' || fill === 'tonextx' && (firstScatter || stackOrientation === 'h'))) {
    // include zero (tight) and extremes (padded) if fill to zero
    // (unless the shape is closed, then it's just filling the shape regardless)
    xOptions.tozero = true;
  } else if (!(trace.error_y || {}).visible && ( // if no error bars, markers or text, or fill to y=0 remove x padding
  fill === 'tonexty' || fill === 'tozeroy' || !subtypes.hasMarkers(trace) && !subtypes.hasText(trace))) {
    xOptions.padded = false;
    xOptions.ppad = 0;
  }

  if (openEnded && (fill === 'tozeroy' || fill === 'tonexty' && (firstScatter || stackOrientation === 'v'))) {
    // now check for y - rather different logic, though still mostly padded both ends
    // include zero (tight) and extremes (padded) if fill to zero
    // (unless the shape is closed, then it's just filling the shape regardless)
    yOptions.tozero = true;
  } else if (fill === 'tonextx' || fill === 'tozerox') {
    // tight y: any x fill
    yOptions.padded = false;
  } // N.B. asymmetric splom traces call this with blank {} xa or ya


  if (xId) trace._extremes[xId] = axes_1.findExtremes(xa, x, xOptions);
  if (yId) trace._extremes[yId] = axes_1.findExtremes(ya, y, yOptions);
}

function calcMarkerSize(trace, serieslen) {
  if (!subtypes.hasMarkers(trace)) return; // Treat size like x or y arrays --- Run d2c
  // this needs to go before ppad computation

  var marker = trace.marker;
  var sizeref = 1.6 * (trace.marker.sizeref || 1);
  var markerTrans;

  if (trace.marker.sizemode === 'area') {
    markerTrans = function (v) {
      return Math.max(Math.sqrt((v || 0) / sizeref), 3);
    };
  } else {
    markerTrans = function (v) {
      return Math.max((v || 0) / sizeref, 3);
    };
  }

  if (lib_1.isArrayOrTypedArray(marker.size)) {
    // I tried auto-type but category and dates dont make much sense.
    var ax = {
      type: 'linear'
    };
    axes_1.setConvert(ax);
    var s = ax.makeCalcdata(trace.marker, 'size');
    var sizeOut = new Array(serieslen);

    for (var i = 0; i < serieslen; i++) {
      sizeOut[i] = markerTrans(s[i]);
    }

    return sizeOut;
  } else {
    return markerTrans(marker.size);
  }
}
/**
 * mark the first scatter trace for each subplot
 * note that scatter and scattergl each get their own first trace
 * note also that I'm doing this during calc rather than supplyDefaults
 * so I don't need to worry about transforms, but if we ever do
 * per-trace calc this will get confused.
 */


function setFirstScatter(fullLayout, trace) {
  var group = firstScatterGroup(trace);
  var firstScatter = fullLayout._firstScatter;
  if (!firstScatter[group]) firstScatter[group] = trace.uid;
}

function firstScatterGroup(trace) {
  var stackGroup = trace.stackgroup;
  return trace.xaxis + trace.yaxis + trace.type + (stackGroup ? '-' + stackGroup : '');
}

function getStackOpts(trace, fullLayout, xa, ya) {
  var stackGroup = trace.stackgroup;
  if (!stackGroup) return;
  var stackOpts = fullLayout._scatterStackOpts[xa._id + ya._id][stackGroup];
  var stackAx = stackOpts.orientation === 'v' ? ya : xa; // Allow stacking only on numeric axes
  // calc is a little late to be figuring this out, but during supplyDefaults
  // we don't know the axis type yet

  if (stackAx.type === 'linear' || stackAx.type === 'log') return stackOpts;
}

var calc_1 = {
  calc: calc$1,
  calcMarkerSize: calcMarkerSize,
  calcAxisExpansion: calcAxisExpansion$1,
  setFirstScatter: setFirstScatter,
  getStackOpts: getStackOpts
};

/*
 * Scatter stacking & normalization calculations
 * runs per subplot, and can handle multiple stacking groups
 */


var cross_trace_calc = function crossTraceCalc(gd, plotinfo) {
  var xa = plotinfo.xaxis;
  var ya = plotinfo.yaxis;
  var subplot = xa._id + ya._id;
  var subplotStackOpts = gd._fullLayout._scatterStackOpts[subplot];
  if (!subplotStackOpts) return;
  var calcTraces = gd.calcdata;
  var i, j, k, i2, cd, cd0, posj, sumj, norm;
  var groupOpts, interpolate, groupnorm, posAttr, valAttr;
  var hasAnyBlanks;

  for (var stackGroup in subplotStackOpts) {
    groupOpts = subplotStackOpts[stackGroup];
    var indices = groupOpts.traceIndices; // can get here with no indices if the stack axis is non-numeric

    if (!indices.length) continue;
    interpolate = groupOpts.stackgaps === 'interpolate';
    groupnorm = groupOpts.groupnorm;

    if (groupOpts.orientation === 'v') {
      posAttr = 'x';
      valAttr = 'y';
    } else {
      posAttr = 'y';
      valAttr = 'x';
    }

    hasAnyBlanks = new Array(indices.length);

    for (i = 0; i < hasAnyBlanks.length; i++) {
      hasAnyBlanks[i] = false;
    } // Collect the complete set of all positions across ALL traces.
    // Start with the first trace, then interleave items from later traces
    // as needed.
    // Fill in mising items as we go.


    cd0 = calcTraces[indices[0]];
    var allPositions = new Array(cd0.length);

    for (i = 0; i < cd0.length; i++) {
      allPositions[i] = cd0[i][posAttr];
    }

    for (i = 1; i < indices.length; i++) {
      cd = calcTraces[indices[i]];

      for (j = k = 0; j < cd.length; j++) {
        posj = cd[j][posAttr];

        for (; posj > allPositions[k] && k < allPositions.length; k++) {
          // the current trace is missing a position from some previous trace(s)
          insertBlank(cd, j, allPositions[k], i, hasAnyBlanks, interpolate, posAttr);
          j++;
        }

        if (posj !== allPositions[k]) {
          // previous trace(s) are missing a position from the current trace
          for (i2 = 0; i2 < i; i2++) {
            insertBlank(calcTraces[indices[i2]], k, posj, i2, hasAnyBlanks, interpolate, posAttr);
          }

          allPositions.splice(k, 0, posj);
        }

        k++;
      }

      for (; k < allPositions.length; k++) {
        insertBlank(cd, j, allPositions[k], i, hasAnyBlanks, interpolate, posAttr);
        j++;
      }
    }

    var serieslen = allPositions.length; // stack (and normalize)!

    for (j = 0; j < cd0.length; j++) {
      sumj = cd0[j][valAttr] = cd0[j].s;

      for (i = 1; i < indices.length; i++) {
        cd = calcTraces[indices[i]];
        cd[0].trace._rawLength = cd[0].trace._length;
        cd[0].trace._length = serieslen;
        sumj += cd[j].s;
        cd[j][valAttr] = sumj;
      }

      if (groupnorm) {
        norm = (groupnorm === 'fraction' ? sumj : sumj / 100) || 1;

        for (i = 0; i < indices.length; i++) {
          var cdj = calcTraces[indices[i]][j];
          cdj[valAttr] /= norm;
          cdj.sNorm = cdj.s / norm;
        }
      }
    } // autorange


    for (i = 0; i < indices.length; i++) {
      cd = calcTraces[indices[i]];
      var trace = cd[0].trace;
      var ppad = calc_1.calcMarkerSize(trace, trace._rawLength);
      var arrayPad = Array.isArray(ppad);

      if (ppad && hasAnyBlanks[i] || arrayPad) {
        var ppadRaw = ppad;
        ppad = new Array(serieslen);

        for (j = 0; j < serieslen; j++) {
          ppad[j] = cd[j].gap ? 0 : arrayPad ? ppadRaw[cd[j].i] : ppadRaw;
        }
      }

      var x = new Array(serieslen);
      var y = new Array(serieslen);

      for (j = 0; j < serieslen; j++) {
        x[j] = cd[j].x;
        y[j] = cd[j].y;
      }

      calc_1.calcAxisExpansion(gd, trace, xa, ya, x, y, ppad); // while we're here (in a loop over all traces in the stack)
      // record the orientation, so hover can find it easily

      cd[0].t.orientation = groupOpts.orientation;
    }
  }
};

function insertBlank(calcTrace, index, position, traceIndex, hasAnyBlanks, interpolate, posAttr) {
  hasAnyBlanks[traceIndex] = true;
  var newEntry = {
    i: null,
    gap: true,
    s: 0
  };
  newEntry[posAttr] = position;
  calcTrace.splice(index, 0, newEntry); // Even if we're not interpolating, if one trace has multiple
  // values at the same position and this trace only has one value there,
  // we just duplicate that one value rather than insert a zero.
  // We also make it look like a real point - because it's ambiguous which
  // one really is the real one!

  if (index && position === calcTrace[index - 1][posAttr]) {
    var prevEntry = calcTrace[index - 1];
    newEntry.s = prevEntry.s; // TODO is it going to cause any problems to have multiple
    // calcdata points with the same index?

    newEntry.i = prevEntry.i;
    newEntry.gap = prevEntry.gap;
  } else if (interpolate) {
    newEntry.s = getInterp(calcTrace, index, position, posAttr);
  }

  if (!index) {
    // t and trace need to stay on the first cd entry
    calcTrace[0].t = calcTrace[1].t;
    calcTrace[0].trace = calcTrace[1].trace;
    delete calcTrace[1].t;
    delete calcTrace[1].trace;
  }
}

function getInterp(calcTrace, index, position, posAttr) {
  var pt0 = calcTrace[index - 1];
  var pt1 = calcTrace[index + 1];
  if (!pt1) return pt0.s;
  if (!pt0) return pt1.s;
  return pt0.s + (pt1.s - pt0.s) * (position - pt0[posAttr]) / (pt1[posAttr] - pt0[posAttr]);
}

var BADNUM = numerical.BADNUM;
var LOG_CLIP = numerical.LOG_CLIP;
var LOG_CLIP_PLUS = LOG_CLIP + 0.5;
var LOG_CLIP_MINUS = LOG_CLIP - 0.5;
var segmentsIntersect = lib_1.segmentsIntersect;
var constrain = lib_1.constrain;

var line_points = function linePoints(d, opts) {
  var xa = opts.xaxis;
  var ya = opts.yaxis;
  var xLog = xa.type === 'log';
  var yLog = ya.type === 'log';
  var xLen = xa._length;
  var yLen = ya._length;
  var connectGaps = opts.connectGaps;
  var baseTolerance = opts.baseTolerance;
  var shape = opts.shape;
  var linear = shape === 'linear';
  var fill = opts.fill && opts.fill !== 'none';
  var segments = [];
  var minTolerance = constants$5.minTolerance;
  var len = d.length;
  var pts = new Array(len);
  var pti = 0;
  var i; // pt variables are pixel coordinates [x,y] of one point
  // these four are the outputs of clustering on a line

  var clusterStartPt, clusterEndPt, clusterHighPt, clusterLowPt; // "this" is the next point we're considering adding to the cluster

  var thisPt; // did we encounter the high point first, then a low point, or vice versa?

  var clusterHighFirst; // the first two points in the cluster determine its unit vector
  // so the second is always in the "High" direction

  var clusterUnitVector; // the pixel delta from clusterStartPt

  var thisVector; // val variables are (signed) pixel distances along the cluster vector

  var clusterRefDist, clusterHighVal, clusterLowVal, thisVal; // deviation variables are (signed) pixel distances normal to the cluster vector

  var clusterMinDeviation, clusterMaxDeviation, thisDeviation; // turn one calcdata point into pixel coordinates

  function getPt(index) {
    var di = d[index];
    if (!di) return false;
    var x = opts.linearized ? xa.l2p(di.x) : xa.c2p(di.x);
    var y = opts.linearized ? ya.l2p(di.y) : ya.c2p(di.y); // if non-positive log values, set them VERY far off-screen
    // so the line looks essentially straight from the previous point.

    if (x === BADNUM) {
      if (xLog) x = xa.c2p(di.x, true);
      if (x === BADNUM) return false; // If BOTH were bad log values, make the line follow a constant
      // exponent rather than a constant slope

      if (yLog && y === BADNUM) {
        x *= Math.abs(xa._m * yLen * (xa._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS) / (ya._m * xLen * (ya._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS)));
      }

      x *= 1000;
    }

    if (y === BADNUM) {
      if (yLog) y = ya.c2p(di.y, true);
      if (y === BADNUM) return false;
      y *= 1000;
    }

    return [x, y];
  }

  function crossesViewport(xFrac0, yFrac0, xFrac1, yFrac1) {
    var dx = xFrac1 - xFrac0;
    var dy = yFrac1 - yFrac0;
    var dx0 = 0.5 - xFrac0;
    var dy0 = 0.5 - yFrac0;
    var norm2 = dx * dx + dy * dy;
    var dot = dx * dx0 + dy * dy0;

    if (dot > 0 && dot < norm2) {
      var cross = dx0 * dy - dy0 * dx;
      if (cross * cross < norm2) return true;
    }
  }

  var latestXFrac, latestYFrac; // if we're off-screen, increase tolerance over baseTolerance

  function getTolerance(pt, nextPt) {
    var xFrac = pt[0] / xLen;
    var yFrac = pt[1] / yLen;
    var offScreenFraction = Math.max(0, -xFrac, xFrac - 1, -yFrac, yFrac - 1);

    if (offScreenFraction && latestXFrac !== undefined && crossesViewport(xFrac, yFrac, latestXFrac, latestYFrac)) {
      offScreenFraction = 0;
    }

    if (offScreenFraction && nextPt && crossesViewport(xFrac, yFrac, nextPt[0] / xLen, nextPt[1] / yLen)) {
      offScreenFraction = 0;
    }

    return (1 + constants$5.toleranceGrowth * offScreenFraction) * baseTolerance;
  }

  function ptDist(pt1, pt2) {
    var dx = pt1[0] - pt2[0];
    var dy = pt1[1] - pt2[1];
    return Math.sqrt(dx * dx + dy * dy);
  } // last bit of filtering: clip paths that are VERY far off-screen
  // so we don't get near the browser's hard limit (+/- 2^29 px in Chrome and FF)


  var maxScreensAway = constants$5.maxScreensAway; // find the intersections between the segment from pt1 to pt2
  // and the large rectangle maxScreensAway around the viewport
  // if one of pt1 and pt2 is inside and the other outside, there
  // will be only one intersection.
  // if both are outside there will be 0 or 2 intersections
  // (or 1 if it's right at a corner - we'll treat that like 0)
  // returns an array of intersection pts

  var xEdge0 = -xLen * maxScreensAway;
  var xEdge1 = xLen * (1 + maxScreensAway);
  var yEdge0 = -yLen * maxScreensAway;
  var yEdge1 = yLen * (1 + maxScreensAway);
  var edges = [[xEdge0, yEdge0, xEdge1, yEdge0], [xEdge1, yEdge0, xEdge1, yEdge1], [xEdge1, yEdge1, xEdge0, yEdge1], [xEdge0, yEdge1, xEdge0, yEdge0]];
  var xEdge, yEdge, lastXEdge, lastYEdge, lastFarPt, edgePt; // for linear line shape, edge intersections should be linearly interpolated
  // spline uses this too, which isn't precisely correct but is actually pretty
  // good, because Catmull-Rom weights far-away points less in creating the curvature

  function getLinearEdgeIntersections(pt1, pt2) {
    var out = [];
    var ptCount = 0;

    for (var i = 0; i < 4; i++) {
      var edge = edges[i];
      var ptInt = segmentsIntersect(pt1[0], pt1[1], pt2[0], pt2[1], edge[0], edge[1], edge[2], edge[3]);

      if (ptInt && (!ptCount || Math.abs(ptInt.x - out[0][0]) > 1 || Math.abs(ptInt.y - out[0][1]) > 1)) {
        ptInt = [ptInt.x, ptInt.y]; // if we have 2 intersections, make sure the closest one to pt1 comes first

        if (ptCount && ptDist(ptInt, pt1) < ptDist(out[0], pt1)) out.unshift(ptInt);else out.push(ptInt);
        ptCount++;
      }
    }

    return out;
  }

  function onlyConstrainedPoint(pt) {
    if (pt[0] < xEdge0 || pt[0] > xEdge1 || pt[1] < yEdge0 || pt[1] > yEdge1) {
      return [constrain(pt[0], xEdge0, xEdge1), constrain(pt[1], yEdge0, yEdge1)];
    }
  }

  function sameEdge(pt1, pt2) {
    if (pt1[0] === pt2[0] && (pt1[0] === xEdge0 || pt1[0] === xEdge1)) return true;
    if (pt1[1] === pt2[1] && (pt1[1] === yEdge0 || pt1[1] === yEdge1)) return true;
  } // for line shapes hv and vh, movement in the two dimensions is decoupled,
  // so all we need to do is constrain each dimension independently


  function getHVEdgeIntersections(pt1, pt2) {
    var out = [];
    var ptInt1 = onlyConstrainedPoint(pt1);
    var ptInt2 = onlyConstrainedPoint(pt2);
    if (ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;
    if (ptInt1) out.push(ptInt1);
    if (ptInt2) out.push(ptInt2);
    return out;
  } // hvh and vhv we sometimes have to move one of the intersection points
  // out BEYOND the clipping rect, by a maximum of a factor of 2, so that
  // the midpoint line is drawn in the right place


  function getABAEdgeIntersections(dim, limit0, limit1) {
    return function (pt1, pt2) {
      var ptInt1 = onlyConstrainedPoint(pt1);
      var ptInt2 = onlyConstrainedPoint(pt2);
      var out = [];
      if (ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;
      if (ptInt1) out.push(ptInt1);
      if (ptInt2) out.push(ptInt2);
      var midShift = 2 * lib_1.constrain((pt1[dim] + pt2[dim]) / 2, limit0, limit1) - ((ptInt1 || pt1)[dim] + (ptInt2 || pt2)[dim]);

      if (midShift) {
        var ptToAlter;

        if (ptInt1 && ptInt2) {
          ptToAlter = midShift > 0 === ptInt1[dim] > ptInt2[dim] ? ptInt1 : ptInt2;
        } else ptToAlter = ptInt1 || ptInt2;

        ptToAlter[dim] += midShift;
      }

      return out;
    };
  }

  var getEdgeIntersections;

  if (shape === 'linear' || shape === 'spline') {
    getEdgeIntersections = getLinearEdgeIntersections;
  } else if (shape === 'hv' || shape === 'vh') {
    getEdgeIntersections = getHVEdgeIntersections;
  } else if (shape === 'hvh') getEdgeIntersections = getABAEdgeIntersections(0, xEdge0, xEdge1);else if (shape === 'vhv') getEdgeIntersections = getABAEdgeIntersections(1, yEdge0, yEdge1); // a segment pt1->pt2 entirely outside the nearby region:
  // find the corner it gets closest to touching


  function getClosestCorner(pt1, pt2) {
    var dx = pt2[0] - pt1[0];
    var m = (pt2[1] - pt1[1]) / dx;
    var b = (pt1[1] * pt2[0] - pt2[1] * pt1[0]) / dx;
    if (b > 0) return [m > 0 ? xEdge0 : xEdge1, yEdge1];else return [m > 0 ? xEdge1 : xEdge0, yEdge0];
  }

  function updateEdge(pt) {
    var x = pt[0];
    var y = pt[1];
    var xSame = x === pts[pti - 1][0];
    var ySame = y === pts[pti - 1][1]; // duplicate point?

    if (xSame && ySame) return;

    if (pti > 1) {
      // backtracking along an edge?
      var xSame2 = x === pts[pti - 2][0];
      var ySame2 = y === pts[pti - 2][1];

      if (xSame && (x === xEdge0 || x === xEdge1) && xSame2) {
        if (ySame2) pti--; // backtracking exactly - drop prev pt and don't add
        else pts[pti - 1] = pt; // not exact: replace the prev pt
      } else if (ySame && (y === yEdge0 || y === yEdge1) && ySame2) {
        if (xSame2) pti--;else pts[pti - 1] = pt;
      } else pts[pti++] = pt;
    } else pts[pti++] = pt;
  }

  function updateEdgesForReentry(pt) {
    // if we're outside the nearby region and going back in,
    // we may need to loop around a corner point
    if (pts[pti - 1][0] !== pt[0] && pts[pti - 1][1] !== pt[1]) {
      updateEdge([lastXEdge, lastYEdge]);
    }

    updateEdge(pt);
    lastFarPt = null;
    lastXEdge = lastYEdge = 0;
  }

  function addPt(pt) {
    latestXFrac = pt[0] / xLen;
    latestYFrac = pt[1] / yLen; // Are we more than maxScreensAway off-screen any direction?
    // if so, clip to this box, but in such a way that on-screen
    // drawing is unchanged

    xEdge = pt[0] < xEdge0 ? xEdge0 : pt[0] > xEdge1 ? xEdge1 : 0;
    yEdge = pt[1] < yEdge0 ? yEdge0 : pt[1] > yEdge1 ? yEdge1 : 0;

    if (xEdge || yEdge) {
      if (!pti) {
        // to get fills right - if first point is far, push it toward the
        // screen in whichever direction(s) are far
        pts[pti++] = [xEdge || pt[0], yEdge || pt[1]];
      } else if (lastFarPt) {
        // both this point and the last are outside the nearby region
        // check if we're crossing the nearby region
        var intersections = getEdgeIntersections(lastFarPt, pt);

        if (intersections.length > 1) {
          updateEdgesForReentry(intersections[0]);
          pts[pti++] = intersections[1];
        }
      } else {
        // we're leaving the nearby region - add the point where we left it
        edgePt = getEdgeIntersections(pts[pti - 1], pt)[0];
        pts[pti++] = edgePt;
      }

      var lastPt = pts[pti - 1];

      if (xEdge && yEdge && (lastPt[0] !== xEdge || lastPt[1] !== yEdge)) {
        // we've gone out beyond a new corner: add the corner too
        // so that the next point will take the right winding
        if (lastFarPt) {
          if (lastXEdge !== xEdge && lastYEdge !== yEdge) {
            if (lastXEdge && lastYEdge) {
              // we've gone around to an opposite corner - we
              // need to add the correct extra corner
              // in order to get the right winding
              updateEdge(getClosestCorner(lastFarPt, pt));
            } else {
              // we're coming from a far edge - the extra corner
              // we need is determined uniquely by the sectors
              updateEdge([lastXEdge || xEdge, lastYEdge || yEdge]);
            }
          } else if (lastXEdge && lastYEdge) {
            updateEdge([lastXEdge, lastYEdge]);
          }
        }

        updateEdge([xEdge, yEdge]);
      } else if (lastXEdge - xEdge && lastYEdge - yEdge) {
        // we're coming from an edge or far corner to an edge - again the
        // extra corner we need is uniquely determined by the sectors
        updateEdge([xEdge || lastXEdge, yEdge || lastYEdge]);
      }

      lastFarPt = pt;
      lastXEdge = xEdge;
      lastYEdge = yEdge;
    } else {
      if (lastFarPt) {
        // this point is in range but the previous wasn't: add its entry pt first
        updateEdgesForReentry(getEdgeIntersections(lastFarPt, pt)[0]);
      }

      pts[pti++] = pt;
    }
  } // loop over ALL points in this trace


  for (i = 0; i < len; i++) {
    clusterStartPt = getPt(i);
    if (!clusterStartPt) continue;
    pti = 0;
    lastFarPt = null;
    addPt(clusterStartPt); // loop over one segment of the trace

    for (i++; i < len; i++) {
      clusterHighPt = getPt(i);

      if (!clusterHighPt) {
        if (connectGaps) continue;else break;
      } // can't decimate if nonlinear line shape
      // TODO: we *could* decimate [hv]{2,3} shapes if we restricted clusters to horz or vert again
      // but spline would be verrry awkward to decimate


      if (!linear || !opts.simplify) {
        addPt(clusterHighPt);
        continue;
      }

      var nextPt = getPt(i + 1);
      clusterRefDist = ptDist(clusterHighPt, clusterStartPt); // #3147 - always include the very first and last points for fills

      if (!(fill && (pti === 0 || pti === len - 1)) && clusterRefDist < getTolerance(clusterHighPt, nextPt) * minTolerance) continue;
      clusterUnitVector = [(clusterHighPt[0] - clusterStartPt[0]) / clusterRefDist, (clusterHighPt[1] - clusterStartPt[1]) / clusterRefDist];
      clusterLowPt = clusterStartPt;
      clusterHighVal = clusterRefDist;
      clusterLowVal = clusterMinDeviation = clusterMaxDeviation = 0;
      clusterHighFirst = false;
      clusterEndPt = clusterHighPt; // loop over one cluster of points that collapse onto one line

      for (i++; i < d.length; i++) {
        thisPt = nextPt;
        nextPt = getPt(i + 1);

        if (!thisPt) {
          if (connectGaps) continue;else break;
        }

        thisVector = [thisPt[0] - clusterStartPt[0], thisPt[1] - clusterStartPt[1]]; // cross product (or dot with normal to the cluster vector)

        thisDeviation = thisVector[0] * clusterUnitVector[1] - thisVector[1] * clusterUnitVector[0];
        clusterMinDeviation = Math.min(clusterMinDeviation, thisDeviation);
        clusterMaxDeviation = Math.max(clusterMaxDeviation, thisDeviation);
        if (clusterMaxDeviation - clusterMinDeviation > getTolerance(thisPt, nextPt)) break;
        clusterEndPt = thisPt;
        thisVal = thisVector[0] * clusterUnitVector[0] + thisVector[1] * clusterUnitVector[1];

        if (thisVal > clusterHighVal) {
          clusterHighVal = thisVal;
          clusterHighPt = thisPt;
          clusterHighFirst = false;
        } else if (thisVal < clusterLowVal) {
          clusterLowVal = thisVal;
          clusterLowPt = thisPt;
          clusterHighFirst = true;
        }
      } // insert this cluster into pts
      // we've already inserted the start pt, now check if we have high and low pts


      if (clusterHighFirst) {
        addPt(clusterHighPt);
        if (clusterEndPt !== clusterLowPt) addPt(clusterLowPt);
      } else {
        if (clusterLowPt !== clusterStartPt) addPt(clusterLowPt);
        if (clusterEndPt !== clusterHighPt) addPt(clusterHighPt);
      } // and finally insert the end pt


      addPt(clusterEndPt); // have we reached the end of this segment?

      if (i >= d.length || !thisPt) break; // otherwise we have an out-of-cluster point to insert as next clusterStartPt

      addPt(thisPt);
      clusterStartPt = thisPt;
    } // to get fills right - repeat what we did at the start


    if (lastFarPt) updateEdge([lastXEdge || lastFarPt[0], lastYEdge || lastFarPt[1]]);
    segments.push(pts.slice(0, pti));
  }

  return segments;
};

var LINKEDFILLS = {
  tonextx: 1,
  tonexty: 1,
  tonext: 1
};

var link_traces = function linkTraces(gd, plotinfo, cdscatter) {
  var trace, i, group, prevtrace, groupIndex; // first sort traces to keep stacks & filled-together groups together

  var groupIndices = {};
  var needsSort = false;
  var prevGroupIndex = -1;
  var nextGroupIndex = 0;
  var prevUnstackedGroupIndex = -1;

  for (i = 0; i < cdscatter.length; i++) {
    trace = cdscatter[i][0].trace;
    group = trace.stackgroup || '';

    if (group) {
      if (group in groupIndices) {
        groupIndex = groupIndices[group];
      } else {
        groupIndex = groupIndices[group] = nextGroupIndex;
        nextGroupIndex++;
      }
    } else if (trace.fill in LINKEDFILLS && prevUnstackedGroupIndex >= 0) {
      groupIndex = prevUnstackedGroupIndex;
    } else {
      groupIndex = prevUnstackedGroupIndex = nextGroupIndex;
      nextGroupIndex++;
    }

    if (groupIndex < prevGroupIndex) needsSort = true;
    trace._groupIndex = prevGroupIndex = groupIndex;
  }

  var cdscatterSorted = cdscatter.slice();

  if (needsSort) {
    cdscatterSorted.sort(function (a, b) {
      var traceA = a[0].trace;
      var traceB = b[0].trace;
      return traceA._groupIndex - traceB._groupIndex || traceA.index - traceB.index;
    });
  } // now link traces to each other


  var prevtraces = {};

  for (i = 0; i < cdscatterSorted.length; i++) {
    trace = cdscatterSorted[i][0].trace;
    group = trace.stackgroup || ''; // Note: The check which ensures all cdscatter here are for the same axis and
    // are either cartesian or scatterternary has been removed. This code assumes
    // the passed scattertraces have been filtered to the proper plot types and
    // the proper subplots.

    if (trace.visible === true) {
      trace._nexttrace = null;

      if (trace.fill in LINKEDFILLS) {
        prevtrace = prevtraces[group];
        trace._prevtrace = prevtrace || null;

        if (prevtrace) {
          prevtrace._nexttrace = trace;
        }
      }

      trace._ownfill = trace.fill && (trace.fill.substr(0, 6) === 'tozero' || trace.fill === 'toself' || trace.fill.substr(0, 2) === 'to' && !trace._prevtrace);
      prevtraces[group] = trace;
    } else {
      trace._prevtrace = trace._nexttrace = trace._ownfill = null;
    }
  }

  return cdscatterSorted;
};

var ensureSingle$1 = lib_1.ensureSingle;
var identity = lib_1.identity;
var polygonTester = polygon_1.tester;

var plot$2 = function plot(gd, plotinfo, cdscatter, scatterLayer, transitionOpts, makeOnCompleteCallback) {
  var join, onComplete; // If transition config is provided, then it is only a partial replot and traces not
  // updated are removed.

  var isFullReplot = !transitionOpts;
  var hasTransition = !!transitionOpts && transitionOpts.duration > 0; // Link traces so the z-order of fill layers is correct

  var cdscatterSorted = link_traces(gd, plotinfo, cdscatter);
  join = scatterLayer.selectAll('g.trace').data(cdscatterSorted, function (d) {
    return d[0].trace.uid;
  }); // Append new traces:

  join.enter().append('g').attr('class', function (d) {
    return 'trace scatter trace' + d[0].trace.uid;
  }).style('stroke-miterlimit', 2);
  join.order();
  createFills(gd, join, plotinfo);

  if (hasTransition) {
    if (makeOnCompleteCallback) {
      // If it was passed a callback to register completion, make a callback. If
      // this is created, then it must be executed on completion, otherwise the
      // pos-transition redraw will not execute:
      onComplete = makeOnCompleteCallback();
    }

    var transition = d3.transition().duration(transitionOpts.duration).ease(transitionOpts.easing).each('end', function () {
      onComplete && onComplete();
    }).each('interrupt', function () {
      onComplete && onComplete();
    });
    transition.each(function () {
      // Must run the selection again since otherwise enters/updates get grouped together
      // and these get executed out of order. Except we need them in order!
      scatterLayer.selectAll('g.trace').each(function (d, i) {
        plotOne$1(gd, i, plotinfo, d, cdscatterSorted, this, transitionOpts);
      });
    });
  } else {
    join.each(function (d, i) {
      plotOne$1(gd, i, plotinfo, d, cdscatterSorted, this, transitionOpts);
    });
  }

  if (isFullReplot) {
    join.exit().remove();
  } // remove paths that didn't get used


  scatterLayer.selectAll('path:not([d])').remove();
};

function createFills(gd, traceJoin, plotinfo) {
  traceJoin.each(function (d) {
    var fills = ensureSingle$1(d3.select(this), 'g', 'fills');
    drawing_1.setClipUrl(fills, plotinfo.layerClipId, gd);
    var trace = d[0].trace;
    var fillData = [];
    if (trace._ownfill) fillData.push('_ownFill');
    if (trace._nexttrace) fillData.push('_nextFill');
    var fillJoin = fills.selectAll('g').data(fillData, identity);
    fillJoin.enter().append('g');
    fillJoin.exit().each(function (d) {
      trace[d] = null;
    }).remove();
    fillJoin.order().each(function (d) {
      // make a path element inside the fill group, just so
      // we can give it its own data later on and the group can
      // keep its simple '_*Fill' data
      trace[d] = ensureSingle$1(d3.select(this), 'path', 'js-fill');
    });
  });
}

function plotOne$1(gd, idx, plotinfo, cdscatter, cdscatterAll, element, transitionOpts) {
  var i; // Since this has been reorganized and we're executing this on individual traces,
  // we need to pass it the full list of cdscatter as well as this trace's index (idx)
  // since it does an internal n^2 loop over comparisons with other traces:

  selectMarkers(gd, idx, plotinfo, cdscatter, cdscatterAll);
  var hasTransition = !!transitionOpts && transitionOpts.duration > 0;

  function transition(selection) {
    return hasTransition ? selection.transition() : selection;
  }

  var xa = plotinfo.xaxis;
  var ya = plotinfo.yaxis;
  var trace = cdscatter[0].trace;
  var line = trace.line;
  var tr = d3.select(element);
  var errorBarGroup = ensureSingle$1(tr, 'g', 'errorbars');
  var lines = ensureSingle$1(tr, 'g', 'lines');
  var points = ensureSingle$1(tr, 'g', 'points');
  var text = ensureSingle$1(tr, 'g', 'text'); // error bars are at the bottom

  registry.getComponentMethod('errorbars', 'plot')(gd, errorBarGroup, plotinfo, transitionOpts);
  if (trace.visible !== true) return;
  transition(tr).style('opacity', trace.opacity); // BUILD LINES AND FILLS

  var ownFillEl3, tonext;
  var ownFillDir = trace.fill.charAt(trace.fill.length - 1);
  if (ownFillDir !== 'x' && ownFillDir !== 'y') ownFillDir = ''; // store node for tweaking by selectPoints

  cdscatter[0][plotinfo.isRangePlot ? 'nodeRangePlot3' : 'node3'] = tr;
  var prevRevpath = '';
  var prevPolygons = [];
  var prevtrace = trace._prevtrace;

  if (prevtrace) {
    prevRevpath = prevtrace._prevRevpath || '';
    tonext = prevtrace._nextFill;
    prevPolygons = prevtrace._polygons;
  }

  var thispath;
  var thisrevpath; // fullpath is all paths for this curve, joined together straight
  // across gaps, for filling

  var fullpath = ''; // revpath is fullpath reversed, for fill-to-next

  var revpath = ''; // functions for converting a point array to a path

  var pathfn, revpathbase, revpathfn; // variables used before and after the data join

  var pt0, lastSegment, pt1, thisPolygons; // initialize line join data / method

  var segments = [];
  var makeUpdate = lib_1.noop;
  ownFillEl3 = trace._ownFill;

  if (subtypes.hasLines(trace) || trace.fill !== 'none') {
    if (tonext) {
      // This tells .style which trace to use for fill information:
      tonext.datum(cdscatter);
    }

    if (['hv', 'vh', 'hvh', 'vhv'].indexOf(line.shape) !== -1) {
      pathfn = drawing_1.steps(line.shape);
      revpathbase = drawing_1.steps(line.shape.split('').reverse().join(''));
    } else if (line.shape === 'spline') {
      pathfn = revpathbase = function (pts) {
        var pLast = pts[pts.length - 1];

        if (pts.length > 1 && pts[0][0] === pLast[0] && pts[0][1] === pLast[1]) {
          // identical start and end points: treat it as a
          // closed curve so we don't get a kink
          return drawing_1.smoothclosed(pts.slice(1), line.smoothing);
        } else {
          return drawing_1.smoothopen(pts, line.smoothing);
        }
      };
    } else {
      pathfn = revpathbase = function (pts) {
        return 'M' + pts.join('L');
      };
    }

    revpathfn = function (pts) {
      // note: this is destructive (reverses pts in place) so can't use pts after this
      return revpathbase(pts.reverse());
    };

    segments = line_points(cdscatter, {
      xaxis: xa,
      yaxis: ya,
      connectGaps: trace.connectgaps,
      baseTolerance: Math.max(line.width || 1, 3) / 4,
      shape: line.shape,
      simplify: line.simplify,
      fill: trace.fill
    }); // since we already have the pixel segments here, use them to make
    // polygons for hover on fill
    // TODO: can we skip this if hoveron!=fills? That would mean we
    // need to redraw when you change hoveron...

    thisPolygons = trace._polygons = new Array(segments.length);

    for (i = 0; i < segments.length; i++) {
      trace._polygons[i] = polygonTester(segments[i]);
    }

    if (segments.length) {
      pt0 = segments[0][0];
      lastSegment = segments[segments.length - 1];
      pt1 = lastSegment[lastSegment.length - 1];
    }

    makeUpdate = function (isEnter) {
      return function (pts) {
        thispath = pathfn(pts);
        thisrevpath = revpathfn(pts);

        if (!fullpath) {
          fullpath = thispath;
          revpath = thisrevpath;
        } else if (ownFillDir) {
          fullpath += 'L' + thispath.substr(1);
          revpath = thisrevpath + ('L' + revpath.substr(1));
        } else {
          fullpath += 'Z' + thispath;
          revpath = thisrevpath + 'Z' + revpath;
        }

        if (subtypes.hasLines(trace) && pts.length > 1) {
          var el = d3.select(this); // This makes the coloring work correctly:

          el.datum(cdscatter);

          if (isEnter) {
            transition(el.style('opacity', 0).attr('d', thispath).call(drawing_1.lineGroupStyle)).style('opacity', 1);
          } else {
            var sel = transition(el);
            sel.attr('d', thispath);
            drawing_1.singleLineStyle(cdscatter, sel);
          }
        }
      };
    };
  }

  var lineJoin = lines.selectAll('.js-line').data(segments);
  transition(lineJoin.exit()).style('opacity', 0).remove();
  lineJoin.each(makeUpdate(false));
  lineJoin.enter().append('path').classed('js-line', true).style('vector-effect', 'non-scaling-stroke').call(drawing_1.lineGroupStyle).each(makeUpdate(true));
  drawing_1.setClipUrl(lineJoin, plotinfo.layerClipId, gd);

  function clearFill(selection) {
    transition(selection).attr('d', 'M0,0Z');
  }

  if (segments.length) {
    if (ownFillEl3) {
      ownFillEl3.datum(cdscatter);

      if (pt0 && pt1) {
        if (ownFillDir) {
          if (ownFillDir === 'y') {
            pt0[1] = pt1[1] = ya.c2p(0, true);
          } else if (ownFillDir === 'x') {
            pt0[0] = pt1[0] = xa.c2p(0, true);
          } // fill to zero: full trace path, plus extension of
          // the endpoints to the appropriate axis
          // For the sake of animations, wrap the points around so that
          // the points on the axes are the first two points. Otherwise
          // animations get a little crazy if the number of points changes.


          transition(ownFillEl3).attr('d', 'M' + pt1 + 'L' + pt0 + 'L' + fullpath.substr(1)).call(drawing_1.singleFillStyle, gd);
        } else {
          // fill to self: just join the path to itself
          transition(ownFillEl3).attr('d', fullpath + 'Z').call(drawing_1.singleFillStyle, gd);
        }
      }
    } else if (tonext) {
      if (trace.fill.substr(0, 6) === 'tonext' && fullpath && prevRevpath) {
        // fill to next: full trace path, plus the previous path reversed
        if (trace.fill === 'tonext') {
          // tonext: for use by concentric shapes, like manually constructed
          // contours, we just add the two paths closed on themselves.
          // This makes strange results if one path is *not* entirely
          // inside the other, but then that is a strange usage.
          transition(tonext).attr('d', fullpath + 'Z' + prevRevpath + 'Z').call(drawing_1.singleFillStyle, gd);
        } else {
          // tonextx/y: for now just connect endpoints with lines. This is
          // the correct behavior if the endpoints are at the same value of
          // y/x, but if they *aren't*, we should ideally do more complicated
          // things depending on whether the new endpoint projects onto the
          // existing curve or off the end of it
          transition(tonext).attr('d', fullpath + 'L' + prevRevpath.substr(1) + 'Z').call(drawing_1.singleFillStyle, gd);
        }

        trace._polygons = trace._polygons.concat(prevPolygons);
      } else {
        clearFill(tonext);
        trace._polygons = null;
      }
    }

    trace._prevRevpath = revpath;
    trace._prevPolygons = thisPolygons;
  } else {
    if (ownFillEl3) clearFill(ownFillEl3);else if (tonext) clearFill(tonext);
    trace._polygons = trace._prevRevpath = trace._prevPolygons = null;
  }

  function visFilter(d) {
    return d.filter(function (v) {
      return !v.gap && v.vis;
    });
  }

  function visFilterWithGaps(d) {
    return d.filter(function (v) {
      return v.vis;
    });
  }

  function gapFilter(d) {
    return d.filter(function (v) {
      return !v.gap;
    });
  }

  function keyFunc(d) {
    return d.id;
  } // Returns a function if the trace is keyed, otherwise returns undefined


  function getKeyFunc(trace) {
    if (trace.ids) {
      return keyFunc;
    }
  }

  function hideFilter() {
    return false;
  }

  function makePoints(points, text, cdscatter) {
    var join, selection, hasNode;
    var trace = cdscatter[0].trace;
    var showMarkers = subtypes.hasMarkers(trace);
    var showText = subtypes.hasText(trace);
    var keyFunc = getKeyFunc(trace);
    var markerFilter = hideFilter;
    var textFilter = hideFilter;

    if (showMarkers || showText) {
      var showFilter = identity; // if we're stacking, "infer zero" gap mode gets markers in the
      // gap points - because we've inferred a zero there - but other
      // modes (currently "interpolate", later "interrupt" hopefully)
      // we don't draw generated markers

      var stackGroup = trace.stackgroup;
      var isInferZero = stackGroup && gd._fullLayout._scatterStackOpts[xa._id + ya._id][stackGroup].stackgaps === 'infer zero';

      if (trace.marker.maxdisplayed || trace._needsCull) {
        showFilter = isInferZero ? visFilterWithGaps : visFilter;
      } else if (stackGroup && !isInferZero) {
        showFilter = gapFilter;
      }

      if (showMarkers) markerFilter = showFilter;
      if (showText) textFilter = showFilter;
    } // marker points


    selection = points.selectAll('path.point');
    join = selection.data(markerFilter, keyFunc);
    var enter = join.enter().append('path').classed('point', true);

    if (hasTransition) {
      enter.call(drawing_1.pointStyle, trace, gd).call(drawing_1.translatePoints, xa, ya).style('opacity', 0).transition().style('opacity', 1);
    }

    join.order();
    var styleFns;

    if (showMarkers) {
      styleFns = drawing_1.makePointStyleFns(trace);
    }

    join.each(function (d) {
      var el = d3.select(this);
      var sel = transition(el);
      hasNode = drawing_1.translatePoint(d, sel, xa, ya);

      if (hasNode) {
        drawing_1.singlePointStyle(d, sel, trace, styleFns, gd);

        if (plotinfo.layerClipId) {
          drawing_1.hideOutsideRangePoint(d, sel, xa, ya, trace.xcalendar, trace.ycalendar);
        }

        if (trace.customdata) {
          el.classed('plotly-customdata', d.data !== null && d.data !== undefined);
        }
      } else {
        sel.remove();
      }
    });

    if (hasTransition) {
      join.exit().transition().style('opacity', 0).remove();
    } else {
      join.exit().remove();
    } // text points


    selection = text.selectAll('g');
    join = selection.data(textFilter, keyFunc); // each text needs to go in its own 'g' in case
    // it gets converted to mathjax

    join.enter().append('g').classed('textpoint', true).append('text');
    join.order();
    join.each(function (d) {
      var g = d3.select(this);
      var sel = transition(g.select('text'));
      hasNode = drawing_1.translatePoint(d, sel, xa, ya);

      if (hasNode) {
        if (plotinfo.layerClipId) {
          drawing_1.hideOutsideRangePoint(d, g, xa, ya, trace.xcalendar, trace.ycalendar);
        }
      } else {
        g.remove();
      }
    });
    join.selectAll('text').call(drawing_1.textPointStyle, trace, gd).each(function (d) {
      // This just *has* to be totally custom because of SVG text positioning :(
      // It's obviously copied from translatePoint; we just can't use that
      var x = xa.c2p(d.x);
      var y = ya.c2p(d.y);
      d3.select(this).selectAll('tspan.line').each(function () {
        transition(d3.select(this)).attr({
          x: x,
          y: y
        });
      });
    });
    join.exit().remove();
  }

  points.datum(cdscatter);
  text.datum(cdscatter);
  makePoints(points, text, cdscatter); // lastly, clip points groups of `cliponaxis !== false` traces
  // on `plotinfo._hasClipOnAxisFalse === true` subplots

  var hasClipOnAxisFalse = trace.cliponaxis === false;
  var clipUrl = hasClipOnAxisFalse ? null : plotinfo.layerClipId;
  drawing_1.setClipUrl(points, clipUrl, gd);
  drawing_1.setClipUrl(text, clipUrl, gd);
}

function selectMarkers(gd, idx, plotinfo, cdscatter, cdscatterAll) {
  var xa = plotinfo.xaxis;
  var ya = plotinfo.yaxis;
  var xr = d3.extent(lib_1.simpleMap(xa.range, xa.r2c));
  var yr = d3.extent(lib_1.simpleMap(ya.range, ya.r2c));
  var trace = cdscatter[0].trace;
  if (!subtypes.hasMarkers(trace)) return; // if marker.maxdisplayed is used, select a maximum of
  // mnum markers to show, from the set that are in the viewport

  var mnum = trace.marker.maxdisplayed; // TODO: remove some as we get away from the viewport?

  if (mnum === 0) return;
  var cd = cdscatter.filter(function (v) {
    return v.x >= xr[0] && v.x <= xr[1] && v.y >= yr[0] && v.y <= yr[1];
  });
  var inc = Math.ceil(cd.length / mnum);
  var tnum = 0;
  cdscatterAll.forEach(function (cdj, j) {
    var tracei = cdj[0].trace;

    if (subtypes.hasMarkers(tracei) && tracei.marker.maxdisplayed > 0 && j < idx) {
      tnum++;
    }
  }); // if multiple traces use maxdisplayed, stagger which markers we
  // display this formula offsets successive traces by 1/3 of the
  // increment, adding an extra small amount after each triplet so
  // it's not quite periodic

  var i0 = Math.round(tnum * inc / 3 + Math.floor(tnum / 3) * inc / 7.1); // for error bars: save in cd which markers to show
  // so we don't have to repeat this

  cdscatter.forEach(function (v) {
    delete v.vis;
  });
  cd.forEach(function (v, i) {
    if (Math.round((i + i0) % inc) === 0) v.vis = true;
  });
}

var marker_colorbar = {
  container: 'marker',
  min: 'cmin',
  max: 'cmax'
};

var format_labels = function formatLabels(cdi, trace, fullLayout) {
  var labels = {};
  var mockGd = {
    _fullLayout: fullLayout
  };
  var xa = axes_1.getFromTrace(mockGd, trace, 'x');
  var ya = axes_1.getFromTrace(mockGd, trace, 'y');
  labels.xLabel = axes_1.tickText(xa, xa.c2l(cdi.x), true).text;
  labels.yLabel = axes_1.tickText(ya, ya.c2l(cdi.y), true).text;
  return labels;
};

function style$1(gd) {
  var s = d3.select(gd).selectAll('g.trace.scatter');
  s.style('opacity', function (d) {
    return d[0].trace.opacity;
  });
  s.selectAll('g.points').each(function (d) {
    var sel = d3.select(this);
    var trace = d.trace || d[0].trace;
    stylePoints(sel, trace, gd);
  });
  s.selectAll('g.text').each(function (d) {
    var sel = d3.select(this);
    var trace = d.trace || d[0].trace;
    styleText(sel, trace, gd);
  });
  s.selectAll('g.trace path.js-line').call(drawing_1.lineGroupStyle);
  s.selectAll('g.trace path.js-fill').call(drawing_1.fillGroupStyle, gd);
  registry.getComponentMethod('errorbars', 'style')(s);
}

function stylePoints(sel, trace, gd) {
  drawing_1.pointStyle(sel.selectAll('path.point'), trace, gd);
}

function styleText(sel, trace, gd) {
  drawing_1.textPointStyle(sel.selectAll('text'), trace, gd);
}

function styleOnSelect(gd, cd, sel) {
  var trace = cd[0].trace;

  if (trace.selectedpoints) {
    drawing_1.selectedPointStyle(sel.selectAll('path.point'), trace);
    drawing_1.selectedTextStyle(sel.selectAll('text'), trace);
  } else {
    stylePoints(sel, trace, gd);
    styleText(sel, trace, gd);
  }
}

var style_1 = {
  style: style$1,
  stylePoints: stylePoints,
  styleText: styleText,
  styleOnSelect: styleOnSelect
};

var get_trace_color = function getTraceColor(trace, di) {
  var lc, tc; // TODO: text modes

  if (trace.mode === 'lines') {
    lc = trace.line.color;
    return lc && color_1.opacity(lc) ? lc : trace.fillcolor;
  } else if (trace.mode === 'none') {
    return trace.fill ? trace.fillcolor : '';
  } else {
    var mc = di.mcc || (trace.marker || {}).color;
    var mlc = di.mlcc || ((trace.marker || {}).line || {}).color;
    tc = mc && color_1.opacity(mc) ? mc : mlc && color_1.opacity(mlc) && (di.mlw || ((trace.marker || {}).line || {}).width) ? mlc : '';

    if (tc) {
      // make sure the points aren't TOO transparent
      if (color_1.opacity(tc) < 0.3) {
        return color_1.addOpacity(tc, 0.3);
      } else return tc;
    } else {
      lc = (trace.line || {}).color;
      return lc && color_1.opacity(lc) && subtypes.hasLines(trace) && trace.line.width ? lc : trace.fillcolor;
    }
  }
};

var fillText = lib_1.fillText;

var hover = function hoverPoints(pointData, xval, yval, hovermode) {
  var cd = pointData.cd;
  var trace = cd[0].trace;
  var xa = pointData.xa;
  var ya = pointData.ya;
  var xpx = xa.c2p(xval);
  var ypx = ya.c2p(yval);
  var pt = [xpx, ypx];
  var hoveron = trace.hoveron || '';
  var minRad = trace.mode.indexOf('markers') !== -1 ? 3 : 0.5;
  var xPeriod = !!trace.xperiodalignment;
  var yPeriod = !!trace.yperiodalignment; // look for points to hover on first, then take fills only if we
  // didn't find a point

  if (hoveron.indexOf('points') !== -1) {
    // dx and dy are used in compare modes - here we want to always
    // prioritize the closest data point, at least as long as markers are
    // the same size or nonexistent, but still try to prioritize small markers too.
    var dx = function (di) {
      if (xPeriod) {
        var x0 = xa.c2p(di.xStart);
        var x1 = xa.c2p(di.xEnd);
        return xpx >= Math.min(x0, x1) && xpx <= Math.max(x0, x1) ? 0 : Infinity;
      }

      var rad = Math.max(3, di.mrc || 0);
      var kink = 1 - 1 / rad;
      var dxRaw = Math.abs(xa.c2p(di.x) - xpx);
      return dxRaw < rad ? kink * dxRaw / rad : dxRaw - rad + kink;
    };

    var dy = function (di) {
      if (yPeriod) {
        var y0 = ya.c2p(di.yStart);
        var y1 = ya.c2p(di.yEnd);
        return ypx >= Math.min(y0, y1) && ypx <= Math.max(y0, y1) ? 0 : Infinity;
      }

      var rad = Math.max(3, di.mrc || 0);
      var kink = 1 - 1 / rad;
      var dyRaw = Math.abs(ya.c2p(di.y) - ypx);
      return dyRaw < rad ? kink * dyRaw / rad : dyRaw - rad + kink;
    }; // scatter points: d.mrc is the calculated marker radius
    // adjust the distance so if you're inside the marker it
    // always will show up regardless of point size, but
    // prioritize smaller points


    var dxy = function (di) {
      var rad = Math.max(minRad, di.mrc || 0);
      var dx = xa.c2p(di.x) - xpx;
      var dy = ya.c2p(di.y) - ypx;
      return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - minRad / rad);
    };

    var distfn = fx.getDistanceFunction(hovermode, dx, dy, dxy);
    fx.getClosest(cd, distfn, pointData); // skip the rest (for this trace) if we didn't find a close point

    if (pointData.index !== false) {
      // the closest data point
      var di = cd[pointData.index];
      var xc = xa.c2p(di.x, true);
      var yc = ya.c2p(di.y, true);
      var rad = di.mrc || 1; // now we're done using the whole `calcdata` array, replace the
      // index with the original index (in case of inserted point from
      // stacked area)

      pointData.index = di.i;
      var orientation = cd[0].t.orientation; // TODO: for scatter and bar, option to show (sub)totals and
      // raw data? Currently stacked and/or normalized bars just show
      // the normalized individual sizes, so that's what I'm doing here
      // for now.

      var sizeVal = orientation && (di.sNorm || di.s);
      var xLabelVal = orientation === 'h' ? sizeVal : di.orig_x !== undefined ? di.orig_x : di.x;
      var yLabelVal = orientation === 'v' ? sizeVal : di.orig_y !== undefined ? di.orig_y : di.y;
      lib_1.extendFlat(pointData, {
        color: get_trace_color(trace, di),
        x0: xc - rad,
        x1: xc + rad,
        xLabelVal: xLabelVal,
        y0: yc - rad,
        y1: yc + rad,
        yLabelVal: yLabelVal,
        spikeDistance: dxy(di),
        hovertemplate: trace.hovertemplate
      });
      fillText(di, trace, pointData);
      registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);
      return [pointData];
    }
  } // even if hoveron is 'fills', only use it if we have polygons too


  if (hoveron.indexOf('fills') !== -1 && trace._polygons) {
    var polygons = trace._polygons;
    var polygonsIn = [];
    var inside = false;
    var xmin = Infinity;
    var xmax = -Infinity;
    var ymin = Infinity;
    var ymax = -Infinity;
    var i, j, polygon, pts, xCross, x0, x1, y0, y1;

    for (i = 0; i < polygons.length; i++) {
      polygon = polygons[i]; // TODO: this is not going to work right for curved edges, it will
      // act as though they're straight. That's probably going to need
      // the elements themselves to capture the events. Worth it?

      if (polygon.contains(pt)) {
        inside = !inside; // TODO: need better than just the overall bounding box

        polygonsIn.push(polygon);
        ymin = Math.min(ymin, polygon.ymin);
        ymax = Math.max(ymax, polygon.ymax);
      }
    }

    if (inside) {
      // constrain ymin/max to the visible plot, so the label goes
      // at the middle of the piece you can see
      ymin = Math.max(ymin, 0);
      ymax = Math.min(ymax, ya._length); // find the overall left-most and right-most points of the
      // polygon(s) we're inside at their combined vertical midpoint.
      // This is where we will draw the hover label.
      // Note that this might not be the vertical midpoint of the
      // whole trace, if it's disjoint.

      var yAvg = (ymin + ymax) / 2;

      for (i = 0; i < polygonsIn.length; i++) {
        pts = polygonsIn[i].pts;

        for (j = 1; j < pts.length; j++) {
          y0 = pts[j - 1][1];
          y1 = pts[j][1];

          if (y0 > yAvg !== y1 >= yAvg) {
            x0 = pts[j - 1][0];
            x1 = pts[j][0];

            if (y1 - y0) {
              xCross = x0 + (x1 - x0) * (yAvg - y0) / (y1 - y0);
              xmin = Math.min(xmin, xCross);
              xmax = Math.max(xmax, xCross);
            }
          }
        }
      } // constrain xmin/max to the visible plot now too


      xmin = Math.max(xmin, 0);
      xmax = Math.min(xmax, xa._length); // get only fill or line color for the hover color

      var color = color_1.defaultLine;
      if (color_1.opacity(trace.fillcolor)) color = trace.fillcolor;else if (color_1.opacity((trace.line || {}).color)) {
        color = trace.line.color;
      }
      lib_1.extendFlat(pointData, {
        // never let a 2D override 1D type as closest point
        // also: no spikeDistance, it's not allowed for fills
        distance: pointData.maxHoverDistance,
        x0: xmin,
        x1: xmax,
        y0: yAvg,
        y1: yAvg,
        color: color,
        hovertemplate: false
      });
      delete pointData.index;

      if (trace.text && !Array.isArray(trace.text)) {
        pointData.text = String(trace.text);
      } else pointData.text = trace.name;

      return [pointData];
    }
  }
};

var select = function selectPoints(searchInfo, selectionTester) {
  var cd = searchInfo.cd;
  var xa = searchInfo.xaxis;
  var ya = searchInfo.yaxis;
  var selection = [];
  var trace = cd[0].trace;
  var i;
  var di;
  var x;
  var y;
  var hasOnlyLines = !subtypes.hasMarkers(trace) && !subtypes.hasText(trace);
  if (hasOnlyLines) return [];

  if (selectionTester === false) {
    // clear selection
    for (i = 0; i < cd.length; i++) {
      cd[i].selected = 0;
    }
  } else {
    for (i = 0; i < cd.length; i++) {
      di = cd[i];
      x = xa.c2p(di.x);
      y = ya.c2p(di.y);

      if (di.i !== null && selectionTester.contains([x, y], false, i, searchInfo)) {
        selection.push({
          pointNumber: di.i,
          x: xa.c2d(di.x),
          y: ya.c2d(di.y)
        });
        di.selected = 1;
      } else {
        di.selected = 0;
      }
    }
  }

  return selection;
};

var attributes$b = {
  xaxis: {
    valType: 'subplotid',
    dflt: 'x',
    editType: 'calc+clearAxisTypes',
    description: ['Sets a reference between this trace\'s x coordinates and', 'a 2D cartesian x axis.', 'If *x* (the default value), the x coordinates refer to', '`layout.xaxis`.', 'If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.'].join(' ')
  },
  yaxis: {
    valType: 'subplotid',
    dflt: 'y',
    editType: 'calc+clearAxisTypes',
    description: ['Sets a reference between this trace\'s y coordinates and', 'a 2D cartesian y axis.', 'If *y* (the default value), the y coordinates refer to', '`layout.yaxis`.', 'If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.'].join(' ')
  }
};

var traceIs$1 = registry.traceIs;
/*
 *  data: the plot data to use in choosing auto type
 *  name: axis object name (ie 'xaxis') if one should be stored
 */

var type_defaults = function handleTypeDefaults(containerIn, containerOut, coerce, options) {
  coerce('autotypenumbers', options.autotypenumbersDflt);
  var axType = coerce('type', (options.splomStash || {}).type);

  if (axType === '-') {
    setAutoType(containerOut, options.data);

    if (containerOut.type === '-') {
      containerOut.type = 'linear';
    } else {
      // copy autoType back to input axis
      // note that if this object didn't exist
      // in the input layout, we have to put it in
      // this happens in the main supplyDefaults function
      containerIn.type = containerOut.type;
    }
  }
};

function setAutoType(ax, data) {
  // new logic: let people specify any type they want,
  // only autotype if type is '-'
  if (ax.type !== '-') return;
  var id = ax._id;
  var axLetter = id.charAt(0);
  var i; // support 3d

  if (id.indexOf('scene') !== -1) id = axLetter;
  var d0 = getFirstNonEmptyTrace(data, id, axLetter);
  if (!d0) return; // first check for histograms, as the count direction
  // should always default to a linear axis

  if (d0.type === 'histogram' && axLetter === {
    v: 'y',
    h: 'x'
  }[d0.orientation || 'v']) {
    ax.type = 'linear';
    return;
  }

  var calAttr = axLetter + 'calendar';
  var calendar = d0[calAttr];
  var opts = {
    noMultiCategory: !traceIs$1(d0, 'cartesian') || traceIs$1(d0, 'noMultiCategory')
  }; // To not confuse 2D x/y used for per-box sample points for multicategory coordinates

  if (d0.type === 'box' && d0._hasPreCompStats && axLetter === {
    h: 'x',
    v: 'y'
  }[d0.orientation || 'v']) {
    opts.noMultiCategory = true;
  }

  opts.autotypenumbers = ax.autotypenumbers; // check all boxes on this x axis to see
  // if they're dates, numbers, or categories

  if (isBoxWithoutPositionCoords(d0, axLetter)) {
    var posLetter = getBoxPosLetter(d0);
    var boxPositions = [];

    for (i = 0; i < data.length; i++) {
      var trace = data[i];
      if (!traceIs$1(trace, 'box-violin') || (trace[axLetter + 'axis'] || axLetter) !== id) continue;
      if (trace[posLetter] !== undefined) boxPositions.push(trace[posLetter][0]);else if (trace.name !== undefined) boxPositions.push(trace.name);else boxPositions.push('text');
      if (trace[calAttr] !== calendar) calendar = undefined;
    }

    ax.type = axis_autotype(boxPositions, calendar, opts);
  } else if (d0.type === 'splom') {
    var dimensions = d0.dimensions;
    var dim = dimensions[d0._axesDim[id]];
    if (dim.visible) ax.type = axis_autotype(dim.values, calendar, opts);
  } else {
    ax.type = axis_autotype(d0[axLetter] || [d0[axLetter + '0']], calendar, opts);
  }
}

function getFirstNonEmptyTrace(data, id, axLetter) {
  for (var i = 0; i < data.length; i++) {
    var trace = data[i];

    if (trace.type === 'splom' && trace._length > 0 && (trace['_' + axLetter + 'axes'] || {})[id]) {
      return trace;
    }

    if ((trace[axLetter + 'axis'] || axLetter) === id) {
      if (isBoxWithoutPositionCoords(trace, axLetter)) {
        return trace;
      } else if ((trace[axLetter] || []).length || trace[axLetter + '0']) {
        return trace;
      }
    }
  }
}

function getBoxPosLetter(trace) {
  return {
    v: 'x',
    h: 'y'
  }[trace.orientation || 'v'];
}

function isBoxWithoutPositionCoords(trace, axLetter) {
  var posLetter = getBoxPosLetter(trace);
  var isBox = traceIs$1(trace, 'box-violin');
  var isCandlestick = traceIs$1(trace._fullInput || {}, 'candlestick');
  return isBox && !isCandlestick && axLetter === posLetter && trace[posLetter] === undefined && trace[posLetter + '0'] === undefined;
}

function findCategories(ax, opts) {
  var dataAttr = opts.dataAttr || ax._id.charAt(0);

  var lookup = {};
  var axData;
  var i, j;

  if (opts.axData) {
    // non-x/y case
    axData = opts.axData;
  } else {
    // x/y case
    axData = [];

    for (i = 0; i < opts.data.length; i++) {
      var trace = opts.data[i];

      if (trace[dataAttr + 'axis'] === ax._id) {
        axData.push(trace);
      }
    }
  }

  for (i = 0; i < axData.length; i++) {
    var vals = axData[i][dataAttr];

    for (j = 0; j < vals.length; j++) {
      var v = vals[j];

      if (v !== null && v !== undefined) {
        lookup[v] = 1;
      }
    }
  }

  return Object.keys(lookup);
}
/**
 * Fills in category* default and initial categories.
 *
 * @param {object} containerIn : input axis object
 * @param {object} containerOut : full axis object
 * @param {function} coerce : Lib.coerce fn wrapper
 * @param {object} opts :
 *   - data {array} : (full) data trace
 * OR
 *   - axData {array} : (full) data associated with axis being coerced here
 *   - dataAttr {string} : attribute name corresponding to coordinate array
 */


var category_order_defaults = function handleCategoryOrderDefaults(containerIn, containerOut, coerce, opts) {
  if (containerOut.type !== 'category') return;
  var arrayIn = containerIn.categoryarray;
  var isValidArray = Array.isArray(arrayIn) && arrayIn.length > 0; // override default 'categoryorder' value when non-empty array is supplied

  var orderDefault;
  if (isValidArray) orderDefault = 'array';
  var order = coerce('categoryorder', orderDefault);
  var array; // coerce 'categoryarray' only in array order case

  if (order === 'array') {
    array = coerce('categoryarray');
  } // cannot set 'categoryorder' to 'array' with an invalid 'categoryarray'


  if (!isValidArray && order === 'array') {
    order = containerOut.categoryorder = 'trace';
  } // set up things for makeCalcdata


  if (order === 'trace') {
    containerOut._initialCategories = [];
  } else if (order === 'array') {
    containerOut._initialCategories = array.slice();
  } else {
    array = findCategories(containerOut, opts).sort();

    if (order === 'category ascending') {
      containerOut._initialCategories = array;
    } else if (order === 'category descending') {
      containerOut._initialCategories = array.reverse();
    }
  }
};

var colorMix = tinycolor.mix;
var lightFraction = attributes$j.lightFraction;
/**
 * @param {object} opts :
 *   - dfltColor {string} : default axis color
 *   - bgColor {string} : combined subplot bg color
 *   - blend {number, optional} : blend percentage (to compute dflt grid color)
 *   - showLine {boolean} : show line by default
 *   - showGrid {boolean} : show grid by default
 *   - noZeroLine {boolean} : don't coerce zeroline* attributes
 *   - attributes {object} : attribute object associated with input containers
 */

var line_grid_defaults = function handleLineGridDefaults(containerIn, containerOut, coerce, opts) {
  opts = opts || {};
  var dfltColor = opts.dfltColor;

  function coerce2(attr, dflt) {
    return lib_1.coerce2(containerIn, containerOut, opts.attributes, attr, dflt);
  }

  var lineColor = coerce2('linecolor', dfltColor);
  var lineWidth = coerce2('linewidth');
  var showLine = coerce('showline', opts.showLine || !!lineColor || !!lineWidth);

  if (!showLine) {
    delete containerOut.linecolor;
    delete containerOut.linewidth;
  }

  var gridColorDflt = colorMix(dfltColor, opts.bgColor, opts.blend || lightFraction).toRgbString();
  var gridColor = coerce2('gridcolor', gridColorDflt);
  var gridWidth = coerce2('gridwidth');
  var showGridLines = coerce('showgrid', opts.showGrid || !!gridColor || !!gridWidth);

  if (!showGridLines) {
    delete containerOut.gridcolor;
    delete containerOut.gridwidth;
  }

  if (!opts.noZeroLine) {
    var zeroLineColor = coerce2('zerolinecolor', dfltColor);
    var zeroLineWidth = coerce2('zerolinewidth');
    var showZeroLine = coerce('zeroline', opts.showGrid || !!zeroLineColor || !!zeroLineWidth);

    if (!showZeroLine) {
      delete containerOut.zerolinecolor;
      delete containerOut.zerolinewidth;
    }
  }
};

var DAY_OF_WEEK = constants$a.WEEKDAY_PATTERN;
var HOUR = constants$a.HOUR_PATTERN;
/**
 * options: object containing:
 *
 *  letter: 'x' or 'y'
 *  title: name of the axis (ie 'Colorbar') to go in default title
 *  font: the default font to inherit
 *  outerTicks: boolean, should ticks default to outside?
 *  showGrid: boolean, should gridlines be shown by default?
 *  noHover: boolean, this axis doesn't support hover effects?
 *  noTickson: boolean, this axis doesn't support 'tickson'
 *  data: the plot data, used to manage categories
 *  bgColor: the plot background color, to calculate default gridline colors
 *  calendar:
 *  splomStash:
 *  visibleDflt: boolean
 *  reverseDflt: boolean
 *  automargin: boolean
 */

var axis_defaults = function handleAxisDefaults(containerIn, containerOut, coerce, options, layoutOut) {
  var letter = options.letter;
  var font = options.font || {};
  var splomStash = options.splomStash || {};
  var visible = coerce('visible', !options.visibleDflt);
  var axTemplate = containerOut._template || {};
  var axType = containerOut.type || axTemplate.type || '-';
  var ticklabelmode;

  if (axType === 'date') {
    var handleCalendarDefaults = registry.getComponentMethod('calendars', 'handleDefaults');
    handleCalendarDefaults(containerIn, containerOut, 'calendar', options.calendar);

    if (!options.noTicklabelmode) {
      ticklabelmode = coerce('ticklabelmode');
    }
  }

  var ticklabelposition = '';

  if (!options.noTicklabelposition || axType === 'multicategory') {
    ticklabelposition = lib_1.coerce(containerIn, containerOut, {
      ticklabelposition: {
        valType: 'enumerated',
        dflt: 'outside',
        values: ticklabelmode === 'period' ? ['outside', 'inside'] : letter === 'x' ? ['outside', 'inside', 'outside left', 'inside left', 'outside right', 'inside right'] : ['outside', 'inside', 'outside top', 'inside top', 'outside bottom', 'inside bottom']
      }
    }, 'ticklabelposition');
  }

  if (!options.noTicklabeloverflow) {
    coerce('ticklabeloverflow', ticklabelposition.indexOf('inside') !== -1 ? 'hide past domain' : axType === 'category' || axType === 'multicategory' ? 'allow' : 'hide past div');
  }

  set_convert(containerOut, layoutOut);
  var autorangeDflt = !containerOut.isValidRange(containerIn.range);
  if (autorangeDflt && options.reverseDflt) autorangeDflt = 'reversed';
  var autoRange = coerce('autorange', autorangeDflt);
  if (autoRange && (axType === 'linear' || axType === '-')) coerce('rangemode');
  coerce('range');
  containerOut.cleanRange();
  category_order_defaults(containerIn, containerOut, coerce, options);
  if (axType !== 'category' && !options.noHover) coerce('hoverformat');
  var dfltColor = coerce('color'); // if axis.color was provided, use it for fonts too; otherwise,
  // inherit from global font color in case that was provided.
  // Compare to dflt rather than to containerIn, so we can provide color via
  // template too.

  var dfltFontColor = dfltColor !== layout_attributes$1.color.dflt ? dfltColor : font.color; // try to get default title from splom trace, fallback to graph-wide value

  var dfltTitle = splomStash.label || layoutOut._dfltTitle[letter];
  prefix_suffix_defaults(containerIn, containerOut, coerce, axType, options);
  if (!visible) return containerOut;
  coerce('title.text', dfltTitle);
  lib_1.coerceFont(coerce, 'title.font', {
    family: font.family,
    size: lib_1.bigFont(font.size),
    color: dfltFontColor
  });
  tick_value_defaults(containerIn, containerOut, coerce, axType);
  tick_label_defaults(containerIn, containerOut, coerce, axType, options);
  tick_mark_defaults(containerIn, containerOut, coerce, options);
  line_grid_defaults(containerIn, containerOut, coerce, {
    dfltColor: dfltColor,
    bgColor: options.bgColor,
    showGrid: options.showGrid,
    attributes: layout_attributes$1
  });
  if (containerOut.showline || containerOut.ticks) coerce('mirror');
  if (options.automargin) coerce('automargin');
  var isMultiCategory = axType === 'multicategory';

  if (!options.noTickson && (axType === 'category' || isMultiCategory) && (containerOut.ticks || containerOut.showgrid)) {
    var ticksonDflt;
    if (isMultiCategory) ticksonDflt = 'boundaries';
    var tickson = coerce('tickson', ticksonDflt);

    if (tickson === 'boundaries') {
      delete containerOut.ticklabelposition;
    }
  }

  if (isMultiCategory) {
    var showDividers = coerce('showdividers');

    if (showDividers) {
      coerce('dividercolor');
      coerce('dividerwidth');
    }
  }

  if (axType === 'date') {
    array_container_defaults(containerIn, containerOut, {
      name: 'rangebreaks',
      inclusionAttr: 'enabled',
      handleItemDefaults: rangebreaksDefaults
    });

    if (!containerOut.rangebreaks.length) {
      delete containerOut.rangebreaks;
    } else {
      for (var k = 0; k < containerOut.rangebreaks.length; k++) {
        if (containerOut.rangebreaks[k].pattern === DAY_OF_WEEK) {
          containerOut._hasDayOfWeekBreaks = true;
          break;
        }
      }

      set_convert(containerOut, layoutOut);

      if (layoutOut._has('scattergl') || layoutOut._has('splom')) {
        for (var i = 0; i < options.data.length; i++) {
          var trace = options.data[i];

          if (trace.type === 'scattergl' || trace.type === 'splom') {
            trace.visible = false;
            lib_1.warn(trace.type + ' traces do not work on axes with rangebreaks.' + ' Setting trace ' + trace.index + ' to `visible: false`.');
          }
        }
      }
    }
  }

  return containerOut;
};

function rangebreaksDefaults(itemIn, itemOut, containerOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(itemIn, itemOut, layout_attributes$1.rangebreaks, attr, dflt);
  }

  var enabled = coerce('enabled');

  if (enabled) {
    var bnds = coerce('bounds');

    if (bnds && bnds.length >= 2) {
      var dfltPattern = '';
      var i, q;

      if (bnds.length === 2) {
        for (i = 0; i < 2; i++) {
          q = indexOfDay(bnds[i]);

          if (q) {
            dfltPattern = DAY_OF_WEEK;
            break;
          }
        }
      }

      var pattern = coerce('pattern', dfltPattern);

      if (pattern === DAY_OF_WEEK) {
        for (i = 0; i < 2; i++) {
          q = indexOfDay(bnds[i]);

          if (q) {
            // convert to integers i.e 'Sunday' --> 0
            itemOut.bounds[i] = bnds[i] = q - 1;
          }
        }
      }

      if (pattern) {
        // ensure types and ranges
        for (i = 0; i < 2; i++) {
          q = bnds[i];

          switch (pattern) {
            case DAY_OF_WEEK:
              if (!fastIsnumeric(q)) {
                itemOut.enabled = false;
                return;
              }

              q = +q;

              if (q !== Math.floor(q) || // don't accept fractional days for mow
              q < 0 || q >= 7) {
                itemOut.enabled = false;
                return;
              } // use number


              itemOut.bounds[i] = bnds[i] = q;
              break;

            case HOUR:
              if (!fastIsnumeric(q)) {
                itemOut.enabled = false;
                return;
              }

              q = +q;

              if (q < 0 || q > 24) {
                // accept 24
                itemOut.enabled = false;
                return;
              } // use number


              itemOut.bounds[i] = bnds[i] = q;
              break;
          }
        }
      }

      if (containerOut.autorange === false) {
        var rng = containerOut.range; // if bounds are bigger than the (set) range, disable break

        if (rng[0] < rng[1]) {
          if (bnds[0] < rng[0] && bnds[1] > rng[1]) {
            itemOut.enabled = false;
            return;
          }
        } else if (bnds[0] > rng[0] && bnds[1] < rng[1]) {
          itemOut.enabled = false;
          return;
        }
      }
    } else {
      var values = coerce('values');

      if (values && values.length) {
        coerce('dvalue');
      } else {
        itemOut.enabled = false;
        return;
      }
    }
  }
} // these numbers are one more than what bounds would be mapped to


var dayStrToNum = {
  sun: 1,
  mon: 2,
  tue: 3,
  wed: 4,
  thu: 5,
  fri: 6,
  sat: 7
};

function indexOfDay(v) {
  if (typeof v !== 'string') return;
  return dayStrToNum[v.substr(0, 3).toLowerCase()];
}

var position_defaults = function handlePositionDefaults(containerIn, containerOut, coerce, options) {
  var counterAxes = options.counterAxes || [];
  var overlayableAxes = options.overlayableAxes || [];
  var letter = options.letter;
  var grid = options.grid;
  var dfltAnchor, dfltDomain, dfltSide, dfltPosition;

  if (grid) {
    dfltDomain = grid._domains[letter][grid._axisMap[containerOut._id]];
    dfltAnchor = grid._anchors[containerOut._id];

    if (dfltDomain) {
      dfltSide = grid[letter + 'side'].split(' ')[0];
      dfltPosition = grid.domain[letter][dfltSide === 'right' || dfltSide === 'top' ? 1 : 0];
    }
  } // Even if there's a grid, this axis may not be in it - fall back on non-grid defaults


  dfltDomain = dfltDomain || [0, 1];
  dfltAnchor = dfltAnchor || (fastIsnumeric(containerIn.position) ? 'free' : counterAxes[0] || 'free');
  dfltSide = dfltSide || (letter === 'x' ? 'bottom' : 'left');
  dfltPosition = dfltPosition || 0;
  var anchor = lib_1.coerce(containerIn, containerOut, {
    anchor: {
      valType: 'enumerated',
      values: ['free'].concat(counterAxes),
      dflt: dfltAnchor
    }
  }, 'anchor');
  if (anchor === 'free') coerce('position', dfltPosition);
  lib_1.coerce(containerIn, containerOut, {
    side: {
      valType: 'enumerated',
      values: letter === 'x' ? ['bottom', 'top'] : ['left', 'right'],
      dflt: dfltSide
    }
  }, 'side');
  var overlaying = false;

  if (overlayableAxes.length) {
    overlaying = lib_1.coerce(containerIn, containerOut, {
      overlaying: {
        valType: 'enumerated',
        values: [false].concat(overlayableAxes),
        dflt: false
      }
    }, 'overlaying');
  }

  if (!overlaying) {
    // TODO: right now I'm copying this domain over to overlaying axes
    // in ax.setscale()... but this means we still need (imperfect) logic
    // in the axes popover to hide domain for the overlaying axis.
    // perhaps I should make a private version _domain that all axes get???
    var domain = coerce('domain', dfltDomain); // according to https://www.npmjs.com/package/canvas-size
    // the minimum value of max canvas width across browsers and devices is 4096
    // which applied in the calculation below:

    if (domain[0] > domain[1] - 1 / 4096) containerOut.domain = dfltDomain;
    lib_1.noneOrAll(containerIn.domain, containerOut.domain, dfltDomain);
  }

  coerce('layer');
  return containerOut;
};

var isUnifiedHover = helpers$9.isUnifiedHover;
var id2name = axis_ids.id2name;
var name2id = axis_ids.name2id;
var AX_ID_PATTERN = constants$a.AX_ID_PATTERN;
var traceIs = registry.traceIs;
var getComponentMethod = registry.getComponentMethod;

function appendList(cont, k, item) {
  if (Array.isArray(cont[k])) cont[k].push(item);else cont[k] = [item];
}

var layout_defaults = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {
  var autotypenumbersDflt = layoutOut.autotypenumbers;
  var ax2traces = {};
  var xaMayHide = {};
  var yaMayHide = {};
  var xaMustDisplay = {};
  var yaMustDisplay = {};
  var yaMustNotReverse = {};
  var yaMayReverse = {};
  var axHasImage = {};
  var outerTicks = {};
  var noGrids = {};
  var i, j; // look for axes in the data

  for (i = 0; i < fullData.length; i++) {
    var trace = fullData[i];
    if (!traceIs(trace, 'cartesian') && !traceIs(trace, 'gl2d')) continue;
    var xaName;

    if (trace.xaxis) {
      xaName = id2name(trace.xaxis);
      appendList(ax2traces, xaName, trace);
    } else if (trace.xaxes) {
      for (j = 0; j < trace.xaxes.length; j++) {
        appendList(ax2traces, id2name(trace.xaxes[j]), trace);
      }
    }

    var yaName;

    if (trace.yaxis) {
      yaName = id2name(trace.yaxis);
      appendList(ax2traces, yaName, trace);
    } else if (trace.yaxes) {
      for (j = 0; j < trace.yaxes.length; j++) {
        appendList(ax2traces, id2name(trace.yaxes[j]), trace);
      }
    } // logic for funnels


    if (trace.type === 'funnel') {
      if (trace.orientation === 'h') {
        if (xaName) xaMayHide[xaName] = true;
        if (yaName) yaMayReverse[yaName] = true;
      } else {
        if (yaName) yaMayHide[yaName] = true;
      }
    } else if (trace.type === 'image') {
      if (yaName) axHasImage[yaName] = true;
      if (xaName) axHasImage[xaName] = true;
    } else {
      if (yaName) {
        yaMustDisplay[yaName] = true;
        yaMustNotReverse[yaName] = true;
      }

      if (!traceIs(trace, 'carpet') || trace.type === 'carpet' && !trace._cheater) {
        if (xaName) xaMustDisplay[xaName] = true;
      }
    } // Two things trigger axis visibility:
    // 1. is not carpet
    // 2. carpet that's not cheater
    // The above check for definitely-not-cheater is not adequate. This
    // second list tracks which axes *could* be a cheater so that the
    // full condition triggering hiding is:
    //   *could* be a cheater and *is not definitely visible*


    if (trace.type === 'carpet' && trace._cheater) {
      if (xaName) xaMayHide[xaName] = true;
    } // check for default formatting tweaks


    if (traceIs(trace, '2dMap')) {
      outerTicks[xaName] = true;
      outerTicks[yaName] = true;
    }

    if (traceIs(trace, 'oriented')) {
      var positionAxis = trace.orientation === 'h' ? yaName : xaName;
      noGrids[positionAxis] = true;
    }
  }

  var subplots = layoutOut._subplots;
  var xIds = subplots.xaxis;
  var yIds = subplots.yaxis;
  var xNames = lib_1.simpleMap(xIds, id2name);
  var yNames = lib_1.simpleMap(yIds, id2name);
  var axNames = xNames.concat(yNames); // plot_bgcolor only makes sense if there's a (2D) plot!
  // TODO: bgcolor for each subplot, to inherit from the main one

  var plotBgColor = color_1.background;

  if (xIds.length && yIds.length) {
    plotBgColor = lib_1.coerce(layoutIn, layoutOut, layout_attributes$2, 'plot_bgcolor');
  }

  var bgColor = color_1.combine(plotBgColor, layoutOut.paper_bgcolor); // name of single axis (e.g. 'xaxis', 'yaxis2')

  var axName; // id of single axis (e.g. 'y', 'x5')

  var axId; // 'x' or 'y'

  var axLetter; // input layout axis container

  var axLayoutIn; // full layout axis container

  var axLayoutOut;

  function newAxLayoutOut() {
    var traces = ax2traces[axName] || [];
    axLayoutOut._traceIndices = traces.map(function (t) {
      return t._expandedIndex;
    });
    axLayoutOut._annIndices = [];
    axLayoutOut._shapeIndices = [];
    axLayoutOut._imgIndices = [];
    axLayoutOut._subplotsWith = [];
    axLayoutOut._counterAxes = [];
    axLayoutOut._name = axLayoutOut._attr = axName;
    axLayoutOut._id = axId;
  }

  function coerce(attr, dflt) {
    return lib_1.coerce(axLayoutIn, axLayoutOut, layout_attributes$1, attr, dflt);
  }

  function coerce2(attr, dflt) {
    return lib_1.coerce2(axLayoutIn, axLayoutOut, layout_attributes$1, attr, dflt);
  }

  function getCounterAxes(axLetter) {
    return axLetter === 'x' ? yIds : xIds;
  }

  function getOverlayableAxes(axLetter, axName) {
    var list = axLetter === 'x' ? xNames : yNames;
    var out = [];

    for (var j = 0; j < list.length; j++) {
      var axName2 = list[j];

      if (axName2 !== axName && !(layoutIn[axName2] || {}).overlaying) {
        out.push(name2id(axName2));
      }
    }

    return out;
  } // list of available counter axis names


  var counterAxes = {
    x: getCounterAxes('x'),
    y: getCounterAxes('y')
  }; // list of all x AND y axis ids

  var allAxisIds = counterAxes.x.concat(counterAxes.y); // lookup and list of axis ids that axes in axNames have a reference to,
  // even though they are missing from allAxisIds

  var missingMatchedAxisIdsLookup = {};
  var missingMatchedAxisIds = []; // fill in 'missing' axis lookup when an axis is set to match an axis
  // not part of the allAxisIds list, save axis type so that we can propagate
  // it to the missing axes

  function addMissingMatchedAxis() {
    var matchesIn = axLayoutIn.matches;

    if (AX_ID_PATTERN.test(matchesIn) && allAxisIds.indexOf(matchesIn) === -1) {
      missingMatchedAxisIdsLookup[matchesIn] = axLayoutIn.type;
      missingMatchedAxisIds = Object.keys(missingMatchedAxisIdsLookup);
    }
  }

  var hovermode = hovermode_defaults(layoutIn, layoutOut);
  var unifiedHover = isUnifiedHover(hovermode); // first pass creates the containers, determines types, and handles most of the settings

  for (i = 0; i < axNames.length; i++) {
    axName = axNames[i];
    axId = name2id(axName);
    axLetter = axName.charAt(0);

    if (!lib_1.isPlainObject(layoutIn[axName])) {
      layoutIn[axName] = {};
    }

    axLayoutIn = layoutIn[axName];
    axLayoutOut = plot_template.newContainer(layoutOut, axName, axLetter + 'axis');
    newAxLayoutOut();
    var visibleDflt = axLetter === 'x' && !xaMustDisplay[axName] && xaMayHide[axName] || axLetter === 'y' && !yaMustDisplay[axName] && yaMayHide[axName];
    var reverseDflt = axLetter === 'y' && (!yaMustNotReverse[axName] && yaMayReverse[axName] || axHasImage[axName]);
    var defaultOptions = {
      letter: axLetter,
      font: layoutOut.font,
      outerTicks: outerTicks[axName],
      showGrid: !noGrids[axName],
      data: ax2traces[axName] || [],
      bgColor: bgColor,
      calendar: layoutOut.calendar,
      automargin: true,
      visibleDflt: visibleDflt,
      reverseDflt: reverseDflt,
      autotypenumbersDflt: autotypenumbersDflt,
      splomStash: ((layoutOut._splomAxes || {})[axLetter] || {})[axId]
    };
    coerce('uirevision', layoutOut.uirevision);
    type_defaults(axLayoutIn, axLayoutOut, coerce, defaultOptions);
    axis_defaults(axLayoutIn, axLayoutOut, coerce, defaultOptions, layoutOut);
    var unifiedSpike = unifiedHover && axLetter === hovermode.charAt(0);
    var spikecolor = coerce2('spikecolor', unifiedHover ? axLayoutOut.color : undefined);
    var spikethickness = coerce2('spikethickness', unifiedHover ? 1.5 : undefined);
    var spikedash = coerce2('spikedash', unifiedHover ? 'dot' : undefined);
    var spikemode = coerce2('spikemode', unifiedHover ? 'across' : undefined);
    var spikesnap = coerce2('spikesnap');
    var showSpikes = coerce('showspikes', !!unifiedSpike || !!spikecolor || !!spikethickness || !!spikedash || !!spikemode || !!spikesnap);

    if (!showSpikes) {
      delete axLayoutOut.spikecolor;
      delete axLayoutOut.spikethickness;
      delete axLayoutOut.spikedash;
      delete axLayoutOut.spikemode;
      delete axLayoutOut.spikesnap;
    }

    position_defaults(axLayoutIn, axLayoutOut, coerce, {
      letter: axLetter,
      counterAxes: counterAxes[axLetter],
      overlayableAxes: getOverlayableAxes(axLetter, axName),
      grid: layoutOut.grid
    });
    coerce('title.standoff');
    addMissingMatchedAxis();
    axLayoutOut._input = axLayoutIn;
  } // coerce the 'missing' axes


  i = 0;

  while (i < missingMatchedAxisIds.length) {
    axId = missingMatchedAxisIds[i++];
    axName = id2name(axId);
    axLetter = axName.charAt(0);

    if (!lib_1.isPlainObject(layoutIn[axName])) {
      layoutIn[axName] = {};
    }

    axLayoutIn = layoutIn[axName];
    axLayoutOut = plot_template.newContainer(layoutOut, axName, axLetter + 'axis');
    newAxLayoutOut();
    var defaultOptions2 = {
      letter: axLetter,
      font: layoutOut.font,
      outerTicks: outerTicks[axName],
      showGrid: !noGrids[axName],
      data: [],
      bgColor: bgColor,
      calendar: layoutOut.calendar,
      automargin: true,
      visibleDflt: false,
      reverseDflt: false,
      autotypenumbersDflt: autotypenumbersDflt,
      splomStash: ((layoutOut._splomAxes || {})[axLetter] || {})[axId]
    };
    coerce('uirevision', layoutOut.uirevision);
    axLayoutOut.type = missingMatchedAxisIdsLookup[axId] || 'linear';
    axis_defaults(axLayoutIn, axLayoutOut, coerce, defaultOptions2, layoutOut);
    position_defaults(axLayoutIn, axLayoutOut, coerce, {
      letter: axLetter,
      counterAxes: counterAxes[axLetter],
      overlayableAxes: getOverlayableAxes(axLetter, axName),
      grid: layoutOut.grid
    });
    coerce('fixedrange');
    addMissingMatchedAxis();
    axLayoutOut._input = axLayoutIn;
  } // quick second pass for range slider and selector defaults


  var rangeSliderDefaults = getComponentMethod('rangeslider', 'handleDefaults');
  var rangeSelectorDefaults = getComponentMethod('rangeselector', 'handleDefaults');

  for (i = 0; i < xNames.length; i++) {
    axName = xNames[i];
    axLayoutIn = layoutIn[axName];
    axLayoutOut = layoutOut[axName];
    rangeSliderDefaults(layoutIn, layoutOut, axName);

    if (axLayoutOut.type === 'date') {
      rangeSelectorDefaults(axLayoutIn, axLayoutOut, layoutOut, yNames, axLayoutOut.calendar);
    }

    coerce('fixedrange');
  }

  for (i = 0; i < yNames.length; i++) {
    axName = yNames[i];
    axLayoutIn = layoutIn[axName];
    axLayoutOut = layoutOut[axName];
    var anchoredAxis = layoutOut[id2name(axLayoutOut.anchor)];
    var fixedRangeDflt = getComponentMethod('rangeslider', 'isVisible')(anchoredAxis);
    coerce('fixedrange', fixedRangeDflt);
  } // Finally, handle scale constraints and matching axes.
  //
  // We need to do this after all axes have coerced both `type`
  // (so we link only axes of the same type) and
  // `fixedrange` (so we can avoid linking from OR TO a fixed axis).


  constraints.handleDefaults(layoutIn, layoutOut, {
    axIds: allAxisIds.concat(missingMatchedAxisIds).sort(axis_ids.idSort),
    axHasImage: axHasImage
  });
};

/**
 * transitionAxes
 *
 * transition axes from one set of ranges to another, using a svg
 * transformations, similar to during panning.
 *
 * @param {DOM element | object} gd
 * @param {array} edits : array of 'edits', each item with
 * - plotinfo {object} subplot object
 * - xr0 {array} initial x-range
 * - xr1 {array} end x-range
 * - yr0 {array} initial y-range
 * - yr1 {array} end y-range
 * @param {object} transitionOpts
 * @param {function} makeOnCompleteCallback
 */


var transition_axes = function transitionAxes(gd, edits, transitionOpts, makeOnCompleteCallback) {
  var fullLayout = gd._fullLayout; // special case for redraw:false Plotly.animate that relies on this
  // to update axis-referenced layout components

  if (edits.length === 0) {
    axes_1.redrawComponents(gd);
    return;
  }

  function unsetSubplotTransform(subplot) {
    var xa = subplot.xaxis;
    var ya = subplot.yaxis;

    fullLayout._defs.select('#' + subplot.clipId + '> rect').call(drawing_1.setTranslate, 0, 0).call(drawing_1.setScale, 1, 1);

    subplot.plot.call(drawing_1.setTranslate, xa._offset, ya._offset).call(drawing_1.setScale, 1, 1);
    var traceGroups = subplot.plot.selectAll('.scatterlayer .trace'); // This is specifically directed at scatter traces, applying an inverse
    // scale to individual points to counteract the scale of the trace
    // as a whole:

    traceGroups.selectAll('.point').call(drawing_1.setPointGroupScale, 1, 1);
    traceGroups.selectAll('.textpoint').call(drawing_1.setTextPointsScale, 1, 1);
    traceGroups.call(drawing_1.hideOutsideRangePoints, subplot);
  }

  function updateSubplot(edit, progress) {
    var plotinfo = edit.plotinfo;
    var xa = plotinfo.xaxis;
    var ya = plotinfo.yaxis;
    var xlen = xa._length;
    var ylen = ya._length;
    var editX = !!edit.xr1;
    var editY = !!edit.yr1;
    var viewBox = [];

    if (editX) {
      var xr0 = lib_1.simpleMap(edit.xr0, xa.r2l);
      var xr1 = lib_1.simpleMap(edit.xr1, xa.r2l);
      var dx0 = xr0[1] - xr0[0];
      var dx1 = xr1[1] - xr1[0];
      viewBox[0] = (xr0[0] * (1 - progress) + progress * xr1[0] - xr0[0]) / (xr0[1] - xr0[0]) * xlen;
      viewBox[2] = xlen * (1 - progress + progress * dx1 / dx0);
      xa.range[0] = xa.l2r(xr0[0] * (1 - progress) + progress * xr1[0]);
      xa.range[1] = xa.l2r(xr0[1] * (1 - progress) + progress * xr1[1]);
    } else {
      viewBox[0] = 0;
      viewBox[2] = xlen;
    }

    if (editY) {
      var yr0 = lib_1.simpleMap(edit.yr0, ya.r2l);
      var yr1 = lib_1.simpleMap(edit.yr1, ya.r2l);
      var dy0 = yr0[1] - yr0[0];
      var dy1 = yr1[1] - yr1[0];
      viewBox[1] = (yr0[1] * (1 - progress) + progress * yr1[1] - yr0[1]) / (yr0[0] - yr0[1]) * ylen;
      viewBox[3] = ylen * (1 - progress + progress * dy1 / dy0);
      ya.range[0] = xa.l2r(yr0[0] * (1 - progress) + progress * yr1[0]);
      ya.range[1] = ya.l2r(yr0[1] * (1 - progress) + progress * yr1[1]);
    } else {
      viewBox[1] = 0;
      viewBox[3] = ylen;
    }

    axes_1.drawOne(gd, xa, {
      skipTitle: true
    });
    axes_1.drawOne(gd, ya, {
      skipTitle: true
    });
    axes_1.redrawComponents(gd, [xa._id, ya._id]);
    var xScaleFactor = editX ? xlen / viewBox[2] : 1;
    var yScaleFactor = editY ? ylen / viewBox[3] : 1;
    var clipDx = editX ? viewBox[0] : 0;
    var clipDy = editY ? viewBox[1] : 0;
    var fracDx = editX ? viewBox[0] / viewBox[2] * xlen : 0;
    var fracDy = editY ? viewBox[1] / viewBox[3] * ylen : 0;
    var plotDx = xa._offset - fracDx;
    var plotDy = ya._offset - fracDy;
    plotinfo.clipRect.call(drawing_1.setTranslate, clipDx, clipDy).call(drawing_1.setScale, 1 / xScaleFactor, 1 / yScaleFactor);
    plotinfo.plot.call(drawing_1.setTranslate, plotDx, plotDy).call(drawing_1.setScale, xScaleFactor, yScaleFactor); // apply an inverse scale to individual points to counteract
    // the scale of the trace group.

    drawing_1.setPointGroupScale(plotinfo.zoomScalePts, 1 / xScaleFactor, 1 / yScaleFactor);
    drawing_1.setTextPointsScale(plotinfo.zoomScaleTxt, 1 / xScaleFactor, 1 / yScaleFactor);
  }

  var onComplete;

  if (makeOnCompleteCallback) {
    // This module makes the choice whether or not it notifies Plotly.transition
    // about completion:
    onComplete = makeOnCompleteCallback();
  }

  function transitionComplete() {
    var aobj = {};

    for (var i = 0; i < edits.length; i++) {
      var edit = edits[i];
      var xa = edit.plotinfo.xaxis;
      var ya = edit.plotinfo.yaxis;
      if (edit.xr1) aobj[xa._name + '.range'] = edit.xr1.slice();
      if (edit.yr1) aobj[ya._name + '.range'] = edit.yr1.slice();
    } // Signal that this transition has completed:


    onComplete && onComplete();
    return registry.call('relayout', gd, aobj).then(function () {
      for (var i = 0; i < edits.length; i++) {
        unsetSubplotTransform(edits[i].plotinfo);
      }
    });
  }

  function transitionInterrupt() {
    var aobj = {};

    for (var i = 0; i < edits.length; i++) {
      var edit = edits[i];
      var xa = edit.plotinfo.xaxis;
      var ya = edit.plotinfo.yaxis;
      if (edit.xr0) aobj[xa._name + '.range'] = edit.xr0.slice();
      if (edit.yr0) aobj[ya._name + '.range'] = edit.yr0.slice();
    }

    return registry.call('relayout', gd, aobj).then(function () {
      for (var i = 0; i < edits.length; i++) {
        unsetSubplotTransform(edits[i].plotinfo);
      }
    });
  }

  var t1, t2, raf;
  var easeFn = d3.ease(transitionOpts.easing);

  gd._transitionData._interruptCallbacks.push(function () {
    window.cancelAnimationFrame(raf);
    raf = null;
    return transitionInterrupt();
  });

  function doFrame() {
    t2 = Date.now();
    var tInterp = Math.min(1, (t2 - t1) / transitionOpts.duration);
    var progress = easeFn(tInterp);

    for (var i = 0; i < edits.length; i++) {
      updateSubplot(edits[i], progress);
    }

    if (t2 - t1 > transitionOpts.duration) {
      transitionComplete();
      raf = window.cancelAnimationFrame(doFrame);
    } else {
      raf = window.requestAnimationFrame(doFrame);
    }
  }

  t1 = Date.now();
  raf = window.requestAnimationFrame(doFrame);
  return Promise.resolve();
};

var getModuleCalcData = get_data.getModuleCalcData;
var ensureSingle = lib_1.ensureSingle;

function ensureSingleAndAddDatum(parent, nodeType, className) {
  return lib_1.ensureSingle(parent, nodeType, className, function (s) {
    s.datum(className);
  });
}

var name$4 = 'cartesian';
var attr = ['xaxis', 'yaxis'];
var idRoot = ['x', 'y'];
var idRegex = constants$a.idRegex;
var attrRegex = constants$a.attrRegex;
var attributes$a = attributes$b;
var layoutAttributes = layout_attributes$1;
var supplyLayoutDefaults = layout_defaults;
var transitionAxes = transition_axes;

var finalizeSubplots = function (layoutIn, layoutOut) {
  var subplots = layoutOut._subplots;
  var xList = subplots.xaxis;
  var yList = subplots.yaxis;
  var spSVG = subplots.cartesian;
  var spAll = spSVG.concat(subplots.gl2d || []);
  var allX = {};
  var allY = {};
  var i, xi, yi;

  for (i = 0; i < spAll.length; i++) {
    var parts = spAll[i].split('y');
    allX[parts[0]] = 1;
    allY['y' + parts[1]] = 1;
  } // check for x axes with no subplot, and make one from the anchor of that x axis


  for (i = 0; i < xList.length; i++) {
    xi = xList[i];

    if (!allX[xi]) {
      yi = (layoutIn[axis_ids.id2name(xi)] || {}).anchor;
      if (!constants$a.idRegex.y.test(yi)) yi = 'y';
      spSVG.push(xi + yi);
      spAll.push(xi + yi);

      if (!allY[yi]) {
        allY[yi] = 1;
        lib_1.pushUnique(yList, yi);
      }
    }
  } // same for y axes with no subplot


  for (i = 0; i < yList.length; i++) {
    yi = yList[i];

    if (!allY[yi]) {
      xi = (layoutIn[axis_ids.id2name(yi)] || {}).anchor;
      if (!constants$a.idRegex.x.test(xi)) xi = 'x';
      spSVG.push(xi + yi);
      spAll.push(xi + yi);

      if (!allX[xi]) {
        allX[xi] = 1;
        lib_1.pushUnique(xList, xi);
      }
    }
  } // finally, if we've gotten here we're supposed to show cartesian...
  // so if there are NO subplots at all, make one from the first
  // x & y axes in the input layout


  if (!spAll.length) {
    xi = '';
    yi = '';

    for (var ki in layoutIn) {
      if (constants$a.attrRegex.test(ki)) {
        var axLetter = ki.charAt(0);

        if (axLetter === 'x') {
          if (!xi || +ki.substr(5) < +xi.substr(5)) {
            xi = ki;
          }
        } else if (!yi || +ki.substr(5) < +yi.substr(5)) {
          yi = ki;
        }
      }
    }

    xi = xi ? axis_ids.name2id(xi) : 'x';
    yi = yi ? axis_ids.name2id(yi) : 'y';
    xList.push(xi);
    yList.push(yi);
    spSVG.push(xi + yi);
  }
};
/**
 * Cartesian.plot
 *
 * @param {DOM div | object} gd
 * @param {array (optional)} traces
 *  array of traces indices to plot
 *  if undefined, plots all cartesian traces,
 * @param {object} (optional) transitionOpts
 *  transition option object
 * @param {function} (optional) makeOnCompleteCallback
 *  transition make callback function from Plots.transition
 */


var plot$1 = function (gd, traces, transitionOpts, makeOnCompleteCallback) {
  var fullLayout = gd._fullLayout;
  var subplots = fullLayout._subplots.cartesian;
  var calcdata = gd.calcdata;
  var i;

  if (!Array.isArray(traces)) {
    // If traces is not provided, then it's a complete replot and missing
    // traces are removed
    traces = [];

    for (i = 0; i < calcdata.length; i++) traces.push(i);
  }

  for (i = 0; i < subplots.length; i++) {
    var subplot = subplots[i];
    var subplotInfo = fullLayout._plots[subplot]; // Get all calcdata for this subplot:

    var cdSubplot = [];
    var pcd;

    for (var j = 0; j < calcdata.length; j++) {
      var cd = calcdata[j];
      var trace = cd[0].trace; // Skip trace if whitelist provided and it's not whitelisted:
      // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;

      if (trace.xaxis + trace.yaxis === subplot) {
        // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet
        // axis has actually changed:
        //
        // If this trace is specifically requested, add it to the list:
        if (traces.indexOf(trace.index) !== -1 || trace.carpet) {
          // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate
          // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill
          // is outdated. So this retroactively adds the previous trace if the
          // traces are interdependent.
          if (pcd && pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot && ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 && cdSubplot.indexOf(pcd) === -1) {
            cdSubplot.push(pcd);
          }

          cdSubplot.push(cd);
        } // Track the previous trace on this subplot for the retroactive-add step
        // above:


        pcd = cd;
      }
    }

    plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);
  }
};

function plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {
  var traceLayerClasses = constants$a.traceLayerClasses;
  var fullLayout = gd._fullLayout;
  var modules = fullLayout._modules;

  var _module, cdModuleAndOthers, cdModule;

  var layerData = [];
  var zoomScaleQueryParts = [];

  for (var i = 0; i < modules.length; i++) {
    _module = modules[i];
    var name = _module.name;
    var categories = registry.modules[name].categories;

    if (categories.svg) {
      var className = _module.layerName || name + 'layer';
      var plotMethod = _module.plot; // plot all visible traces of this type on this subplot at once

      cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod);
      cdModule = cdModuleAndOthers[0]; // don't need to search the found traces again - in fact we need to NOT
      // so that if two modules share the same plotter we don't double-plot

      cdSubplot = cdModuleAndOthers[1];

      if (cdModule.length) {
        layerData.push({
          i: traceLayerClasses.indexOf(className),
          className: className,
          plotMethod: plotMethod,
          cdModule: cdModule
        });
      }

      if (categories.zoomScale) {
        zoomScaleQueryParts.push('.' + className);
      }
    }
  }

  layerData.sort(function (a, b) {
    return a.i - b.i;
  });
  var layers = plotinfo.plot.selectAll('g.mlayer').data(layerData, function (d) {
    return d.className;
  });
  layers.enter().append('g').attr('class', function (d) {
    return d.className;
  }).classed('mlayer', true).classed('rangeplot', plotinfo.isRangePlot);
  layers.exit().remove();
  layers.order();
  layers.each(function (d) {
    var sel = d3.select(this);
    var className = d.className;
    d.plotMethod(gd, plotinfo, d.cdModule, sel, transitionOpts, makeOnCompleteCallback); // layers that allow `cliponaxis: false`

    if (constants$a.clipOnAxisFalseQuery.indexOf('.' + className) === -1) {
      drawing_1.setClipUrl(sel, plotinfo.layerClipId, gd);
    }
  }); // call Scattergl.plot separately

  if (fullLayout._has('scattergl')) {
    _module = registry.getModule('scattergl');
    cdModule = getModuleCalcData(cdSubplot, _module)[0];

    _module.plot(gd, plotinfo, cdModule);
  } // stash "hot" selections for faster interaction on drag and scroll


  if (!gd._context.staticPlot) {
    if (plotinfo._hasClipOnAxisFalse) {
      plotinfo.clipOnAxisFalseTraces = plotinfo.plot.selectAll(constants$a.clipOnAxisFalseQuery.join(',')).selectAll('.trace');
    }

    if (zoomScaleQueryParts.length) {
      var traces = plotinfo.plot.selectAll(zoomScaleQueryParts.join(',')).selectAll('.trace');
      plotinfo.zoomScalePts = traces.selectAll('path.point');
      plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');
    }
  }
}

var clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {
  var oldPlots = oldFullLayout._plots || {};
  var newPlots = newFullLayout._plots || {};
  var oldSubplotList = oldFullLayout._subplots || {};
  var plotinfo;
  var i, k; // when going from a large splom graph to something else,
  // we need to clear <g subplot> so that the new cartesian subplot
  // can have the correct layer ordering

  if (oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {
    for (k in oldPlots) {
      plotinfo = oldPlots[k];
      if (plotinfo.plotgroup) plotinfo.plotgroup.remove();
    }
  }

  var hadGl = oldFullLayout._has && oldFullLayout._has('gl');

  var hasGl = newFullLayout._has && newFullLayout._has('gl');

  if (hadGl && !hasGl) {
    for (k in oldPlots) {
      plotinfo = oldPlots[k];
      if (plotinfo._scene) plotinfo._scene.destroy();
    }
  } // delete any titles we don't need anymore
  // check if axis list has changed, and if so clear old titles


  if (oldSubplotList.xaxis && oldSubplotList.yaxis) {
    var oldAxIDs = axis_ids.listIds({
      _fullLayout: oldFullLayout
    });

    for (i = 0; i < oldAxIDs.length; i++) {
      var oldAxId = oldAxIDs[i];

      if (!newFullLayout[axis_ids.id2name(oldAxId)]) {
        oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();
      }
    }
  }

  var hadCartesian = oldFullLayout._has && oldFullLayout._has('cartesian');

  var hasCartesian = newFullLayout._has && newFullLayout._has('cartesian');

  if (hadCartesian && !hasCartesian) {
    // if we've gotten rid of all cartesian traces, remove all the subplot svg items
    purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);

    oldFullLayout._defs.selectAll('.axesclip').remove();

    delete oldFullLayout._axisConstraintGroups;
    delete oldFullLayout._axisMatchGroups;
  } else if (oldSubplotList.cartesian) {
    // otherwise look for subplots we need to remove
    for (i = 0; i < oldSubplotList.cartesian.length; i++) {
      var oldSubplotId = oldSubplotList.cartesian[i];

      if (!newPlots[oldSubplotId]) {
        var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';

        oldFullLayout._cartesianlayer.selectAll(selector).remove();

        removeSubplotExtras(oldSubplotId, oldFullLayout);
      }
    }
  }
};

var drawFramework = function (gd) {
  var fullLayout = gd._fullLayout;
  var subplotData = makeSubplotData(gd);

  var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot').data(subplotData, String);

  subplotLayers.enter().append('g').attr('class', function (d) {
    return 'subplot ' + d[0];
  });
  subplotLayers.order();
  subplotLayers.exit().call(purgeSubplotLayers, fullLayout);
  subplotLayers.each(function (d) {
    var id = d[0];
    var plotinfo = fullLayout._plots[id];
    plotinfo.plotgroup = d3.select(this);
    makeSubplotLayer(gd, plotinfo); // make separate drag layers for each subplot,
    // but append them to paper rather than the plot groups,
    // so they end up on top of the rest

    plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);
  });
};

var rangePlot = function (gd, plotinfo, cdSubplot) {
  makeSubplotLayer(gd, plotinfo);
  plotOne(gd, plotinfo, cdSubplot);
  plots_1.style(gd);
};

function makeSubplotData(gd) {
  var fullLayout = gd._fullLayout;
  var ids = fullLayout._subplots.cartesian;
  var len = ids.length;
  var i, j, id, plotinfo, xa, ya; // split 'regular' and 'overlaying' subplots

  var regulars = [];
  var overlays = [];

  for (i = 0; i < len; i++) {
    id = ids[i];
    plotinfo = fullLayout._plots[id];
    xa = plotinfo.xaxis;
    ya = plotinfo.yaxis;
    var xa2 = xa._mainAxis;
    var ya2 = ya._mainAxis;
    var mainplot = xa2._id + ya2._id;
    var mainplotinfo = fullLayout._plots[mainplot];
    plotinfo.overlays = [];

    if (mainplot !== id && mainplotinfo) {
      plotinfo.mainplot = mainplot;
      plotinfo.mainplotinfo = mainplotinfo;
      overlays.push(id);
    } else {
      plotinfo.mainplot = undefined;
      plotinfo.mainplotinfo = undefined;
      regulars.push(id);
    }
  } // fill in list of overlaying subplots in 'main plot'


  for (i = 0; i < overlays.length; i++) {
    id = overlays[i];
    plotinfo = fullLayout._plots[id];
    plotinfo.mainplotinfo.overlays.push(plotinfo);
  } // put 'regular' subplot data before 'overlaying'


  var subplotIds = regulars.concat(overlays);
  var subplotData = new Array(len);

  for (i = 0; i < len; i++) {
    id = subplotIds[i];
    plotinfo = fullLayout._plots[id];
    xa = plotinfo.xaxis;
    ya = plotinfo.yaxis; // use info about axis layer and overlaying pattern
    // to clean what need to be cleaned up in exit selection

    var d = [id, xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || ''];

    for (j = 0; j < plotinfo.overlays.length; j++) {
      d.push(plotinfo.overlays[j].id);
    }

    subplotData[i] = d;
  }

  return subplotData;
}

function makeSubplotLayer(gd, plotinfo) {
  var plotgroup = plotinfo.plotgroup;
  var id = plotinfo.id;
  var xLayer = constants$a.layerValue2layerClass[plotinfo.xaxis.layer];
  var yLayer = constants$a.layerValue2layerClass[plotinfo.yaxis.layer];
  var hasOnlyLargeSploms = gd._fullLayout._hasOnlyLargeSploms;

  if (!plotinfo.mainplot) {
    if (hasOnlyLargeSploms) {
      // TODO could do even better
      // - we don't need plot (but we would have to mock it in lsInner
      //   and other places
      // - we don't (x|y)lines and (x|y)axislayer for most subplots
      //   usually just the bottom x and left y axes.
      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');
      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');
      plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');
      plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');
    } else {
      var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');
      plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');
      plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');
      plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');
      plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');
      ensureSingle(plotgroup, 'path', 'xlines-below');
      ensureSingle(plotgroup, 'path', 'ylines-below');
      plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');
      ensureSingle(plotgroup, 'g', 'xaxislayer-below');
      ensureSingle(plotgroup, 'g', 'yaxislayer-below');
      plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');
      plotinfo.plot = ensureSingle(plotgroup, 'g', 'plot');
      plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');
      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');
      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');
      plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');
      ensureSingle(plotgroup, 'g', 'xaxislayer-above');
      ensureSingle(plotgroup, 'g', 'yaxislayer-above');
      plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above'); // set refs to correct layers as determined by 'axis.layer'

      plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);
      plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);
      plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);
      plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);
    }
  } else {
    var mainplotinfo = plotinfo.mainplotinfo;
    var mainplotgroup = mainplotinfo.plotgroup;
    var xId = id + '-x';
    var yId = id + '-y'; // now make the components of overlaid subplots
    // overlays don't have backgrounds, and append all
    // their other components to the corresponding
    // extra groups of their main plots.

    plotinfo.gridlayer = mainplotinfo.gridlayer;
    plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;
    ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);
    ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);
    ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);
    ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);
    plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);
    ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);
    ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);
    ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);
    ensureSingle(mainplotinfo.overaxesAbove, 'g', yId); // set refs to correct layers as determined by 'abovetraces'

    plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);
    plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);
    plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);
    plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);
  } // common attributes for all subplots, overlays or not


  if (!hasOnlyLargeSploms) {
    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);
    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);
    plotinfo.gridlayer.selectAll('g').map(function (d) {
      return d[0];
    }).sort(axis_ids.idSort);
  }

  plotinfo.xlines.style('fill', 'none').classed('crisp', true);
  plotinfo.ylines.style('fill', 'none').classed('crisp', true);
}

function purgeSubplotLayers(layers, fullLayout) {
  if (!layers) return;
  var overlayIdsToRemove = {};
  layers.each(function (d) {
    var id = d[0];
    var plotgroup = d3.select(this);
    plotgroup.remove();
    removeSubplotExtras(id, fullLayout);
    overlayIdsToRemove[id] = true; // do not remove individual axis <clipPath>s here
    // as other subplots may need them
  }); // must remove overlaid subplot trace layers 'manually'

  for (var k in fullLayout._plots) {
    var subplotInfo = fullLayout._plots[k];
    var overlays = subplotInfo.overlays || [];

    for (var j = 0; j < overlays.length; j++) {
      var overlayInfo = overlays[j];

      if (overlayIdsToRemove[overlayInfo.id]) {
        overlayInfo.plot.selectAll('.trace').remove();
      }
    }
  }
}

function removeSubplotExtras(subplotId, fullLayout) {
  fullLayout._draggers.selectAll('g.' + subplotId).remove();

  fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();
}

var toSVG = function (gd) {
  var imageRoot = gd._fullLayout._glimages;
  var root = d3.select(gd).selectAll('.svg-container');
  var canvases = root.filter(function (d, i) {
    return i === root.size() - 1;
  }).selectAll('.gl-canvas-context, .gl-canvas-focus');

  function canvasToImage() {
    var canvas = this;
    var imageData = canvas.toDataURL('image/png');
    var image = imageRoot.append('svg:image');
    image.attr({
      xmlns: xmlns_namespaces.svg,
      'xlink:href': imageData,
      preserveAspectRatio: 'none',
      x: 0,
      y: 0,
      width: canvas.style.width,
      height: canvas.style.height
    });
  }

  canvases.each(canvasToImage);
};

var updateFx = graph_interact.updateFx;
var cartesian = {
  name: name$4,
  attr: attr,
  idRoot: idRoot,
  idRegex: idRegex,
  attrRegex: attrRegex,
  attributes: attributes$a,
  layoutAttributes: layoutAttributes,
  supplyLayoutDefaults: supplyLayoutDefaults,
  transitionAxes: transitionAxes,
  finalizeSubplots: finalizeSubplots,
  plot: plot$1,
  clean: clean,
  drawFramework: drawFramework,
  rangePlot: rangePlot,
  toSVG: toSVG,
  updateFx: updateFx
};

var scatter = {
  hasLines: subtypes.hasLines,
  hasMarkers: subtypes.hasMarkers,
  hasText: subtypes.hasText,
  isBubble: subtypes.isBubble,
  attributes: attributes$c,
  supplyDefaults: defaults$b,
  crossTraceDefaults: cross_trace_defaults,
  calc: calc_1.calc,
  crossTraceCalc: cross_trace_calc,
  arraysToCalcdata: arrays_to_calcdata,
  plot: plot$2,
  colorbar: marker_colorbar,
  formatLabels: format_labels,
  style: style_1.style,
  styleOnSelect: style_1.styleOnSelect,
  hoverPoints: hover,
  selectPoints: select,
  animatable: true,
  moduleType: 'trace',
  name: 'scatter',
  basePlotModule: cartesian,
  categories: ['cartesian', 'svg', 'symbols', 'errorBarsOK', 'showLegend', 'scatter-like', 'zoomScale'],
  meta: {
    description: ['The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts.', 'The data visualized as scatter point or lines is set in `x` and `y`.', 'Text (appearing either on the chart or on hover only) is via `text`.', 'Bubble charts are achieved by setting `marker.size` and/or `marker.color`', 'to numerical arrays.'].join(' ')
  }
};

var legend = {
  moduleType: 'component',
  name: 'legend',
  layoutAttributes: attributes$e,
  supplyLayoutDefaults: defaults$e,
  draw: draw$a,
  style: style$2
};

/**
 * All paths are tuned for maximum scalability of the arrowhead,
 * ie throughout arrowwidth=0.3..3 the head is joined smoothly
 * to the line, with the line coming from the left and ending at (0, 0).
 *
 * `backoff` is the distance to move the arrowhead and the end of the line,
 * in order that the arrowhead points to the desired place, either at
 * the tip of the arrow or (in the case of circle or square)
 * the center of the symbol.
 *
 * `noRotate`, if truthy, says that this arrowhead should not rotate with the
 * arrow. That's the case for squares, which should always be straight, and
 * circles, for which it's irrelevant.
 */

var arrow_paths = [// no arrow
{
  path: '',
  backoff: 0
}, // wide with flat back
{
  path: 'M-2.4,-3V3L0.6,0Z',
  backoff: 0.6
}, // narrower with flat back
{
  path: 'M-3.7,-2.5V2.5L1.3,0Z',
  backoff: 1.3
}, // barbed
{
  path: 'M-4.45,-3L-1.65,-0.2V0.2L-4.45,3L1.55,0Z',
  backoff: 1.55
}, // wide line-drawn
{
  path: 'M-2.2,-2.2L-0.2,-0.2V0.2L-2.2,2.2L-1.4,3L1.6,0L-1.4,-3Z',
  backoff: 1.6
}, // narrower line-drawn
{
  path: 'M-4.4,-2.1L-0.6,-0.2V0.2L-4.4,2.1L-4,3L2,0L-4,-3Z',
  backoff: 2
}, // circle
{
  path: 'M2,0A2,2 0 1,1 0,-2A2,2 0 0,1 2,0Z',
  backoff: 0,
  noRotate: true
}, // square
{
  path: 'M2,2V-2H-2V2Z',
  backoff: 0,
  noRotate: true
}];

var strScale = lib_1.strScale;
var strRotate = lib_1.strRotate;
var strTranslate$5 = lib_1.strTranslate;
/**
 * Add arrowhead(s) to a path or line element
 *
 * @param {d3.selection} el3: a d3-selected line or path element
 *
 * @param {string} ends: 'none', 'start', 'end', or 'start+end' for which ends get arrowheads
 *
 * @param {object} options: style information. Must have all the following:
 * @param {number} options.arrowhead: end head style - see ./arrow_paths
 * @param {number} options.startarrowhead: start head style - see ./arrow_paths
 * @param {number} options.arrowsize: relative size of the end head vs line width
 * @param {number} options.startarrowsize: relative size of the start head vs line width
 * @param {number} options.standoff: distance in px to move the end arrow point from its target
 * @param {number} options.startstandoff: distance in px to move the start arrow point from its target
 * @param {number} options.arrowwidth: width of the arrow line
 * @param {string} options.arrowcolor: color of the arrow line, for the head to match
 *     Note that the opacity of this color is ignored, as it's assumed the container
 *     of both the line and head has opacity applied to it so there isn't greater opacity
 *     where they overlap.
 */

var draw_arrow_head = function drawArrowHead(el3, ends, options) {
  var el = el3.node();
  var headStyle = arrow_paths[options.arrowhead || 0];
  var startHeadStyle = arrow_paths[options.startarrowhead || 0];
  var scale = (options.arrowwidth || 1) * (options.arrowsize || 1);
  var startScale = (options.arrowwidth || 1) * (options.startarrowsize || 1);
  var doStart = ends.indexOf('start') >= 0;
  var doEnd = ends.indexOf('end') >= 0;
  var backOff = headStyle.backoff * scale + options.standoff;
  var startBackOff = startHeadStyle.backoff * startScale + options.startstandoff;
  var start, end, startRot, endRot;

  if (el.nodeName === 'line') {
    start = {
      x: +el3.attr('x1'),
      y: +el3.attr('y1')
    };
    end = {
      x: +el3.attr('x2'),
      y: +el3.attr('y2')
    };
    var dx = start.x - end.x;
    var dy = start.y - end.y;
    startRot = Math.atan2(dy, dx);
    endRot = startRot + Math.PI;

    if (backOff && startBackOff) {
      if (backOff + startBackOff > Math.sqrt(dx * dx + dy * dy)) {
        hideLine();
        return;
      }
    }

    if (backOff) {
      if (backOff * backOff > dx * dx + dy * dy) {
        hideLine();
        return;
      }

      var backOffX = backOff * Math.cos(startRot);
      var backOffY = backOff * Math.sin(startRot);
      end.x += backOffX;
      end.y += backOffY;
      el3.attr({
        x2: end.x,
        y2: end.y
      });
    }

    if (startBackOff) {
      if (startBackOff * startBackOff > dx * dx + dy * dy) {
        hideLine();
        return;
      }

      var startBackOffX = startBackOff * Math.cos(startRot);
      var startbackOffY = startBackOff * Math.sin(startRot);
      start.x -= startBackOffX;
      start.y -= startbackOffY;
      el3.attr({
        x1: start.x,
        y1: start.y
      });
    }
  } else if (el.nodeName === 'path') {
    var pathlen = el.getTotalLength(); // using dash to hide the backOff region of the path.
    // if we ever allow dash for the arrow we'll have to
    // do better than this hack... maybe just manually
    // combine the two

    var dashArray = '';

    if (pathlen < backOff + startBackOff) {
      hideLine();
      return;
    }

    var start0 = el.getPointAtLength(0);
    var dstart = el.getPointAtLength(0.1);
    startRot = Math.atan2(start0.y - dstart.y, start0.x - dstart.x);
    start = el.getPointAtLength(Math.min(startBackOff, pathlen));
    dashArray = '0px,' + startBackOff + 'px,';
    var end0 = el.getPointAtLength(pathlen);
    var dend = el.getPointAtLength(pathlen - 0.1);
    endRot = Math.atan2(end0.y - dend.y, end0.x - dend.x);
    end = el.getPointAtLength(Math.max(0, pathlen - backOff));
    var shortening = dashArray ? startBackOff + backOff : backOff;
    dashArray += pathlen - shortening + 'px,' + pathlen + 'px';
    el3.style('stroke-dasharray', dashArray);
  }

  function hideLine() {
    el3.style('stroke-dasharray', '0px,100px');
  }

  function drawhead(arrowHeadStyle, p, rot, arrowScale) {
    if (!arrowHeadStyle.path) return;
    if (arrowHeadStyle.noRotate) rot = 0;
    d3.select(el.parentNode).append('path').attr({
      'class': el3.attr('class'),
      d: arrowHeadStyle.path,
      transform: strTranslate$5(p.x, p.y) + strRotate(rot * 180 / Math.PI) + strScale(arrowScale)
    }).style({
      fill: color_1.rgb(options.arrowcolor),
      'stroke-width': 0
    });
  }

  if (doStart) drawhead(startHeadStyle, start, startRot, startScale);
  if (doEnd) drawhead(headStyle, end, endRot, scale);
};

var strTranslate$4 = lib_1.strTranslate;
var arrayEditor$3 = plot_template.arrayEditor; // Annotations are stored in gd.layout.annotations, an array of objects
// index can point to one item in this array,
//  or non-numeric to simply add a new one
//  or -1 to modify all existing
// opt can be the full options object, or one key (to be set to value)
//  or undefined to simply redraw
// if opt is blank, val can be 'add' or a full options object to add a new
//  annotation at that point in the array, or 'remove' to delete this one

var draw_1$1 = {
  draw: draw$8,
  drawOne: drawOne,
  drawRaw: drawRaw$1
};
/*
 * draw: draw all annotations without any new modifications
 */

function draw$8(gd) {
  var fullLayout = gd._fullLayout;

  fullLayout._infolayer.selectAll('.annotation').remove();

  for (var i = 0; i < fullLayout.annotations.length; i++) {
    if (fullLayout.annotations[i].visible) {
      drawOne(gd, i);
    }
  }

  return plots_1.previousPromises(gd);
}
/*
 * drawOne: draw a single cartesian or paper-ref annotation, potentially with modifications
 *
 * index (int): the annotation to draw
 */


function drawOne(gd, index) {
  var fullLayout = gd._fullLayout;
  var options = fullLayout.annotations[index] || {};
  var xa = axes_1.getFromId(gd, options.xref);
  var ya = axes_1.getFromId(gd, options.yref);
  if (xa) xa.setScale();
  if (ya) ya.setScale();
  drawRaw$1(gd, options, index, false, xa, ya);
} // Convert pixels to the coordinates relevant for the axis referred to. For
// example, for paper it would convert to a value normalized by the dimension of
// the plot.
// axDomainRef: if true and axa defined, draws relative to axis domain,
// otherwise draws relative to data (if axa defined) or paper (if not).


function shiftPosition(axa, dAx, axLetter, gs, options) {
  var optAx = options[axLetter];
  var axRef = options[axLetter + 'ref'];
  var vertical = axLetter.indexOf('y') !== -1;
  var axDomainRef = axes_1.getRefType(axRef) === 'domain';
  var gsDim = vertical ? gs.h : gs.w;

  if (axa) {
    if (axDomainRef) {
      // here optAx normalized to length of axis (e.g., normally in range
      // 0 to 1). But dAx is in pixels. So we normalize dAx to length of
      // axis before doing the math.
      return optAx + (vertical ? -dAx : dAx) / axa._length;
    } else {
      return axa.p2r(axa.r2p(optAx) + dAx);
    }
  } else {
    return optAx + (vertical ? -dAx : dAx) / gsDim;
  }
}
/**
 * drawRaw: draw a single annotation, potentially with modifications
 *
 * @param {DOM element} gd
 * @param {object} options : this annotation's fullLayout options
 * @param {integer} index : index in 'annotations' container of the annotation to draw
 * @param {string} subplotId : id of the annotation's subplot
 *  - use false for 2d (i.e. cartesian or paper-ref) annotations
 * @param {object | undefined} xa : full x-axis object to compute subplot pos-to-px
 * @param {object | undefined} ya : ... y-axis
 */


function drawRaw$1(gd, options, index, subplotId, xa, ya) {
  var fullLayout = gd._fullLayout;
  var gs = gd._fullLayout._size;
  var edits = gd._context.edits;
  var className, containerStr;

  if (subplotId) {
    className = 'annotation-' + subplotId;
    containerStr = subplotId + '.annotations';
  } else {
    className = 'annotation';
    containerStr = 'annotations';
  }

  var editHelpers = arrayEditor$3(gd.layout, containerStr, options);
  var modifyBase = editHelpers.modifyBase;
  var modifyItem = editHelpers.modifyItem;
  var getUpdateObj = editHelpers.getUpdateObj; // remove the existing annotation if there is one

  fullLayout._infolayer.selectAll('.' + className + '[data-index="' + index + '"]').remove();

  var annClipID = 'clip' + fullLayout._uid + '_ann' + index; // this annotation is gone - quit now after deleting it
  // TODO: use d3 idioms instead of deleting and redrawing every time

  if (!options._input || options.visible === false) {
    d3.selectAll('#' + annClipID).remove();
    return;
  } // calculated pixel positions
  // x & y each will get text, head, and tail as appropriate


  var annPosPx = {
    x: {},
    y: {}
  };
  var textangle = +options.textangle || 0; // create the components
  // made a single group to contain all, so opacity can work right
  // with border/arrow together this could handle a whole bunch of
  // cleanup at this point, but works for now

  var annGroup = fullLayout._infolayer.append('g').classed(className, true).attr('data-index', String(index)).style('opacity', options.opacity); // another group for text+background so that they can rotate together


  var annTextGroup = annGroup.append('g').classed('annotation-text-g', true);
  var editTextPosition = edits[options.showarrow ? 'annotationTail' : 'annotationPosition'];
  var textEvents = options.captureevents || edits.annotationText || editTextPosition;

  function makeEventData(initialEvent) {
    var eventData = {
      index: index,
      annotation: options._input,
      fullAnnotation: options,
      event: initialEvent
    };

    if (subplotId) {
      eventData.subplotId = subplotId;
    }

    return eventData;
  }

  var annTextGroupInner = annTextGroup.append('g').style('pointer-events', textEvents ? 'all' : null).call(setcursor, 'pointer').on('click', function () {
    gd._dragging = false;
    gd.emit('plotly_clickannotation', makeEventData(d3.event));
  });

  if (options.hovertext) {
    annTextGroupInner.on('mouseover', function () {
      var hoverOptions = options.hoverlabel;
      var hoverFont = hoverOptions.font;
      var bBox = this.getBoundingClientRect();
      var bBoxRef = gd.getBoundingClientRect();
      fx.loneHover({
        x0: bBox.left - bBoxRef.left,
        x1: bBox.right - bBoxRef.left,
        y: (bBox.top + bBox.bottom) / 2 - bBoxRef.top,
        text: options.hovertext,
        color: hoverOptions.bgcolor,
        borderColor: hoverOptions.bordercolor,
        fontFamily: hoverFont.family,
        fontSize: hoverFont.size,
        fontColor: hoverFont.color
      }, {
        container: fullLayout._hoverlayer.node(),
        outerContainer: fullLayout._paper.node(),
        gd: gd
      });
    }).on('mouseout', function () {
      fx.loneUnhover(fullLayout._hoverlayer.node());
    });
  }

  var borderwidth = options.borderwidth;
  var borderpad = options.borderpad;
  var borderfull = borderwidth + borderpad;
  var annTextBG = annTextGroupInner.append('rect').attr('class', 'bg').style('stroke-width', borderwidth + 'px').call(color_1.stroke, options.bordercolor).call(color_1.fill, options.bgcolor);
  var isSizeConstrained = options.width || options.height;

  var annTextClip = fullLayout._topclips.selectAll('#' + annClipID).data(isSizeConstrained ? [0] : []);

  annTextClip.enter().append('clipPath').classed('annclip', true).attr('id', annClipID).append('rect');
  annTextClip.exit().remove();
  var font = options.font;
  var text = fullLayout._meta ? lib_1.templateString(options.text, fullLayout._meta) : options.text;
  var annText = annTextGroupInner.append('text').classed('annotation-text', true).text(text);

  function textLayout(s) {
    s.call(drawing_1.font, font).attr({
      'text-anchor': {
        left: 'start',
        right: 'end'
      }[options.align] || 'middle'
    });
    svg_text_utils.convertToTspans(s, gd, drawGraphicalElements);
    return s;
  }

  function drawGraphicalElements() {
    // if the text has *only* a link, make the whole box into a link
    var anchor3 = annText.selectAll('a');

    if (anchor3.size() === 1 && anchor3.text() === annText.text()) {
      var wholeLink = annTextGroupInner.insert('a', ':first-child').attr({
        'xlink:xlink:href': anchor3.attr('xlink:href'),
        'xlink:xlink:show': anchor3.attr('xlink:show')
      }).style({
        cursor: 'pointer'
      });
      wholeLink.node().appendChild(annTextBG.node());
    }

    var mathjaxGroup = annTextGroupInner.select('.annotation-text-math-group');
    var hasMathjax = !mathjaxGroup.empty();
    var anntextBB = drawing_1.bBox((hasMathjax ? mathjaxGroup : annText).node());
    var textWidth = anntextBB.width;
    var textHeight = anntextBB.height;
    var annWidth = options.width || textWidth;
    var annHeight = options.height || textHeight;
    var outerWidth = Math.round(annWidth + 2 * borderfull);
    var outerHeight = Math.round(annHeight + 2 * borderfull);

    function shiftFraction(v, anchor) {
      if (anchor === 'auto') {
        if (v < 1 / 3) anchor = 'left';else if (v > 2 / 3) anchor = 'right';else anchor = 'center';
      }

      return {
        center: 0,
        middle: 0,
        left: 0.5,
        bottom: -0.5,
        right: -0.5,
        top: 0.5
      }[anchor];
    }

    var annotationIsOffscreen = false;
    var letters = ['x', 'y'];

    for (var i = 0; i < letters.length; i++) {
      var axLetter = letters[i];
      var axRef = options[axLetter + 'ref'] || axLetter;
      var tailRef = options['a' + axLetter + 'ref'];
      var ax = {
        x: xa,
        y: ya
      }[axLetter];
      var dimAngle = (textangle + (axLetter === 'x' ? 0 : -90)) * Math.PI / 180; // note that these two can be either positive or negative

      var annSizeFromWidth = outerWidth * Math.cos(dimAngle);
      var annSizeFromHeight = outerHeight * Math.sin(dimAngle); // but this one is the positive total size

      var annSize = Math.abs(annSizeFromWidth) + Math.abs(annSizeFromHeight);
      var anchor = options[axLetter + 'anchor'];
      var overallShift = options[axLetter + 'shift'] * (axLetter === 'x' ? 1 : -1);
      var posPx = annPosPx[axLetter];
      var basePx;
      var textPadShift;
      var alignPosition;
      var autoAlignFraction;
      var textShift;
      var axRefType = axes_1.getRefType(axRef);
      /*
       * calculate the *primary* pixel position
       * which is the arrowhead if there is one,
       * otherwise the text anchor point
       */

      if (ax && axRefType !== 'domain') {
        // check if annotation is off screen, to bypass DOM manipulations
        var posFraction = ax.r2fraction(options[axLetter]);

        if (posFraction < 0 || posFraction > 1) {
          if (tailRef === axRef) {
            posFraction = ax.r2fraction(options['a' + axLetter]);

            if (posFraction < 0 || posFraction > 1) {
              annotationIsOffscreen = true;
            }
          } else {
            annotationIsOffscreen = true;
          }
        }

        basePx = ax._offset + ax.r2p(options[axLetter]);
        autoAlignFraction = 0.5;
      } else {
        var axRefTypeEqDomain = axRefType === 'domain';

        if (axLetter === 'x') {
          alignPosition = options[axLetter];
          basePx = axRefTypeEqDomain ? ax._offset + ax._length * alignPosition : basePx = gs.l + gs.w * alignPosition;
        } else {
          alignPosition = 1 - options[axLetter];
          basePx = axRefTypeEqDomain ? ax._offset + ax._length * alignPosition : basePx = gs.t + gs.h * alignPosition;
        }

        autoAlignFraction = options.showarrow ? 0.5 : alignPosition;
      } // now translate this into pixel positions of head, tail, and text
      // as well as paddings for autorange


      if (options.showarrow) {
        posPx.head = basePx;
        var arrowLength = options['a' + axLetter]; // with an arrow, the text rotates around the anchor point

        textShift = annSizeFromWidth * shiftFraction(0.5, options.xanchor) - annSizeFromHeight * shiftFraction(0.5, options.yanchor);

        if (tailRef === axRef) {
          // In the case tailRefType is 'domain' or 'paper', the arrow's
          // position is set absolutely, which is consistent with how
          // it behaves when its position is set in data ('range')
          // coordinates.
          var tailRefType = axes_1.getRefType(tailRef);

          if (tailRefType === 'domain') {
            if (axLetter === 'y') {
              arrowLength = 1 - arrowLength;
            }

            posPx.tail = ax._offset + ax._length * arrowLength;
          } else if (tailRefType === 'paper') {
            if (axLetter === 'y') {
              arrowLength = 1 - arrowLength;
              posPx.tail = gs.t + gs.h * arrowLength;
            } else {
              posPx.tail = gs.l + gs.w * arrowLength;
            }
          } else {
            // assumed tailRef is range or paper referenced
            posPx.tail = ax._offset + ax.r2p(arrowLength);
          } // tail is range- or domain-referenced: autorange pads the
          // text in px from the tail


          textPadShift = textShift;
        } else {
          posPx.tail = basePx + arrowLength; // tail is specified in px from head, so autorange also pads vs head

          textPadShift = textShift + arrowLength;
        }

        posPx.text = posPx.tail + textShift; // constrain pixel/paper referenced so the draggers are at least
        // partially visible

        var maxPx = fullLayout[axLetter === 'x' ? 'width' : 'height'];

        if (axRef === 'paper') {
          posPx.head = lib_1.constrain(posPx.head, 1, maxPx - 1);
        }

        if (tailRef === 'pixel') {
          var shiftPlus = -Math.max(posPx.tail - 3, posPx.text);
          var shiftMinus = Math.min(posPx.tail + 3, posPx.text) - maxPx;

          if (shiftPlus > 0) {
            posPx.tail += shiftPlus;
            posPx.text += shiftPlus;
          } else if (shiftMinus > 0) {
            posPx.tail -= shiftMinus;
            posPx.text -= shiftMinus;
          }
        }

        posPx.tail += overallShift;
        posPx.head += overallShift;
      } else {
        // with no arrow, the text rotates and *then* we put the anchor
        // relative to the new bounding box
        textShift = annSize * shiftFraction(autoAlignFraction, anchor);
        textPadShift = textShift;
        posPx.text = basePx + textShift;
      }

      posPx.text += overallShift;
      textShift += overallShift;
      textPadShift += overallShift; // padplus/minus are used by autorange

      options['_' + axLetter + 'padplus'] = annSize / 2 + textPadShift;
      options['_' + axLetter + 'padminus'] = annSize / 2 - textPadShift; // size/shift are used during dragging

      options['_' + axLetter + 'size'] = annSize;
      options['_' + axLetter + 'shift'] = textShift;
    }

    if (annotationIsOffscreen) {
      annTextGroupInner.remove();
      return;
    }

    var xShift = 0;
    var yShift = 0;

    if (options.align !== 'left') {
      xShift = (annWidth - textWidth) * (options.align === 'center' ? 0.5 : 1);
    }

    if (options.valign !== 'top') {
      yShift = (annHeight - textHeight) * (options.valign === 'middle' ? 0.5 : 1);
    }

    if (hasMathjax) {
      mathjaxGroup.select('svg').attr({
        x: borderfull + xShift - 1,
        y: borderfull + yShift
      }).call(drawing_1.setClipUrl, isSizeConstrained ? annClipID : null, gd);
    } else {
      var texty = borderfull + yShift - anntextBB.top;
      var textx = borderfull + xShift - anntextBB.left;
      annText.call(svg_text_utils.positionText, textx, texty).call(drawing_1.setClipUrl, isSizeConstrained ? annClipID : null, gd);
    }

    annTextClip.select('rect').call(drawing_1.setRect, borderfull, borderfull, annWidth, annHeight);
    annTextBG.call(drawing_1.setRect, borderwidth / 2, borderwidth / 2, outerWidth - borderwidth, outerHeight - borderwidth);
    annTextGroupInner.call(drawing_1.setTranslate, Math.round(annPosPx.x.text - outerWidth / 2), Math.round(annPosPx.y.text - outerHeight / 2));
    /*
     * rotate text and background
     * we already calculated the text center position *as rotated*
     * because we needed that for autoranging anyway, so now whether
     * we have an arrow or not, we rotate about the text center.
     */

    annTextGroup.attr({
      transform: 'rotate(' + textangle + ',' + annPosPx.x.text + ',' + annPosPx.y.text + ')'
    });
    /*
     * add the arrow
     * uses options[arrowwidth,arrowcolor,arrowhead] for styling
     * dx and dy are normally zero, but when you are dragging the textbox
     * while the head stays put, dx and dy are the pixel offsets
     */

    var drawArrow = function (dx, dy) {
      annGroup.selectAll('.annotation-arrow-g').remove();
      var headX = annPosPx.x.head;
      var headY = annPosPx.y.head;
      var tailX = annPosPx.x.tail + dx;
      var tailY = annPosPx.y.tail + dy;
      var textX = annPosPx.x.text + dx;
      var textY = annPosPx.y.text + dy; // find the edge of the text box, where we'll start the arrow:
      // create transform matrix to rotate the text box corners

      var transform = lib_1.rotationXYMatrix(textangle, textX, textY);
      var applyTransform = lib_1.apply2DTransform(transform);
      var applyTransform2 = lib_1.apply2DTransform2(transform); // calculate and transform bounding box

      var width = +annTextBG.attr('width');
      var height = +annTextBG.attr('height');
      var xLeft = textX - 0.5 * width;
      var xRight = xLeft + width;
      var yTop = textY - 0.5 * height;
      var yBottom = yTop + height;
      var edges = [[xLeft, yTop, xLeft, yBottom], [xLeft, yBottom, xRight, yBottom], [xRight, yBottom, xRight, yTop], [xRight, yTop, xLeft, yTop]].map(applyTransform2); // Remove the line if it ends inside the box.  Use ray
      // casting for rotated boxes: see which edges intersect a
      // line from the arrowhead to far away and reduce with xor
      // to get the parity of the number of intersections.

      if (edges.reduce(function (a, x) {
        return a ^ !!lib_1.segmentsIntersect(headX, headY, headX + 1e6, headY + 1e6, x[0], x[1], x[2], x[3]);
      }, false)) {
        // no line or arrow - so quit drawArrow now
        return;
      }

      edges.forEach(function (x) {
        var p = lib_1.segmentsIntersect(tailX, tailY, headX, headY, x[0], x[1], x[2], x[3]);

        if (p) {
          tailX = p.x;
          tailY = p.y;
        }
      });
      var strokewidth = options.arrowwidth;
      var arrowColor = options.arrowcolor;
      var arrowSide = options.arrowside;
      var arrowGroup = annGroup.append('g').style({
        opacity: color_1.opacity(arrowColor)
      }).classed('annotation-arrow-g', true);
      var arrow = arrowGroup.append('path').attr('d', 'M' + tailX + ',' + tailY + 'L' + headX + ',' + headY).style('stroke-width', strokewidth + 'px').call(color_1.stroke, color_1.rgb(arrowColor));
      draw_arrow_head(arrow, arrowSide, options); // the arrow dragger is a small square right at the head, then a line to the tail,
      // all expanded by a stroke width of 6px plus the arrow line width

      if (edits.annotationPosition && arrow.node().parentNode && !subplotId) {
        var arrowDragHeadX = headX;
        var arrowDragHeadY = headY;

        if (options.standoff) {
          var arrowLength = Math.sqrt(Math.pow(headX - tailX, 2) + Math.pow(headY - tailY, 2));
          arrowDragHeadX += options.standoff * (tailX - headX) / arrowLength;
          arrowDragHeadY += options.standoff * (tailY - headY) / arrowLength;
        }

        var arrowDrag = arrowGroup.append('path').classed('annotation-arrow', true).classed('anndrag', true).classed('cursor-move', true).attr({
          d: 'M3,3H-3V-3H3ZM0,0L' + (tailX - arrowDragHeadX) + ',' + (tailY - arrowDragHeadY),
          transform: strTranslate$4(arrowDragHeadX, arrowDragHeadY)
        }).style('stroke-width', strokewidth + 6 + 'px').call(color_1.stroke, 'rgba(0,0,0,0)').call(color_1.fill, 'rgba(0,0,0,0)');
        var annx0, anny0; // dragger for the arrow & head: translates the whole thing
        // (head/tail/text) all together

        dragelement.init({
          element: arrowDrag.node(),
          gd: gd,
          prepFn: function () {
            var pos = drawing_1.getTranslate(annTextGroupInner);
            annx0 = pos.x;
            anny0 = pos.y;

            if (xa && xa.autorange) {
              modifyBase(xa._name + '.autorange', true);
            }

            if (ya && ya.autorange) {
              modifyBase(ya._name + '.autorange', true);
            }
          },
          moveFn: function (dx, dy) {
            var annxy0 = applyTransform(annx0, anny0);
            var xcenter = annxy0[0] + dx;
            var ycenter = annxy0[1] + dy;
            annTextGroupInner.call(drawing_1.setTranslate, xcenter, ycenter);
            modifyItem('x', shiftPosition(xa, dx, 'x', gs, options));
            modifyItem('y', shiftPosition(ya, dy, 'y', gs, options)); // for these 2 calls to shiftPosition, it is assumed xa, ya are
            // defined, so gsDim will not be used, but we put it in
            // anyways for consistency

            if (options.axref === options.xref) {
              modifyItem('ax', shiftPosition(xa, dx, 'ax', gs, options));
            }

            if (options.ayref === options.yref) {
              modifyItem('ay', shiftPosition(ya, dy, 'ay', gs, options));
            }

            arrowGroup.attr('transform', strTranslate$4(dx, dy));
            annTextGroup.attr({
              transform: 'rotate(' + textangle + ',' + xcenter + ',' + ycenter + ')'
            });
          },
          doneFn: function () {
            registry.call('_guiRelayout', gd, getUpdateObj());
            var notesBox = document.querySelector('.js-notes-box-panel');
            if (notesBox) notesBox.redraw(notesBox.selectedObj);
          }
        });
      }
    };

    if (options.showarrow) drawArrow(0, 0); // user dragging the annotation (text, not arrow)

    if (editTextPosition) {
      var baseTextTransform; // dragger for the textbox: if there's an arrow, just drag the
      // textbox and tail, leave the head untouched

      dragelement.init({
        element: annTextGroupInner.node(),
        gd: gd,
        prepFn: function () {
          baseTextTransform = annTextGroup.attr('transform');
        },
        moveFn: function (dx, dy) {
          var csr = 'pointer';

          if (options.showarrow) {
            // for these 2 calls to shiftPosition, it is assumed xa, ya are
            // defined, so gsDim will not be used, but we put it in
            // anyways for consistency
            if (options.axref === options.xref) {
              modifyItem('ax', shiftPosition(xa, dx, 'ax', gs, options));
            } else {
              modifyItem('ax', options.ax + dx);
            }

            if (options.ayref === options.yref) {
              modifyItem('ay', shiftPosition(ya, dy, 'ay', gs.w, options));
            } else {
              modifyItem('ay', options.ay + dy);
            }

            drawArrow(dx, dy);
          } else if (!subplotId) {
            var xUpdate, yUpdate;

            if (xa) {
              // shiftPosition will not execute code where xa was
              // undefined, so we use to calculate xUpdate too
              xUpdate = shiftPosition(xa, dx, 'x', gs, options);
            } else {
              var widthFraction = options._xsize / gs.w;
              var xLeft = options.x + (options._xshift - options.xshift) / gs.w - widthFraction / 2;
              xUpdate = dragelement.align(xLeft + dx / gs.w, widthFraction, 0, 1, options.xanchor);
            }

            if (ya) {
              // shiftPosition will not execute code where ya was
              // undefined, so we use to calculate yUpdate too
              yUpdate = shiftPosition(ya, dy, 'y', gs, options);
            } else {
              var heightFraction = options._ysize / gs.h;
              var yBottom = options.y - (options._yshift + options.yshift) / gs.h - heightFraction / 2;
              yUpdate = dragelement.align(yBottom - dy / gs.h, heightFraction, 0, 1, options.yanchor);
            }

            modifyItem('x', xUpdate);
            modifyItem('y', yUpdate);

            if (!xa || !ya) {
              csr = dragelement.getCursor(xa ? 0.5 : xUpdate, ya ? 0.5 : yUpdate, options.xanchor, options.yanchor);
            }
          } else return;

          annTextGroup.attr({
            transform: strTranslate$4(dx, dy) + baseTextTransform
          });
          setcursor(annTextGroupInner, csr);
        },
        clickFn: function (_, initialEvent) {
          if (options.captureevents) {
            gd.emit('plotly_clickannotation', makeEventData(initialEvent));
          }
        },
        doneFn: function () {
          setcursor(annTextGroupInner);
          registry.call('_guiRelayout', gd, getUpdateObj());
          var notesBox = document.querySelector('.js-notes-box-panel');
          if (notesBox) notesBox.redraw(notesBox.selectedObj);
        }
      });
    }
  }

  if (edits.annotationText) {
    annText.call(svg_text_utils.makeEditable, {
      delegate: annTextGroupInner,
      gd: gd
    }).call(textLayout).on('edit', function (_text) {
      options.text = _text;
      this.call(textLayout);
      modifyItem('text', _text);

      if (xa && xa.autorange) {
        modifyBase(xa._name + '.autorange', true);
      }

      if (ya && ya.autorange) {
        modifyBase(ya._name + '.autorange', true);
      }

      registry.call('_guiRelayout', gd, getUpdateObj());
    });
  } else annText.call(textLayout);
}

var arrayEditor$2 = plot_template.arrayEditor;
var click = {
  hasClickToShow: hasClickToShow,
  onClick: onClick
};
/*
 * hasClickToShow: does the given hoverData have ANY annotations which will
 * turn ON if we click here? (used by hover events to set cursor)
 *
 * gd: graphDiv
 * hoverData: a hoverData array, as included with the *plotly_hover* or
 *     *plotly_click* events in the `points` attribute
 *
 * returns: boolean
 */

function hasClickToShow(gd, hoverData) {
  var sets = getToggleSets(gd, hoverData);
  return sets.on.length > 0 || sets.explicitOff.length > 0;
}
/*
 * onClick: perform the toggling (via Plotly.update) implied by clicking
 * at this hoverData
 *
 * gd: graphDiv
 * hoverData: a hoverData array, as included with the *plotly_hover* or
 *     *plotly_click* events in the `points` attribute
 *
 * returns: Promise that the update is complete
 */


function onClick(gd, hoverData) {
  var toggleSets = getToggleSets(gd, hoverData);
  var onSet = toggleSets.on;
  var offSet = toggleSets.off.concat(toggleSets.explicitOff);
  var update = {};
  var annotationsOut = gd._fullLayout.annotations;
  var i, editHelpers;
  if (!(onSet.length || offSet.length)) return;

  for (i = 0; i < onSet.length; i++) {
    editHelpers = arrayEditor$2(gd.layout, 'annotations', annotationsOut[onSet[i]]);
    editHelpers.modifyItem('visible', true);
    lib_1.extendFlat(update, editHelpers.getUpdateObj());
  }

  for (i = 0; i < offSet.length; i++) {
    editHelpers = arrayEditor$2(gd.layout, 'annotations', annotationsOut[offSet[i]]);
    editHelpers.modifyItem('visible', false);
    lib_1.extendFlat(update, editHelpers.getUpdateObj());
  }

  return registry.call('update', gd, {}, update);
}
/*
 * getToggleSets: find the annotations which will turn on or off at this
 * hoverData
 *
 * gd: graphDiv
 * hoverData: a hoverData array, as included with the *plotly_hover* or
 *     *plotly_click* events in the `points` attribute
 *
 * returns: {
 *   on: Array (indices of annotations to turn on),
 *   off: Array (indices to turn off because you're not hovering on them),
 *   explicitOff: Array (indices to turn off because you *are* hovering on them)
 * }
 */


function getToggleSets(gd, hoverData) {
  var annotations = gd._fullLayout.annotations;
  var onSet = [];
  var offSet = [];
  var explicitOffSet = [];
  var hoverLen = (hoverData || []).length;
  var i, j, anni, showMode, pointj, xa, ya, toggleType;

  for (i = 0; i < annotations.length; i++) {
    anni = annotations[i];
    showMode = anni.clicktoshow;

    if (showMode) {
      for (j = 0; j < hoverLen; j++) {
        pointj = hoverData[j];
        xa = pointj.xaxis;
        ya = pointj.yaxis;

        if (xa._id === anni.xref && ya._id === anni.yref && xa.d2r(pointj.x) === clickData2r(anni._xclick, xa) && ya.d2r(pointj.y) === clickData2r(anni._yclick, ya)) {
          // match! toggle this annotation
          // regardless of its clicktoshow mode
          // but if it's onout mode, off is implicit
          if (anni.visible) {
            if (showMode === 'onout') toggleType = offSet;else toggleType = explicitOffSet;
          } else {
            toggleType = onSet;
          }

          toggleType.push(i);
          break;
        }
      }

      if (j === hoverLen) {
        // no match - only turn this annotation OFF, and only if
        // showmode is 'onout'
        if (anni.visible && showMode === 'onout') offSet.push(i);
      }
    }
  }

  return {
    on: onSet,
    off: offSet,
    explicitOff: explicitOffSet
  };
} // to handle log axes until v3


function clickData2r(d, ax) {
  return ax.type === 'log' ? ax.l2r(d) : ax.d2r(d);
}

var axis_placeable_objects = {
  axisRefDescription: function (axisname, lower, upper) {
    return ['If set to a', axisname, 'axis id (e.g. *' + axisname + '* or', '*' + axisname + '2*), the `' + axisname + '` position refers to a', axisname, 'coordinate. If set to *paper*, the `' + axisname + '`', 'position refers to the distance from the', lower, 'of the plotting', 'area in normalized coordinates where *0* (*1*) corresponds to the', lower, '(' + upper + '). If set to a', axisname, 'axis ID followed by', '*domain* (separated by a space), the position behaves like for', '*paper*, but refers to the distance in fractions of the domain', 'length from the', lower, 'of the domain of that axis: e.g.,', '*' + axisname + '2 domain* refers to the domain of the second', axisname, ' axis and a', axisname, 'position of 0.5 refers to the', 'point between the', lower, 'and the', upper, 'of the domain of the', 'second', axisname, 'axis.'].join(' ');
  }
};

var templatedArray$6 = plot_template.templatedArray;

function arrowAxisRefDescription(axis) {
  return ['In order for absolute positioning of the arrow to work, *a' + axis + 'ref* must be exactly the same as *' + axis + 'ref*, otherwise *a' + axis + 'ref* will revert to *pixel* (explained next).', 'For relative positioning, *a' + axis + 'ref* can be set to *pixel*,', 'in which case the *a' + axis + '* value is specified in pixels', 'relative to *' + axis + '*.', 'Absolute positioning is useful', 'for trendline annotations which should continue to indicate', 'the correct trend when zoomed. Relative positioning is useful', 'for specifying the text offset for an annotated point.'].join(' ');
}

function arrowCoordinateDescription(axis, lower, upper) {
  return ['Sets the', axis, 'component of the arrow tail about the arrow head.', 'If `a' + axis + 'ref` is `pixel`, a positive (negative)', 'component corresponds to an arrow pointing', 'from', upper, 'to', lower, '(' + lower, 'to', upper + ').', 'If `a' + axis + 'ref` is not `pixel` and is exactly the same as `' + axis + 'ref`,', 'this is an absolute value on that axis,', 'like `' + axis + '`, specified in the same coordinates as `' + axis + 'ref`.'].join(' ');
}

var attributes$9 = templatedArray$6('annotation', {
  visible: {
    valType: 'boolean',
    dflt: true,
    editType: 'calc+arraydraw',
    description: ['Determines whether or not this annotation is visible.'].join(' ')
  },
  text: {
    valType: 'string',
    editType: 'calc+arraydraw',
    description: ['Sets the text associated with this annotation.', 'Plotly uses a subset of HTML tags to do things like', 'newline (<br>), bold (<b></b>), italics (<i></i>),', 'hyperlinks (<a href=\'...\'></a>). Tags <em>, <sup>, <sub>', '<span> are also supported.'].join(' ')
  },
  textangle: {
    valType: 'angle',
    dflt: 0,
    editType: 'calc+arraydraw',
    description: ['Sets the angle at which the `text` is drawn', 'with respect to the horizontal.'].join(' ')
  },
  font: font_attributes({
    editType: 'calc+arraydraw',
    colorEditType: 'arraydraw',
    description: 'Sets the annotation text font.'
  }),
  width: {
    valType: 'number',
    min: 1,
    dflt: null,
    editType: 'calc+arraydraw',
    description: ['Sets an explicit width for the text box. null (default) lets the', 'text set the box width. Wider text will be clipped.', 'There is no automatic wrapping; use <br> to start a new line.'].join(' ')
  },
  height: {
    valType: 'number',
    min: 1,
    dflt: null,
    editType: 'calc+arraydraw',
    description: ['Sets an explicit height for the text box. null (default) lets the', 'text set the box height. Taller text will be clipped.'].join(' ')
  },
  opacity: {
    valType: 'number',
    min: 0,
    max: 1,
    dflt: 1,
    editType: 'arraydraw',
    description: 'Sets the opacity of the annotation (text + arrow).'
  },
  align: {
    valType: 'enumerated',
    values: ['left', 'center', 'right'],
    dflt: 'center',
    editType: 'arraydraw',
    description: ['Sets the horizontal alignment of the `text` within the box.', 'Has an effect only if `text` spans two or more lines', '(i.e. `text` contains one or more <br> HTML tags) or if an', 'explicit width is set to override the text width.'].join(' ')
  },
  valign: {
    valType: 'enumerated',
    values: ['top', 'middle', 'bottom'],
    dflt: 'middle',
    editType: 'arraydraw',
    description: ['Sets the vertical alignment of the `text` within the box.', 'Has an effect only if an explicit height is set to override', 'the text height.'].join(' ')
  },
  bgcolor: {
    valType: 'color',
    dflt: 'rgba(0,0,0,0)',
    editType: 'arraydraw',
    description: 'Sets the background color of the annotation.'
  },
  bordercolor: {
    valType: 'color',
    dflt: 'rgba(0,0,0,0)',
    editType: 'arraydraw',
    description: ['Sets the color of the border enclosing the annotation `text`.'].join(' ')
  },
  borderpad: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'calc+arraydraw',
    description: ['Sets the padding (in px) between the `text`', 'and the enclosing border.'].join(' ')
  },
  borderwidth: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'calc+arraydraw',
    description: ['Sets the width (in px) of the border enclosing', 'the annotation `text`.'].join(' ')
  },
  // arrow
  showarrow: {
    valType: 'boolean',
    dflt: true,
    editType: 'calc+arraydraw',
    description: ['Determines whether or not the annotation is drawn with an arrow.', 'If *true*, `text` is placed near the arrow\'s tail.', 'If *false*, `text` lines up with the `x` and `y` provided.'].join(' ')
  },
  arrowcolor: {
    valType: 'color',
    editType: 'arraydraw',
    description: 'Sets the color of the annotation arrow.'
  },
  arrowhead: {
    valType: 'integer',
    min: 0,
    max: arrow_paths.length,
    dflt: 1,
    editType: 'arraydraw',
    description: 'Sets the end annotation arrow head style.'
  },
  startarrowhead: {
    valType: 'integer',
    min: 0,
    max: arrow_paths.length,
    dflt: 1,
    editType: 'arraydraw',
    description: 'Sets the start annotation arrow head style.'
  },
  arrowside: {
    valType: 'flaglist',
    flags: ['end', 'start'],
    extras: ['none'],
    dflt: 'end',
    editType: 'arraydraw',
    description: 'Sets the annotation arrow head position.'
  },
  arrowsize: {
    valType: 'number',
    min: 0.3,
    dflt: 1,
    editType: 'calc+arraydraw',
    description: ['Sets the size of the end annotation arrow head, relative to `arrowwidth`.', 'A value of 1 (default) gives a head about 3x as wide as the line.'].join(' ')
  },
  startarrowsize: {
    valType: 'number',
    min: 0.3,
    dflt: 1,
    editType: 'calc+arraydraw',
    description: ['Sets the size of the start annotation arrow head, relative to `arrowwidth`.', 'A value of 1 (default) gives a head about 3x as wide as the line.'].join(' ')
  },
  arrowwidth: {
    valType: 'number',
    min: 0.1,
    editType: 'calc+arraydraw',
    description: 'Sets the width (in px) of annotation arrow line.'
  },
  standoff: {
    valType: 'number',
    min: 0,
    dflt: 0,
    editType: 'calc+arraydraw',
    description: ['Sets a distance, in pixels, to move the end arrowhead away from the', 'position it is pointing at, for example to point at the edge of', 'a marker independent of zoom. Note that this shortens the arrow', 'from the `ax` / `ay` vector, in contrast to `xshift` / `yshift`', 'which moves everything by this amount.'].join(' ')
  },
  startstandoff: {
    valType: 'number',
    min: 0,
    dflt: 0,
    editType: 'calc+arraydraw',
    description: ['Sets a distance, in pixels, to move the start arrowhead away from the', 'position it is pointing at, for example to point at the edge of', 'a marker independent of zoom. Note that this shortens the arrow', 'from the `ax` / `ay` vector, in contrast to `xshift` / `yshift`', 'which moves everything by this amount.'].join(' ')
  },
  ax: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: [arrowCoordinateDescription('x', 'left', 'right')].join(' ')
  },
  ay: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: [arrowCoordinateDescription('y', 'top', 'bottom')].join(' ')
  },
  axref: {
    valType: 'enumerated',
    dflt: 'pixel',
    values: ['pixel', constants$a.idRegex.x.toString()],
    editType: 'calc',
    description: ['Indicates in what coordinates the tail of the', 'annotation (ax,ay) is specified.', axis_placeable_objects.axisRefDescription('ax', 'left', 'right'), arrowAxisRefDescription('x')].join(' ')
  },
  ayref: {
    valType: 'enumerated',
    dflt: 'pixel',
    values: ['pixel', constants$a.idRegex.y.toString()],
    editType: 'calc',
    description: ['Indicates in what coordinates the tail of the', 'annotation (ax,ay) is specified.', axis_placeable_objects.axisRefDescription('ay', 'bottom', 'top'), arrowAxisRefDescription('y')].join(' ')
  },
  // positioning
  xref: {
    valType: 'enumerated',
    values: ['paper', constants$a.idRegex.x.toString()],
    editType: 'calc',
    description: ['Sets the annotation\'s x coordinate axis.', axis_placeable_objects.axisRefDescription('x', 'left', 'right')].join(' ')
  },
  x: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Sets the annotation\'s x position.', 'If the axis `type` is *log*, then you must take the', 'log of your desired range.', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')
  },
  xanchor: {
    valType: 'enumerated',
    values: ['auto', 'left', 'center', 'right'],
    dflt: 'auto',
    editType: 'calc+arraydraw',
    description: ['Sets the text box\'s horizontal position anchor', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the annotation.', 'For example, if `x` is set to 1, `xref` to *paper* and', '`xanchor` to *right* then the right-most portion of the', 'annotation lines up with the right-most edge of the', 'plotting area.', 'If *auto*, the anchor is equivalent to *center* for', 'data-referenced annotations or if there is an arrow,', 'whereas for paper-referenced with no arrow, the anchor picked', 'corresponds to the closest side.'].join(' ')
  },
  xshift: {
    valType: 'number',
    dflt: 0,
    editType: 'calc+arraydraw',
    description: ['Shifts the position of the whole annotation and arrow to the', 'right (positive) or left (negative) by this many pixels.'].join(' ')
  },
  yref: {
    valType: 'enumerated',
    values: ['paper', constants$a.idRegex.y.toString()],
    editType: 'calc',
    description: ['Sets the annotation\'s y coordinate axis.', axis_placeable_objects.axisRefDescription('y', 'bottom', 'top')].join(' ')
  },
  y: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Sets the annotation\'s y position.', 'If the axis `type` is *log*, then you must take the', 'log of your desired range.', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')
  },
  yanchor: {
    valType: 'enumerated',
    values: ['auto', 'top', 'middle', 'bottom'],
    dflt: 'auto',
    editType: 'calc+arraydraw',
    description: ['Sets the text box\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the annotation.', 'For example, if `y` is set to 1, `yref` to *paper* and', '`yanchor` to *top* then the top-most portion of the', 'annotation lines up with the top-most edge of the', 'plotting area.', 'If *auto*, the anchor is equivalent to *middle* for', 'data-referenced annotations or if there is an arrow,', 'whereas for paper-referenced with no arrow, the anchor picked', 'corresponds to the closest side.'].join(' ')
  },
  yshift: {
    valType: 'number',
    dflt: 0,
    editType: 'calc+arraydraw',
    description: ['Shifts the position of the whole annotation and arrow up', '(positive) or down (negative) by this many pixels.'].join(' ')
  },
  clicktoshow: {
    valType: 'enumerated',
    values: [false, 'onoff', 'onout'],
    dflt: false,
    editType: 'arraydraw',
    description: ['Makes this annotation respond to clicks on the plot.', 'If you click a data point that exactly matches the `x` and `y`', 'values of this annotation, and it is hidden (visible: false),', 'it will appear. In *onoff* mode, you must click the same point', 'again to make it disappear, so if you click multiple points,', 'you can show multiple annotations. In *onout* mode, a click', 'anywhere else in the plot (on another data point or not) will', 'hide this annotation.', 'If you need to show/hide this annotation in response to different', '`x` or `y` values, you can set `xclick` and/or `yclick`. This is', 'useful for example to label the side of a bar. To label markers', 'though, `standoff` is preferred over `xclick` and `yclick`.'].join(' ')
  },
  xclick: {
    valType: 'any',
    editType: 'arraydraw',
    description: ['Toggle this annotation when clicking a data point whose `x` value', 'is `xclick` rather than the annotation\'s `x` value.'].join(' ')
  },
  yclick: {
    valType: 'any',
    editType: 'arraydraw',
    description: ['Toggle this annotation when clicking a data point whose `y` value', 'is `yclick` rather than the annotation\'s `y` value.'].join(' ')
  },
  hovertext: {
    valType: 'string',
    editType: 'arraydraw',
    description: ['Sets text to appear when hovering over this annotation.', 'If omitted or blank, no hover label will appear.'].join(' ')
  },
  hoverlabel: {
    bgcolor: {
      valType: 'color',
      editType: 'arraydraw',
      description: ['Sets the background color of the hover label.', 'By default uses the annotation\'s `bgcolor` made opaque,', 'or white if it was transparent.'].join(' ')
    },
    bordercolor: {
      valType: 'color',
      editType: 'arraydraw',
      description: ['Sets the border color of the hover label.', 'By default uses either dark grey or white, for maximum', 'contrast with `hoverlabel.bgcolor`.'].join(' ')
    },
    font: font_attributes({
      editType: 'arraydraw',
      description: ['Sets the hover label text font.', 'By default uses the global hover font and size,', 'with color from `hoverlabel.bordercolor`.'].join(' ')
    }),
    editType: 'arraydraw'
  },
  captureevents: {
    valType: 'boolean',
    editType: 'arraydraw',
    description: ['Determines whether the annotation text box captures mouse move', 'and click events, or allows those events to pass through to data', 'points in the plot that may be behind the annotation. By default', '`captureevents` is *false* unless `hovertext` is provided.', 'If you use the event `plotly_clickannotation` without `hovertext`', 'you must explicitly enable `captureevents`.'].join(' ')
  },
  editType: 'calc',
  _deprecated: {
    ref: {
      valType: 'string',
      editType: 'calc',
      description: ['Obsolete. Set `xref` and `yref` separately instead.'].join(' ')
    }
  }
});

var common_defaults = function handleAnnotationCommonDefaults(annIn, annOut, fullLayout, coerce) {
  coerce('opacity');
  var bgColor = coerce('bgcolor');
  var borderColor = coerce('bordercolor');
  var borderOpacity = color_1.opacity(borderColor);
  coerce('borderpad');
  var borderWidth = coerce('borderwidth');
  var showArrow = coerce('showarrow');
  coerce('text', showArrow ? ' ' : fullLayout._dfltTitle.annotation);
  coerce('textangle');
  lib_1.coerceFont(coerce, 'font', fullLayout.font);
  coerce('width');
  coerce('align');
  var h = coerce('height');
  if (h) coerce('valign');

  if (showArrow) {
    var arrowside = coerce('arrowside');
    var arrowhead;
    var arrowsize;

    if (arrowside.indexOf('end') !== -1) {
      arrowhead = coerce('arrowhead');
      arrowsize = coerce('arrowsize');
    }

    if (arrowside.indexOf('start') !== -1) {
      coerce('startarrowhead', arrowhead);
      coerce('startarrowsize', arrowsize);
    }

    coerce('arrowcolor', borderOpacity ? annOut.bordercolor : color_1.defaultLine);
    coerce('arrowwidth', (borderOpacity && borderWidth || 1) * 2);
    coerce('standoff');
    coerce('startstandoff');
  }

  var hoverText = coerce('hovertext');
  var globalHoverLabel = fullLayout.hoverlabel || {};

  if (hoverText) {
    var hoverBG = coerce('hoverlabel.bgcolor', globalHoverLabel.bgcolor || (color_1.opacity(bgColor) ? color_1.rgb(bgColor) : color_1.defaultLine));
    var hoverBorder = coerce('hoverlabel.bordercolor', globalHoverLabel.bordercolor || color_1.contrast(hoverBG));
    lib_1.coerceFont(coerce, 'hoverlabel.font', {
      family: globalHoverLabel.font.family,
      size: globalHoverLabel.font.size,
      color: globalHoverLabel.font.color || hoverBorder
    });
  }

  coerce('captureevents', !!hoverText);
};

var defaults$a = function supplyLayoutDefaults(layoutIn, layoutOut) {
  array_container_defaults(layoutIn, layoutOut, {
    name: 'annotations',
    handleItemDefaults: handleAnnotationDefaults$1
  });
};

function handleAnnotationDefaults$1(annIn, annOut, fullLayout) {
  function coerce(attr, dflt) {
    return lib_1.coerce(annIn, annOut, attributes$9, attr, dflt);
  }

  var visible = coerce('visible');
  var clickToShow = coerce('clicktoshow');
  if (!(visible || clickToShow)) return;
  common_defaults(annIn, annOut, fullLayout, coerce);
  var showArrow = annOut.showarrow; // positioning

  var axLetters = ['x', 'y'];
  var arrowPosDflt = [-10, -30];
  var gdMock = {
    _fullLayout: fullLayout
  };

  for (var i = 0; i < 2; i++) {
    var axLetter = axLetters[i]; // xref, yref

    var axRef = axes_1.coerceRef(annIn, annOut, gdMock, axLetter, '', 'paper');

    if (axRef !== 'paper') {
      var ax = axes_1.getFromId(gdMock, axRef);

      ax._annIndices.push(annOut._index);
    } // x, y


    axes_1.coercePosition(annOut, gdMock, coerce, axRef, axLetter, 0.5);

    if (showArrow) {
      var arrowPosAttr = 'a' + axLetter; // axref, ayref

      var aaxRef = axes_1.coerceRef(annIn, annOut, gdMock, arrowPosAttr, 'pixel', ['pixel', 'paper']); // for now the arrow can only be on the same axis or specified as pixels
      // TODO: sometime it might be interesting to allow it to be on *any* axis
      // but that would require updates to drawing & autorange code and maybe more

      if (aaxRef !== 'pixel' && aaxRef !== axRef) {
        aaxRef = annOut[arrowPosAttr] = 'pixel';
      } // ax, ay


      var aDflt = aaxRef === 'pixel' ? arrowPosDflt[i] : 0.4;
      axes_1.coercePosition(annOut, gdMock, coerce, aaxRef, arrowPosAttr, aDflt);
    } // xanchor, yanchor


    coerce(axLetter + 'anchor'); // xshift, yshift

    coerce(axLetter + 'shift');
  } // if you have one coordinate you should have both


  lib_1.noneOrAll(annIn, annOut, ['x', 'y']); // if you have one part of arrow length you should have both

  if (showArrow) {
    lib_1.noneOrAll(annIn, annOut, ['ax', 'ay']);
  }

  if (clickToShow) {
    var xClick = coerce('xclick');
    var yClick = coerce('yclick'); // put the actual click data to bind to into private attributes
    // so we don't have to do this little bit of logic on every hover event

    annOut._xclick = xClick === undefined ? annOut.x : axes_1.cleanPosition(xClick, gdMock, annOut.xref);
    annOut._yclick = yClick === undefined ? annOut.y : axes_1.cleanPosition(yClick, gdMock, annOut.yref);
  }
}

/**
 * Factory function for checking component arrays for subplot references.
 *
 * @param {string} containerArrayName: the top-level array in gd.layout to check
 *   If an item in this container is found that references a cartesian x and/or y axis,
 *   ensure cartesian is marked as a base plot module and record the axes (and subplot
 *   if both refs are axes) in gd._fullLayout
 *
 * @return {function}: with args layoutIn (gd.layout) and layoutOut (gd._fullLayout)
 * as expected of a component includeBasePlot method
 */


var include_components = function makeIncludeComponents(containerArrayName) {
  return function includeComponents(layoutIn, layoutOut) {
    var array = layoutIn[containerArrayName];
    if (!Array.isArray(array)) return;
    var Cartesian = registry.subplotsRegistry.cartesian;
    var idRegex = Cartesian.idRegex;
    var subplots = layoutOut._subplots;
    var xaList = subplots.xaxis;
    var yaList = subplots.yaxis;
    var cartesianList = subplots.cartesian;

    var hasCartesianOrGL2D = layoutOut._has('cartesian') || layoutOut._has('gl2d');

    for (var i = 0; i < array.length; i++) {
      var itemi = array[i];
      if (!lib_1.isPlainObject(itemi)) continue; // call cleanId because if xref, or yref has something appended
      // (e.g., ' domain') this will get removed.

      var xref = axis_ids.cleanId(itemi.xref, 'x', false);
      var yref = axis_ids.cleanId(itemi.yref, 'y', false);
      var hasXref = idRegex.x.test(xref);
      var hasYref = idRegex.y.test(yref);

      if (hasXref || hasYref) {
        if (!hasCartesianOrGL2D) lib_1.pushUnique(layoutOut._basePlotModules, Cartesian);
        var newAxis = false;

        if (hasXref && xaList.indexOf(xref) === -1) {
          xaList.push(xref);
          newAxis = true;
        }

        if (hasYref && yaList.indexOf(yref) === -1) {
          yaList.push(yref);
          newAxis = true;
        }
        /*
         * Notice the logic here: only add a subplot for a component if
         * it's referencing both x and y axes AND it's creating a new axis
         * so for example if your plot already has xy and x2y2, an annotation
         * on x2y or xy2 will not create a new subplot.
         */


        if (newAxis && hasXref && hasYref) {
          cartesianList.push(xref + yref);
        }
      }
    }
  };
};

var draw$7 = draw_1$1.draw;

var calc_autorange$2 = function calcAutorange(gd) {
  var fullLayout = gd._fullLayout;
  var annotationList = lib_1.filterVisible(fullLayout.annotations);

  if (annotationList.length && gd._fullData.length) {
    return lib_1.syncOrAsync([draw$7, annAutorange], gd);
  }
};

function annAutorange(gd) {
  var fullLayout = gd._fullLayout; // find the bounding boxes for each of these annotations'
  // relative to their anchor points
  // use the arrow and the text bg rectangle,
  // as the whole anno may include hidden text in its bbox

  lib_1.filterVisible(fullLayout.annotations).forEach(function (ann) {
    var xa = axes_1.getFromId(gd, ann.xref);
    var ya = axes_1.getFromId(gd, ann.yref);
    var xRefType = axes_1.getRefType(ann.xref);
    var yRefType = axes_1.getRefType(ann.yref);
    ann._extremes = {};
    if (xRefType === 'range') calcAxisExpansion(ann, xa);
    if (yRefType === 'range') calcAxisExpansion(ann, ya);
  });
}

function calcAxisExpansion(ann, ax) {
  var axId = ax._id;
  var letter = axId.charAt(0);
  var pos = ann[letter];
  var apos = ann['a' + letter];
  var ref = ann[letter + 'ref'];
  var aref = ann['a' + letter + 'ref'];
  var padplus = ann['_' + letter + 'padplus'];
  var padminus = ann['_' + letter + 'padminus'];
  var shift = {
    x: 1,
    y: -1
  }[letter] * ann[letter + 'shift'];
  var headSize = 3 * ann.arrowsize * ann.arrowwidth || 0;
  var headPlus = headSize + shift;
  var headMinus = headSize - shift;
  var startHeadSize = 3 * ann.startarrowsize * ann.arrowwidth || 0;
  var startHeadPlus = startHeadSize + shift;
  var startHeadMinus = startHeadSize - shift;
  var extremes;

  if (aref === ref) {
    // expand for the arrowhead (padded by arrowhead)
    var extremeArrowHead = axes_1.findExtremes(ax, [ax.r2c(pos)], {
      ppadplus: headPlus,
      ppadminus: headMinus
    }); // again for the textbox (padded by textbox)

    var extremeText = axes_1.findExtremes(ax, [ax.r2c(apos)], {
      ppadplus: Math.max(padplus, startHeadPlus),
      ppadminus: Math.max(padminus, startHeadMinus)
    });
    extremes = {
      min: [extremeArrowHead.min[0], extremeText.min[0]],
      max: [extremeArrowHead.max[0], extremeText.max[0]]
    };
  } else {
    startHeadPlus = apos ? startHeadPlus + apos : startHeadPlus;
    startHeadMinus = apos ? startHeadMinus - apos : startHeadMinus;
    extremes = axes_1.findExtremes(ax, [ax.r2c(pos)], {
      ppadplus: Math.max(padplus, headPlus, startHeadPlus),
      ppadminus: Math.max(padminus, headMinus, startHeadMinus)
    });
  }

  ann._extremes[axId] = extremes;
}

/*
 * convertCoords: when converting an axis between log and linear
 * you need to alter any annotations on that axis to keep them
 * pointing at the same data point.
 * In v3.0 this will become obsolete
 *
 * gd: the plot div
 * ax: the axis being changed
 * newType: the type it's getting
 * doExtra: function(attr, val) from inside relayout that sets the attribute.
 *     Use this to make the changes as it's aware if any other changes in the
 *     same relayout call should override this conversion.
 */


var convert_coords$1 = function convertCoords(gd, ax, newType, doExtra) {
  ax = ax || {};
  var toLog = newType === 'log' && ax.type === 'linear';
  var fromLog = newType === 'linear' && ax.type === 'log';
  if (!(toLog || fromLog)) return;
  var annotations = gd._fullLayout.annotations;

  var axLetter = ax._id.charAt(0);

  var ann;
  var attrPrefix;

  function convert(attr) {
    var currentVal = ann[attr];
    var newVal = null;
    if (toLog) newVal = to_log_range(currentVal, ax.range);else newVal = Math.pow(10, currentVal); // if conversion failed, delete the value so it gets a default value

    if (!fastIsnumeric(newVal)) newVal = null;
    doExtra(attrPrefix + attr, newVal);
  }

  for (var i = 0; i < annotations.length; i++) {
    ann = annotations[i];
    attrPrefix = 'annotations[' + i + '].';
    if (ann[axLetter + 'ref'] === ax._id) convert(axLetter);
    if (ann['a' + axLetter + 'ref'] === ax._id) convert('a' + axLetter);
  }
};

var annotations = {
  moduleType: 'component',
  name: 'annotations',
  layoutAttributes: attributes$9,
  supplyLayoutDefaults: defaults$a,
  includeBasePlot: include_components('annotations'),
  calcAutorange: calc_autorange$2,
  draw: draw_1$1.draw,
  drawOne: draw_1$1.drawOne,
  drawRaw: draw_1$1.drawRaw,
  hasClickToShow: click.hasClickToShow,
  onClick: click.onClick,
  convertCoords: convert_coords$1
};

var overrideAll$3 = edit_types.overrideAll;
var templatedArray$5 = plot_template.templatedArray;
var attributes$8 = overrideAll$3(templatedArray$5('annotation', {
  visible: attributes$9.visible,
  x: {
    valType: 'any',
    description: ['Sets the annotation\'s x position.'].join(' ')
  },
  y: {
    valType: 'any',
    description: ['Sets the annotation\'s y position.'].join(' ')
  },
  z: {
    valType: 'any',
    description: ['Sets the annotation\'s z position.'].join(' ')
  },
  ax: {
    valType: 'number',
    description: ['Sets the x component of the arrow tail about the arrow head (in pixels).'].join(' ')
  },
  ay: {
    valType: 'number',
    description: ['Sets the y component of the arrow tail about the arrow head (in pixels).'].join(' ')
  },
  xanchor: attributes$9.xanchor,
  xshift: attributes$9.xshift,
  yanchor: attributes$9.yanchor,
  yshift: attributes$9.yshift,
  text: attributes$9.text,
  textangle: attributes$9.textangle,
  font: attributes$9.font,
  width: attributes$9.width,
  height: attributes$9.height,
  opacity: attributes$9.opacity,
  align: attributes$9.align,
  valign: attributes$9.valign,
  bgcolor: attributes$9.bgcolor,
  bordercolor: attributes$9.bordercolor,
  borderpad: attributes$9.borderpad,
  borderwidth: attributes$9.borderwidth,
  showarrow: attributes$9.showarrow,
  arrowcolor: attributes$9.arrowcolor,
  arrowhead: attributes$9.arrowhead,
  startarrowhead: attributes$9.startarrowhead,
  arrowside: attributes$9.arrowside,
  arrowsize: attributes$9.arrowsize,
  startarrowsize: attributes$9.startarrowsize,
  arrowwidth: attributes$9.arrowwidth,
  standoff: attributes$9.standoff,
  startstandoff: attributes$9.startstandoff,
  hovertext: attributes$9.hovertext,
  hoverlabel: attributes$9.hoverlabel,
  captureevents: attributes$9.captureevents // maybes later?
  // clicktoshow: annAttrs.clicktoshow,
  // xclick: annAttrs.xclick,
  // yclick: annAttrs.yclick,
  // not needed!
  // axref: 'pixel'
  // ayref: 'pixel'
  // xref: 'x'
  // yref: 'y
  // zref: 'z'

}), 'calc', 'from-root');

var defaults$9 = function handleDefaults(sceneLayoutIn, sceneLayoutOut, opts) {
  array_container_defaults(sceneLayoutIn, sceneLayoutOut, {
    name: 'annotations',
    handleItemDefaults: handleAnnotationDefaults,
    fullLayout: opts.fullLayout
  });
};

function handleAnnotationDefaults(annIn, annOut, sceneLayout, opts) {
  function coerce(attr, dflt) {
    return lib_1.coerce(annIn, annOut, attributes$8, attr, dflt);
  }

  function coercePosition(axLetter) {
    var axName = axLetter + 'axis'; // mock in such way that getFromId grabs correct 3D axis

    var gdMock = {
      _fullLayout: {}
    };
    gdMock._fullLayout[axName] = sceneLayout[axName];
    return axes_1.coercePosition(annOut, gdMock, coerce, axLetter, axLetter, 0.5);
  }

  var visible = coerce('visible');
  if (!visible) return;
  common_defaults(annIn, annOut, opts.fullLayout, coerce);
  coercePosition('x');
  coercePosition('y');
  coercePosition('z'); // if you have one coordinate you should all three

  lib_1.noneOrAll(annIn, annOut, ['x', 'y', 'z']); // hard-set here for completeness

  annOut.xref = 'x';
  annOut.yref = 'y';
  annOut.zref = 'z';
  coerce('xanchor');
  coerce('yanchor');
  coerce('xshift');
  coerce('yshift');

  if (annOut.showarrow) {
    annOut.axref = 'pixel';
    annOut.ayref = 'pixel'; // TODO maybe default values should be bigger than the 2D case?

    coerce('ax', -10);
    coerce('ay', -30); // if you have one part of arrow length you should have both

    lib_1.noneOrAll(annIn, annOut, ['ax', 'ay']);
  }
}

var convert = function convert(scene) {
  var fullSceneLayout = scene.fullSceneLayout;
  var anns = fullSceneLayout.annotations;

  for (var i = 0; i < anns.length; i++) {
    mockAnnAxes(anns[i], scene);
  }

  scene.fullLayout._infolayer.selectAll('.annotation-' + scene.id).remove();
};

function mockAnnAxes(ann, scene) {
  var fullSceneLayout = scene.fullSceneLayout;
  var domain = fullSceneLayout.domain;
  var size = scene.fullLayout._size;
  var base = {
    // this gets fill in on render
    pdata: null,
    // to get setConvert to not execute cleanly
    type: 'linear',
    // don't try to update them on `editable: true`
    autorange: false,
    // set infinite range so that annotation draw routine
    // does not try to remove 'outside-range' annotations,
    // this case is handled in the render loop
    range: [-Infinity, Infinity]
  };
  ann._xa = {};
  lib_1.extendFlat(ann._xa, base);
  axes_1.setConvert(ann._xa);
  ann._xa._offset = size.l + domain.x[0] * size.w;

  ann._xa.l2p = function () {
    return 0.5 * (1 + ann._pdata[0] / ann._pdata[3]) * size.w * (domain.x[1] - domain.x[0]);
  };

  ann._ya = {};
  lib_1.extendFlat(ann._ya, base);
  axes_1.setConvert(ann._ya);
  ann._ya._offset = size.t + (1 - domain.y[1]) * size.h;

  ann._ya.l2p = function () {
    return 0.5 * (1 - ann._pdata[1] / ann._pdata[3]) * size.h * (domain.y[1] - domain.y[0]);
  };
}

function xformMatrix(m, v) {
  var out = [0, 0, 0, 0];
  var i, j;

  for (i = 0; i < 4; ++i) {
    for (j = 0; j < 4; ++j) {
      out[j] += m[4 * i + j] * v[i];
    }
  }

  return out;
}

function project(camera, v) {
  var p = xformMatrix(camera.projection, xformMatrix(camera.view, xformMatrix(camera.model, [v[0], v[1], v[2], 1])));
  return p;
}

var project_1 = project;

var drawRaw = draw_1$1.drawRaw;
var axLetters = ['x', 'y', 'z'];

var draw$6 = function draw(scene) {
  var fullSceneLayout = scene.fullSceneLayout;
  var dataScale = scene.dataScale;
  var anns = fullSceneLayout.annotations;

  for (var i = 0; i < anns.length; i++) {
    var ann = anns[i];
    var annotationIsOffscreen = false;

    for (var j = 0; j < 3; j++) {
      var axLetter = axLetters[j];
      var pos = ann[axLetter];
      var ax = fullSceneLayout[axLetter + 'axis'];
      var posFraction = ax.r2fraction(pos);

      if (posFraction < 0 || posFraction > 1) {
        annotationIsOffscreen = true;
        break;
      }
    }

    if (annotationIsOffscreen) {
      scene.fullLayout._infolayer.select('.annotation-' + scene.id + '[data-index="' + i + '"]').remove();
    } else {
      ann._pdata = project_1(scene.glplot.cameraParams, [fullSceneLayout.xaxis.r2l(ann.x) * dataScale[0], fullSceneLayout.yaxis.r2l(ann.y) * dataScale[1], fullSceneLayout.zaxis.r2l(ann.z) * dataScale[2]]);
      drawRaw(scene.graphDiv, ann, i, scene.id, ann._xa, ann._ya);
    }
  }
};

var annotations3d = {
  moduleType: 'component',
  name: 'annotations3d',
  schema: {
    subplots: {
      scene: {
        annotations: attributes$8
      }
    }
  },
  layoutAttributes: attributes$8,
  handleDefaults: defaults$9,
  includeBasePlot: includeGL3D,
  convert: convert,
  draw: draw$6
};

function includeGL3D(layoutIn, layoutOut) {
  var GL3D = registry.subplotsRegistry.gl3d;
  if (!GL3D) return;
  var attrRegex = GL3D.attrRegex;
  var keys = Object.keys(layoutIn);

  for (var i = 0; i < keys.length; i++) {
    var k = keys[i];

    if (attrRegex.test(k) && (layoutIn[k].annotations || []).length) {
      lib_1.pushUnique(layoutOut._basePlotModules, GL3D);
      lib_1.pushUnique(layoutOut._subplots.gl3d, k);
    }
  }
}

var scatterLineAttrs = attributes$c.line;
var dash = attributes$i.dash;
var extendFlat$4 = extend.extendFlat;
var templatedArray$4 = plot_template.templatedArray;
var attributes$7 = templatedArray$4('shape', {
  visible: {
    valType: 'boolean',
    dflt: true,
    editType: 'calc+arraydraw',
    description: ['Determines whether or not this shape is visible.'].join(' ')
  },
  type: {
    valType: 'enumerated',
    values: ['circle', 'rect', 'path', 'line'],
    editType: 'calc+arraydraw',
    description: ['Specifies the shape type to be drawn.', 'If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`)', 'with respect to the axes\' sizing mode.', 'If *circle*, a circle is drawn from', '((`x0`+`x1`)/2, (`y0`+`y1`)/2))', 'with radius', '(|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|)', 'with respect to the axes\' sizing mode.', 'If *rect*, a rectangle is drawn linking', '(`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`)', 'with respect to the axes\' sizing mode.', 'If *path*, draw a custom SVG path using `path`.', 'with respect to the axes\' sizing mode.'].join(' ')
  },
  layer: {
    valType: 'enumerated',
    values: ['below', 'above'],
    dflt: 'above',
    editType: 'arraydraw',
    description: 'Specifies whether shapes are drawn below or above traces.'
  },
  xref: extendFlat$4({}, attributes$9.xref, {
    description: ['Sets the shape\'s x coordinate axis.', axis_placeable_objects.axisRefDescription('x', 'left', 'right'), 'If the axis `type` is *log*, then you must take the', 'log of your desired range.', 'If the axis `type` is *date*, then you must convert', 'the date to unix time in milliseconds.'].join(' ')
  }),
  xsizemode: {
    valType: 'enumerated',
    values: ['scaled', 'pixel'],
    dflt: 'scaled',
    editType: 'calc+arraydraw',
    description: ['Sets the shapes\'s sizing mode along the x axis.', 'If set to *scaled*, `x0`, `x1` and x coordinates within `path` refer to', 'data values on the x axis or a fraction of the plot area\'s width', '(`xref` set to *paper*).', 'If set to *pixel*, `xanchor` specifies the x position in terms', 'of data or plot fraction but `x0`, `x1` and x coordinates within `path`', 'are pixels relative to `xanchor`. This way, the shape can have', 'a fixed width while maintaining a position relative to data or', 'plot fraction.'].join(' ')
  },
  xanchor: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Only relevant in conjunction with `xsizemode` set to *pixel*.', 'Specifies the anchor point on the x axis to which `x0`, `x1`', 'and x coordinates within `path` are relative to.', 'E.g. useful to attach a pixel sized shape to a certain data value.', 'No effect when `xsizemode` not set to *pixel*.'].join(' ')
  },
  x0: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Sets the shape\'s starting x position.', 'See `type` and `xsizemode` for more info.'].join(' ')
  },
  x1: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Sets the shape\'s end x position.', 'See `type` and `xsizemode` for more info.'].join(' ')
  },
  yref: extendFlat$4({}, attributes$9.yref, {
    description: ['Sets the annotation\'s y coordinate axis.', axis_placeable_objects.axisRefDescription('y', 'bottom', 'top')].join(' ')
  }),
  ysizemode: {
    valType: 'enumerated',
    values: ['scaled', 'pixel'],
    dflt: 'scaled',
    editType: 'calc+arraydraw',
    description: ['Sets the shapes\'s sizing mode along the y axis.', 'If set to *scaled*, `y0`, `y1` and y coordinates within `path` refer to', 'data values on the y axis or a fraction of the plot area\'s height', '(`yref` set to *paper*).', 'If set to *pixel*, `yanchor` specifies the y position in terms', 'of data or plot fraction but `y0`, `y1` and y coordinates within `path`', 'are pixels relative to `yanchor`. This way, the shape can have', 'a fixed height while maintaining a position relative to data or', 'plot fraction.'].join(' ')
  },
  yanchor: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Only relevant in conjunction with `ysizemode` set to *pixel*.', 'Specifies the anchor point on the y axis to which `y0`, `y1`', 'and y coordinates within `path` are relative to.', 'E.g. useful to attach a pixel sized shape to a certain data value.', 'No effect when `ysizemode` not set to *pixel*.'].join(' ')
  },
  y0: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Sets the shape\'s starting y position.', 'See `type` and `ysizemode` for more info.'].join(' ')
  },
  y1: {
    valType: 'any',
    editType: 'calc+arraydraw',
    description: ['Sets the shape\'s end y position.', 'See `type` and `ysizemode` for more info.'].join(' ')
  },
  path: {
    valType: 'string',
    editType: 'calc+arraydraw',
    description: ['For `type` *path* - a valid SVG path with the pixel values', 'replaced by data values in `xsizemode`/`ysizemode` being *scaled*', 'and taken unmodified as pixels relative to `xanchor` and `yanchor`', 'in case of *pixel* size mode.', 'There are a few restrictions / quirks', 'only absolute instructions, not relative. So the allowed segments', 'are: M, L, H, V, Q, C, T, S, and Z', 'arcs (A) are not allowed because radius rx and ry are relative.', 'In the future we could consider supporting relative commands,', 'but we would have to decide on how to handle date and log axes.', 'Note that even as is, Q and C Bezier paths that are smooth on', 'linear axes may not be smooth on log, and vice versa.', 'no chained "polybezier" commands - specify the segment type for', 'each one.', 'On category axes, values are numbers scaled to the serial numbers', 'of categories because using the categories themselves there would', 'be no way to describe fractional positions', 'On data axes: because space and T are both normal components of path', 'strings, we can\'t use either to separate date from time parts.', 'Therefore we\'ll use underscore for this purpose:', '2015-02-21_13:45:56.789'].join(' ')
  },
  opacity: {
    valType: 'number',
    min: 0,
    max: 1,
    dflt: 1,
    editType: 'arraydraw',
    description: 'Sets the opacity of the shape.'
  },
  line: {
    color: extendFlat$4({}, scatterLineAttrs.color, {
      editType: 'arraydraw'
    }),
    width: extendFlat$4({}, scatterLineAttrs.width, {
      editType: 'calc+arraydraw'
    }),
    dash: extendFlat$4({}, dash, {
      editType: 'arraydraw'
    }),
    editType: 'calc+arraydraw'
  },
  fillcolor: {
    valType: 'color',
    dflt: 'rgba(0,0,0,0)',
    editType: 'arraydraw',
    description: ['Sets the color filling the shape\'s interior. Only applies to closed shapes.'].join(' ')
  },
  fillrule: {
    valType: 'enumerated',
    values: ['evenodd', 'nonzero'],
    dflt: 'evenodd',
    editType: 'arraydraw',
    description: ['Determines which regions of complex paths constitute the interior.', 'For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule'].join(' ')
  },
  editable: {
    valType: 'boolean',
    dflt: false,
    editType: 'calc+arraydraw',
    description: ['Determines whether the shape could be activated for edit or not.', 'Has no effect when the older editable shapes mode is enabled via', '`config.editable` or `config.edits.shapePosition`.'].join(' ')
  },
  editType: 'arraydraw'
});

var defaults$8 = function supplyLayoutDefaults(layoutIn, layoutOut) {
  array_container_defaults(layoutIn, layoutOut, {
    name: 'shapes',
    handleItemDefaults: handleShapeDefaults
  });
};

function handleShapeDefaults(shapeIn, shapeOut, fullLayout) {
  function coerce(attr, dflt) {
    return lib_1.coerce(shapeIn, shapeOut, attributes$7, attr, dflt);
  }

  var visible = coerce('visible');
  if (!visible) return;
  var path = coerce('path');
  var dfltType = path ? 'path' : 'rect';
  var shapeType = coerce('type', dfltType);
  if (shapeOut.type !== 'path') delete shapeOut.path;
  coerce('editable');
  coerce('layer');
  coerce('opacity');
  coerce('fillcolor');
  coerce('fillrule');
  var lineWidth = coerce('line.width');

  if (lineWidth) {
    coerce('line.color');
    coerce('line.dash');
  }

  var xSizeMode = coerce('xsizemode');
  var ySizeMode = coerce('ysizemode'); // positioning

  var axLetters = ['x', 'y'];

  for (var i = 0; i < 2; i++) {
    var axLetter = axLetters[i];
    var attrAnchor = axLetter + 'anchor';
    var sizeMode = axLetter === 'x' ? xSizeMode : ySizeMode;
    var gdMock = {
      _fullLayout: fullLayout
    };
    var ax;
    var pos2r;
    var r2pos; // xref, yref

    var axRef = axes_1.coerceRef(shapeIn, shapeOut, gdMock, axLetter, undefined, 'paper');
    var axRefType = axes_1.getRefType(axRef);

    if (axRefType === 'range') {
      ax = axes_1.getFromId(gdMock, axRef);

      ax._shapeIndices.push(shapeOut._index);

      r2pos = helpers$3.rangeToShapePosition(ax);
      pos2r = helpers$3.shapePositionToRange(ax);
    } else {
      pos2r = r2pos = lib_1.identity;
    } // Coerce x0, x1, y0, y1


    if (shapeType !== 'path') {
      var dflt0 = 0.25;
      var dflt1 = 0.75; // hack until V3.0 when log has regular range behavior - make it look like other
      // ranges to send to coerce, then put it back after
      // this is all to give reasonable default position behavior on log axes, which is
      // a pretty unimportant edge case so we could just ignore this.

      var attr0 = axLetter + '0';
      var attr1 = axLetter + '1';
      var in0 = shapeIn[attr0];
      var in1 = shapeIn[attr1];
      shapeIn[attr0] = pos2r(shapeIn[attr0], true);
      shapeIn[attr1] = pos2r(shapeIn[attr1], true);

      if (sizeMode === 'pixel') {
        coerce(attr0, 0);
        coerce(attr1, 10);
      } else {
        axes_1.coercePosition(shapeOut, gdMock, coerce, axRef, attr0, dflt0);
        axes_1.coercePosition(shapeOut, gdMock, coerce, axRef, attr1, dflt1);
      } // hack part 2


      shapeOut[attr0] = r2pos(shapeOut[attr0]);
      shapeOut[attr1] = r2pos(shapeOut[attr1]);
      shapeIn[attr0] = in0;
      shapeIn[attr1] = in1;
    } // Coerce xanchor and yanchor


    if (sizeMode === 'pixel') {
      // Hack for log axis described above
      var inAnchor = shapeIn[attrAnchor];
      shapeIn[attrAnchor] = pos2r(shapeIn[attrAnchor], true);
      axes_1.coercePosition(shapeOut, gdMock, coerce, axRef, attrAnchor, 0.25); // Hack part 2

      shapeOut[attrAnchor] = r2pos(shapeOut[attrAnchor]);
      shapeIn[attrAnchor] = inAnchor;
    }
  }

  if (shapeType === 'path') {
    coerce('path');
  } else {
    lib_1.noneOrAll(shapeIn, shapeOut, ['x0', 'x1', 'y0', 'y1']);
  }
}

var defaults$7 = function supplyDrawNewShapeDefaults(layoutIn, layoutOut, coerce) {
  coerce('newshape.drawdirection');
  coerce('newshape.layer');
  coerce('newshape.fillcolor');
  coerce('newshape.fillrule');
  coerce('newshape.opacity');
  var newshapeLineWidth = coerce('newshape.line.width');

  if (newshapeLineWidth) {
    var bgcolor = (layoutIn || {}).plot_bgcolor || '#FFF';
    coerce('newshape.line.color', color_1.contrast(bgcolor));
    coerce('newshape.line.dash');
  }

  coerce('activeshape.fillcolor');
  coerce('activeshape.opacity');
};

var calc_autorange$1 = function calcAutorange(gd) {
  var fullLayout = gd._fullLayout;
  var shapeList = lib_1.filterVisible(fullLayout.shapes);
  if (!shapeList.length || !gd._fullData.length) return;

  for (var i = 0; i < shapeList.length; i++) {
    var shape = shapeList[i];
    shape._extremes = {};
    var ax;
    var bounds;
    var xRefType = axes_1.getRefType(shape.xref);
    var yRefType = axes_1.getRefType(shape.yref); // paper and axis domain referenced shapes don't affect autorange

    if (shape.xref !== 'paper' && xRefType !== 'domain') {
      var vx0 = shape.xsizemode === 'pixel' ? shape.xanchor : shape.x0;
      var vx1 = shape.xsizemode === 'pixel' ? shape.xanchor : shape.x1;
      ax = axes_1.getFromId(gd, shape.xref);
      bounds = shapeBounds(ax, vx0, vx1, shape.path, constants$7.paramIsX);

      if (bounds) {
        shape._extremes[ax._id] = axes_1.findExtremes(ax, bounds, calcXPaddingOptions(shape));
      }
    }

    if (shape.yref !== 'paper' && yRefType !== 'domain') {
      var vy0 = shape.ysizemode === 'pixel' ? shape.yanchor : shape.y0;
      var vy1 = shape.ysizemode === 'pixel' ? shape.yanchor : shape.y1;
      ax = axes_1.getFromId(gd, shape.yref);
      bounds = shapeBounds(ax, vy0, vy1, shape.path, constants$7.paramIsY);

      if (bounds) {
        shape._extremes[ax._id] = axes_1.findExtremes(ax, bounds, calcYPaddingOptions(shape));
      }
    }
  }
};

function calcXPaddingOptions(shape) {
  return calcPaddingOptions(shape.line.width, shape.xsizemode, shape.x0, shape.x1, shape.path, false);
}

function calcYPaddingOptions(shape) {
  return calcPaddingOptions(shape.line.width, shape.ysizemode, shape.y0, shape.y1, shape.path, true);
}

function calcPaddingOptions(lineWidth, sizeMode, v0, v1, path, isYAxis) {
  var ppad = lineWidth / 2;
  var axisDirectionReverted = isYAxis;

  if (sizeMode === 'pixel') {
    var coords = path ? helpers$3.extractPathCoords(path, isYAxis ? constants$7.paramIsY : constants$7.paramIsX) : [v0, v1];
    var maxValue = lib_1.aggNums(Math.max, null, coords);
    var minValue = lib_1.aggNums(Math.min, null, coords);
    var beforePad = minValue < 0 ? Math.abs(minValue) + ppad : ppad;
    var afterPad = maxValue > 0 ? maxValue + ppad : ppad;
    return {
      ppad: ppad,
      ppadplus: axisDirectionReverted ? beforePad : afterPad,
      ppadminus: axisDirectionReverted ? afterPad : beforePad
    };
  } else {
    return {
      ppad: ppad
    };
  }
}

function shapeBounds(ax, v0, v1, path, paramsToUse) {
  var convertVal = ax.type === 'category' || ax.type === 'multicategory' ? ax.r2c : ax.d2c;
  if (v0 !== undefined) return [convertVal(v0), convertVal(v1)];
  if (!path) return;
  var min = Infinity;
  var max = -Infinity;
  var segments = path.match(constants$7.segmentRE);
  var i;
  var segment;
  var drawnParam;
  var params;
  var val;
  if (ax.type === 'date') convertVal = helpers$3.decodeDate(convertVal);

  for (i = 0; i < segments.length; i++) {
    segment = segments[i];
    drawnParam = paramsToUse[segment.charAt(0)].drawn;
    if (drawnParam === undefined) continue;
    params = segments[i].substr(1).match(constants$7.paramRE);
    if (!params || params.length < drawnParam) continue;
    val = convertVal(params[drawnParam]);
    if (val < min) min = val;
    if (val > max) max = val;
  }

  if (max >= min) return [min, max];
}

var shapes = {
  moduleType: 'component',
  name: 'shapes',
  layoutAttributes: attributes$7,
  supplyLayoutDefaults: defaults$8,
  supplyDrawNewShapeDefaults: defaults$7,
  includeBasePlot: include_components('shapes'),
  calcAutorange: calc_autorange$1,
  draw: draw_1$2.draw,
  drawOne: draw_1$2.drawOne
};

var templatedArray$3 = plot_template.templatedArray;
var attributes$6 = templatedArray$3('image', {
  visible: {
    valType: 'boolean',
    dflt: true,
    editType: 'arraydraw',
    description: ['Determines whether or not this image is visible.'].join(' ')
  },
  source: {
    valType: 'string',
    editType: 'arraydraw',
    description: ['Specifies the URL of the image to be used.', 'The URL must be accessible from the domain where the', 'plot code is run, and can be either relative or absolute.'].join(' ')
  },
  layer: {
    valType: 'enumerated',
    values: ['below', 'above'],
    dflt: 'above',
    editType: 'arraydraw',
    description: ['Specifies whether images are drawn below or above traces.', 'When `xref` and `yref` are both set to `paper`,', 'image is drawn below the entire plot area.'].join(' ')
  },
  sizex: {
    valType: 'number',
    dflt: 0,
    editType: 'arraydraw',
    description: ['Sets the image container size horizontally.', 'The image will be sized based on the `position` value.', 'When `xref` is set to `paper`, units are sized relative', 'to the plot width.', 'When `xref` ends with ` domain`, units are sized relative', 'to the axis width.'].join(' ')
  },
  sizey: {
    valType: 'number',
    dflt: 0,
    editType: 'arraydraw',
    description: ['Sets the image container size vertically.', 'The image will be sized based on the `position` value.', 'When `yref` is set to `paper`, units are sized relative', 'to the plot height.', 'When `yref` ends with ` domain`, units are sized relative', 'to the axis height.'].join(' ')
  },
  sizing: {
    valType: 'enumerated',
    values: ['fill', 'contain', 'stretch'],
    dflt: 'contain',
    editType: 'arraydraw',
    description: ['Specifies which dimension of the image to constrain.'].join(' ')
  },
  opacity: {
    valType: 'number',
    min: 0,
    max: 1,
    dflt: 1,
    editType: 'arraydraw',
    description: 'Sets the opacity of the image.'
  },
  x: {
    valType: 'any',
    dflt: 0,
    editType: 'arraydraw',
    description: ['Sets the image\'s x position.', 'When `xref` is set to `paper`, units are sized relative', 'to the plot height.', 'See `xref` for more info'].join(' ')
  },
  y: {
    valType: 'any',
    dflt: 0,
    editType: 'arraydraw',
    description: ['Sets the image\'s y position.', 'When `yref` is set to `paper`, units are sized relative', 'to the plot height.', 'See `yref` for more info'].join(' ')
  },
  xanchor: {
    valType: 'enumerated',
    values: ['left', 'center', 'right'],
    dflt: 'left',
    editType: 'arraydraw',
    description: 'Sets the anchor for the x position'
  },
  yanchor: {
    valType: 'enumerated',
    values: ['top', 'middle', 'bottom'],
    dflt: 'top',
    editType: 'arraydraw',
    description: 'Sets the anchor for the y position.'
  },
  xref: {
    valType: 'enumerated',
    values: ['paper', constants$a.idRegex.x.toString()],
    dflt: 'paper',
    editType: 'arraydraw',
    description: ['Sets the images\'s x coordinate axis.', axis_placeable_objects.axisRefDescription('x', 'left', 'right')].join(' ')
  },
  yref: {
    valType: 'enumerated',
    values: ['paper', constants$a.idRegex.y.toString()],
    dflt: 'paper',
    editType: 'arraydraw',
    description: ['Sets the images\'s y coordinate axis.', axis_placeable_objects.axisRefDescription('y', 'bottom', 'top')].join(' ')
  },
  editType: 'arraydraw'
});

var name$3 = 'images';

var defaults$6 = function supplyLayoutDefaults(layoutIn, layoutOut) {
  var opts = {
    name: name$3,
    handleItemDefaults: imageDefaults
  };
  array_container_defaults(layoutIn, layoutOut, opts);
};

function imageDefaults(imageIn, imageOut, fullLayout) {
  function coerce(attr, dflt) {
    return lib_1.coerce(imageIn, imageOut, attributes$6, attr, dflt);
  }

  var source = coerce('source');
  var visible = coerce('visible', !!source);
  if (!visible) return imageOut;
  coerce('layer');
  coerce('xanchor');
  coerce('yanchor');
  coerce('sizex');
  coerce('sizey');
  coerce('sizing');
  coerce('opacity');
  var gdMock = {
    _fullLayout: fullLayout
  };
  var axLetters = ['x', 'y'];

  for (var i = 0; i < 2; i++) {
    // 'paper' is the fallback axref
    var axLetter = axLetters[i];
    var axRef = axes_1.coerceRef(imageIn, imageOut, gdMock, axLetter, 'paper', undefined);

    if (axRef !== 'paper') {
      var ax = axes_1.getFromId(gdMock, axRef);

      ax._imgIndices.push(imageOut._index);
    }

    axes_1.coercePosition(imageOut, gdMock, coerce, axRef, axLetter, 0);
  }

  return imageOut;
}

var draw$5 = function draw(gd) {
  var fullLayout = gd._fullLayout;
  var imageDataAbove = [];
  var imageDataSubplot = {};
  var imageDataBelow = [];
  var subplot;
  var i; // Sort into top, subplot, and bottom layers

  for (i = 0; i < fullLayout.images.length; i++) {
    var img = fullLayout.images[i];

    if (img.visible) {
      if (img.layer === 'below' && img.xref !== 'paper' && img.yref !== 'paper') {
        subplot = axis_ids.ref2id(img.xref) + axis_ids.ref2id(img.yref);
        var plotinfo = fullLayout._plots[subplot];

        if (!plotinfo) {
          // Fall back to _imageLowerLayer in case the requested subplot doesn't exist.
          // This can happen if you reference the image to an x / y axis combination
          // that doesn't have any data on it (and layer is below)
          imageDataBelow.push(img);
          continue;
        }

        if (plotinfo.mainplot) {
          subplot = plotinfo.mainplot.id;
        }

        if (!imageDataSubplot[subplot]) {
          imageDataSubplot[subplot] = [];
        }

        imageDataSubplot[subplot].push(img);
      } else if (img.layer === 'above') {
        imageDataAbove.push(img);
      } else {
        imageDataBelow.push(img);
      }
    }
  }

  var anchors = {
    x: {
      left: {
        sizing: 'xMin',
        offset: 0
      },
      center: {
        sizing: 'xMid',
        offset: -1 / 2
      },
      right: {
        sizing: 'xMax',
        offset: -1
      }
    },
    y: {
      top: {
        sizing: 'YMin',
        offset: 0
      },
      middle: {
        sizing: 'YMid',
        offset: -1 / 2
      },
      bottom: {
        sizing: 'YMax',
        offset: -1
      }
    }
  }; // Images must be converted to dataURL's for exporting.

  function setImage(d) {
    var thisImage = d3.select(this);

    if (this._imgSrc === d.source) {
      return;
    }

    thisImage.attr('xmlns', xmlns_namespaces.svg);

    if (d.source && d.source.slice(0, 5) === 'data:') {
      thisImage.attr('xlink:href', d.source);
      this._imgSrc = d.source;
    } else {
      var imagePromise = new Promise(function (resolve) {
        var img = new Image();
        this.img = img; // If not set, a `tainted canvas` error is thrown

        img.setAttribute('crossOrigin', 'anonymous');
        img.onerror = errorHandler;

        img.onload = function () {
          var canvas = document.createElement('canvas');
          canvas.width = this.width;
          canvas.height = this.height;
          var ctx = canvas.getContext('2d');
          ctx.drawImage(this, 0, 0);
          var dataURL = canvas.toDataURL('image/png');
          thisImage.attr('xlink:href', dataURL); // resolve promise in onload handler instead of on 'load' to support IE11
          // see https://github.com/plotly/plotly.js/issues/1685
          // for more details

          resolve();
        };

        thisImage.on('error', errorHandler);
        img.src = d.source;
        this._imgSrc = d.source;

        function errorHandler() {
          thisImage.remove();
          resolve();
        }
      }.bind(this));

      gd._promises.push(imagePromise);
    }
  }

  function applyAttributes(d) {
    var thisImage = d3.select(this); // Axes if specified

    var xa = axes_1.getFromId(gd, d.xref);
    var ya = axes_1.getFromId(gd, d.yref);
    var xIsDomain = axes_1.getRefType(d.xref) === 'domain';
    var yIsDomain = axes_1.getRefType(d.yref) === 'domain';
    var size = fullLayout._size;
    var width, height;

    if (xa !== undefined) {
      width = typeof d.xref === 'string' && xIsDomain ? xa._length * d.sizex : Math.abs(xa.l2p(d.sizex) - xa.l2p(0));
    } else {
      width = d.sizex * size.w;
    }

    if (ya !== undefined) {
      height = typeof d.yref === 'string' && yIsDomain ? ya._length * d.sizey : Math.abs(ya.l2p(d.sizey) - ya.l2p(0));
    } else {
      height = d.sizey * size.h;
    } // Offsets for anchor positioning


    var xOffset = width * anchors.x[d.xanchor].offset;
    var yOffset = height * anchors.y[d.yanchor].offset;
    var sizing = anchors.x[d.xanchor].sizing + anchors.y[d.yanchor].sizing; // Final positions

    var xPos, yPos;

    if (xa !== undefined) {
      xPos = typeof d.xref === 'string' && xIsDomain ? xa._length * d.x + xa._offset : xa.r2p(d.x) + xa._offset;
    } else {
      xPos = d.x * size.w + size.l;
    }

    xPos += xOffset;

    if (ya !== undefined) {
      yPos = typeof d.yref === 'string' && yIsDomain ? // consistent with "paper" yref value, where positive values
      // move up the page
      ya._length * (1 - d.y) + ya._offset : ya.r2p(d.y) + ya._offset;
    } else {
      yPos = size.h - d.y * size.h + size.t;
    }

    yPos += yOffset; // Construct the proper aspectRatio attribute

    switch (d.sizing) {
      case 'fill':
        sizing += ' slice';
        break;

      case 'stretch':
        sizing = 'none';
        break;
    }

    thisImage.attr({
      x: xPos,
      y: yPos,
      width: width,
      height: height,
      preserveAspectRatio: sizing,
      opacity: d.opacity
    }); // Set proper clipping on images

    var xId = xa && axes_1.getRefType(d.xref) !== 'domain' ? xa._id : '';
    var yId = ya && axes_1.getRefType(d.yref) !== 'domain' ? ya._id : '';
    var clipAxes = xId + yId;
    drawing_1.setClipUrl(thisImage, clipAxes ? 'clip' + fullLayout._uid + clipAxes : null, gd);
  }

  var imagesBelow = fullLayout._imageLowerLayer.selectAll('image').data(imageDataBelow);

  var imagesAbove = fullLayout._imageUpperLayer.selectAll('image').data(imageDataAbove);

  imagesBelow.enter().append('image');
  imagesAbove.enter().append('image');
  imagesBelow.exit().remove();
  imagesAbove.exit().remove();
  imagesBelow.each(function (d) {
    setImage.bind(this)(d);
    applyAttributes.bind(this)(d);
  });
  imagesAbove.each(function (d) {
    setImage.bind(this)(d);
    applyAttributes.bind(this)(d);
  });
  var allSubplots = Object.keys(fullLayout._plots);

  for (i = 0; i < allSubplots.length; i++) {
    subplot = allSubplots[i];
    var subplotObj = fullLayout._plots[subplot]; // filter out overlaid plots (which have their images on the main plot)
    // and gl2d plots (which don't support below images, at least not yet)

    if (!subplotObj.imagelayer) continue;
    var imagesOnSubplot = subplotObj.imagelayer.selectAll('image') // even if there are no images on this subplot, we need to run
    // enter and exit in case there were previously
    .data(imageDataSubplot[subplot] || []);
    imagesOnSubplot.enter().append('image');
    imagesOnSubplot.exit().remove();
    imagesOnSubplot.each(function (d) {
      setImage.bind(this)(d);
      applyAttributes.bind(this)(d);
    });
  }
};

/*
 * convertCoords: when converting an axis between log and linear
 * you need to alter any images on that axis to keep them
 * pointing at the same data point.
 * In v3.0 this will become obsolete (or perhaps size will still need conversion?)
 * we convert size by declaring that the maximum extent *in data units* should be
 * the same, assuming the image is anchored by its center (could remove that restriction
 * if we think it's important) even though the actual left and right values will not be
 * quite the same since the scale becomes nonlinear (and central anchor means the pixel
 * center of the image, not the data units center)
 *
 * gd: the plot div
 * ax: the axis being changed
 * newType: the type it's getting
 * doExtra: function(attr, val) from inside relayout that sets the attribute.
 *     Use this to make the changes as it's aware if any other changes in the
 *     same relayout call should override this conversion.
 */


var convert_coords = function convertCoords(gd, ax, newType, doExtra) {
  ax = ax || {};
  var toLog = newType === 'log' && ax.type === 'linear';
  var fromLog = newType === 'linear' && ax.type === 'log';
  if (!(toLog || fromLog)) return;
  var images = gd._fullLayout.images;

  var axLetter = ax._id.charAt(0);

  var image;
  var attrPrefix;

  for (var i = 0; i < images.length; i++) {
    image = images[i];
    attrPrefix = 'images[' + i + '].';

    if (image[axLetter + 'ref'] === ax._id) {
      var currentPos = image[axLetter];
      var currentSize = image['size' + axLetter];
      var newPos = null;
      var newSize = null;

      if (toLog) {
        newPos = to_log_range(currentPos, ax.range); // this is the inverse of the conversion we do in fromLog below
        // so that the conversion is reversible (notice the fromLog conversion
        // is like sinh, and this one looks like arcsinh)

        var dx = currentSize / Math.pow(10, newPos) / 2;
        newSize = 2 * Math.log(dx + Math.sqrt(1 + dx * dx)) / Math.LN10;
      } else {
        newPos = Math.pow(10, currentPos);
        newSize = newPos * (Math.pow(10, currentSize / 2) - Math.pow(10, -currentSize / 2));
      } // if conversion failed, delete the value so it can get a default later on


      if (!fastIsnumeric(newPos)) {
        newPos = null;
        newSize = null;
      } else if (!fastIsnumeric(newSize)) newSize = null;

      doExtra(attrPrefix + axLetter, newPos);
      doExtra(attrPrefix + 'size' + axLetter, newSize);
    }
  }
};

var images = {
  moduleType: 'component',
  name: 'images',
  layoutAttributes: attributes$6,
  supplyLayoutDefaults: defaults$6,
  includeBasePlot: include_components('images'),
  draw: draw$5,
  convertCoords: convert_coords
};

var constants$4 = {
  // layout attribute name
  name: 'updatemenus',
  // class names
  containerClassName: 'updatemenu-container',
  headerGroupClassName: 'updatemenu-header-group',
  headerClassName: 'updatemenu-header',
  headerArrowClassName: 'updatemenu-header-arrow',
  dropdownButtonGroupClassName: 'updatemenu-dropdown-button-group',
  dropdownButtonClassName: 'updatemenu-dropdown-button',
  buttonClassName: 'updatemenu-button',
  itemRectClassName: 'updatemenu-item-rect',
  itemTextClassName: 'updatemenu-item-text',
  // DOM attribute name in button group keeping track
  // of active update menu
  menuIndexAttrName: 'updatemenu-active-index',
  // id root pass to Plots.autoMargin
  autoMarginIdRoot: 'updatemenu-',
  // options when 'active: -1'
  blankHeaderOpts: {
    label: '  '
  },
  // min item width / height
  minWidth: 30,
  minHeight: 30,
  // padding around item text
  textPadX: 24,
  arrowPadX: 16,
  // item rect radii
  rx: 2,
  ry: 2,
  // item  text x offset off left edge
  textOffsetX: 12,
  // item  text y offset (w.r.t. middle)
  textOffsetY: 3,
  // arrow offset off right edge
  arrowOffsetX: 4,
  // gap between header and buttons
  gapButtonHeader: 5,
  // gap between between buttons
  gapButton: 2,
  // color given to active buttons
  activeColor: '#F4FAFF',
  // color given to hovered buttons
  hoverColor: '#F4FAFF',
  // symbol for menu open arrow
  arrowSymbol: {
    left: 'â',
    right: 'âº',
    up: 'â²',
    down: 'â¼'
  }
};

var extendFlat$3 = extend.extendFlat;
var overrideAll$2 = edit_types.overrideAll;
var templatedArray$2 = plot_template.templatedArray;
var buttonsAttrs = templatedArray$2('button', {
  visible: {
    valType: 'boolean',
    description: 'Determines whether or not this button is visible.'
  },
  method: {
    valType: 'enumerated',
    values: ['restyle', 'relayout', 'animate', 'update', 'skip'],
    dflt: 'restyle',
    description: ['Sets the Plotly method to be called on click.', 'If the `skip` method is used, the API updatemenu will function as normal', 'but will perform no API calls and will not bind automatically to state', 'updates. This may be used to create a component interface and attach to', 'updatemenu events manually via JavaScript.'].join(' ')
  },
  args: {
    valType: 'info_array',
    freeLength: true,
    items: [{
      valType: 'any'
    }, {
      valType: 'any'
    }, {
      valType: 'any'
    }],
    description: ['Sets the arguments values to be passed to the Plotly', 'method set in `method` on click.'].join(' ')
  },
  args2: {
    valType: 'info_array',
    freeLength: true,
    items: [{
      valType: 'any'
    }, {
      valType: 'any'
    }, {
      valType: 'any'
    }],
    description: ['Sets a 2nd set of `args`,', 'these arguments values are passed to the Plotly', 'method set in `method` when clicking this button while in the active state.', 'Use this to create toggle buttons.'].join(' ')
  },
  label: {
    valType: 'string',
    dflt: '',
    description: 'Sets the text label to appear on the button.'
  },
  execute: {
    valType: 'boolean',
    dflt: true,
    description: ['When true, the API method is executed. When false, all other behaviors are the same', 'and command execution is skipped. This may be useful when hooking into, for example,', 'the `plotly_buttonclicked` method and executing the API command manually without losing', 'the benefit of the updatemenu automatically binding to the state of the plot through the', 'specification of `method` and `args`.'].join(' ')
  }
});
var attributes$5 = overrideAll$2(templatedArray$2('updatemenu', {
  _arrayAttrRegexps: [/^updatemenus\[(0|[1-9][0-9]+)\]\.buttons/],
  visible: {
    valType: 'boolean',
    description: ['Determines whether or not the update menu is visible.'].join(' ')
  },
  type: {
    valType: 'enumerated',
    values: ['dropdown', 'buttons'],
    dflt: 'dropdown',
    description: ['Determines whether the buttons are accessible via a dropdown menu', 'or whether the buttons are stacked horizontally or vertically'].join(' ')
  },
  direction: {
    valType: 'enumerated',
    values: ['left', 'right', 'up', 'down'],
    dflt: 'down',
    description: ['Determines the direction in which the buttons are laid out, whether', 'in a dropdown menu or a row/column of buttons. For `left` and `up`,', 'the buttons will still appear in left-to-right or top-to-bottom order', 'respectively.'].join(' ')
  },
  active: {
    valType: 'integer',
    min: -1,
    dflt: 0,
    description: ['Determines which button (by index starting from 0) is', 'considered active.'].join(' ')
  },
  showactive: {
    valType: 'boolean',
    dflt: true,
    description: 'Highlights active dropdown item or active button if true.'
  },
  buttons: buttonsAttrs,
  x: {
    valType: 'number',
    min: -2,
    max: 3,
    dflt: -0.05,
    description: 'Sets the x position (in normalized coordinates) of the update menu.'
  },
  xanchor: {
    valType: 'enumerated',
    values: ['auto', 'left', 'center', 'right'],
    dflt: 'right',
    description: ['Sets the update menu\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the range selector.'].join(' ')
  },
  y: {
    valType: 'number',
    min: -2,
    max: 3,
    dflt: 1,
    description: 'Sets the y position (in normalized coordinates) of the update menu.'
  },
  yanchor: {
    valType: 'enumerated',
    values: ['auto', 'top', 'middle', 'bottom'],
    dflt: 'top',
    description: ['Sets the update menu\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the range selector.'].join(' ')
  },
  pad: extendFlat$3(pad_attributes({
    editType: 'arraydraw'
  }), {
    description: 'Sets the padding around the buttons or dropdown menu.'
  }),
  font: font_attributes({
    description: 'Sets the font of the update menu button text.'
  }),
  bgcolor: {
    valType: 'color',
    description: 'Sets the background color of the update menu buttons.'
  },
  bordercolor: {
    valType: 'color',
    dflt: attributes$j.borderLine,
    description: 'Sets the color of the border enclosing the update menu.'
  },
  borderwidth: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'arraydraw',
    description: 'Sets the width (in px) of the border enclosing the update menu.'
  }
}), 'arraydraw', 'from-root');

var name$2 = constants$4.name;
var buttonAttrs$1 = attributes$5.buttons;

var defaults$5 = function updateMenusDefaults(layoutIn, layoutOut) {
  var opts = {
    name: name$2,
    handleItemDefaults: menuDefaults
  };
  array_container_defaults(layoutIn, layoutOut, opts);
};

function menuDefaults(menuIn, menuOut, layoutOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(menuIn, menuOut, attributes$5, attr, dflt);
  }

  var buttons = array_container_defaults(menuIn, menuOut, {
    name: 'buttons',
    handleItemDefaults: buttonDefaults$1
  });
  var visible = coerce('visible', buttons.length > 0);
  if (!visible) return;
  coerce('active');
  coerce('direction');
  coerce('type');
  coerce('showactive');
  coerce('x');
  coerce('y');
  lib_1.noneOrAll(menuIn, menuOut, ['x', 'y']);
  coerce('xanchor');
  coerce('yanchor');
  coerce('pad.t');
  coerce('pad.r');
  coerce('pad.b');
  coerce('pad.l');
  lib_1.coerceFont(coerce, 'font', layoutOut.font);
  coerce('bgcolor', layoutOut.paper_bgcolor);
  coerce('bordercolor');
  coerce('borderwidth');
}

function buttonDefaults$1(buttonIn, buttonOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(buttonIn, buttonOut, buttonAttrs$1, attr, dflt);
  }

  var visible = coerce('visible', buttonIn.method === 'skip' || Array.isArray(buttonIn.args));

  if (visible) {
    coerce('method');
    coerce('args');
    coerce('args2');
    coerce('label');
    coerce('execute');
  }
}

var scrollbox = ScrollBox;
/**
 * Helper class to setup a scroll box
 *
 * @class
 * @param           gd          Plotly's graph div
 * @param           container   Container to be scroll-boxed (as a D3 selection)
 * @param {string}  id          Id for the clip path to implement the scroll box
 */

function ScrollBox(gd, container, id) {
  this.gd = gd;
  this.container = container;
  this.id = id; // See ScrollBox.prototype.enable for further definition

  this.position = null; // scrollbox position

  this.translateX = null; // scrollbox horizontal translation

  this.translateY = null; // scrollbox vertical translation

  this.hbar = null; // horizontal scrollbar D3 selection

  this.vbar = null; // vertical scrollbar D3 selection
  // <rect> element to capture pointer events

  this.bg = this.container.selectAll('rect.scrollbox-bg').data([0]);
  this.bg.exit().on('.drag', null).on('wheel', null).remove();
  this.bg.enter().append('rect').classed('scrollbox-bg', true).style('pointer-events', 'all').attr({
    opacity: 0,
    x: 0,
    y: 0,
    width: 0,
    height: 0
  });
} // scroll bar dimensions


ScrollBox.barWidth = 2;
ScrollBox.barLength = 20;
ScrollBox.barRadius = 2;
ScrollBox.barPad = 1;
ScrollBox.barColor = '#808BA4';
/**
 * If needed, setup a clip path and scrollbars
 *
 * @method
 * @param {Object}  position
 * @param {number}  position.l  Left side position (in pixels)
 * @param {number}  position.t  Top side (in pixels)
 * @param {number}  position.w  Width (in pixels)
 * @param {number}  position.h  Height (in pixels)
 * @param {string}  [position.direction='down']
 *                  Either 'down', 'left', 'right' or 'up'
 * @param {number}  [translateX=0]  Horizontal offset (in pixels)
 * @param {number}  [translateY=0]  Vertical offset (in pixels)
 */

ScrollBox.prototype.enable = function enable(position, translateX, translateY) {
  var fullLayout = this.gd._fullLayout;
  var fullWidth = fullLayout.width;
  var fullHeight = fullLayout.height; // compute position of scrollbox

  this.position = position;
  var l = this.position.l;
  var w = this.position.w;
  var t = this.position.t;
  var h = this.position.h;
  var direction = this.position.direction;
  var isDown = direction === 'down';
  var isLeft = direction === 'left';
  var isRight = direction === 'right';
  var isUp = direction === 'up';
  var boxW = w;
  var boxH = h;
  var boxL, boxR;
  var boxT, boxB;

  if (!isDown && !isLeft && !isRight && !isUp) {
    this.position.direction = 'down';
    isDown = true;
  }

  var isVertical = isDown || isUp;

  if (isVertical) {
    boxL = l;
    boxR = boxL + boxW;

    if (isDown) {
      // anchor to top side
      boxT = t;
      boxB = Math.min(boxT + boxH, fullHeight);
      boxH = boxB - boxT;
    } else {
      // anchor to bottom side
      boxB = t + boxH;
      boxT = Math.max(boxB - boxH, 0);
      boxH = boxB - boxT;
    }
  } else {
    boxT = t;
    boxB = boxT + boxH;

    if (isLeft) {
      // anchor to right side
      boxR = l + boxW;
      boxL = Math.max(boxR - boxW, 0);
      boxW = boxR - boxL;
    } else {
      // anchor to left side
      boxL = l;
      boxR = Math.min(boxL + boxW, fullWidth);
      boxW = boxR - boxL;
    }
  }

  this._box = {
    l: boxL,
    t: boxT,
    w: boxW,
    h: boxH
  }; // compute position of horizontal scroll bar

  var needsHorizontalScrollBar = w > boxW;
  var hbarW = ScrollBox.barLength + 2 * ScrollBox.barPad;
  var hbarH = ScrollBox.barWidth + 2 * ScrollBox.barPad; // draw horizontal scrollbar on the bottom side

  var hbarL = l;
  var hbarT = t + h;
  if (hbarT + hbarH > fullHeight) hbarT = fullHeight - hbarH;
  var hbar = this.container.selectAll('rect.scrollbar-horizontal').data(needsHorizontalScrollBar ? [0] : []);
  hbar.exit().on('.drag', null).remove();
  hbar.enter().append('rect').classed('scrollbar-horizontal', true).call(color_1.fill, ScrollBox.barColor);

  if (needsHorizontalScrollBar) {
    this.hbar = hbar.attr({
      'rx': ScrollBox.barRadius,
      'ry': ScrollBox.barRadius,
      'x': hbarL,
      'y': hbarT,
      'width': hbarW,
      'height': hbarH
    }); // hbar center moves between hbarXMin and hbarXMin + hbarTranslateMax

    this._hbarXMin = hbarL + hbarW / 2;
    this._hbarTranslateMax = boxW - hbarW;
  } else {
    delete this.hbar;
    delete this._hbarXMin;
    delete this._hbarTranslateMax;
  } // compute position of vertical scroll bar


  var needsVerticalScrollBar = h > boxH;
  var vbarW = ScrollBox.barWidth + 2 * ScrollBox.barPad;
  var vbarH = ScrollBox.barLength + 2 * ScrollBox.barPad; // draw vertical scrollbar on the right side

  var vbarL = l + w;
  var vbarT = t;
  if (vbarL + vbarW > fullWidth) vbarL = fullWidth - vbarW;
  var vbar = this.container.selectAll('rect.scrollbar-vertical').data(needsVerticalScrollBar ? [0] : []);
  vbar.exit().on('.drag', null).remove();
  vbar.enter().append('rect').classed('scrollbar-vertical', true).call(color_1.fill, ScrollBox.barColor);

  if (needsVerticalScrollBar) {
    this.vbar = vbar.attr({
      'rx': ScrollBox.barRadius,
      'ry': ScrollBox.barRadius,
      'x': vbarL,
      'y': vbarT,
      'width': vbarW,
      'height': vbarH
    }); // vbar center moves between vbarYMin and vbarYMin + vbarTranslateMax

    this._vbarYMin = vbarT + vbarH / 2;
    this._vbarTranslateMax = boxH - vbarH;
  } else {
    delete this.vbar;
    delete this._vbarYMin;
    delete this._vbarTranslateMax;
  } // setup a clip path (if scroll bars are needed)


  var clipId = this.id;
  var clipL = boxL - 0.5;
  var clipR = needsVerticalScrollBar ? boxR + vbarW + 0.5 : boxR + 0.5;
  var clipT = boxT - 0.5;
  var clipB = needsHorizontalScrollBar ? boxB + hbarH + 0.5 : boxB + 0.5;

  var clipPath = fullLayout._topdefs.selectAll('#' + clipId).data(needsHorizontalScrollBar || needsVerticalScrollBar ? [0] : []);

  clipPath.exit().remove();
  clipPath.enter().append('clipPath').attr('id', clipId).append('rect');

  if (needsHorizontalScrollBar || needsVerticalScrollBar) {
    this._clipRect = clipPath.select('rect').attr({
      x: Math.floor(clipL),
      y: Math.floor(clipT),
      width: Math.ceil(clipR) - Math.floor(clipL),
      height: Math.ceil(clipB) - Math.floor(clipT)
    });
    this.container.call(drawing_1.setClipUrl, clipId, this.gd);
    this.bg.attr({
      x: l,
      y: t,
      width: w,
      height: h
    });
  } else {
    this.bg.attr({
      width: 0,
      height: 0
    });
    this.container.on('wheel', null).on('.drag', null).call(drawing_1.setClipUrl, null);
    delete this._clipRect;
  } // set up drag listeners (if scroll bars are needed)


  if (needsHorizontalScrollBar || needsVerticalScrollBar) {
    var onBoxDrag = d3.behavior.drag().on('dragstart', function () {
      d3.event.sourceEvent.preventDefault();
    }).on('drag', this._onBoxDrag.bind(this));
    this.container.on('wheel', null).on('wheel', this._onBoxWheel.bind(this)).on('.drag', null).call(onBoxDrag);
    var onBarDrag = d3.behavior.drag().on('dragstart', function () {
      d3.event.sourceEvent.preventDefault();
      d3.event.sourceEvent.stopPropagation();
    }).on('drag', this._onBarDrag.bind(this));

    if (needsHorizontalScrollBar) {
      this.hbar.on('.drag', null).call(onBarDrag);
    }

    if (needsVerticalScrollBar) {
      this.vbar.on('.drag', null).call(onBarDrag);
    }
  } // set scrollbox translation


  this.setTranslate(translateX, translateY);
};
/**
 * If present, remove clip-path and scrollbars
 *
 * @method
 */


ScrollBox.prototype.disable = function disable() {
  if (this.hbar || this.vbar) {
    this.bg.attr({
      width: 0,
      height: 0
    });
    this.container.on('wheel', null).on('.drag', null).call(drawing_1.setClipUrl, null);
    delete this._clipRect;
  }

  if (this.hbar) {
    this.hbar.on('.drag', null);
    this.hbar.remove();
    delete this.hbar;
    delete this._hbarXMin;
    delete this._hbarTranslateMax;
  }

  if (this.vbar) {
    this.vbar.on('.drag', null);
    this.vbar.remove();
    delete this.vbar;
    delete this._vbarYMin;
    delete this._vbarTranslateMax;
  }
};
/**
 * Handles scroll box drag events
 *
 * @method
 */


ScrollBox.prototype._onBoxDrag = function _onBoxDrag() {
  var translateX = this.translateX;
  var translateY = this.translateY;

  if (this.hbar) {
    translateX -= d3.event.dx;
  }

  if (this.vbar) {
    translateY -= d3.event.dy;
  }

  this.setTranslate(translateX, translateY);
};
/**
 * Handles scroll box wheel events
 *
 * @method
 */


ScrollBox.prototype._onBoxWheel = function _onBoxWheel() {
  var translateX = this.translateX;
  var translateY = this.translateY;

  if (this.hbar) {
    translateX += d3.event.deltaY;
  }

  if (this.vbar) {
    translateY += d3.event.deltaY;
  }

  this.setTranslate(translateX, translateY);
};
/**
 * Handles scroll bar drag events
 *
 * @method
 */


ScrollBox.prototype._onBarDrag = function _onBarDrag() {
  var translateX = this.translateX;
  var translateY = this.translateY;

  if (this.hbar) {
    var xMin = translateX + this._hbarXMin;
    var xMax = xMin + this._hbarTranslateMax;
    var x = lib_1.constrain(d3.event.x, xMin, xMax);
    var xf = (x - xMin) / (xMax - xMin);
    var translateXMax = this.position.w - this._box.w;
    translateX = xf * translateXMax;
  }

  if (this.vbar) {
    var yMin = translateY + this._vbarYMin;
    var yMax = yMin + this._vbarTranslateMax;
    var y = lib_1.constrain(d3.event.y, yMin, yMax);
    var yf = (y - yMin) / (yMax - yMin);
    var translateYMax = this.position.h - this._box.h;
    translateY = yf * translateYMax;
  }

  this.setTranslate(translateX, translateY);
};
/**
 * Set clip path and scroll bar translate transform
 *
 * @method
 * @param {number}  [translateX=0]  Horizontal offset (in pixels)
 * @param {number}  [translateY=0]  Vertical offset (in pixels)
 */


ScrollBox.prototype.setTranslate = function setTranslate(translateX, translateY) {
  // store translateX and translateY (needed by mouse event handlers)
  var translateXMax = this.position.w - this._box.w;
  var translateYMax = this.position.h - this._box.h;
  translateX = lib_1.constrain(translateX || 0, 0, translateXMax);
  translateY = lib_1.constrain(translateY || 0, 0, translateYMax);
  this.translateX = translateX;
  this.translateY = translateY;
  this.container.call(drawing_1.setTranslate, this._box.l - this.position.l - translateX, this._box.t - this.position.t - translateY);

  if (this._clipRect) {
    this._clipRect.attr({
      x: Math.floor(this.position.l + translateX - 0.5),
      y: Math.floor(this.position.t + translateY - 0.5)
    });
  }

  if (this.hbar) {
    var xf = translateX / translateXMax;
    this.hbar.call(drawing_1.setTranslate, translateX + xf * this._hbarTranslateMax, translateY);
  }

  if (this.vbar) {
    var yf = translateY / translateYMax;
    this.vbar.call(drawing_1.setTranslate, translateX, translateY + yf * this._vbarTranslateMax);
  }
};

var arrayEditor$1 = plot_template.arrayEditor;
var LINE_SPACING$4 = alignment.LINE_SPACING;

var draw$4 = function draw(gd) {
  var fullLayout = gd._fullLayout;
  var menuData = lib_1.filterVisible(fullLayout[constants$4.name]);
  /* Update menu data is bound to the header-group.
   * The items in the header group are always present.
   *
   * Upon clicking on a header its corresponding button
   * data is bound to the button-group.
   *
   * We draw all headers in one group before all buttons
   * so that the buttons *always* appear above the headers.
   *
   * Note that only one set of buttons are visible at once.
   *
   * <g container />
   *
   *     <g header-group />
   *         <g item header />
   *         <text item header-arrow />
   *     <g header-group />
   *         <g item header />
   *         <text item header-arrow />
   *     ...
   *
   *     <g button-group />
   *         <g item button />
   *         <g item button />
   *         ...
   */

  function clearAutoMargin(menuOpts) {
    plots_1.autoMargin(gd, autoMarginId$1(menuOpts));
  } // draw update menu container


  var menus = fullLayout._menulayer.selectAll('g.' + constants$4.containerClassName).data(menuData.length > 0 ? [0] : []);

  menus.enter().append('g').classed(constants$4.containerClassName, true).style('cursor', 'pointer');
  menus.exit().each(function () {
    // Most components don't need to explicitly remove autoMargin, because
    // marginPushers does this - but updatemenu updates don't go through
    // a full replot so we need to explicitly remove it.
    // This is for removing *all* updatemenus, removing individuals is
    // handled below, in headerGroups.exit
    d3.select(this).selectAll('g.' + constants$4.headerGroupClassName).each(clearAutoMargin);
  }).remove(); // return early if no update menus are visible

  if (menuData.length === 0) return; // join header group

  var headerGroups = menus.selectAll('g.' + constants$4.headerGroupClassName).data(menuData, keyFunction$1);
  headerGroups.enter().append('g').classed(constants$4.headerGroupClassName, true); // draw dropdown button container

  var gButton = lib_1.ensureSingle(menus, 'g', constants$4.dropdownButtonGroupClassName, function (s) {
    s.style('pointer-events', 'all');
  }); // find dimensions before plotting anything (this mutates menuOpts)

  for (var i = 0; i < menuData.length; i++) {
    var menuOpts = menuData[i];
    findDimensions$1(gd, menuOpts);
  } // setup scrollbox


  var scrollBoxId = 'updatemenus' + fullLayout._uid;
  var scrollBox = new scrollbox(gd, gButton, scrollBoxId); // remove exiting header, remove dropped buttons and reset margins

  if (headerGroups.enter().size()) {
    // make sure gButton is on top of all headers
    gButton.node().parentNode.appendChild(gButton.node());
    gButton.call(removeAllButtons);
  }

  headerGroups.exit().each(function (menuOpts) {
    gButton.call(removeAllButtons);
    clearAutoMargin(menuOpts);
  }).remove(); // draw headers!

  headerGroups.each(function (menuOpts) {
    var gHeader = d3.select(this);

    var _gButton = menuOpts.type === 'dropdown' ? gButton : null;

    plots_1.manageCommandObserver(gd, menuOpts, menuOpts.buttons, function (data) {
      setActive$1(gd, menuOpts, menuOpts.buttons[data.index], gHeader, _gButton, scrollBox, data.index, true);
    });

    if (menuOpts.type === 'dropdown') {
      drawHeader(gd, gHeader, gButton, scrollBox, menuOpts); // if this menu is active, update the dropdown container

      if (isActive$1(gButton, menuOpts)) {
        drawButtons(gd, gHeader, gButton, scrollBox, menuOpts);
      }
    } else {
      drawButtons(gd, gHeader, null, null, menuOpts);
    }
  });
}; // Note that '_index' is set at the default step,
// it corresponds to the menu index in the user layout update menu container.
// Because a menu can be set invisible,
// this is a more 'consistent' field than the index in the menuData.


function keyFunction$1(menuOpts) {
  return menuOpts._index;
}

function isFolded(gButton) {
  return +gButton.attr(constants$4.menuIndexAttrName) === -1;
}

function isActive$1(gButton, menuOpts) {
  return +gButton.attr(constants$4.menuIndexAttrName) === menuOpts._index;
}

function setActive$1(gd, menuOpts, buttonOpts, gHeader, gButton, scrollBox, buttonIndex, isSilentUpdate) {
  // update 'active' attribute in menuOpts
  menuOpts.active = buttonIndex; // due to templating, it's possible this slider doesn't even exist yet

  arrayEditor$1(gd.layout, constants$4.name, menuOpts).applyUpdate('active', buttonIndex);

  if (menuOpts.type === 'buttons') {
    drawButtons(gd, gHeader, null, null, menuOpts);
  } else if (menuOpts.type === 'dropdown') {
    // fold up buttons and redraw header
    gButton.attr(constants$4.menuIndexAttrName, '-1');
    drawHeader(gd, gHeader, gButton, scrollBox, menuOpts);

    if (!isSilentUpdate) {
      drawButtons(gd, gHeader, gButton, scrollBox, menuOpts);
    }
  }
}

function drawHeader(gd, gHeader, gButton, scrollBox, menuOpts) {
  var header = lib_1.ensureSingle(gHeader, 'g', constants$4.headerClassName, function (s) {
    s.style('pointer-events', 'all');
  });
  var dims = menuOpts._dims;
  var active = menuOpts.active;
  var headerOpts = menuOpts.buttons[active] || constants$4.blankHeaderOpts;
  var posOpts = {
    y: menuOpts.pad.t,
    yPad: 0,
    x: menuOpts.pad.l,
    xPad: 0,
    index: 0
  };
  var positionOverrides = {
    width: dims.headerWidth,
    height: dims.headerHeight
  };
  header.call(drawItem, menuOpts, headerOpts, gd).call(setItemPosition, menuOpts, posOpts, positionOverrides); // draw drop arrow at the right edge

  var arrow = lib_1.ensureSingle(gHeader, 'text', constants$4.headerArrowClassName, function (s) {
    s.attr('text-anchor', 'end').call(drawing_1.font, menuOpts.font).text(constants$4.arrowSymbol[menuOpts.direction]);
  });
  arrow.attr({
    x: dims.headerWidth - constants$4.arrowOffsetX + menuOpts.pad.l,
    y: dims.headerHeight / 2 + constants$4.textOffsetY + menuOpts.pad.t
  });
  header.on('click', function () {
    gButton.call(removeAllButtons, String(isActive$1(gButton, menuOpts) ? -1 : menuOpts._index));
    drawButtons(gd, gHeader, gButton, scrollBox, menuOpts);
  });
  header.on('mouseover', function () {
    header.call(styleOnMouseOver);
  });
  header.on('mouseout', function () {
    header.call(styleOnMouseOut, menuOpts);
  }); // translate header group

  drawing_1.setTranslate(gHeader, dims.lx, dims.ly);
}

function drawButtons(gd, gHeader, gButton, scrollBox, menuOpts) {
  // If this is a set of buttons, set pointer events = all since we play
  // some minor games with which container is which in order to simplify
  // the drawing of *either* buttons or menus
  if (!gButton) {
    gButton = gHeader;
    gButton.attr('pointer-events', 'all');
  }

  var buttonData = !isFolded(gButton) || menuOpts.type === 'buttons' ? menuOpts.buttons : [];
  var klass = menuOpts.type === 'dropdown' ? constants$4.dropdownButtonClassName : constants$4.buttonClassName;
  var buttons = gButton.selectAll('g.' + klass).data(lib_1.filterVisible(buttonData));
  var enter = buttons.enter().append('g').classed(klass, true);
  var exit = buttons.exit();

  if (menuOpts.type === 'dropdown') {
    enter.attr('opacity', '0').transition().attr('opacity', '1');
    exit.transition().attr('opacity', '0').remove();
  } else {
    exit.remove();
  }

  var x0 = 0;
  var y0 = 0;
  var dims = menuOpts._dims;
  var isVertical = ['up', 'down'].indexOf(menuOpts.direction) !== -1;

  if (menuOpts.type === 'dropdown') {
    if (isVertical) {
      y0 = dims.headerHeight + constants$4.gapButtonHeader;
    } else {
      x0 = dims.headerWidth + constants$4.gapButtonHeader;
    }
  }

  if (menuOpts.type === 'dropdown' && menuOpts.direction === 'up') {
    y0 = -constants$4.gapButtonHeader + constants$4.gapButton - dims.openHeight;
  }

  if (menuOpts.type === 'dropdown' && menuOpts.direction === 'left') {
    x0 = -constants$4.gapButtonHeader + constants$4.gapButton - dims.openWidth;
  }

  var posOpts = {
    x: dims.lx + x0 + menuOpts.pad.l,
    y: dims.ly + y0 + menuOpts.pad.t,
    yPad: constants$4.gapButton,
    xPad: constants$4.gapButton,
    index: 0
  };
  var scrollBoxPosition = {
    l: posOpts.x + menuOpts.borderwidth,
    t: posOpts.y + menuOpts.borderwidth
  };
  buttons.each(function (buttonOpts, buttonIndex) {
    var button = d3.select(this);
    button.call(drawItem, menuOpts, buttonOpts, gd).call(setItemPosition, menuOpts, posOpts);
    button.on('click', function () {
      // skip `dragend` events
      if (d3.event.defaultPrevented) return;

      if (buttonOpts.execute) {
        if (buttonOpts.args2 && menuOpts.active === buttonIndex) {
          setActive$1(gd, menuOpts, buttonOpts, gHeader, gButton, scrollBox, -1);
          plots_1.executeAPICommand(gd, buttonOpts.method, buttonOpts.args2);
        } else {
          setActive$1(gd, menuOpts, buttonOpts, gHeader, gButton, scrollBox, buttonIndex);
          plots_1.executeAPICommand(gd, buttonOpts.method, buttonOpts.args);
        }
      }

      gd.emit('plotly_buttonclicked', {
        menu: menuOpts,
        button: buttonOpts,
        active: menuOpts.active
      });
    });
    button.on('mouseover', function () {
      button.call(styleOnMouseOver);
    });
    button.on('mouseout', function () {
      button.call(styleOnMouseOut, menuOpts);
      buttons.call(styleButtons, menuOpts);
    });
  });
  buttons.call(styleButtons, menuOpts);

  if (isVertical) {
    scrollBoxPosition.w = Math.max(dims.openWidth, dims.headerWidth);
    scrollBoxPosition.h = posOpts.y - scrollBoxPosition.t;
  } else {
    scrollBoxPosition.w = posOpts.x - scrollBoxPosition.l;
    scrollBoxPosition.h = Math.max(dims.openHeight, dims.headerHeight);
  }

  scrollBoxPosition.direction = menuOpts.direction;

  if (scrollBox) {
    if (buttons.size()) {
      drawScrollBox(gd, gHeader, gButton, scrollBox, menuOpts, scrollBoxPosition);
    } else {
      hideScrollBox(scrollBox);
    }
  }
}

function drawScrollBox(gd, gHeader, gButton, scrollBox, menuOpts, position) {
  // enable the scrollbox
  var direction = menuOpts.direction;
  var isVertical = direction === 'up' || direction === 'down';
  var dims = menuOpts._dims;
  var active = menuOpts.active;
  var translateX, translateY;
  var i;

  if (isVertical) {
    translateY = 0;

    for (i = 0; i < active; i++) {
      translateY += dims.heights[i] + constants$4.gapButton;
    }
  } else {
    translateX = 0;

    for (i = 0; i < active; i++) {
      translateX += dims.widths[i] + constants$4.gapButton;
    }
  }

  scrollBox.enable(position, translateX, translateY);

  if (scrollBox.hbar) {
    scrollBox.hbar.attr('opacity', '0').transition().attr('opacity', '1');
  }

  if (scrollBox.vbar) {
    scrollBox.vbar.attr('opacity', '0').transition().attr('opacity', '1');
  }
}

function hideScrollBox(scrollBox) {
  var hasHBar = !!scrollBox.hbar;
  var hasVBar = !!scrollBox.vbar;

  if (hasHBar) {
    scrollBox.hbar.transition().attr('opacity', '0').each('end', function () {
      hasHBar = false;
      if (!hasVBar) scrollBox.disable();
    });
  }

  if (hasVBar) {
    scrollBox.vbar.transition().attr('opacity', '0').each('end', function () {
      hasVBar = false;
      if (!hasHBar) scrollBox.disable();
    });
  }
}

function drawItem(item, menuOpts, itemOpts, gd) {
  item.call(drawItemRect, menuOpts).call(drawItemText, menuOpts, itemOpts, gd);
}

function drawItemRect(item, menuOpts) {
  var rect = lib_1.ensureSingle(item, 'rect', constants$4.itemRectClassName, function (s) {
    s.attr({
      rx: constants$4.rx,
      ry: constants$4.ry,
      'shape-rendering': 'crispEdges'
    });
  });
  rect.call(color_1.stroke, menuOpts.bordercolor).call(color_1.fill, menuOpts.bgcolor).style('stroke-width', menuOpts.borderwidth + 'px');
}

function drawItemText(item, menuOpts, itemOpts, gd) {
  var text = lib_1.ensureSingle(item, 'text', constants$4.itemTextClassName, function (s) {
    s.attr({
      'text-anchor': 'start',
      'data-notex': 1
    });
  });
  var tx = itemOpts.label;
  var _meta = gd._fullLayout._meta;
  if (_meta) tx = lib_1.templateString(tx, _meta);
  text.call(drawing_1.font, menuOpts.font).text(tx).call(svg_text_utils.convertToTspans, gd);
}

function styleButtons(buttons, menuOpts) {
  var active = menuOpts.active;
  buttons.each(function (buttonOpts, i) {
    var button = d3.select(this);

    if (i === active && menuOpts.showactive) {
      button.select('rect.' + constants$4.itemRectClassName).call(color_1.fill, constants$4.activeColor);
    }
  });
}

function styleOnMouseOver(item) {
  item.select('rect.' + constants$4.itemRectClassName).call(color_1.fill, constants$4.hoverColor);
}

function styleOnMouseOut(item, menuOpts) {
  item.select('rect.' + constants$4.itemRectClassName).call(color_1.fill, menuOpts.bgcolor);
} // find item dimensions (this mutates menuOpts)


function findDimensions$1(gd, menuOpts) {
  var dims = menuOpts._dims = {
    width1: 0,
    height1: 0,
    heights: [],
    widths: [],
    totalWidth: 0,
    totalHeight: 0,
    openWidth: 0,
    openHeight: 0,
    lx: 0,
    ly: 0
  };
  var fakeButtons = drawing_1.tester.selectAll('g.' + constants$4.dropdownButtonClassName).data(lib_1.filterVisible(menuOpts.buttons));
  fakeButtons.enter().append('g').classed(constants$4.dropdownButtonClassName, true);
  var isVertical = ['up', 'down'].indexOf(menuOpts.direction) !== -1; // loop over fake buttons to find width / height

  fakeButtons.each(function (buttonOpts, i) {
    var button = d3.select(this);
    button.call(drawItem, menuOpts, buttonOpts, gd);
    var text = button.select('.' + constants$4.itemTextClassName); // width is given by max width of all buttons

    var tWidth = text.node() && drawing_1.bBox(text.node()).width;
    var wEff = Math.max(tWidth + constants$4.textPadX, constants$4.minWidth); // height is determined by item text

    var tHeight = menuOpts.font.size * LINE_SPACING$4;
    var tLines = svg_text_utils.lineCount(text);
    var hEff = Math.max(tHeight * tLines, constants$4.minHeight) + constants$4.textOffsetY;
    hEff = Math.ceil(hEff);
    wEff = Math.ceil(wEff); // Store per-item sizes since a row of horizontal buttons, for example,
    // don't all need to be the same width:

    dims.widths[i] = wEff;
    dims.heights[i] = hEff; // Height and width of individual element:

    dims.height1 = Math.max(dims.height1, hEff);
    dims.width1 = Math.max(dims.width1, wEff);

    if (isVertical) {
      dims.totalWidth = Math.max(dims.totalWidth, wEff);
      dims.openWidth = dims.totalWidth;
      dims.totalHeight += hEff + constants$4.gapButton;
      dims.openHeight += hEff + constants$4.gapButton;
    } else {
      dims.totalWidth += wEff + constants$4.gapButton;
      dims.openWidth += wEff + constants$4.gapButton;
      dims.totalHeight = Math.max(dims.totalHeight, hEff);
      dims.openHeight = dims.totalHeight;
    }
  });

  if (isVertical) {
    dims.totalHeight -= constants$4.gapButton;
  } else {
    dims.totalWidth -= constants$4.gapButton;
  }

  dims.headerWidth = dims.width1 + constants$4.arrowPadX;
  dims.headerHeight = dims.height1;

  if (menuOpts.type === 'dropdown') {
    if (isVertical) {
      dims.width1 += constants$4.arrowPadX;
      dims.totalHeight = dims.height1;
    } else {
      dims.totalWidth = dims.width1;
    }

    dims.totalWidth += constants$4.arrowPadX;
  }

  fakeButtons.remove();
  var paddedWidth = dims.totalWidth + menuOpts.pad.l + menuOpts.pad.r;
  var paddedHeight = dims.totalHeight + menuOpts.pad.t + menuOpts.pad.b;
  var graphSize = gd._fullLayout._size;
  dims.lx = graphSize.l + graphSize.w * menuOpts.x;
  dims.ly = graphSize.t + graphSize.h * (1 - menuOpts.y);
  var xanchor = 'left';

  if (lib_1.isRightAnchor(menuOpts)) {
    dims.lx -= paddedWidth;
    xanchor = 'right';
  }

  if (lib_1.isCenterAnchor(menuOpts)) {
    dims.lx -= paddedWidth / 2;
    xanchor = 'center';
  }

  var yanchor = 'top';

  if (lib_1.isBottomAnchor(menuOpts)) {
    dims.ly -= paddedHeight;
    yanchor = 'bottom';
  }

  if (lib_1.isMiddleAnchor(menuOpts)) {
    dims.ly -= paddedHeight / 2;
    yanchor = 'middle';
  }

  dims.totalWidth = Math.ceil(dims.totalWidth);
  dims.totalHeight = Math.ceil(dims.totalHeight);
  dims.lx = Math.round(dims.lx);
  dims.ly = Math.round(dims.ly);
  plots_1.autoMargin(gd, autoMarginId$1(menuOpts), {
    x: menuOpts.x,
    y: menuOpts.y,
    l: paddedWidth * ({
      right: 1,
      center: 0.5
    }[xanchor] || 0),
    r: paddedWidth * ({
      left: 1,
      center: 0.5
    }[xanchor] || 0),
    b: paddedHeight * ({
      top: 1,
      middle: 0.5
    }[yanchor] || 0),
    t: paddedHeight * ({
      bottom: 1,
      middle: 0.5
    }[yanchor] || 0)
  });
}

function autoMarginId$1(menuOpts) {
  return constants$4.autoMarginIdRoot + menuOpts._index;
} // set item positions (mutates posOpts)


function setItemPosition(item, menuOpts, posOpts, overrideOpts) {
  overrideOpts = overrideOpts || {};
  var rect = item.select('.' + constants$4.itemRectClassName);
  var text = item.select('.' + constants$4.itemTextClassName);
  var borderWidth = menuOpts.borderwidth;
  var index = posOpts.index;
  var dims = menuOpts._dims;
  drawing_1.setTranslate(item, borderWidth + posOpts.x, borderWidth + posOpts.y);
  var isVertical = ['up', 'down'].indexOf(menuOpts.direction) !== -1;
  var finalHeight = overrideOpts.height || (isVertical ? dims.heights[index] : dims.height1);
  rect.attr({
    x: 0,
    y: 0,
    width: overrideOpts.width || (isVertical ? dims.width1 : dims.widths[index]),
    height: finalHeight
  });
  var tHeight = menuOpts.font.size * LINE_SPACING$4;
  var tLines = svg_text_utils.lineCount(text);
  var spanOffset = (tLines - 1) * tHeight / 2;
  svg_text_utils.positionText(text, constants$4.textOffsetX, finalHeight / 2 - spanOffset + constants$4.textOffsetY);

  if (isVertical) {
    posOpts.y += dims.heights[index] + posOpts.yPad;
  } else {
    posOpts.x += dims.widths[index] + posOpts.xPad;
  }

  posOpts.index++;
}

function removeAllButtons(gButton, newMenuIndexAttr) {
  gButton.attr(constants$4.menuIndexAttrName, newMenuIndexAttr || '-1').selectAll('g.' + constants$4.dropdownButtonClassName).remove();
}

var updatemenus = {
  moduleType: 'component',
  name: constants$4.name,
  layoutAttributes: attributes$5,
  supplyLayoutDefaults: defaults$5,
  draw: draw$4
};

var constants$3 = {
  // layout attribute name
  name: 'sliders',
  // class names
  containerClassName: 'slider-container',
  groupClassName: 'slider-group',
  inputAreaClass: 'slider-input-area',
  railRectClass: 'slider-rail-rect',
  railTouchRectClass: 'slider-rail-touch-rect',
  gripRectClass: 'slider-grip-rect',
  tickRectClass: 'slider-tick-rect',
  inputProxyClass: 'slider-input-proxy',
  labelsClass: 'slider-labels',
  labelGroupClass: 'slider-label-group',
  labelClass: 'slider-label',
  currentValueClass: 'slider-current-value',
  railHeight: 5,
  // DOM attribute name in button group keeping track
  // of active update menu
  menuIndexAttrName: 'slider-active-index',
  // id root pass to Plots.autoMargin
  autoMarginIdRoot: 'slider-',
  // min item width / height
  minWidth: 30,
  minHeight: 30,
  // padding around item text
  textPadX: 40,
  // arrow offset off right edge
  arrowOffsetX: 4,
  railRadius: 2,
  railWidth: 5,
  railBorder: 4,
  railBorderWidth: 1,
  railBorderColor: '#bec8d9',
  railBgColor: '#f8fafc',
  // The distance of the rail from the edge of the touchable area
  // Slightly less than the step inset because of the curved edges
  // of the rail
  railInset: 8,
  // The distance from the extremal tick marks to the edge of the
  // touchable area. This is basically the same as the grip radius,
  // but for other styles it wouldn't really need to be.
  stepInset: 10,
  gripRadius: 10,
  gripWidth: 20,
  gripHeight: 20,
  gripBorder: 20,
  gripBorderWidth: 1,
  gripBorderColor: '#bec8d9',
  gripBgColor: '#f6f8fa',
  gripBgActiveColor: '#dbdde0',
  labelPadding: 8,
  labelOffset: 0,
  tickWidth: 1,
  tickColor: '#333',
  tickOffset: 25,
  tickLength: 7,
  minorTickOffset: 25,
  minorTickColor: '#333',
  minorTickLength: 4,
  // Extra space below the current value label:
  currentValuePadding: 8,
  currentValueInset: 0
};

var extendDeepAll = extend.extendDeepAll;
var overrideAll$1 = edit_types.overrideAll;
var templatedArray$1 = plot_template.templatedArray;
var stepsAttrs = templatedArray$1('step', {
  visible: {
    valType: 'boolean',
    dflt: true,
    description: ['Determines whether or not this step is included in the slider.'].join(' ')
  },
  method: {
    valType: 'enumerated',
    values: ['restyle', 'relayout', 'animate', 'update', 'skip'],
    dflt: 'restyle',
    description: ['Sets the Plotly method to be called when the slider value is changed.', 'If the `skip` method is used, the API slider will function as normal', 'but will perform no API calls and will not bind automatically to state', 'updates. This may be used to create a component interface and attach to', 'slider events manually via JavaScript.'].join(' ')
  },
  args: {
    valType: 'info_array',
    freeLength: true,
    items: [{
      valType: 'any'
    }, {
      valType: 'any'
    }, {
      valType: 'any'
    }],
    description: ['Sets the arguments values to be passed to the Plotly', 'method set in `method` on slide.'].join(' ')
  },
  label: {
    valType: 'string',
    description: 'Sets the text label to appear on the slider'
  },
  value: {
    valType: 'string',
    description: ['Sets the value of the slider step, used to refer to the step programatically.', 'Defaults to the slider label if not provided.'].join(' ')
  },
  execute: {
    valType: 'boolean',
    dflt: true,
    description: ['When true, the API method is executed. When false, all other behaviors are the same', 'and command execution is skipped. This may be useful when hooking into, for example,', 'the `plotly_sliderchange` method and executing the API command manually without losing', 'the benefit of the slider automatically binding to the state of the plot through the', 'specification of `method` and `args`.'].join(' ')
  }
});
var attributes$4 = overrideAll$1(templatedArray$1('slider', {
  visible: {
    valType: 'boolean',
    dflt: true,
    description: ['Determines whether or not the slider is visible.'].join(' ')
  },
  active: {
    valType: 'number',
    min: 0,
    dflt: 0,
    description: ['Determines which button (by index starting from 0) is', 'considered active.'].join(' ')
  },
  steps: stepsAttrs,
  lenmode: {
    valType: 'enumerated',
    values: ['fraction', 'pixels'],
    dflt: 'fraction',
    description: ['Determines whether this slider length', 'is set in units of plot *fraction* or in *pixels.', 'Use `len` to set the value.'].join(' ')
  },
  len: {
    valType: 'number',
    min: 0,
    dflt: 1,
    description: ['Sets the length of the slider', 'This measure excludes the padding of both ends.', 'That is, the slider\'s length is this length minus the', 'padding on both ends.'].join(' ')
  },
  x: {
    valType: 'number',
    min: -2,
    max: 3,
    dflt: 0,
    description: 'Sets the x position (in normalized coordinates) of the slider.'
  },
  pad: extendDeepAll(pad_attributes({
    editType: 'arraydraw'
  }), {
    description: 'Set the padding of the slider component along each side.'
  }, {
    t: {
      dflt: 20
    }
  }),
  xanchor: {
    valType: 'enumerated',
    values: ['auto', 'left', 'center', 'right'],
    dflt: 'left',
    description: ['Sets the slider\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the range selector.'].join(' ')
  },
  y: {
    valType: 'number',
    min: -2,
    max: 3,
    dflt: 0,
    description: 'Sets the y position (in normalized coordinates) of the slider.'
  },
  yanchor: {
    valType: 'enumerated',
    values: ['auto', 'top', 'middle', 'bottom'],
    dflt: 'top',
    description: ['Sets the slider\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the range selector.'].join(' ')
  },
  transition: {
    duration: {
      valType: 'number',
      min: 0,
      dflt: 150,
      description: 'Sets the duration of the slider transition'
    },
    easing: {
      valType: 'enumerated',
      values: animation_attributes.transition.easing.values,
      dflt: 'cubic-in-out',
      description: 'Sets the easing function of the slider transition'
    }
  },
  currentvalue: {
    visible: {
      valType: 'boolean',
      dflt: true,
      description: ['Shows the currently-selected value above the slider.'].join(' ')
    },
    xanchor: {
      valType: 'enumerated',
      values: ['left', 'center', 'right'],
      dflt: 'left',
      description: ['The alignment of the value readout relative to the length of the slider.'].join(' ')
    },
    offset: {
      valType: 'number',
      dflt: 10,
      description: ['The amount of space, in pixels, between the current value label', 'and the slider.'].join(' ')
    },
    prefix: {
      valType: 'string',
      description: 'When currentvalue.visible is true, this sets the prefix of the label.'
    },
    suffix: {
      valType: 'string',
      description: 'When currentvalue.visible is true, this sets the suffix of the label.'
    },
    font: font_attributes({
      description: 'Sets the font of the current value label text.'
    })
  },
  font: font_attributes({
    description: 'Sets the font of the slider step labels.'
  }),
  activebgcolor: {
    valType: 'color',
    dflt: constants$3.gripBgActiveColor,
    description: ['Sets the background color of the slider grip', 'while dragging.'].join(' ')
  },
  bgcolor: {
    valType: 'color',
    dflt: constants$3.railBgColor,
    description: 'Sets the background color of the slider.'
  },
  bordercolor: {
    valType: 'color',
    dflt: constants$3.railBorderColor,
    description: 'Sets the color of the border enclosing the slider.'
  },
  borderwidth: {
    valType: 'number',
    min: 0,
    dflt: constants$3.railBorderWidth,
    description: 'Sets the width (in px) of the border enclosing the slider.'
  },
  ticklen: {
    valType: 'number',
    min: 0,
    dflt: constants$3.tickLength,
    description: 'Sets the length in pixels of step tick marks'
  },
  tickcolor: {
    valType: 'color',
    dflt: constants$3.tickColor,
    description: 'Sets the color of the border enclosing the slider.'
  },
  tickwidth: {
    valType: 'number',
    min: 0,
    dflt: 1,
    description: 'Sets the tick width (in px).'
  },
  minorticklen: {
    valType: 'number',
    min: 0,
    dflt: constants$3.minorTickLength,
    description: 'Sets the length in pixels of minor step tick marks'
  }
}), 'arraydraw', 'from-root');

var name$1 = constants$3.name;
var stepAttrs = attributes$4.steps;

var defaults$4 = function slidersDefaults(layoutIn, layoutOut) {
  array_container_defaults(layoutIn, layoutOut, {
    name: name$1,
    handleItemDefaults: sliderDefaults
  });
};

function sliderDefaults(sliderIn, sliderOut, layoutOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(sliderIn, sliderOut, attributes$4, attr, dflt);
  }

  var steps = array_container_defaults(sliderIn, sliderOut, {
    name: 'steps',
    handleItemDefaults: stepDefaults
  });
  var stepCount = 0;

  for (var i = 0; i < steps.length; i++) {
    if (steps[i].visible) stepCount++;
  }

  var visible; // If it has fewer than two options, it's not really a slider

  if (stepCount < 2) visible = sliderOut.visible = false;else visible = coerce('visible');
  if (!visible) return;
  sliderOut._stepCount = stepCount;
  var visSteps = sliderOut._visibleSteps = lib_1.filterVisible(steps);
  var active = coerce('active');
  if (!(steps[active] || {}).visible) sliderOut.active = visSteps[0]._index;
  coerce('x');
  coerce('y');
  lib_1.noneOrAll(sliderIn, sliderOut, ['x', 'y']);
  coerce('xanchor');
  coerce('yanchor');
  coerce('len');
  coerce('lenmode');
  coerce('pad.t');
  coerce('pad.r');
  coerce('pad.b');
  coerce('pad.l');
  lib_1.coerceFont(coerce, 'font', layoutOut.font);
  var currentValueIsVisible = coerce('currentvalue.visible');

  if (currentValueIsVisible) {
    coerce('currentvalue.xanchor');
    coerce('currentvalue.prefix');
    coerce('currentvalue.suffix');
    coerce('currentvalue.offset');
    lib_1.coerceFont(coerce, 'currentvalue.font', sliderOut.font);
  }

  coerce('transition.duration');
  coerce('transition.easing');
  coerce('bgcolor');
  coerce('activebgcolor');
  coerce('bordercolor');
  coerce('borderwidth');
  coerce('ticklen');
  coerce('tickwidth');
  coerce('tickcolor');
  coerce('minorticklen');
}

function stepDefaults(valueIn, valueOut) {
  function coerce(attr, dflt) {
    return lib_1.coerce(valueIn, valueOut, stepAttrs, attr, dflt);
  }

  var visible;

  if (valueIn.method !== 'skip' && !Array.isArray(valueIn.args)) {
    visible = valueOut.visible = false;
  } else visible = coerce('visible');

  if (visible) {
    coerce('method');
    coerce('args');
    var label = coerce('label', 'step-' + valueOut._index);
    coerce('value', label);
    coerce('execute');
  }
}

var strTranslate$3 = lib_1.strTranslate;
var arrayEditor = plot_template.arrayEditor;
var LINE_SPACING$3 = alignment.LINE_SPACING;
var FROM_TL$2 = alignment.FROM_TL;
var FROM_BR$2 = alignment.FROM_BR;

var draw$3 = function draw(gd) {
  var fullLayout = gd._fullLayout;
  var sliderData = makeSliderData(fullLayout, gd); // draw a container for *all* sliders:

  var sliders = fullLayout._infolayer.selectAll('g.' + constants$3.containerClassName).data(sliderData.length > 0 ? [0] : []);

  sliders.enter().append('g').classed(constants$3.containerClassName, true).style('cursor', 'ew-resize');

  function clearSlider(sliderOpts) {
    if (sliderOpts._commandObserver) {
      sliderOpts._commandObserver.remove();

      delete sliderOpts._commandObserver;
    } // Most components don't need to explicitly remove autoMargin, because
    // marginPushers does this - but slider updates don't go through
    // a full replot so we need to explicitly remove it.


    plots_1.autoMargin(gd, autoMarginId(sliderOpts));
  }

  sliders.exit().each(function () {
    d3.select(this).selectAll('g.' + constants$3.groupClassName).each(clearSlider);
  }).remove(); // Return early if no menus visible:

  if (sliderData.length === 0) return;
  var sliderGroups = sliders.selectAll('g.' + constants$3.groupClassName).data(sliderData, keyFunction);
  sliderGroups.enter().append('g').classed(constants$3.groupClassName, true);
  sliderGroups.exit().each(clearSlider).remove(); // Find the dimensions of the sliders:

  for (var i = 0; i < sliderData.length; i++) {
    var sliderOpts = sliderData[i];
    findDimensions(gd, sliderOpts);
  }

  sliderGroups.each(function (sliderOpts) {
    var gSlider = d3.select(this);
    computeLabelSteps(sliderOpts);
    plots_1.manageCommandObserver(gd, sliderOpts, sliderOpts._visibleSteps, function (data) {
      // NB: Same as below. This is *not* always the same as sliderOpts since
      // if a new set of steps comes in, the reference in this callback would
      // be invalid. We need to refetch it from the slider group, which is
      // the join data that creates this slider. So if this slider still exists,
      // the group should be valid, *to the best of my knowledge.* If not,
      // we'd have to look it up by d3 data join index/key.
      var opts = gSlider.data()[0];
      if (opts.active === data.index) return;
      if (opts._dragging) return;
      setActive(gd, gSlider, opts, data.index, false, true);
    });
    drawSlider(gd, d3.select(this), sliderOpts);
  });
};

function autoMarginId(sliderOpts) {
  return constants$3.autoMarginIdRoot + sliderOpts._index;
} // This really only just filters by visibility:


function makeSliderData(fullLayout, gd) {
  var contOpts = fullLayout[constants$3.name];
  var sliderData = [];

  for (var i = 0; i < contOpts.length; i++) {
    var item = contOpts[i];
    if (!item.visible) continue;
    item._gd = gd;
    sliderData.push(item);
  }

  return sliderData;
} // This is set in the defaults step:


function keyFunction(opts) {
  return opts._index;
} // Compute the dimensions (mutates sliderOpts):


function findDimensions(gd, sliderOpts) {
  var sliderLabels = drawing_1.tester.selectAll('g.' + constants$3.labelGroupClass).data(sliderOpts._visibleSteps);
  sliderLabels.enter().append('g').classed(constants$3.labelGroupClass, true); // loop over fake buttons to find width / height

  var maxLabelWidth = 0;
  var labelHeight = 0;
  sliderLabels.each(function (stepOpts) {
    var labelGroup = d3.select(this);
    var text = drawLabel(labelGroup, {
      step: stepOpts
    }, sliderOpts);
    var textNode = text.node();

    if (textNode) {
      var bBox = drawing_1.bBox(textNode);
      labelHeight = Math.max(labelHeight, bBox.height);
      maxLabelWidth = Math.max(maxLabelWidth, bBox.width);
    }
  });
  sliderLabels.remove();
  var dims = sliderOpts._dims = {};
  dims.inputAreaWidth = Math.max(constants$3.railWidth, constants$3.gripHeight); // calculate some overall dimensions - some of these are needed for
  // calculating the currentValue dimensions

  var graphSize = gd._fullLayout._size;
  dims.lx = graphSize.l + graphSize.w * sliderOpts.x;
  dims.ly = graphSize.t + graphSize.h * (1 - sliderOpts.y);

  if (sliderOpts.lenmode === 'fraction') {
    // fraction:
    dims.outerLength = Math.round(graphSize.w * sliderOpts.len);
  } else {
    // pixels:
    dims.outerLength = sliderOpts.len;
  } // The length of the rail, *excluding* padding on either end:


  dims.inputAreaStart = 0;
  dims.inputAreaLength = Math.round(dims.outerLength - sliderOpts.pad.l - sliderOpts.pad.r);
  var textableInputLength = dims.inputAreaLength - 2 * constants$3.stepInset;
  var availableSpacePerLabel = textableInputLength / (sliderOpts._stepCount - 1);
  var computedSpacePerLabel = maxLabelWidth + constants$3.labelPadding;
  dims.labelStride = Math.max(1, Math.ceil(computedSpacePerLabel / availableSpacePerLabel));
  dims.labelHeight = labelHeight; // loop over all possible values for currentValue to find the
  // area we need for it

  dims.currentValueMaxWidth = 0;
  dims.currentValueHeight = 0;
  dims.currentValueTotalHeight = 0;
  dims.currentValueMaxLines = 1;

  if (sliderOpts.currentvalue.visible) {
    // Get the dimensions of the current value label:
    var dummyGroup = drawing_1.tester.append('g');
    sliderLabels.each(function (stepOpts) {
      var curValPrefix = drawCurrentValue(dummyGroup, sliderOpts, stepOpts.label);
      var curValSize = curValPrefix.node() && drawing_1.bBox(curValPrefix.node()) || {
        width: 0,
        height: 0
      };
      var lines = svg_text_utils.lineCount(curValPrefix);
      dims.currentValueMaxWidth = Math.max(dims.currentValueMaxWidth, Math.ceil(curValSize.width));
      dims.currentValueHeight = Math.max(dims.currentValueHeight, Math.ceil(curValSize.height));
      dims.currentValueMaxLines = Math.max(dims.currentValueMaxLines, lines);
    });
    dims.currentValueTotalHeight = dims.currentValueHeight + sliderOpts.currentvalue.offset;
    dummyGroup.remove();
  }

  dims.height = dims.currentValueTotalHeight + constants$3.tickOffset + sliderOpts.ticklen + constants$3.labelOffset + dims.labelHeight + sliderOpts.pad.t + sliderOpts.pad.b;
  var xanchor = 'left';

  if (lib_1.isRightAnchor(sliderOpts)) {
    dims.lx -= dims.outerLength;
    xanchor = 'right';
  }

  if (lib_1.isCenterAnchor(sliderOpts)) {
    dims.lx -= dims.outerLength / 2;
    xanchor = 'center';
  }

  var yanchor = 'top';

  if (lib_1.isBottomAnchor(sliderOpts)) {
    dims.ly -= dims.height;
    yanchor = 'bottom';
  }

  if (lib_1.isMiddleAnchor(sliderOpts)) {
    dims.ly -= dims.height / 2;
    yanchor = 'middle';
  }

  dims.outerLength = Math.ceil(dims.outerLength);
  dims.height = Math.ceil(dims.height);
  dims.lx = Math.round(dims.lx);
  dims.ly = Math.round(dims.ly);
  var marginOpts = {
    y: sliderOpts.y,
    b: dims.height * FROM_BR$2[yanchor],
    t: dims.height * FROM_TL$2[yanchor]
  };

  if (sliderOpts.lenmode === 'fraction') {
    marginOpts.l = 0;
    marginOpts.xl = sliderOpts.x - sliderOpts.len * FROM_TL$2[xanchor];
    marginOpts.r = 0;
    marginOpts.xr = sliderOpts.x + sliderOpts.len * FROM_BR$2[xanchor];
  } else {
    marginOpts.x = sliderOpts.x;
    marginOpts.l = dims.outerLength * FROM_TL$2[xanchor];
    marginOpts.r = dims.outerLength * FROM_BR$2[xanchor];
  }

  plots_1.autoMargin(gd, autoMarginId(sliderOpts), marginOpts);
}

function drawSlider(gd, sliderGroup, sliderOpts) {
  // This is related to the other long notes in this file regarding what happens
  // when slider steps disappear. This particular fix handles what happens when
  // the *current* slider step is removed. The drawing functions will error out
  // when they fail to find it, so the fix for now is that it will just draw the
  // slider in the first position but will not execute the command.
  if (!(sliderOpts.steps[sliderOpts.active] || {}).visible) {
    sliderOpts.active = sliderOpts._visibleSteps[0]._index;
  } // These are carefully ordered for proper z-ordering:


  sliderGroup.call(drawCurrentValue, sliderOpts).call(drawRail, sliderOpts).call(drawLabelGroup, sliderOpts).call(drawTicks, sliderOpts).call(drawTouchRect, gd, sliderOpts).call(drawGrip, gd, sliderOpts);
  var dims = sliderOpts._dims; // Position the rectangle:

  drawing_1.setTranslate(sliderGroup, dims.lx + sliderOpts.pad.l, dims.ly + sliderOpts.pad.t);
  sliderGroup.call(setGripPosition, sliderOpts, false);
  sliderGroup.call(drawCurrentValue, sliderOpts);
}

function drawCurrentValue(sliderGroup, sliderOpts, valueOverride) {
  if (!sliderOpts.currentvalue.visible) return;
  var dims = sliderOpts._dims;
  var x0, textAnchor;

  switch (sliderOpts.currentvalue.xanchor) {
    case 'right':
      // This is anchored left and adjusted by the width of the longest label
      // so that the prefix doesn't move. The goal of this is to emphasize
      // what's actually changing and make the update less distracting.
      x0 = dims.inputAreaLength - constants$3.currentValueInset - dims.currentValueMaxWidth;
      textAnchor = 'left';
      break;

    case 'center':
      x0 = dims.inputAreaLength * 0.5;
      textAnchor = 'middle';
      break;

    default:
      x0 = constants$3.currentValueInset;
      textAnchor = 'left';
  }

  var text = lib_1.ensureSingle(sliderGroup, 'text', constants$3.labelClass, function (s) {
    s.attr({
      'text-anchor': textAnchor,
      'data-notex': 1
    });
  });
  var str = sliderOpts.currentvalue.prefix ? sliderOpts.currentvalue.prefix : '';

  if (typeof valueOverride === 'string') {
    str += valueOverride;
  } else {
    var curVal = sliderOpts.steps[sliderOpts.active].label;
    var _meta = sliderOpts._gd._fullLayout._meta;
    if (_meta) curVal = lib_1.templateString(curVal, _meta);
    str += curVal;
  }

  if (sliderOpts.currentvalue.suffix) {
    str += sliderOpts.currentvalue.suffix;
  }

  text.call(drawing_1.font, sliderOpts.currentvalue.font).text(str).call(svg_text_utils.convertToTspans, sliderOpts._gd);
  var lines = svg_text_utils.lineCount(text);
  var y0 = (dims.currentValueMaxLines + 1 - lines) * sliderOpts.currentvalue.font.size * LINE_SPACING$3;
  svg_text_utils.positionText(text, x0, y0);
  return text;
}

function drawGrip(sliderGroup, gd, sliderOpts) {
  var grip = lib_1.ensureSingle(sliderGroup, 'rect', constants$3.gripRectClass, function (s) {
    s.call(attachGripEvents, gd, sliderGroup, sliderOpts).style('pointer-events', 'all');
  });
  grip.attr({
    width: constants$3.gripWidth,
    height: constants$3.gripHeight,
    rx: constants$3.gripRadius,
    ry: constants$3.gripRadius
  }).call(color_1.stroke, sliderOpts.bordercolor).call(color_1.fill, sliderOpts.bgcolor).style('stroke-width', sliderOpts.borderwidth + 'px');
}

function drawLabel(item, data, sliderOpts) {
  var text = lib_1.ensureSingle(item, 'text', constants$3.labelClass, function (s) {
    s.attr({
      'text-anchor': 'middle',
      'data-notex': 1
    });
  });
  var tx = data.step.label;
  var _meta = sliderOpts._gd._fullLayout._meta;
  if (_meta) tx = lib_1.templateString(tx, _meta);
  text.call(drawing_1.font, sliderOpts.font).text(tx).call(svg_text_utils.convertToTspans, sliderOpts._gd);
  return text;
}

function drawLabelGroup(sliderGroup, sliderOpts) {
  var labels = lib_1.ensureSingle(sliderGroup, 'g', constants$3.labelsClass);
  var dims = sliderOpts._dims;
  var labelItems = labels.selectAll('g.' + constants$3.labelGroupClass).data(dims.labelSteps);
  labelItems.enter().append('g').classed(constants$3.labelGroupClass, true);
  labelItems.exit().remove();
  labelItems.each(function (d) {
    var item = d3.select(this);
    item.call(drawLabel, d, sliderOpts);
    drawing_1.setTranslate(item, normalizedValueToPosition(sliderOpts, d.fraction), constants$3.tickOffset + sliderOpts.ticklen + // position is the baseline of the top line of text only, even
    // if the label spans multiple lines
    sliderOpts.font.size * LINE_SPACING$3 + constants$3.labelOffset + dims.currentValueTotalHeight);
  });
}

function handleInput(gd, sliderGroup, sliderOpts, normalizedPosition, doTransition) {
  var quantizedPosition = Math.round(normalizedPosition * (sliderOpts._stepCount - 1));
  var quantizedIndex = sliderOpts._visibleSteps[quantizedPosition]._index;

  if (quantizedIndex !== sliderOpts.active) {
    setActive(gd, sliderGroup, sliderOpts, quantizedIndex, true, doTransition);
  }
}

function setActive(gd, sliderGroup, sliderOpts, index, doCallback, doTransition) {
  var previousActive = sliderOpts.active;
  sliderOpts.active = index; // due to templating, it's possible this slider doesn't even exist yet

  arrayEditor(gd.layout, constants$3.name, sliderOpts).applyUpdate('active', index);
  var step = sliderOpts.steps[sliderOpts.active];
  sliderGroup.call(setGripPosition, sliderOpts, doTransition);
  sliderGroup.call(drawCurrentValue, sliderOpts);
  gd.emit('plotly_sliderchange', {
    slider: sliderOpts,
    step: sliderOpts.steps[sliderOpts.active],
    interaction: doCallback,
    previousActive: previousActive
  });

  if (step && step.method && doCallback) {
    if (sliderGroup._nextMethod) {
      // If we've already queued up an update, just overwrite it with the most recent:
      sliderGroup._nextMethod.step = step;
      sliderGroup._nextMethod.doCallback = doCallback;
      sliderGroup._nextMethod.doTransition = doTransition;
    } else {
      sliderGroup._nextMethod = {
        step: step,
        doCallback: doCallback,
        doTransition: doTransition
      };
      sliderGroup._nextMethodRaf = window.requestAnimationFrame(function () {
        var _step = sliderGroup._nextMethod.step;
        if (!_step.method) return;

        if (_step.execute) {
          plots_1.executeAPICommand(gd, _step.method, _step.args);
        }

        sliderGroup._nextMethod = null;
        sliderGroup._nextMethodRaf = null;
      });
    }
  }
}

function attachGripEvents(item, gd, sliderGroup) {
  var node = sliderGroup.node();
  var $gd = d3.select(gd); // NB: This is *not* the same as sliderOpts itself! These callbacks
  // are in a closure so this array won't actually be correct if the
  // steps have changed since this was initialized. The sliderGroup,
  // however, has not changed since that *is* the slider, so it must
  // be present to receive mouse events.

  function getSliderOpts() {
    return sliderGroup.data()[0];
  }

  function mouseDownHandler() {
    var sliderOpts = getSliderOpts();
    gd.emit('plotly_sliderstart', {
      slider: sliderOpts
    });
    var grip = sliderGroup.select('.' + constants$3.gripRectClass);
    d3.event.stopPropagation();
    d3.event.preventDefault();
    grip.call(color_1.fill, sliderOpts.activebgcolor);
    var normalizedPosition = positionToNormalizedValue(sliderOpts, d3.mouse(node)[0]);
    handleInput(gd, sliderGroup, sliderOpts, normalizedPosition, true);
    sliderOpts._dragging = true;

    function mouseMoveHandler() {
      var sliderOpts = getSliderOpts();
      var normalizedPosition = positionToNormalizedValue(sliderOpts, d3.mouse(node)[0]);
      handleInput(gd, sliderGroup, sliderOpts, normalizedPosition, false);
    }

    $gd.on('mousemove', mouseMoveHandler);
    $gd.on('touchmove', mouseMoveHandler);

    function mouseUpHandler() {
      var sliderOpts = getSliderOpts();
      sliderOpts._dragging = false;
      grip.call(color_1.fill, sliderOpts.bgcolor);
      $gd.on('mouseup', null);
      $gd.on('mousemove', null);
      $gd.on('touchend', null);
      $gd.on('touchmove', null);
      gd.emit('plotly_sliderend', {
        slider: sliderOpts,
        step: sliderOpts.steps[sliderOpts.active]
      });
    }

    $gd.on('mouseup', mouseUpHandler);
    $gd.on('touchend', mouseUpHandler);
  }

  item.on('mousedown', mouseDownHandler);
  item.on('touchstart', mouseDownHandler);
}

function drawTicks(sliderGroup, sliderOpts) {
  var tick = sliderGroup.selectAll('rect.' + constants$3.tickRectClass).data(sliderOpts._visibleSteps);
  var dims = sliderOpts._dims;
  tick.enter().append('rect').classed(constants$3.tickRectClass, true);
  tick.exit().remove();
  tick.attr({
    width: sliderOpts.tickwidth + 'px',
    'shape-rendering': 'crispEdges'
  });
  tick.each(function (d, i) {
    var isMajor = i % dims.labelStride === 0;
    var item = d3.select(this);
    item.attr({
      height: isMajor ? sliderOpts.ticklen : sliderOpts.minorticklen
    }).call(color_1.fill, isMajor ? sliderOpts.tickcolor : sliderOpts.tickcolor);
    drawing_1.setTranslate(item, normalizedValueToPosition(sliderOpts, i / (sliderOpts._stepCount - 1)) - 0.5 * sliderOpts.tickwidth, (isMajor ? constants$3.tickOffset : constants$3.minorTickOffset) + dims.currentValueTotalHeight);
  });
}

function computeLabelSteps(sliderOpts) {
  var dims = sliderOpts._dims;
  dims.labelSteps = [];
  var nsteps = sliderOpts._stepCount;

  for (var i = 0; i < nsteps; i += dims.labelStride) {
    dims.labelSteps.push({
      fraction: i / (nsteps - 1),
      step: sliderOpts._visibleSteps[i]
    });
  }
}

function setGripPosition(sliderGroup, sliderOpts, doTransition) {
  var grip = sliderGroup.select('rect.' + constants$3.gripRectClass);
  var quantizedIndex = 0;

  for (var i = 0; i < sliderOpts._stepCount; i++) {
    if (sliderOpts._visibleSteps[i]._index === sliderOpts.active) {
      quantizedIndex = i;
      break;
    }
  }

  var x = normalizedValueToPosition(sliderOpts, quantizedIndex / (sliderOpts._stepCount - 1)); // If this is true, then *this component* is already invoking its own command
  // and has triggered its own animation.

  if (sliderOpts._invokingCommand) return;
  var el = grip;

  if (doTransition && sliderOpts.transition.duration > 0) {
    el = el.transition().duration(sliderOpts.transition.duration).ease(sliderOpts.transition.easing);
  } // Drawing.setTranslate doesn't work here because of the transition duck-typing.
  // It's also not necessary because there are no other transitions to preserve.


  el.attr('transform', strTranslate$3(x - constants$3.gripWidth * 0.5, sliderOpts._dims.currentValueTotalHeight));
} // Convert a number from [0-1] to a pixel position relative to the slider group container:


function normalizedValueToPosition(sliderOpts, normalizedPosition) {
  var dims = sliderOpts._dims;
  return dims.inputAreaStart + constants$3.stepInset + (dims.inputAreaLength - 2 * constants$3.stepInset) * Math.min(1, Math.max(0, normalizedPosition));
} // Convert a position relative to the slider group to a nubmer in [0, 1]


function positionToNormalizedValue(sliderOpts, position) {
  var dims = sliderOpts._dims;
  return Math.min(1, Math.max(0, (position - constants$3.stepInset - dims.inputAreaStart) / (dims.inputAreaLength - 2 * constants$3.stepInset - 2 * dims.inputAreaStart)));
}

function drawTouchRect(sliderGroup, gd, sliderOpts) {
  var dims = sliderOpts._dims;
  var rect = lib_1.ensureSingle(sliderGroup, 'rect', constants$3.railTouchRectClass, function (s) {
    s.call(attachGripEvents, gd, sliderGroup, sliderOpts).style('pointer-events', 'all');
  });
  rect.attr({
    width: dims.inputAreaLength,
    height: Math.max(dims.inputAreaWidth, constants$3.tickOffset + sliderOpts.ticklen + dims.labelHeight)
  }).call(color_1.fill, sliderOpts.bgcolor).attr('opacity', 0);
  drawing_1.setTranslate(rect, 0, dims.currentValueTotalHeight);
}

function drawRail(sliderGroup, sliderOpts) {
  var dims = sliderOpts._dims;
  var computedLength = dims.inputAreaLength - constants$3.railInset * 2;
  var rect = lib_1.ensureSingle(sliderGroup, 'rect', constants$3.railRectClass);
  rect.attr({
    width: computedLength,
    height: constants$3.railWidth,
    rx: constants$3.railRadius,
    ry: constants$3.railRadius,
    'shape-rendering': 'crispEdges'
  }).call(color_1.stroke, sliderOpts.bordercolor).call(color_1.fill, sliderOpts.bgcolor).style('stroke-width', sliderOpts.borderwidth + 'px');
  drawing_1.setTranslate(rect, constants$3.railInset, (dims.inputAreaWidth - constants$3.railWidth) * 0.5 + dims.currentValueTotalHeight);
}

var sliders = {
  moduleType: 'component',
  name: constants$3.name,
  layoutAttributes: attributes$4,
  supplyLayoutDefaults: defaults$4,
  draw: draw$3
};

var attributes$3 = {
  bgcolor: {
    valType: 'color',
    dflt: attributes$j.background,
    editType: 'plot',
    description: 'Sets the background color of the range slider.'
  },
  bordercolor: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'plot',
    description: 'Sets the border color of the range slider.'
  },
  borderwidth: {
    valType: 'integer',
    dflt: 0,
    min: 0,
    editType: 'plot',
    description: 'Sets the border width of the range slider.'
  },
  autorange: {
    valType: 'boolean',
    dflt: true,
    editType: 'calc',
    impliedEdits: {
      'range[0]': undefined,
      'range[1]': undefined
    },
    description: ['Determines whether or not the range slider range is', 'computed in relation to the input data.', 'If `range` is provided, then `autorange` is set to *false*.'].join(' ')
  },
  range: {
    valType: 'info_array',
    items: [{
      valType: 'any',
      editType: 'calc',
      impliedEdits: {
        '^autorange': false
      }
    }, {
      valType: 'any',
      editType: 'calc',
      impliedEdits: {
        '^autorange': false
      }
    }],
    editType: 'calc',
    impliedEdits: {
      'autorange': false
    },
    description: ['Sets the range of the range slider.', 'If not set, defaults to the full xaxis range.', 'If the axis `type` is *log*, then you must take the', 'log of your desired range.', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')
  },
  thickness: {
    valType: 'number',
    dflt: 0.15,
    min: 0,
    max: 1,
    editType: 'plot',
    description: ['The height of the range slider as a fraction of the', 'total plot area height.'].join(' ')
  },
  visible: {
    valType: 'boolean',
    dflt: true,
    editType: 'calc',
    description: ['Determines whether or not the range slider will be visible.', 'If visible, perpendicular axes will be set to `fixedrange`'].join(' ')
  },
  editType: 'calc'
};

var oppaxis_attributes = {
  // not really a 'subplot' attribute container,
  // but this is the flag we use to denote attributes that
  // support yaxis, yaxis2, yaxis3, ... counters
  _isSubplotObj: true,
  rangemode: {
    valType: 'enumerated',
    values: ['auto', 'fixed', 'match'],
    dflt: 'match',
    editType: 'calc',
    description: ['Determines whether or not the range of this axis in', 'the rangeslider use the same value than in the main plot', 'when zooming in/out.', 'If *auto*, the autorange will be used.', 'If *fixed*, the `range` is used.', 'If *match*, the current range of the corresponding y-axis on the main subplot is used.'].join(' ')
  },
  range: {
    valType: 'info_array',
    items: [{
      valType: 'any',
      editType: 'plot'
    }, {
      valType: 'any',
      editType: 'plot'
    }],
    editType: 'plot',
    description: ['Sets the range of this axis for the rangeslider.'].join(' ')
  },
  editType: 'calc'
};

var constants$2 = {
  // attribute container name
  name: 'rangeslider',
  // class names
  containerClassName: 'rangeslider-container',
  bgClassName: 'rangeslider-bg',
  rangePlotClassName: 'rangeslider-rangeplot',
  maskMinClassName: 'rangeslider-mask-min',
  maskMaxClassName: 'rangeslider-mask-max',
  slideBoxClassName: 'rangeslider-slidebox',
  grabberMinClassName: 'rangeslider-grabber-min',
  grabAreaMinClassName: 'rangeslider-grabarea-min',
  handleMinClassName: 'rangeslider-handle-min',
  grabberMaxClassName: 'rangeslider-grabber-max',
  grabAreaMaxClassName: 'rangeslider-grabarea-max',
  handleMaxClassName: 'rangeslider-handle-max',
  maskMinOppAxisClassName: 'rangeslider-mask-min-opp-axis',
  maskMaxOppAxisClassName: 'rangeslider-mask-max-opp-axis',
  // style constants
  maskColor: 'rgba(0,0,0,0.4)',
  maskOppAxisColor: 'rgba(0,0,0,0.2)',
  slideBoxFill: 'transparent',
  slideBoxCursor: 'ew-resize',
  grabAreaFill: 'transparent',
  grabAreaCursor: 'col-resize',
  grabAreaWidth: 10,
  handleWidth: 4,
  handleRadius: 1,
  handleStrokeWidth: 1,
  extraPad: 15
};

var LINE_SPACING$2 = alignment.LINE_SPACING;
var name = constants$2.name;

function isVisible(ax) {
  var rangeSlider = ax && ax[name];
  return rangeSlider && rangeSlider.visible;
}

var isVisible_1 = isVisible;

var makeData = function (fullLayout) {
  var axes = axis_ids.list({
    _fullLayout: fullLayout
  }, 'x', true);
  var margin = fullLayout.margin;
  var rangeSliderData = [];

  if (!fullLayout._has('gl2d')) {
    for (var i = 0; i < axes.length; i++) {
      var ax = axes[i];

      if (isVisible(ax)) {
        rangeSliderData.push(ax);
        var opts = ax[name];
        opts._id = name + ax._id;
        opts._height = (fullLayout.height - margin.b - margin.t) * opts.thickness;
        opts._offsetShift = Math.floor(opts.borderwidth / 2);
      }
    }
  }

  fullLayout._rangeSliderData = rangeSliderData;
};

var autoMarginOpts = function (gd, ax) {
  var fullLayout = gd._fullLayout;
  var opts = ax[name];

  var axLetter = ax._id.charAt(0);

  var bottomDepth = 0;
  var titleHeight = 0;

  if (ax.side === 'bottom') {
    bottomDepth = ax._depth;

    if (ax.title.text !== fullLayout._dfltTitle[axLetter]) {
      // as in rangeslider/draw.js
      titleHeight = 1.5 * ax.title.font.size + 10 + opts._offsetShift; // multi-line extra bump

      var extraLines = (ax.title.text.match(svg_text_utils.BR_TAG_ALL) || []).length;
      titleHeight += extraLines * ax.title.font.size * LINE_SPACING$2;
    }
  }

  return {
    x: 0,
    y: ax._counterDomainMin,
    l: 0,
    r: 0,
    t: 0,
    b: opts._height + bottomDepth + Math.max(fullLayout.margin.b, titleHeight),
    pad: constants$2.extraPad + opts._offsetShift * 2
  };
};

var helpers = {
  isVisible: isVisible_1,
  makeData: makeData,
  autoMarginOpts: autoMarginOpts
};

var defaults$3 = function handleDefaults(layoutIn, layoutOut, axName) {
  var axIn = layoutIn[axName];
  var axOut = layoutOut[axName];
  if (!(axIn.rangeslider || layoutOut._requestRangeslider[axOut._id])) return; // not super proud of this (maybe store _ in axis object instead

  if (!lib_1.isPlainObject(axIn.rangeslider)) {
    axIn.rangeslider = {};
  }

  var containerIn = axIn.rangeslider;
  var containerOut = plot_template.newContainer(axOut, 'rangeslider');

  function coerce(attr, dflt) {
    return lib_1.coerce(containerIn, containerOut, attributes$3, attr, dflt);
  }

  var rangeContainerIn, rangeContainerOut;

  function coerceRange(attr, dflt) {
    return lib_1.coerce(rangeContainerIn, rangeContainerOut, oppaxis_attributes, attr, dflt);
  }

  var visible = coerce('visible');
  if (!visible) return;
  coerce('bgcolor', layoutOut.plot_bgcolor);
  coerce('bordercolor');
  coerce('borderwidth');
  coerce('thickness');
  coerce('autorange', !axOut.isValidRange(containerIn.range));
  coerce('range');
  var subplots = layoutOut._subplots;

  if (subplots) {
    var yIds = subplots.cartesian.filter(function (subplotId) {
      return subplotId.substr(0, subplotId.indexOf('y')) === axis_ids.name2id(axName);
    }).map(function (subplotId) {
      return subplotId.substr(subplotId.indexOf('y'), subplotId.length);
    });
    var yNames = lib_1.simpleMap(yIds, axis_ids.id2name);

    for (var i = 0; i < yNames.length; i++) {
      var yName = yNames[i];
      rangeContainerIn = containerIn[yName] || {};
      rangeContainerOut = plot_template.newContainer(containerOut, yName, 'yaxis');
      var yAxOut = layoutOut[yName];
      var rangemodeDflt;

      if (rangeContainerIn.range && yAxOut.isValidRange(rangeContainerIn.range)) {
        rangemodeDflt = 'fixed';
      }

      var rangeMode = coerceRange('rangemode', rangemodeDflt);

      if (rangeMode !== 'match') {
        coerceRange('range', yAxOut.range.slice());
      }
    }
  } // to map back range slider (auto) range


  containerOut._input = containerIn;
};

var listAxes = axis_ids.list;
var getAutoRange = autorange.getAutoRange;

var calc_autorange = function calcAutorange(gd) {
  var axes = listAxes(gd, 'x', true); // Compute new slider range using axis autorange if necessary.
  //
  // Copy back range to input range slider container to skip
  // this step in subsequent draw calls.

  for (var i = 0; i < axes.length; i++) {
    var ax = axes[i];
    var opts = ax[constants$2.name];

    if (opts && opts.visible && opts.autorange) {
      opts._input.autorange = true;
      opts._input.range = opts.range = getAutoRange(gd, ax);
    }
  }
};

var strTranslate$2 = lib_1.strTranslate;

var draw$2 = function (gd) {
  var fullLayout = gd._fullLayout;
  var rangeSliderData = fullLayout._rangeSliderData;

  for (var i = 0; i < rangeSliderData.length; i++) {
    var opts = rangeSliderData[i][constants$2.name]; // fullLayout._uid may not exist when we call makeData

    opts._clipId = opts._id + '-' + fullLayout._uid;
  }
  /*
   * <g container />
   *  <rect bg />
   *  < .... range plot />
   *  <rect mask-min />
   *  <rect mask-max />
   *  <rect slidebox />
   *  <g grabber-min />
   *      <rect handle-min />
   *      <rect grabare-min />
   *  <g grabber-max />
   *      <rect handle-max />
   *      <rect grabare-max />
   *
   *  ...
   */


  function keyFunction(axisOpts) {
    return axisOpts._name;
  }

  var rangeSliders = fullLayout._infolayer.selectAll('g.' + constants$2.containerClassName).data(rangeSliderData, keyFunction); // remove exiting sliders and their corresponding clip paths


  rangeSliders.exit().each(function (axisOpts) {
    var opts = axisOpts[constants$2.name];

    fullLayout._topdefs.select('#' + opts._clipId).remove();
  }).remove(); // return early if no range slider is visible

  if (rangeSliderData.length === 0) return;
  rangeSliders.enter().append('g').classed(constants$2.containerClassName, true).attr('pointer-events', 'all'); // for all present range sliders

  rangeSliders.each(function (axisOpts) {
    var rangeSlider = d3.select(this);
    var opts = axisOpts[constants$2.name];
    var oppAxisOpts = fullLayout[axis_ids.id2name(axisOpts.anchor)];
    var oppAxisRangeOpts = opts[axis_ids.id2name(axisOpts.anchor)]; // update range
    // Expand slider range to the axis range

    if (opts.range) {
      var rng = lib_1.simpleMap(opts.range, axisOpts.r2l);
      var axRng = lib_1.simpleMap(axisOpts.range, axisOpts.r2l);
      var newRng;

      if (axRng[0] < axRng[1]) {
        newRng = [Math.min(rng[0], axRng[0]), Math.max(rng[1], axRng[1])];
      } else {
        newRng = [Math.max(rng[0], axRng[0]), Math.min(rng[1], axRng[1])];
      }

      opts.range = opts._input.range = lib_1.simpleMap(newRng, axisOpts.l2r);
    }

    axisOpts.cleanRange('rangeslider.range'); // update range slider dimensions

    var gs = fullLayout._size;
    var domain = axisOpts.domain;
    opts._width = gs.w * (domain[1] - domain[0]);
    var x = Math.round(gs.l + gs.w * domain[0]);
    var y = Math.round(gs.t + gs.h * (1 - axisOpts._counterDomainMin) + (axisOpts.side === 'bottom' ? axisOpts._depth : 0) + opts._offsetShift + constants$2.extraPad);
    rangeSlider.attr('transform', strTranslate$2(x, y)); // update data <--> pixel coordinate conversion methods

    opts._rl = lib_1.simpleMap(opts.range, axisOpts.r2l);
    var rl0 = opts._rl[0];
    var rl1 = opts._rl[1];
    var drl = rl1 - rl0;

    opts.p2d = function (v) {
      return v / opts._width * drl + rl0;
    };

    opts.d2p = function (v) {
      return (v - rl0) / drl * opts._width;
    };

    if (axisOpts.rangebreaks) {
      var rsBreaks = axisOpts.locateBreaks(rl0, rl1);

      if (rsBreaks.length) {
        var j, brk;
        var lBreaks = 0;

        for (j = 0; j < rsBreaks.length; j++) {
          brk = rsBreaks[j];
          lBreaks += brk.max - brk.min;
        } // TODO fix for reversed-range axes !!!
        // compute slope and piecewise offsets


        var m2 = opts._width / (rl1 - rl0 - lBreaks);
        var _B = [-m2 * rl0];

        for (j = 0; j < rsBreaks.length; j++) {
          brk = rsBreaks[j];

          _B.push(_B[_B.length - 1] - m2 * (brk.max - brk.min));
        }

        opts.d2p = function (v) {
          var b = _B[0];

          for (var j = 0; j < rsBreaks.length; j++) {
            var brk = rsBreaks[j];
            if (v >= brk.max) b = _B[j + 1];else if (v < brk.min) break;
          }

          return b + m2 * v;
        }; // fill pixel (i.e. 'p') min/max here,
        // to not have to loop through the _rangebreaks twice during `p2d`


        for (j = 0; j < rsBreaks.length; j++) {
          brk = rsBreaks[j];
          brk.pmin = opts.d2p(brk.min);
          brk.pmax = opts.d2p(brk.max);
        }

        opts.p2d = function (v) {
          var b = _B[0];

          for (var j = 0; j < rsBreaks.length; j++) {
            var brk = rsBreaks[j];
            if (v >= brk.pmax) b = _B[j + 1];else if (v < brk.pmin) break;
          }

          return (v - b) / m2;
        };
      }
    }

    if (oppAxisRangeOpts.rangemode !== 'match') {
      var range0OppAxis = oppAxisOpts.r2l(oppAxisRangeOpts.range[0]);
      var range1OppAxis = oppAxisOpts.r2l(oppAxisRangeOpts.range[1]);
      var distOppAxis = range1OppAxis - range0OppAxis;

      opts.d2pOppAxis = function (v) {
        return (v - range0OppAxis) / distOppAxis * opts._height;
      };
    } // update inner nodes


    rangeSlider.call(drawBg, gd, axisOpts, opts).call(addClipPath, gd, axisOpts, opts).call(drawRangePlot, gd, axisOpts, opts).call(drawMasks, gd, axisOpts, opts, oppAxisRangeOpts).call(drawSlideBox, gd, axisOpts, opts).call(drawGrabbers, gd, axisOpts, opts); // setup drag element

    setupDragElement(rangeSlider, gd, axisOpts, opts); // update current range

    setPixelRange(rangeSlider, gd, axisOpts, opts, oppAxisOpts, oppAxisRangeOpts); // title goes next to range slider instead of tick labels, so
    // just take it over and draw it from here

    if (axisOpts.side === 'bottom') {
      titles.draw(gd, axisOpts._id + 'title', {
        propContainer: axisOpts,
        propName: axisOpts._name + '.title',
        placeholder: fullLayout._dfltTitle.x,
        attributes: {
          x: axisOpts._offset + axisOpts._length / 2,
          y: y + opts._height + opts._offsetShift + 10 + 1.5 * axisOpts.title.font.size,
          'text-anchor': 'middle'
        }
      });
    }
  });
};

function setupDragElement(rangeSlider, gd, axisOpts, opts) {
  if (gd._context.staticPlot) return;
  var slideBox = rangeSlider.select('rect.' + constants$2.slideBoxClassName).node();
  var grabAreaMin = rangeSlider.select('rect.' + constants$2.grabAreaMinClassName).node();
  var grabAreaMax = rangeSlider.select('rect.' + constants$2.grabAreaMaxClassName).node();

  function mouseDownHandler() {
    var event = d3.event;
    var target = event.target;
    var startX = event.clientX || event.touches[0].clientX;
    var offsetX = startX - rangeSlider.node().getBoundingClientRect().left;
    var minVal = opts.d2p(axisOpts._rl[0]);
    var maxVal = opts.d2p(axisOpts._rl[1]);
    var dragCover = dragelement.coverSlip();
    this.addEventListener('touchmove', mouseMove);
    this.addEventListener('touchend', mouseUp);
    dragCover.addEventListener('mousemove', mouseMove);
    dragCover.addEventListener('mouseup', mouseUp);

    function mouseMove(e) {
      var clientX = e.clientX || e.touches[0].clientX;
      var delta = +clientX - startX;
      var pixelMin, pixelMax, cursor;

      switch (target) {
        case slideBox:
          cursor = 'ew-resize';
          pixelMin = minVal + delta;
          pixelMax = maxVal + delta;
          break;

        case grabAreaMin:
          cursor = 'col-resize';
          pixelMin = minVal + delta;
          pixelMax = maxVal;
          break;

        case grabAreaMax:
          cursor = 'col-resize';
          pixelMin = minVal;
          pixelMax = maxVal + delta;
          break;

        default:
          cursor = 'ew-resize';
          pixelMin = offsetX;
          pixelMax = offsetX + delta;
          break;
      }

      if (pixelMax < pixelMin) {
        var tmp = pixelMax;
        pixelMax = pixelMin;
        pixelMin = tmp;
      }

      opts._pixelMin = pixelMin;
      opts._pixelMax = pixelMax;
      setcursor(d3.select(dragCover), cursor);
      setDataRange(rangeSlider, gd, axisOpts, opts);
    }

    function mouseUp() {
      dragCover.removeEventListener('mousemove', mouseMove);
      dragCover.removeEventListener('mouseup', mouseUp);
      this.removeEventListener('touchmove', mouseMove);
      this.removeEventListener('touchend', mouseUp);
      lib_1.removeElement(dragCover);
    }
  }

  rangeSlider.on('mousedown', mouseDownHandler);
  rangeSlider.on('touchstart', mouseDownHandler);
}

function setDataRange(rangeSlider, gd, axisOpts, opts) {
  function clamp(v) {
    return axisOpts.l2r(lib_1.constrain(v, opts._rl[0], opts._rl[1]));
  }

  var dataMin = clamp(opts.p2d(opts._pixelMin));
  var dataMax = clamp(opts.p2d(opts._pixelMax));
  window.requestAnimationFrame(function () {
    registry.call('_guiRelayout', gd, axisOpts._name + '.range', [dataMin, dataMax]);
  });
}

function setPixelRange(rangeSlider, gd, axisOpts, opts, oppAxisOpts, oppAxisRangeOpts) {
  var hw2 = constants$2.handleWidth / 2;

  function clamp(v) {
    return lib_1.constrain(v, 0, opts._width);
  }

  function clampOppAxis(v) {
    return lib_1.constrain(v, 0, opts._height);
  }

  function clampHandle(v) {
    return lib_1.constrain(v, -hw2, opts._width + hw2);
  }

  var pixelMin = clamp(opts.d2p(axisOpts._rl[0]));
  var pixelMax = clamp(opts.d2p(axisOpts._rl[1]));
  rangeSlider.select('rect.' + constants$2.slideBoxClassName).attr('x', pixelMin).attr('width', pixelMax - pixelMin);
  rangeSlider.select('rect.' + constants$2.maskMinClassName).attr('width', pixelMin);
  rangeSlider.select('rect.' + constants$2.maskMaxClassName).attr('x', pixelMax).attr('width', opts._width - pixelMax);

  if (oppAxisRangeOpts.rangemode !== 'match') {
    var pixelMinOppAxis = opts._height - clampOppAxis(opts.d2pOppAxis(oppAxisOpts._rl[1]));
    var pixelMaxOppAxis = opts._height - clampOppAxis(opts.d2pOppAxis(oppAxisOpts._rl[0]));
    rangeSlider.select('rect.' + constants$2.maskMinOppAxisClassName).attr('x', pixelMin).attr('height', pixelMinOppAxis).attr('width', pixelMax - pixelMin);
    rangeSlider.select('rect.' + constants$2.maskMaxOppAxisClassName).attr('x', pixelMin).attr('y', pixelMaxOppAxis).attr('height', opts._height - pixelMaxOppAxis).attr('width', pixelMax - pixelMin);
    rangeSlider.select('rect.' + constants$2.slideBoxClassName).attr('y', pixelMinOppAxis).attr('height', pixelMaxOppAxis - pixelMinOppAxis);
  } // add offset for crispier corners
  // https://github.com/plotly/plotly.js/pull/1409


  var offset = 0.5;
  var xMin = Math.round(clampHandle(pixelMin - hw2)) - offset;
  var xMax = Math.round(clampHandle(pixelMax - hw2)) + offset;
  rangeSlider.select('g.' + constants$2.grabberMinClassName).attr('transform', strTranslate$2(xMin, offset));
  rangeSlider.select('g.' + constants$2.grabberMaxClassName).attr('transform', strTranslate$2(xMax, offset));
}

function drawBg(rangeSlider, gd, axisOpts, opts) {
  var bg = lib_1.ensureSingle(rangeSlider, 'rect', constants$2.bgClassName, function (s) {
    s.attr({
      x: 0,
      y: 0,
      'shape-rendering': 'crispEdges'
    });
  });
  var borderCorrect = opts.borderwidth % 2 === 0 ? opts.borderwidth : opts.borderwidth - 1;
  var offsetShift = -opts._offsetShift;
  var lw = drawing_1.crispRound(gd, opts.borderwidth);
  bg.attr({
    width: opts._width + borderCorrect,
    height: opts._height + borderCorrect,
    transform: strTranslate$2(offsetShift, offsetShift),
    fill: opts.bgcolor,
    stroke: opts.bordercolor,
    'stroke-width': lw
  });
}

function addClipPath(rangeSlider, gd, axisOpts, opts) {
  var fullLayout = gd._fullLayout;
  var clipPath = lib_1.ensureSingleById(fullLayout._topdefs, 'clipPath', opts._clipId, function (s) {
    s.append('rect').attr({
      x: 0,
      y: 0
    });
  });
  clipPath.select('rect').attr({
    width: opts._width,
    height: opts._height
  });
}

function drawRangePlot(rangeSlider, gd, axisOpts, opts) {
  var calcData = gd.calcdata;
  var rangePlots = rangeSlider.selectAll('g.' + constants$2.rangePlotClassName).data(axisOpts._subplotsWith, lib_1.identity);
  rangePlots.enter().append('g').attr('class', function (id) {
    return constants$2.rangePlotClassName + ' ' + id;
  }).call(drawing_1.setClipUrl, opts._clipId, gd);
  rangePlots.order();
  rangePlots.exit().remove();
  var mainplotinfo;
  rangePlots.each(function (id, i) {
    var plotgroup = d3.select(this);
    var isMainPlot = i === 0;
    var oppAxisOpts = axis_ids.getFromId(gd, id, 'y');
    var oppAxisName = oppAxisOpts._name;
    var oppAxisRangeOpts = opts[oppAxisName];
    var mockFigure = {
      data: [],
      layout: {
        xaxis: {
          type: axisOpts.type,
          domain: [0, 1],
          range: opts.range.slice(),
          calendar: axisOpts.calendar
        },
        width: opts._width,
        height: opts._height,
        margin: {
          t: 0,
          b: 0,
          l: 0,
          r: 0
        }
      },
      _context: gd._context
    };

    if (axisOpts.rangebreaks) {
      mockFigure.layout.xaxis.rangebreaks = axisOpts.rangebreaks;
    }

    mockFigure.layout[oppAxisName] = {
      type: oppAxisOpts.type,
      domain: [0, 1],
      range: oppAxisRangeOpts.rangemode !== 'match' ? oppAxisRangeOpts.range.slice() : oppAxisOpts.range.slice(),
      calendar: oppAxisOpts.calendar
    };

    if (oppAxisOpts.rangebreaks) {
      mockFigure.layout[oppAxisName].rangebreaks = oppAxisOpts.rangebreaks;
    }

    plots_1.supplyDefaults(mockFigure);
    var xa = mockFigure._fullLayout.xaxis;
    var ya = mockFigure._fullLayout[oppAxisName];
    xa.clearCalc();
    xa.setScale();
    ya.clearCalc();
    ya.setScale();
    var plotinfo = {
      id: id,
      plotgroup: plotgroup,
      xaxis: xa,
      yaxis: ya,
      isRangePlot: true
    };
    if (isMainPlot) mainplotinfo = plotinfo;else {
      plotinfo.mainplot = 'xy';
      plotinfo.mainplotinfo = mainplotinfo;
    }
    cartesian.rangePlot(gd, plotinfo, filterRangePlotCalcData(calcData, id));
  });
}

function filterRangePlotCalcData(calcData, subplotId) {
  var out = [];

  for (var i = 0; i < calcData.length; i++) {
    var calcTrace = calcData[i];
    var trace = calcTrace[0].trace;

    if (trace.xaxis + trace.yaxis === subplotId) {
      out.push(calcTrace);
    }
  }

  return out;
}

function drawMasks(rangeSlider, gd, axisOpts, opts, oppAxisRangeOpts) {
  var maskMin = lib_1.ensureSingle(rangeSlider, 'rect', constants$2.maskMinClassName, function (s) {
    s.attr({
      x: 0,
      y: 0,
      'shape-rendering': 'crispEdges'
    });
  });
  maskMin.attr('height', opts._height).call(color_1.fill, constants$2.maskColor);
  var maskMax = lib_1.ensureSingle(rangeSlider, 'rect', constants$2.maskMaxClassName, function (s) {
    s.attr({
      y: 0,
      'shape-rendering': 'crispEdges'
    });
  });
  maskMax.attr('height', opts._height).call(color_1.fill, constants$2.maskColor); // masks used for oppAxis zoom

  if (oppAxisRangeOpts.rangemode !== 'match') {
    var maskMinOppAxis = lib_1.ensureSingle(rangeSlider, 'rect', constants$2.maskMinOppAxisClassName, function (s) {
      s.attr({
        y: 0,
        'shape-rendering': 'crispEdges'
      });
    });
    maskMinOppAxis.attr('width', opts._width).call(color_1.fill, constants$2.maskOppAxisColor);
    var maskMaxOppAxis = lib_1.ensureSingle(rangeSlider, 'rect', constants$2.maskMaxOppAxisClassName, function (s) {
      s.attr({
        y: 0,
        'shape-rendering': 'crispEdges'
      });
    });
    maskMaxOppAxis.attr('width', opts._width).style('border-top', constants$2.maskOppBorder).call(color_1.fill, constants$2.maskOppAxisColor);
  }
}

function drawSlideBox(rangeSlider, gd, axisOpts, opts) {
  if (gd._context.staticPlot) return;
  var slideBox = lib_1.ensureSingle(rangeSlider, 'rect', constants$2.slideBoxClassName, function (s) {
    s.attr({
      y: 0,
      cursor: constants$2.slideBoxCursor,
      'shape-rendering': 'crispEdges'
    });
  });
  slideBox.attr({
    height: opts._height,
    fill: constants$2.slideBoxFill
  });
}

function drawGrabbers(rangeSlider, gd, axisOpts, opts) {
  // <g grabber />
  var grabberMin = lib_1.ensureSingle(rangeSlider, 'g', constants$2.grabberMinClassName);
  var grabberMax = lib_1.ensureSingle(rangeSlider, 'g', constants$2.grabberMaxClassName); // <g handle />

  var handleFixAttrs = {
    x: 0,
    width: constants$2.handleWidth,
    rx: constants$2.handleRadius,
    fill: color_1.background,
    stroke: color_1.defaultLine,
    'stroke-width': constants$2.handleStrokeWidth,
    'shape-rendering': 'crispEdges'
  };
  var handleDynamicAttrs = {
    y: Math.round(opts._height / 4),
    height: Math.round(opts._height / 2)
  };
  var handleMin = lib_1.ensureSingle(grabberMin, 'rect', constants$2.handleMinClassName, function (s) {
    s.attr(handleFixAttrs);
  });
  handleMin.attr(handleDynamicAttrs);
  var handleMax = lib_1.ensureSingle(grabberMax, 'rect', constants$2.handleMaxClassName, function (s) {
    s.attr(handleFixAttrs);
  });
  handleMax.attr(handleDynamicAttrs); // <g grabarea />

  var grabAreaFixAttrs = {
    width: constants$2.grabAreaWidth,
    x: 0,
    y: 0,
    fill: constants$2.grabAreaFill,
    cursor: !gd._context.staticPlot ? constants$2.grabAreaCursor : undefined
  };
  var grabAreaMin = lib_1.ensureSingle(grabberMin, 'rect', constants$2.grabAreaMinClassName, function (s) {
    s.attr(grabAreaFixAttrs);
  });
  grabAreaMin.attr('height', opts._height);
  var grabAreaMax = lib_1.ensureSingle(grabberMax, 'rect', constants$2.grabAreaMaxClassName, function (s) {
    s.attr(grabAreaFixAttrs);
  });
  grabAreaMax.attr('height', opts._height);
}

var rangeslider = {
  moduleType: 'component',
  name: 'rangeslider',
  schema: {
    subplots: {
      xaxis: {
        rangeslider: lib_1.extendFlat({}, attributes$3, {
          yaxis: oppaxis_attributes
        })
      }
    }
  },
  layoutAttributes: attributes$3,
  handleDefaults: defaults$3,
  calcAutorange: calc_autorange,
  draw: draw$2,
  isVisible: helpers.isVisible,
  makeData: helpers.makeData,
  autoMarginOpts: helpers.autoMarginOpts
};

var templatedArray = plot_template.templatedArray;
var buttonAttrs = templatedArray('button', {
  visible: {
    valType: 'boolean',
    dflt: true,
    editType: 'plot',
    description: 'Determines whether or not this button is visible.'
  },
  step: {
    valType: 'enumerated',
    values: ['month', 'year', 'day', 'hour', 'minute', 'second', 'all'],
    dflt: 'month',
    editType: 'plot',
    description: ['The unit of measurement that the `count` value will set the range by.'].join(' ')
  },
  stepmode: {
    valType: 'enumerated',
    values: ['backward', 'todate'],
    dflt: 'backward',
    editType: 'plot',
    description: ['Sets the range update mode.', 'If *backward*, the range update shifts the start of range', 'back *count* times *step* milliseconds.', 'If *todate*, the range update shifts the start of range', 'back to the first timestamp from *count* times', '*step* milliseconds back.', 'For example, with `step` set to *year* and `count` set to *1*', 'the range update shifts the start of the range back to', 'January 01 of the current year.', 'Month and year *todate* are currently available only', 'for the built-in (Gregorian) calendar.'].join(' ')
  },
  count: {
    valType: 'number',
    min: 0,
    dflt: 1,
    editType: 'plot',
    description: ['Sets the number of steps to take to update the range.', 'Use with `step` to specify the update interval.'].join(' ')
  },
  label: {
    valType: 'string',
    editType: 'plot',
    description: 'Sets the text label to appear on the button.'
  },
  editType: 'plot',
  description: ['Sets the specifications for each buttons.', 'By default, a range selector comes with no buttons.'].join(' ')
});
var attributes$2 = {
  visible: {
    valType: 'boolean',
    editType: 'plot',
    description: ['Determines whether or not this range selector is visible.', 'Note that range selectors are only available for x axes of', '`type` set to or auto-typed to *date*.'].join(' ')
  },
  buttons: buttonAttrs,
  x: {
    valType: 'number',
    min: -2,
    max: 3,
    editType: 'plot',
    description: 'Sets the x position (in normalized coordinates) of the range selector.'
  },
  xanchor: {
    valType: 'enumerated',
    values: ['auto', 'left', 'center', 'right'],
    dflt: 'left',
    editType: 'plot',
    description: ['Sets the range selector\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the range selector.'].join(' ')
  },
  y: {
    valType: 'number',
    min: -2,
    max: 3,
    editType: 'plot',
    description: 'Sets the y position (in normalized coordinates) of the range selector.'
  },
  yanchor: {
    valType: 'enumerated',
    values: ['auto', 'top', 'middle', 'bottom'],
    dflt: 'bottom',
    editType: 'plot',
    description: ['Sets the range selector\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the range selector.'].join(' ')
  },
  font: font_attributes({
    editType: 'plot',
    description: 'Sets the font of the range selector button text.'
  }),
  bgcolor: {
    valType: 'color',
    dflt: attributes$j.lightLine,
    editType: 'plot',
    description: 'Sets the background color of the range selector buttons.'
  },
  activecolor: {
    valType: 'color',
    editType: 'plot',
    description: 'Sets the background color of the active range selector button.'
  },
  bordercolor: {
    valType: 'color',
    dflt: attributes$j.defaultLine,
    editType: 'plot',
    description: 'Sets the color of the border enclosing the range selector.'
  },
  borderwidth: {
    valType: 'number',
    min: 0,
    dflt: 0,
    editType: 'plot',
    description: 'Sets the width (in px) of the border enclosing the range selector.'
  },
  editType: 'plot'
};

var constants$1 = {
  // 'y' position pad above counter axis domain
  yPad: 0.02,
  // minimum button width (regardless of text size)
  minButtonWidth: 30,
  // buttons rect radii
  rx: 3,
  ry: 3,
  // light fraction used to compute the 'activecolor' default
  lightAmount: 25,
  darkAmount: 10
};

var defaults$2 = function handleDefaults(containerIn, containerOut, layout, counterAxes, calendar) {
  var selectorIn = containerIn.rangeselector || {};
  var selectorOut = plot_template.newContainer(containerOut, 'rangeselector');

  function coerce(attr, dflt) {
    return lib_1.coerce(selectorIn, selectorOut, attributes$2, attr, dflt);
  }

  var buttons = array_container_defaults(selectorIn, selectorOut, {
    name: 'buttons',
    handleItemDefaults: buttonDefaults,
    calendar: calendar
  });
  var visible = coerce('visible', buttons.length > 0);

  if (visible) {
    var posDflt = getPosDflt(containerOut, layout, counterAxes);
    coerce('x', posDflt[0]);
    coerce('y', posDflt[1]);
    lib_1.noneOrAll(containerIn, containerOut, ['x', 'y']);
    coerce('xanchor');
    coerce('yanchor');
    lib_1.coerceFont(coerce, 'font', layout.font);
    var bgColor = coerce('bgcolor');
    coerce('activecolor', color_1.contrast(bgColor, constants$1.lightAmount, constants$1.darkAmount));
    coerce('bordercolor');
    coerce('borderwidth');
  }
};

function buttonDefaults(buttonIn, buttonOut, selectorOut, opts) {
  var calendar = opts.calendar;

  function coerce(attr, dflt) {
    return lib_1.coerce(buttonIn, buttonOut, attributes$2.buttons, attr, dflt);
  }

  var visible = coerce('visible');

  if (visible) {
    var step = coerce('step');

    if (step !== 'all') {
      if (calendar && calendar !== 'gregorian' && (step === 'month' || step === 'year')) {
        buttonOut.stepmode = 'backward';
      } else {
        coerce('stepmode');
      }

      coerce('count');
    }

    coerce('label');
  }
}

function getPosDflt(containerOut, layout, counterAxes) {
  var anchoredList = counterAxes.filter(function (ax) {
    return layout[ax].anchor === containerOut._id;
  });
  var posY = 0;

  for (var i = 0; i < anchoredList.length; i++) {
    var domain = layout[anchoredList[i]].domain;
    if (domain) posY = Math.max(domain[1], posY);
  }

  return [containerOut.domain[0], posY + constants$1.yPad];
}

var d3Time = /*@__PURE__*/getAugmentedNamespace(src$2);

var titleCase = lib_1.titleCase;

var get_update_object = function getUpdateObject(axisLayout, buttonLayout) {
  var axName = axisLayout._name;
  var update = {};

  if (buttonLayout.step === 'all') {
    update[axName + '.autorange'] = true;
  } else {
    var xrange = getXRange(axisLayout, buttonLayout);
    update[axName + '.range[0]'] = xrange[0];
    update[axName + '.range[1]'] = xrange[1];
  }

  return update;
};

function getXRange(axisLayout, buttonLayout) {
  var currentRange = axisLayout.range;
  var base = new Date(axisLayout.r2l(currentRange[1]));
  var step = buttonLayout.step;
  var utcStep = d3Time['utc' + titleCase(step)];
  var count = buttonLayout.count;
  var range0;

  switch (buttonLayout.stepmode) {
    case 'backward':
      range0 = axisLayout.l2r(+utcStep.offset(base, -count));
      break;

    case 'todate':
      var base2 = utcStep.offset(base, -count);
      range0 = axisLayout.l2r(+utcStep.ceil(base2));
      break;
  }

  var range1 = currentRange[1];
  return [range0, range1];
}

var strTranslate$1 = lib_1.strTranslate;
var LINE_SPACING$1 = alignment.LINE_SPACING;
var FROM_TL$1 = alignment.FROM_TL;
var FROM_BR$1 = alignment.FROM_BR;

var draw$1 = function draw(gd) {
  var fullLayout = gd._fullLayout;

  var selectors = fullLayout._infolayer.selectAll('.rangeselector').data(makeSelectorData(gd), selectorKeyFunc);

  selectors.enter().append('g').classed('rangeselector', true);
  selectors.exit().remove();
  selectors.style({
    cursor: 'pointer',
    'pointer-events': 'all'
  });
  selectors.each(function (d) {
    var selector = d3.select(this);
    var axisLayout = d;
    var selectorLayout = axisLayout.rangeselector;
    var buttons = selector.selectAll('g.button').data(lib_1.filterVisible(selectorLayout.buttons));
    buttons.enter().append('g').classed('button', true);
    buttons.exit().remove();
    buttons.each(function (d) {
      var button = d3.select(this);
      var update = get_update_object(axisLayout, d);
      d._isActive = isActive(axisLayout, d, update);
      button.call(drawButtonRect, selectorLayout, d);
      button.call(drawButtonText, selectorLayout, d, gd);
      button.on('click', function () {
        if (gd._dragged) return;
        registry.call('_guiRelayout', gd, update);
      });
      button.on('mouseover', function () {
        d._isHovered = true;
        button.call(drawButtonRect, selectorLayout, d);
      });
      button.on('mouseout', function () {
        d._isHovered = false;
        button.call(drawButtonRect, selectorLayout, d);
      });
    });
    reposition(gd, buttons, selectorLayout, axisLayout._name, selector);
  });
};

function makeSelectorData(gd) {
  var axes = axis_ids.list(gd, 'x', true);
  var data = [];

  for (var i = 0; i < axes.length; i++) {
    var axis = axes[i];

    if (axis.rangeselector && axis.rangeselector.visible) {
      data.push(axis);
    }
  }

  return data;
}

function selectorKeyFunc(d) {
  return d._id;
}

function isActive(axisLayout, opts, update) {
  if (opts.step === 'all') {
    return axisLayout.autorange === true;
  } else {
    var keys = Object.keys(update);
    return axisLayout.range[0] === update[keys[0]] && axisLayout.range[1] === update[keys[1]];
  }
}

function drawButtonRect(button, selectorLayout, d) {
  var rect = lib_1.ensureSingle(button, 'rect', 'selector-rect', function (s) {
    s.attr('shape-rendering', 'crispEdges');
  });
  rect.attr({
    'rx': constants$1.rx,
    'ry': constants$1.ry
  });
  rect.call(color_1.stroke, selectorLayout.bordercolor).call(color_1.fill, getFillColor(selectorLayout, d)).style('stroke-width', selectorLayout.borderwidth + 'px');
}

function getFillColor(selectorLayout, d) {
  return d._isActive || d._isHovered ? selectorLayout.activecolor : selectorLayout.bgcolor;
}

function drawButtonText(button, selectorLayout, d, gd) {
  function textLayout(s) {
    svg_text_utils.convertToTspans(s, gd);
  }

  var text = lib_1.ensureSingle(button, 'text', 'selector-text', function (s) {
    s.attr('text-anchor', 'middle');
  });
  text.call(drawing_1.font, selectorLayout.font).text(getLabel(d, gd._fullLayout._meta)).call(textLayout);
}

function getLabel(opts, _meta) {
  if (opts.label) {
    return _meta ? lib_1.templateString(opts.label, _meta) : opts.label;
  }

  if (opts.step === 'all') return 'all';
  return opts.count + opts.step.charAt(0);
}

function reposition(gd, buttons, opts, axName, selector) {
  var width = 0;
  var height = 0;
  var borderWidth = opts.borderwidth;
  buttons.each(function () {
    var button = d3.select(this);
    var text = button.select('.selector-text');
    var tHeight = opts.font.size * LINE_SPACING$1;
    var hEff = Math.max(tHeight * svg_text_utils.lineCount(text), 16) + 3;
    height = Math.max(height, hEff);
  });
  buttons.each(function () {
    var button = d3.select(this);
    var rect = button.select('.selector-rect');
    var text = button.select('.selector-text');
    var tWidth = text.node() && drawing_1.bBox(text.node()).width;
    var tHeight = opts.font.size * LINE_SPACING$1;
    var tLines = svg_text_utils.lineCount(text);
    var wEff = Math.max(tWidth + 10, constants$1.minButtonWidth); // TODO add MathJax support
    // TODO add buttongap attribute

    button.attr('transform', strTranslate$1(borderWidth + width, borderWidth));
    rect.attr({
      x: 0,
      y: 0,
      width: wEff,
      height: height
    });
    svg_text_utils.positionText(text, wEff / 2, height / 2 - (tLines - 1) * tHeight / 2 + 3);
    width += wEff + 5;
  });
  var graphSize = gd._fullLayout._size;
  var lx = graphSize.l + graphSize.w * opts.x;
  var ly = graphSize.t + graphSize.h * (1 - opts.y);
  var xanchor = 'left';

  if (lib_1.isRightAnchor(opts)) {
    lx -= width;
    xanchor = 'right';
  }

  if (lib_1.isCenterAnchor(opts)) {
    lx -= width / 2;
    xanchor = 'center';
  }

  var yanchor = 'top';

  if (lib_1.isBottomAnchor(opts)) {
    ly -= height;
    yanchor = 'bottom';
  }

  if (lib_1.isMiddleAnchor(opts)) {
    ly -= height / 2;
    yanchor = 'middle';
  }

  width = Math.ceil(width);
  height = Math.ceil(height);
  lx = Math.round(lx);
  ly = Math.round(ly);
  plots_1.autoMargin(gd, axName + '-range-selector', {
    x: opts.x,
    y: opts.y,
    l: width * FROM_TL$1[xanchor],
    r: width * FROM_BR$1[xanchor],
    b: height * FROM_BR$1[yanchor],
    t: height * FROM_TL$1[yanchor]
  });
  selector.attr('transform', strTranslate$1(lx, ly));
}

var rangeselector = {
  moduleType: 'component',
  name: 'rangeselector',
  schema: {
    subplots: {
      xaxis: {
        rangeselector: attributes$2
      }
    }
  },
  layoutAttributes: attributes$2,
  handleDefaults: defaults$2,
  draw: draw$1
};

var extendFlat$2 = extend.extendFlat;
/**
 * Make a xy domain attribute group
 *
 * @param {object} opts
 *   @param {string}
 *     opts.name: name to be inserted in the default description
 *   @param {boolean}
 *     opts.trace: set to true for trace containers
 *   @param {string}
 *     opts.editType: editType for all pieces
 *   @param {boolean}
 *     opts.noGridCell: set to true to omit `row` and `column`
 *
 * @param {object} extra
 *   @param {string}
 *     extra.description: extra description. N.B we use
 *     a separate extra container to make it compatible with
 *     the compress_attributes transform.
 *
 * @return {object} attributes object containing {x,y} as specified
 */

var attributes$1 = function (opts, extra) {
  opts = opts || {};
  extra = extra || {};
  var base = {
    valType: 'info_array',
    editType: opts.editType,
    items: [{
      valType: 'number',
      min: 0,
      max: 1,
      editType: opts.editType
    }, {
      valType: 'number',
      min: 0,
      max: 1,
      editType: opts.editType
    }],
    dflt: [0, 1]
  };
  var namePart = opts.name ? opts.name + ' ' : '';
  var contPart = opts.trace ? 'trace ' : 'subplot ';
  var descPart = extra.description ? ' ' + extra.description : '';
  var out = {
    x: extendFlat$2({}, base, {
      description: ['Sets the horizontal domain of this ', namePart, contPart, '(in plot fraction).', descPart].join('')
    }),
    y: extendFlat$2({}, base, {
      description: ['Sets the vertical domain of this ', namePart, contPart, '(in plot fraction).', descPart].join('')
    }),
    editType: opts.editType
  };

  if (!opts.noGridCell) {
    out.row = {
      valType: 'integer',
      min: 0,
      dflt: 0,
      editType: opts.editType,
      description: ['If there is a layout grid, use the domain ', 'for this row in the grid for this ', namePart, contPart, '.', descPart].join('')
    };
    out.column = {
      valType: 'integer',
      min: 0,
      dflt: 0,
      editType: opts.editType,
      description: ['If there is a layout grid, use the domain ', 'for this column in the grid for this ', namePart, contPart, '.', descPart].join('')
    };
  }

  return out;
};

var defaults$1 = function (containerOut, layout, coerce, dfltDomains) {
  var dfltX = dfltDomains && dfltDomains.x || [0, 1];
  var dfltY = dfltDomains && dfltDomains.y || [0, 1];
  var grid = layout.grid;

  if (grid) {
    var column = coerce('domain.column');

    if (column !== undefined) {
      if (column < grid.columns) dfltX = grid._domains.x[column];else delete containerOut.domain.column;
    }

    var row = coerce('domain.row');

    if (row !== undefined) {
      if (row < grid.rows) dfltY = grid._domains.y[row];else delete containerOut.domain.row;
    }
  }

  var x = coerce('domain.x', dfltX);
  var y = coerce('domain.y', dfltY); // don't accept bad input data

  if (!(x[0] < x[1])) containerOut.domain.x = dfltX.slice();
  if (!(y[0] < y[1])) containerOut.domain.y = dfltY.slice();
};

var domain = {
  attributes: attributes$1,
  defaults: defaults$1
};

var counterRegex = regex.counter;
var domainAttrs = domain.attributes;
var cartesianIdRegex = constants$a.idRegex;
var gridAttrs = {
  rows: {
    valType: 'integer',
    min: 1,
    editType: 'plot',
    description: ['The number of rows in the grid. If you provide a 2D `subplots`', 'array or a `yaxes` array, its length is used as the default.', 'But it\'s also possible to have a different length, if you', 'want to leave a row at the end for non-cartesian subplots.'].join(' ')
  },
  roworder: {
    valType: 'enumerated',
    values: ['top to bottom', 'bottom to top'],
    dflt: 'top to bottom',
    editType: 'plot',
    description: ['Is the first row the top or the bottom? Note that columns', 'are always enumerated from left to right.'].join(' ')
  },
  columns: {
    valType: 'integer',
    min: 1,
    editType: 'plot',
    description: ['The number of columns in the grid. If you provide a 2D `subplots`', 'array, the length of its longest row is used as the default.', 'If you give an `xaxes` array, its length is used as the default.', 'But it\'s also possible to have a different length, if you', 'want to leave a row at the end for non-cartesian subplots.'].join(' ')
  },
  subplots: {
    valType: 'info_array',
    freeLength: true,
    dimensions: 2,
    items: {
      valType: 'enumerated',
      values: [counterRegex('xy').toString(), ''],
      editType: 'plot'
    },
    editType: 'plot',
    description: ['Used for freeform grids, where some axes may be shared across subplots', 'but others are not. Each entry should be a cartesian subplot id, like', '*xy* or *x3y2*, or ** to leave that cell empty. You may reuse x axes', 'within the same column, and y axes within the same row.', 'Non-cartesian subplots and traces that support `domain` can place themselves', 'in this grid separately using the `gridcell` attribute.'].join(' ')
  },
  xaxes: {
    valType: 'info_array',
    freeLength: true,
    items: {
      valType: 'enumerated',
      values: [cartesianIdRegex.x.toString(), ''],
      editType: 'plot'
    },
    editType: 'plot',
    description: ['Used with `yaxes` when the x and y axes are shared across columns and rows.', 'Each entry should be an x axis id like *x*, *x2*, etc., or ** to', 'not put an x axis in that column. Entries other than ** must be unique.', 'Ignored if `subplots` is present. If missing but `yaxes` is present,', 'will generate consecutive IDs.'].join(' ')
  },
  yaxes: {
    valType: 'info_array',
    freeLength: true,
    items: {
      valType: 'enumerated',
      values: [cartesianIdRegex.y.toString(), ''],
      editType: 'plot'
    },
    editType: 'plot',
    description: ['Used with `yaxes` when the x and y axes are shared across columns and rows.', 'Each entry should be an y axis id like *y*, *y2*, etc., or ** to', 'not put a y axis in that row. Entries other than ** must be unique.', 'Ignored if `subplots` is present. If missing but `xaxes` is present,', 'will generate consecutive IDs.'].join(' ')
  },
  pattern: {
    valType: 'enumerated',
    values: ['independent', 'coupled'],
    dflt: 'coupled',
    editType: 'plot',
    description: ['If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`,', 'we can generate defaults using consecutive axis IDs, in two ways:', '*coupled* gives one x axis per column and one y axis per row.', '*independent* uses a new xy pair for each cell, left-to-right across each row', 'then iterating rows according to `roworder`.'].join(' ')
  },
  xgap: {
    valType: 'number',
    min: 0,
    max: 1,
    editType: 'plot',
    description: ['Horizontal space between grid cells, expressed as a fraction', 'of the total width available to one cell. Defaults to 0.1', 'for coupled-axes grids and 0.2 for independent grids.'].join(' ')
  },
  ygap: {
    valType: 'number',
    min: 0,
    max: 1,
    editType: 'plot',
    description: ['Vertical space between grid cells, expressed as a fraction', 'of the total height available to one cell. Defaults to 0.1', 'for coupled-axes grids and 0.3 for independent grids.'].join(' ')
  },
  domain: domainAttrs({
    name: 'grid',
    editType: 'plot',
    noGridCell: true
  }, {
    description: ['The first and last cells end exactly at the domain', 'edges, with no grout around the edges.'].join(' ')
  }),
  xside: {
    valType: 'enumerated',
    values: ['bottom', 'bottom plot', 'top plot', 'top'],
    dflt: 'bottom plot',
    editType: 'plot',
    description: ['Sets where the x axis labels and titles go. *bottom* means', 'the very bottom of the grid. *bottom plot* is the lowest plot', 'that each x axis is used in. *top* and *top plot* are similar.'].join(' ')
  },
  yside: {
    valType: 'enumerated',
    values: ['left', 'left plot', 'right plot', 'right'],
    dflt: 'left plot',
    editType: 'plot',
    description: ['Sets where the y axis labels and titles go. *left* means', 'the very left edge of the grid. *left plot* is the leftmost plot', 'that each y axis is used in. *right* and *right plot* are similar.'].join(' ')
  },
  editType: 'plot'
};

function getAxes(layout, grid, axLetter) {
  var gridVal = grid[axLetter + 'axes'];
  var splomVal = Object.keys((layout._splomAxes || {})[axLetter] || {});
  if (Array.isArray(gridVal)) return gridVal;
  if (splomVal.length) return splomVal;
} // the shape of the grid - this needs to be done BEFORE supplyDataDefaults
// so that non-subplot traces can place themselves in the grid


function sizeDefaults(layoutIn, layoutOut) {
  var gridIn = layoutIn.grid || {};
  var xAxes = getAxes(layoutOut, gridIn, 'x');
  var yAxes = getAxes(layoutOut, gridIn, 'y');
  if (!layoutIn.grid && !xAxes && !yAxes) return;
  var hasSubplotGrid = Array.isArray(gridIn.subplots) && Array.isArray(gridIn.subplots[0]);
  var hasXaxes = Array.isArray(xAxes);
  var hasYaxes = Array.isArray(yAxes);
  var isSplomGenerated = hasXaxes && xAxes !== gridIn.xaxes && hasYaxes && yAxes !== gridIn.yaxes;
  var dfltRows, dfltColumns;

  if (hasSubplotGrid) {
    dfltRows = gridIn.subplots.length;
    dfltColumns = gridIn.subplots[0].length;
  } else {
    if (hasYaxes) dfltRows = yAxes.length;
    if (hasXaxes) dfltColumns = xAxes.length;
  }

  var gridOut = plot_template.newContainer(layoutOut, 'grid');

  function coerce(attr, dflt) {
    return lib_1.coerce(gridIn, gridOut, gridAttrs, attr, dflt);
  }

  var rows = coerce('rows', dfltRows);
  var columns = coerce('columns', dfltColumns);

  if (!(rows * columns > 1)) {
    delete layoutOut.grid;
    return;
  }

  if (!hasSubplotGrid && !hasXaxes && !hasYaxes) {
    var useDefaultSubplots = coerce('pattern') === 'independent';
    if (useDefaultSubplots) hasSubplotGrid = true;
  }

  gridOut._hasSubplotGrid = hasSubplotGrid;
  var rowOrder = coerce('roworder');
  var reversed = rowOrder === 'top to bottom';
  var dfltGapX = hasSubplotGrid ? 0.2 : 0.1;
  var dfltGapY = hasSubplotGrid ? 0.3 : 0.1;
  var dfltSideX, dfltSideY;

  if (isSplomGenerated && layoutOut._splomGridDflt) {
    dfltSideX = layoutOut._splomGridDflt.xside;
    dfltSideY = layoutOut._splomGridDflt.yside;
  }

  gridOut._domains = {
    x: fillGridPositions('x', coerce, dfltGapX, dfltSideX, columns),
    y: fillGridPositions('y', coerce, dfltGapY, dfltSideY, rows, reversed)
  };
} // coerce x or y sizing attributes and return an array of domains for this direction


function fillGridPositions(axLetter, coerce, dfltGap, dfltSide, len, reversed) {
  var dirGap = coerce(axLetter + 'gap', dfltGap);
  var domain = coerce('domain.' + axLetter);
  coerce(axLetter + 'side', dfltSide);
  var out = new Array(len);
  var start = domain[0];
  var step = (domain[1] - start) / (len - dirGap);
  var cellDomain = step * (1 - dirGap);

  for (var i = 0; i < len; i++) {
    var cellStart = start + step * i;
    out[reversed ? len - 1 - i : i] = [cellStart, cellStart + cellDomain];
  }

  return out;
} // the (cartesian) contents of the grid - this needs to happen AFTER supplyDataDefaults
// so that we know what cartesian subplots are available


function contentDefaults(layoutIn, layoutOut) {
  var gridOut = layoutOut.grid; // make sure we got to the end of handleGridSizing

  if (!gridOut || !gridOut._domains) return;
  var gridIn = layoutIn.grid || {};
  var subplots = layoutOut._subplots;
  var hasSubplotGrid = gridOut._hasSubplotGrid;
  var rows = gridOut.rows;
  var columns = gridOut.columns;
  var useDefaultSubplots = gridOut.pattern === 'independent';
  var i, j, xId, yId, subplotId, subplotsOut, yPos;
  var axisMap = gridOut._axisMap = {};

  if (hasSubplotGrid) {
    var subplotsIn = gridIn.subplots || [];
    subplotsOut = gridOut.subplots = new Array(rows);
    var index = 1;

    for (i = 0; i < rows; i++) {
      var rowOut = subplotsOut[i] = new Array(columns);
      var rowIn = subplotsIn[i] || [];

      for (j = 0; j < columns; j++) {
        if (useDefaultSubplots) {
          subplotId = index === 1 ? 'xy' : 'x' + index + 'y' + index;
          index++;
        } else subplotId = rowIn[j];

        rowOut[j] = '';

        if (subplots.cartesian.indexOf(subplotId) !== -1) {
          yPos = subplotId.indexOf('y');
          xId = subplotId.slice(0, yPos);
          yId = subplotId.slice(yPos);

          if (axisMap[xId] !== undefined && axisMap[xId] !== j || axisMap[yId] !== undefined && axisMap[yId] !== i) {
            continue;
          }

          rowOut[j] = subplotId;
          axisMap[xId] = j;
          axisMap[yId] = i;
        }
      }
    }
  } else {
    var xAxes = getAxes(layoutOut, gridIn, 'x');
    var yAxes = getAxes(layoutOut, gridIn, 'y');
    gridOut.xaxes = fillGridAxes(xAxes, subplots.xaxis, columns, axisMap, 'x');
    gridOut.yaxes = fillGridAxes(yAxes, subplots.yaxis, rows, axisMap, 'y');
  }

  var anchors = gridOut._anchors = {};
  var reversed = gridOut.roworder === 'top to bottom';

  for (var axisId in axisMap) {
    var axLetter = axisId.charAt(0);
    var side = gridOut[axLetter + 'side'];
    var i0, inc, iFinal;

    if (side.length < 8) {
      // grid edge -  ie not "* plot" - make these as free axes
      // since we're not guaranteed to have a subplot there at all
      anchors[axisId] = 'free';
    } else if (axLetter === 'x') {
      if (side.charAt(0) === 't' === reversed) {
        i0 = 0;
        inc = 1;
        iFinal = rows;
      } else {
        i0 = rows - 1;
        inc = -1;
        iFinal = -1;
      }

      if (hasSubplotGrid) {
        var column = axisMap[axisId];

        for (i = i0; i !== iFinal; i += inc) {
          subplotId = subplotsOut[i][column];
          if (!subplotId) continue;
          yPos = subplotId.indexOf('y');

          if (subplotId.slice(0, yPos) === axisId) {
            anchors[axisId] = subplotId.slice(yPos);
            break;
          }
        }
      } else {
        for (i = i0; i !== iFinal; i += inc) {
          yId = gridOut.yaxes[i];

          if (subplots.cartesian.indexOf(axisId + yId) !== -1) {
            anchors[axisId] = yId;
            break;
          }
        }
      }
    } else {
      if (side.charAt(0) === 'l') {
        i0 = 0;
        inc = 1;
        iFinal = columns;
      } else {
        i0 = columns - 1;
        inc = -1;
        iFinal = -1;
      }

      if (hasSubplotGrid) {
        var row = axisMap[axisId];

        for (i = i0; i !== iFinal; i += inc) {
          subplotId = subplotsOut[row][i];
          if (!subplotId) continue;
          yPos = subplotId.indexOf('y');

          if (subplotId.slice(yPos) === axisId) {
            anchors[axisId] = subplotId.slice(0, yPos);
            break;
          }
        }
      } else {
        for (i = i0; i !== iFinal; i += inc) {
          xId = gridOut.xaxes[i];

          if (subplots.cartesian.indexOf(xId + axisId) !== -1) {
            anchors[axisId] = xId;
            break;
          }
        }
      }
    }
  }
}

function fillGridAxes(axesIn, axesAllowed, len, axisMap, axLetter) {
  var out = new Array(len);
  var i;

  function fillOneAxis(i, axisId) {
    if (axesAllowed.indexOf(axisId) !== -1 && axisMap[axisId] === undefined) {
      out[i] = axisId;
      axisMap[axisId] = i;
    } else out[i] = '';
  }

  if (Array.isArray(axesIn)) {
    for (i = 0; i < len; i++) {
      fillOneAxis(i, axesIn[i]);
    }
  } else {
    // default axis list is the first `len` axis ids
    fillOneAxis(0, axLetter);

    for (i = 1; i < len; i++) {
      fillOneAxis(i, axLetter + (i + 1));
    }
  }

  return out;
}

var grid = {
  moduleType: 'component',
  name: 'grid',
  schema: {
    layout: {
      grid: gridAttrs
    }
  },
  layoutAttributes: gridAttrs,
  sizeDefaults: sizeDefaults,
  contentDefaults: contentDefaults
};

var attributes = {
  visible: {
    valType: 'boolean',
    editType: 'calc',
    description: ['Determines whether or not this set of error bars is visible.'].join(' ')
  },
  type: {
    valType: 'enumerated',
    values: ['percent', 'constant', 'sqrt', 'data'],
    editType: 'calc',
    description: ['Determines the rule used to generate the error bars.', 'If *constant`, the bar lengths are of a constant value.', 'Set this constant in `value`.', 'If *percent*, the bar lengths correspond to a percentage of', 'underlying data. Set this percentage in `value`.', 'If *sqrt*, the bar lengths correspond to the square of the', 'underlying data.', 'If *data*, the bar lengths are set with data set `array`.'].join(' ')
  },
  symmetric: {
    valType: 'boolean',
    editType: 'calc',
    description: ['Determines whether or not the error bars have the same length', 'in both direction', '(top/bottom for vertical bars, left/right for horizontal bars.'].join(' ')
  },
  array: {
    valType: 'data_array',
    editType: 'calc',
    description: ['Sets the data corresponding the length of each error bar.', 'Values are plotted relative to the underlying data.'].join(' ')
  },
  arrayminus: {
    valType: 'data_array',
    editType: 'calc',
    description: ['Sets the data corresponding the length of each error bar in the', 'bottom (left) direction for vertical (horizontal) bars', 'Values are plotted relative to the underlying data.'].join(' ')
  },
  value: {
    valType: 'number',
    min: 0,
    dflt: 10,
    editType: 'calc',
    description: ['Sets the value of either the percentage', '(if `type` is set to *percent*) or the constant', '(if `type` is set to *constant*) corresponding to the lengths of', 'the error bars.'].join(' ')
  },
  valueminus: {
    valType: 'number',
    min: 0,
    dflt: 10,
    editType: 'calc',
    description: ['Sets the value of either the percentage', '(if `type` is set to *percent*) or the constant', '(if `type` is set to *constant*) corresponding to the lengths of', 'the error bars in the', 'bottom (left) direction for vertical (horizontal) bars'].join(' ')
  },
  traceref: {
    valType: 'integer',
    min: 0,
    dflt: 0,
    editType: 'style'
  },
  tracerefminus: {
    valType: 'integer',
    min: 0,
    dflt: 0,
    editType: 'style'
  },
  copy_ystyle: {
    valType: 'boolean',
    editType: 'plot'
  },
  copy_zstyle: {
    valType: 'boolean',
    editType: 'style'
  },
  color: {
    valType: 'color',
    editType: 'style',
    description: 'Sets the stoke color of the error bars.'
  },
  thickness: {
    valType: 'number',
    min: 0,
    dflt: 2,
    editType: 'style',
    description: 'Sets the thickness (in px) of the error bars.'
  },
  width: {
    valType: 'number',
    min: 0,
    editType: 'plot',
    description: ['Sets the width (in px) of the cross-bar at both ends', 'of the error bars.'].join(' ')
  },
  editType: 'calc',
  _deprecated: {
    opacity: {
      valType: 'number',
      editType: 'style',
      description: ['Obsolete.', 'Use the alpha channel in error bar `color` to set the opacity.'].join(' ')
    }
  }
};

var defaults = function (traceIn, traceOut, defaultColor, opts) {
  var objName = 'error_' + opts.axis;
  var containerOut = plot_template.newContainer(traceOut, objName);
  var containerIn = traceIn[objName] || {};

  function coerce(attr, dflt) {
    return lib_1.coerce(containerIn, containerOut, attributes, attr, dflt);
  }

  var hasErrorBars = containerIn.array !== undefined || containerIn.value !== undefined || containerIn.type === 'sqrt';
  var visible = coerce('visible', hasErrorBars);
  if (visible === false) return;
  var type = coerce('type', 'array' in containerIn ? 'data' : 'percent');
  var symmetric = true;

  if (type !== 'sqrt') {
    symmetric = coerce('symmetric', !((type === 'data' ? 'arrayminus' : 'valueminus') in containerIn));
  }

  if (type === 'data') {
    coerce('array');
    coerce('traceref');

    if (!symmetric) {
      coerce('arrayminus');
      coerce('tracerefminus');
    }
  } else if (type === 'percent' || type === 'constant') {
    coerce('value');
    if (!symmetric) coerce('valueminus');
  }

  var copyAttr = 'copy_' + opts.inherit + 'style';

  if (opts.inherit) {
    var inheritObj = traceOut['error_' + opts.inherit];

    if ((inheritObj || {}).visible) {
      coerce(copyAttr, !(containerIn.color || fastIsnumeric(containerIn.thickness) || fastIsnumeric(containerIn.width)));
    }
  }

  if (!opts.inherit || !containerOut[copyAttr]) {
    coerce('color', defaultColor);
    coerce('thickness');
    coerce('width', registry.traceIs(traceOut, 'gl3d') ? 0 : 4);
  }
};

/**
 * Error bar computing function generator
 *
 * N.B. The generated function does not clean the dataPt entries. Non-numeric
 * entries result in undefined error magnitudes.
 *
 * @param {object} opts error bar attributes
 *
 * @return {function} :
 *      @param {numeric} dataPt data point from where to compute the error magnitude
 *      @param {number} index index of dataPt in its corresponding data array
 *      @return {array}
 *        - error[0] : error magnitude in the negative direction
 *        - error[1] : " " " " positive "
 */

var compute_error = function makeComputeError(opts) {
  var type = opts.type;
  var symmetric = opts.symmetric;

  if (type === 'data') {
    var array = opts.array || [];

    if (symmetric) {
      return function computeError(dataPt, index) {
        var val = +array[index];
        return [val, val];
      };
    } else {
      var arrayminus = opts.arrayminus || [];
      return function computeError(dataPt, index) {
        var val = +array[index];
        var valMinus = +arrayminus[index]; // in case one is present and the other is missing, fill in 0
        // so we still see the present one. Mostly useful during manual
        // data entry.

        if (!isNaN(val) || !isNaN(valMinus)) {
          return [valMinus || 0, val || 0];
        }

        return [NaN, NaN];
      };
    }
  } else {
    var computeErrorValue = makeComputeErrorValue(type, opts.value);
    var computeErrorValueMinus = makeComputeErrorValue(type, opts.valueminus);

    if (symmetric || opts.valueminus === undefined) {
      return function computeError(dataPt) {
        var val = computeErrorValue(dataPt);
        return [val, val];
      };
    } else {
      return function computeError(dataPt) {
        return [computeErrorValueMinus(dataPt), computeErrorValue(dataPt)];
      };
    }
  }
};
/**
 * Compute error bar magnitude (for all types except data)
 *
 * @param {string} type error bar type
 * @param {numeric} value error bar value
 *
 * @return {function} :
 *      @param {numeric} dataPt
 */


function makeComputeErrorValue(type, value) {
  if (type === 'percent') {
    return function (dataPt) {
      return Math.abs(dataPt * value / 100);
    };
  }

  if (type === 'constant') {
    return function () {
      return Math.abs(value);
    };
  }

  if (type === 'sqrt') {
    return function (dataPt) {
      return Math.sqrt(Math.abs(dataPt));
    };
  }
}

var calc = function calc(gd) {
  var calcdata = gd.calcdata;

  for (var i = 0; i < calcdata.length; i++) {
    var calcTrace = calcdata[i];
    var trace = calcTrace[0].trace;

    if (trace.visible === true && registry.traceIs(trace, 'errorBarsOK')) {
      var xa = axes_1.getFromId(gd, trace.xaxis);
      var ya = axes_1.getFromId(gd, trace.yaxis);
      calcOneAxis(calcTrace, trace, xa, 'x');
      calcOneAxis(calcTrace, trace, ya, 'y');
    }
  }
};

function calcOneAxis(calcTrace, trace, axis, coord) {
  var opts = trace['error_' + coord] || {};
  var isVisible = opts.visible && ['linear', 'log'].indexOf(axis.type) !== -1;
  var vals = [];
  if (!isVisible) return;
  var computeError = compute_error(opts);

  for (var i = 0; i < calcTrace.length; i++) {
    var calcPt = calcTrace[i];
    var iIn = calcPt.i; // for types that don't include `i` in each calcdata point

    if (iIn === undefined) iIn = i; // for stacked area inserted points
    // TODO: errorbars have been tested cursorily with stacked area,
    // but not thoroughly. It's not even really clear what you want to do:
    // Should it just be calculated based on that trace's size data?
    // Should you add errors from below in quadrature?
    // And what about normalization, where in principle the errors shrink
    // again when you get up to the top end?
    // One option would be to forbid errorbars with stacking until we
    // decide how to handle these questions.
    else if (iIn === null) continue;
    var calcCoord = calcPt[coord];
    if (!fastIsnumeric(axis.c2l(calcCoord))) continue;
    var errors = computeError(calcCoord, iIn);

    if (fastIsnumeric(errors[0]) && fastIsnumeric(errors[1])) {
      var shoe = calcPt[coord + 's'] = calcCoord - errors[0];
      var hat = calcPt[coord + 'h'] = calcCoord + errors[1];
      vals.push(shoe, hat);
    }
  }

  var axId = axis._id;
  var baseExtremes = trace._extremes[axId];
  var extremes = axes_1.findExtremes(axis, vals, lib_1.extendFlat({
    tozero: baseExtremes.opts.tozero
  }, {
    padded: true
  }));
  baseExtremes.min = baseExtremes.min.concat(extremes.min);
  baseExtremes.max = baseExtremes.max.concat(extremes.max);
}

var plot = function plot(gd, traces, plotinfo, transitionOpts) {
  var isNew;
  var xa = plotinfo.xaxis;
  var ya = plotinfo.yaxis;
  var hasAnimation = transitionOpts && transitionOpts.duration > 0;
  traces.each(function (d) {
    var trace = d[0].trace; // || {} is in case the trace (specifically scatterternary)
    // doesn't support error bars at all, but does go through
    // the scatter.plot mechanics, which calls ErrorBars.plot
    // internally

    var xObj = trace.error_x || {};
    var yObj = trace.error_y || {};
    var keyFunc;

    if (trace.ids) {
      keyFunc = function (d) {
        return d.id;
      };
    }

    var sparse = subtypes.hasMarkers(trace) && trace.marker.maxdisplayed > 0;
    if (!yObj.visible && !xObj.visible) d = [];
    var errorbars = d3.select(this).selectAll('g.errorbar').data(d, keyFunc);
    errorbars.exit().remove();
    if (!d.length) return;
    if (!xObj.visible) errorbars.selectAll('path.xerror').remove();
    if (!yObj.visible) errorbars.selectAll('path.yerror').remove();
    errorbars.style('opacity', 1);
    var enter = errorbars.enter().append('g').classed('errorbar', true);

    if (hasAnimation) {
      enter.style('opacity', 0).transition().duration(transitionOpts.duration).style('opacity', 1);
    }

    drawing_1.setClipUrl(errorbars, plotinfo.layerClipId, gd);
    errorbars.each(function (d) {
      var errorbar = d3.select(this);
      var coords = errorCoords(d, xa, ya);
      if (sparse && !d.vis) return;
      var path;
      var yerror = errorbar.select('path.yerror');

      if (yObj.visible && fastIsnumeric(coords.x) && fastIsnumeric(coords.yh) && fastIsnumeric(coords.ys)) {
        var yw = yObj.width;
        path = 'M' + (coords.x - yw) + ',' + coords.yh + 'h' + 2 * yw + // hat
        'm-' + yw + ',0V' + coords.ys; // bar

        if (!coords.noYS) path += 'm-' + yw + ',0h' + 2 * yw; // shoe

        isNew = !yerror.size();

        if (isNew) {
          yerror = errorbar.append('path').style('vector-effect', 'non-scaling-stroke').classed('yerror', true);
        } else if (hasAnimation) {
          yerror = yerror.transition().duration(transitionOpts.duration).ease(transitionOpts.easing);
        }

        yerror.attr('d', path);
      } else yerror.remove();

      var xerror = errorbar.select('path.xerror');

      if (xObj.visible && fastIsnumeric(coords.y) && fastIsnumeric(coords.xh) && fastIsnumeric(coords.xs)) {
        var xw = (xObj.copy_ystyle ? yObj : xObj).width;
        path = 'M' + coords.xh + ',' + (coords.y - xw) + 'v' + 2 * xw + // hat
        'm0,-' + xw + 'H' + coords.xs; // bar

        if (!coords.noXS) path += 'm0,-' + xw + 'v' + 2 * xw; // shoe

        isNew = !xerror.size();

        if (isNew) {
          xerror = errorbar.append('path').style('vector-effect', 'non-scaling-stroke').classed('xerror', true);
        } else if (hasAnimation) {
          xerror = xerror.transition().duration(transitionOpts.duration).ease(transitionOpts.easing);
        }

        xerror.attr('d', path);
      } else xerror.remove();
    });
  });
}; // compute the coordinates of the error-bar objects


function errorCoords(d, xa, ya) {
  var out = {
    x: xa.c2p(d.x),
    y: ya.c2p(d.y)
  }; // calculate the error bar size and hat and shoe locations

  if (d.yh !== undefined) {
    out.yh = ya.c2p(d.yh);
    out.ys = ya.c2p(d.ys); // if the shoes go off-scale (ie log scale, error bars past zero)
    // clip the bar and hide the shoes

    if (!fastIsnumeric(out.ys)) {
      out.noYS = true;
      out.ys = ya.c2p(d.ys, true);
    }
  }

  if (d.xh !== undefined) {
    out.xh = xa.c2p(d.xh);
    out.xs = xa.c2p(d.xs);

    if (!fastIsnumeric(out.xs)) {
      out.noXS = true;
      out.xs = xa.c2p(d.xs, true);
    }
  }

  return out;
}

var style = function style(traces) {
  traces.each(function (d) {
    var trace = d[0].trace;
    var yObj = trace.error_y || {};
    var xObj = trace.error_x || {};
    var s = d3.select(this);
    s.selectAll('path.yerror').style('stroke-width', yObj.thickness + 'px').call(color_1.stroke, yObj.color);
    if (xObj.copy_ystyle) xObj = yObj;
    s.selectAll('path.xerror').style('stroke-width', xObj.thickness + 'px').call(color_1.stroke, xObj.color);
  });
};

var overrideAll = edit_types.overrideAll;
var xyAttrs = {
  error_x: lib_1.extendFlat({}, attributes),
  error_y: lib_1.extendFlat({}, attributes)
};
delete xyAttrs.error_x.copy_zstyle;
delete xyAttrs.error_y.copy_zstyle;
delete xyAttrs.error_y.copy_ystyle;
var xyzAttrs = {
  error_x: lib_1.extendFlat({}, attributes),
  error_y: lib_1.extendFlat({}, attributes),
  error_z: lib_1.extendFlat({}, attributes)
};
delete xyzAttrs.error_x.copy_ystyle;
delete xyzAttrs.error_y.copy_ystyle;
delete xyzAttrs.error_z.copy_ystyle;
delete xyzAttrs.error_z.copy_zstyle;
var errorbars = {
  moduleType: 'component',
  name: 'errorbars',
  schema: {
    traces: {
      scatter: xyAttrs,
      bar: xyAttrs,
      histogram: xyAttrs,
      scatter3d: overrideAll(xyzAttrs, 'calc', 'nested'),
      scattergl: overrideAll(xyAttrs, 'calc', 'nested')
    }
  },
  supplyDefaults: defaults,
  calc: calc,
  makeComputeError: compute_error,
  plot: plot,
  style: style,
  hoverInfo: hoverInfo
};

function hoverInfo(calcPoint, trace, hoverPoint) {
  if ((trace.error_y || {}).visible) {
    hoverPoint.yerr = calcPoint.yh - calcPoint.y;
    if (!trace.error_y.symmetric) hoverPoint.yerrneg = calcPoint.y - calcPoint.ys;
  }

  if ((trace.error_x || {}).visible) {
    hoverPoint.xerr = calcPoint.xh - calcPoint.x;
    if (!trace.error_x.symmetric) hoverPoint.xerrneg = calcPoint.x - calcPoint.xs;
  }
}

var constants = {
  cn: {
    colorbar: 'colorbar',
    cbbg: 'cbbg',
    cbfill: 'cbfill',
    cbfills: 'cbfills',
    cbline: 'cbline',
    cblines: 'cblines',
    cbaxis: 'cbaxis',
    cbtitleunshift: 'cbtitleunshift',
    cbtitle: 'cbtitle',
    cboutline: 'cboutline',
    crisp: 'crisp',
    jsPlaceholder: 'js-placeholder'
  }
};

var strTranslate = lib_1.strTranslate;
var extendFlat$1 = extend.extendFlat;
var flipScale = helpers$a.flipScale;
var LINE_SPACING = alignment.LINE_SPACING;
var FROM_TL = alignment.FROM_TL;
var FROM_BR = alignment.FROM_BR;
var cn = constants.cn;

function draw(gd) {
  var fullLayout = gd._fullLayout;

  var colorBars = fullLayout._infolayer.selectAll('g.' + cn.colorbar).data(makeColorBarData(gd), function (opts) {
    return opts._id;
  });

  colorBars.enter().append('g').attr('class', function (opts) {
    return opts._id;
  }).classed(cn.colorbar, true);
  colorBars.each(function (opts) {
    var g = d3.select(this);
    lib_1.ensureSingle(g, 'rect', cn.cbbg);
    lib_1.ensureSingle(g, 'g', cn.cbfills);
    lib_1.ensureSingle(g, 'g', cn.cblines);
    lib_1.ensureSingle(g, 'g', cn.cbaxis, function (s) {
      s.classed(cn.crisp, true);
    });
    lib_1.ensureSingle(g, 'g', cn.cbtitleunshift, function (s) {
      s.append('g').classed(cn.cbtitle, true);
    });
    lib_1.ensureSingle(g, 'rect', cn.cboutline);
    var done = drawColorBar(g, opts, gd);
    if (done && done.then) (gd._promises || []).push(done);

    if (gd._context.edits.colorbarPosition) {
      makeEditable(g, opts, gd);
    }
  });
  colorBars.exit().each(function (opts) {
    plots_1.autoMargin(gd, opts._id);
  }).remove();
  colorBars.order();
}

function makeColorBarData(gd) {
  var fullLayout = gd._fullLayout;
  var calcdata = gd.calcdata;
  var out = []; // single out item

  var opts; // colorbar attr parent container

  var cont; // trace attr container

  var trace; // colorbar options

  var cbOpt;

  function initOpts(opts) {
    return extendFlat$1(opts, {
      // fillcolor can be a d3 scale, domain is z values, range is colors
      // or leave it out for no fill,
      // or set to a string constant for single-color fill
      _fillcolor: null,
      // line.color has the same options as fillcolor
      _line: {
        color: null,
        width: null,
        dash: null
      },
      // levels of lines to draw.
      // note that this DOES NOT determine the extent of the bar
      // that's given by the domain of fillcolor
      // (or line.color if no fillcolor domain)
      _levels: {
        start: null,
        end: null,
        size: null
      },
      // separate fill levels (for example, heatmap coloring of a
      // contour map) if this is omitted, fillcolors will be
      // evaluated halfway between levels
      _filllevels: null,
      // for continuous colorscales: fill with a gradient instead of explicit levels
      // value should be the colorscale [[0, c0], [v1, c1], ..., [1, cEnd]]
      _fillgradient: null,
      // when using a gradient, we need the data range specified separately
      _zrange: null
    });
  }

  function calcOpts() {
    if (typeof cbOpt.calc === 'function') {
      cbOpt.calc(gd, trace, opts);
    } else {
      opts._fillgradient = cont.reversescale ? flipScale(cont.colorscale) : cont.colorscale;
      opts._zrange = [cont[cbOpt.min], cont[cbOpt.max]];
    }
  }

  for (var i = 0; i < calcdata.length; i++) {
    var cd = calcdata[i];
    trace = cd[0].trace;
    var moduleOpts = trace._module.colorbar;

    if (trace.visible === true && moduleOpts) {
      var allowsMultiplotCbs = Array.isArray(moduleOpts);
      var cbOpts = allowsMultiplotCbs ? moduleOpts : [moduleOpts];

      for (var j = 0; j < cbOpts.length; j++) {
        cbOpt = cbOpts[j];
        var contName = cbOpt.container;
        cont = contName ? trace[contName] : trace;

        if (cont && cont.showscale) {
          opts = initOpts(cont.colorbar);
          opts._id = 'cb' + trace.uid + (allowsMultiplotCbs && contName ? '-' + contName : '');
          opts._traceIndex = trace.index;
          opts._propPrefix = (contName ? contName + '.' : '') + 'colorbar.';
          opts._meta = trace._meta;
          calcOpts();
          out.push(opts);
        }
      }
    }
  }

  for (var k in fullLayout._colorAxes) {
    cont = fullLayout[k];

    if (cont.showscale) {
      var colorAxOpts = fullLayout._colorAxes[k];
      opts = initOpts(cont.colorbar);
      opts._id = 'cb' + k;
      opts._propPrefix = k + '.colorbar.';
      opts._meta = fullLayout._meta;
      cbOpt = {
        min: 'cmin',
        max: 'cmax'
      };

      if (colorAxOpts[0] !== 'heatmap') {
        trace = colorAxOpts[1];
        cbOpt.calc = trace._module.colorbar.calc;
      }

      calcOpts();
      out.push(opts);
    }
  }

  return out;
}

function drawColorBar(g, opts, gd) {
  var isVertical = opts.orientation === 'v';
  var len = opts.len;
  var lenmode = opts.lenmode;
  var thickness = opts.thickness;
  var thicknessmode = opts.thicknessmode;
  var outlinewidth = opts.outlinewidth;
  var borderwidth = opts.borderwidth;
  var bgcolor = opts.bgcolor;
  var xanchor = opts.xanchor;
  var yanchor = opts.yanchor;
  var xpad = opts.xpad;
  var ypad = opts.ypad;
  var optsX = opts.x;
  var optsY = isVertical ? opts.y : 1 - opts.y;
  var fullLayout = gd._fullLayout;
  var gs = fullLayout._size;
  var fillColor = opts._fillcolor;
  var line = opts._line;
  var title = opts.title;
  var titleSide = title.side;
  var zrange = opts._zrange || d3.extent((typeof fillColor === 'function' ? fillColor : line.color).domain());
  var lineColormap = typeof line.color === 'function' ? line.color : function () {
    return line.color;
  };
  var fillColormap = typeof fillColor === 'function' ? fillColor : function () {
    return fillColor;
  };
  var levelsIn = opts._levels;
  var levelsOut = calcLevels(gd, opts, zrange);
  var fillLevels = levelsOut.fill;
  var lineLevels = levelsOut.line; // we calculate pixel sizes based on the specified graph size,
  // not the actual (in case something pushed the margins around)
  // which is a little odd but avoids an odd iterative effect
  // when the colorbar itself is pushing the margins.
  // but then the fractional size is calculated based on the
  // actual graph size, so that the axes will size correctly.

  var thickPx = Math.round(thickness * (thicknessmode === 'fraction' ? isVertical ? gs.w : gs.h : 1));
  var thickFrac = thickPx / (isVertical ? gs.w : gs.h);
  var lenPx = Math.round(len * (lenmode === 'fraction' ? isVertical ? gs.h : gs.w : 1));
  var lenFrac = lenPx / (isVertical ? gs.h : gs.w); // x positioning: do it initially just for left anchor,
  // then fix at the end (since we don't know the width yet)

  var uPx = Math.round(isVertical ? optsX * gs.w + xpad : optsY * gs.h + ypad);
  var xRatio = {
    center: 0.5,
    right: 1
  }[xanchor] || 0;
  var yRatio = {
    top: 1,
    middle: 0.5
  }[yanchor] || 0; // for dragging... this is getting a little muddled...

  var uFrac = isVertical ? optsX - xRatio * thickFrac : optsY - yRatio * thickFrac; // y/x positioning (for v/h) we can do correctly from the start

  var vFrac = isVertical ? optsY - yRatio * lenFrac : optsX - xRatio * lenFrac;
  var vPx = Math.round(isVertical ? gs.h * (1 - vFrac) : gs.w * vFrac); // stash a few things for makeEditable

  opts._lenFrac = lenFrac;
  opts._thickFrac = thickFrac;
  opts._uFrac = uFrac;
  opts._vFrac = vFrac; // stash mocked axis for contour label formatting

  var ax = opts._axis = mockColorBarAxis(gd, opts, zrange); // position can't go in through supplyDefaults
  // because that restricts it to [0,1]

  ax.position = thickFrac + (isVertical ? optsX + xpad / gs.w : optsY + ypad / gs.h);
  var topOrBottom = ['top', 'bottom'].indexOf(titleSide) !== -1;

  if (isVertical && topOrBottom) {
    ax.title.side = titleSide;
    ax.titlex = optsX + xpad / gs.w;
    ax.titley = vFrac + (title.side === 'top' ? lenFrac - ypad / gs.h : ypad / gs.h);
  }

  if (!isVertical && !topOrBottom) {
    ax.title.side = titleSide;
    ax.titley = optsY + ypad / gs.h;
    ax.titlex = vFrac + xpad / gs.w; // right side
  }

  if (line.color && opts.tickmode === 'auto') {
    ax.tickmode = 'linear';
    ax.tick0 = levelsIn.start;
    var dtick = levelsIn.size; // expand if too many contours, so we don't get too many ticks

    var autoNtick = lib_1.constrain(lenPx / 50, 4, 15) + 1;
    var dtFactor = (zrange[1] - zrange[0]) / ((opts.nticks || autoNtick) * dtick);

    if (dtFactor > 1) {
      var dtexp = Math.pow(10, Math.floor(Math.log(dtFactor) / Math.LN10));
      dtick *= dtexp * lib_1.roundUp(dtFactor / dtexp, [2, 5, 10]); // if the contours are at round multiples, reset tick0
      // so they're still at round multiples. Otherwise,
      // keep the first label on the first contour level

      if ((Math.abs(levelsIn.start) / levelsIn.size + 1e-6) % 1 < 2e-6) {
        ax.tick0 = 0;
      }
    }

    ax.dtick = dtick;
  } // set domain after init, because we may want to
  // allow it outside [0,1]


  ax.domain = isVertical ? [vFrac + ypad / gs.h, vFrac + lenFrac - ypad / gs.h] : [vFrac + xpad / gs.w, vFrac + lenFrac - xpad / gs.w];
  ax.setScale();
  g.attr('transform', strTranslate(Math.round(gs.l), Math.round(gs.t)));
  var titleCont = g.select('.' + cn.cbtitleunshift).attr('transform', strTranslate(-Math.round(gs.l), -Math.round(gs.t)));
  var ticklabelposition = ax.ticklabelposition;
  var titleFontSize = ax.title.font.size;
  var axLayer = g.select('.' + cn.cbaxis);
  var titleEl;
  var titleHeight = 0;
  var titleWidth = 0;

  function drawTitle(titleClass, titleOpts) {
    var dfltTitleOpts = {
      propContainer: ax,
      propName: opts._propPrefix + 'title',
      traceIndex: opts._traceIndex,
      _meta: opts._meta,
      placeholder: fullLayout._dfltTitle.colorbar,
      containerGroup: g.select('.' + cn.cbtitle)
    }; // this class-to-rotate thing with convertToTspans is
    // getting hackier and hackier... delete groups with the
    // wrong class (in case earlier the colorbar was drawn on
    // a different side, I think?)

    var otherClass = titleClass.charAt(0) === 'h' ? titleClass.substr(1) : 'h' + titleClass;
    g.selectAll('.' + otherClass + ',.' + otherClass + '-math-group').remove();
    titles.draw(gd, titleClass, extendFlat$1(dfltTitleOpts, titleOpts || {}));
  }

  function drawDummyTitle() {
    // draw the title so we know how much room it needs
    // when we squish the axis.
    // On vertical colorbars this only applies to top or bottom titles, not right side.
    // On horizontal colorbars this only applies to right, etc.
    if (isVertical && topOrBottom || !isVertical && !topOrBottom) {
      var x, y;

      if (titleSide === 'top') {
        x = xpad + gs.l + gs.w * optsX;
        y = ypad + gs.t + gs.h * (1 - vFrac - lenFrac) + 3 + titleFontSize * 0.75;
      }

      if (titleSide === 'bottom') {
        x = xpad + gs.l + gs.w * optsX;
        y = ypad + gs.t + gs.h * (1 - vFrac) - 3 - titleFontSize * 0.25;
      }

      if (titleSide === 'right') {
        y = ypad + gs.t + gs.h * optsY + 3 + titleFontSize * 0.75;
        x = xpad + gs.l + gs.w * vFrac;
      }

      drawTitle(ax._id + 'title', {
        attributes: {
          x: x,
          y: y,
          'text-anchor': isVertical ? 'start' : 'middle'
        }
      });
    }
  }

  function drawCbTitle() {
    if (isVertical && !topOrBottom || !isVertical && topOrBottom) {
      var pos = ax.position || 0;
      var mid = ax._offset + ax._length / 2;
      var x, y;

      if (titleSide === 'right') {
        y = mid;
        x = gs.l + gs.w * pos + 10 + titleFontSize * (ax.showticklabels ? 1 : 0.5);
      } else {
        x = mid;

        if (titleSide === 'bottom') {
          y = gs.t + gs.h * pos + 10 + (ticklabelposition.indexOf('inside') === -1 ? ax.tickfont.size : 0) + (ax.ticks !== 'intside' ? opts.ticklen || 0 : 0);
        }

        if (titleSide === 'top') {
          var nlines = title.text.split('<br>').length;
          y = gs.t + gs.h * pos + 10 - thickPx - LINE_SPACING * titleFontSize * nlines;
        }
      }

      drawTitle((isVertical ? // the 'h' + is a hack to get around the fact that
      // convertToTspans rotates any 'y...' class by 90 degrees.
      // TODO: find a better way to control this.
      'h' : 'v') + ax._id + 'title', {
        avoid: {
          selection: d3.select(gd).selectAll('g.' + ax._id + 'tick'),
          side: titleSide,
          offsetTop: isVertical ? 0 : gs.t,
          offsetLeft: isVertical ? gs.l : 0,
          maxShift: isVertical ? fullLayout.width : fullLayout.height
        },
        attributes: {
          x: x,
          y: y,
          'text-anchor': 'middle'
        },
        transform: {
          rotate: isVertical ? -90 : 0,
          offset: 0
        }
      });
    }
  }

  function drawAxis() {
    if (!isVertical && !topOrBottom || isVertical && topOrBottom) {
      // squish the axis top to make room for the title
      var titleGroup = g.select('.' + cn.cbtitle);
      var titleText = titleGroup.select('text');
      var titleTrans = [-outlinewidth / 2, outlinewidth / 2];
      var mathJaxNode = titleGroup.select('.h' + ax._id + 'title-math-group').node();
      var lineSize = 15.6;

      if (titleText.node()) {
        lineSize = parseInt(titleText.node().style.fontSize, 10) * LINE_SPACING;
      }

      var bb;

      if (mathJaxNode) {
        bb = drawing_1.bBox(mathJaxNode);
        titleWidth = bb.width;
        titleHeight = bb.height;

        if (titleHeight > lineSize) {
          // not entirely sure how mathjax is doing
          // vertical alignment, but this seems to work.
          titleTrans[1] -= (titleHeight - lineSize) / 2;
        }
      } else if (titleText.node() && !titleText.classed(cn.jsPlaceholder)) {
        bb = drawing_1.bBox(titleText.node());
        titleWidth = bb.width;
        titleHeight = bb.height;
      }

      if (isVertical) {
        if (titleHeight) {
          // buffer btwn colorbar and title
          // TODO: configurable
          titleHeight += 5;

          if (titleSide === 'top') {
            ax.domain[1] -= titleHeight / gs.h;
            titleTrans[1] *= -1;
          } else {
            ax.domain[0] += titleHeight / gs.h;
            var nlines = svg_text_utils.lineCount(titleText);
            titleTrans[1] += (1 - nlines) * lineSize;
          }

          titleGroup.attr('transform', strTranslate(titleTrans[0], titleTrans[1]));
          ax.setScale();
        }
      } else {
        // horizontal colorbars
        if (titleWidth) {
          if (titleSide === 'right') {
            ax.domain[0] += (titleWidth + titleFontSize / 2) / gs.w;
          }

          titleGroup.attr('transform', strTranslate(titleTrans[0], titleTrans[1]));
          ax.setScale();
        }
      }
    }

    g.selectAll('.' + cn.cbfills + ',.' + cn.cblines).attr('transform', isVertical ? strTranslate(0, Math.round(gs.h * (1 - ax.domain[1]))) : strTranslate(Math.round(gs.w * ax.domain[0]), 0));
    axLayer.attr('transform', isVertical ? strTranslate(0, Math.round(-gs.t)) : strTranslate(Math.round(-gs.l), 0));
    var fills = g.select('.' + cn.cbfills).selectAll('rect.' + cn.cbfill).attr('style', '').data(fillLevels);
    fills.enter().append('rect').classed(cn.cbfill, true).style('stroke', 'none');
    fills.exit().remove();
    var zBounds = zrange.map(ax.c2p).map(Math.round).sort(function (a, b) {
      return a - b;
    });
    fills.each(function (d, i) {
      var z = [i === 0 ? zrange[0] : (fillLevels[i] + fillLevels[i - 1]) / 2, i === fillLevels.length - 1 ? zrange[1] : (fillLevels[i] + fillLevels[i + 1]) / 2].map(ax.c2p).map(Math.round); // offset the side adjoining the next rectangle so they
      // overlap, to prevent antialiasing gaps

      if (isVertical) {
        z[1] = lib_1.constrain(z[1] + (z[1] > z[0]) ? 1 : -1, zBounds[0], zBounds[1]);
      }
      /* else {
        // TODO: horizontal case
      } */
      // Colorbar cannot currently support opacities so we
      // use an opaque fill even when alpha channels present


      var fillEl = d3.select(this).attr(isVertical ? 'x' : 'y', uPx).attr(isVertical ? 'y' : 'x', d3.min(z)).attr(isVertical ? 'width' : 'height', Math.max(thickPx, 2)).attr(isVertical ? 'height' : 'width', Math.max(d3.max(z) - d3.min(z), 2));

      if (opts._fillgradient) {
        drawing_1.gradient(fillEl, gd, opts._id, isVertical ? 'vertical' : 'horizontalreversed', opts._fillgradient, 'fill');
      } else {
        // tinycolor can't handle exponents and
        // at this scale, removing it makes no difference.
        var colorString = fillColormap(d).replace('e-', '');
        fillEl.attr('fill', tinycolor(colorString).toHexString());
      }
    });
    var lines = g.select('.' + cn.cblines).selectAll('path.' + cn.cbline).data(line.color && line.width ? lineLevels : []);
    lines.enter().append('path').classed(cn.cbline, true);
    lines.exit().remove();
    lines.each(function (d) {
      var a = uPx;
      var b = Math.round(ax.c2p(d)) + line.width / 2 % 1;
      d3.select(this).attr('d', 'M' + (isVertical ? a + ',' + b : b + ',' + a) + (isVertical ? 'h' : 'v') + thickPx).call(drawing_1.lineGroupStyle, line.width, lineColormap(d), line.dash);
    }); // force full redraw of labels and ticks

    axLayer.selectAll('g.' + ax._id + 'tick,path').remove();
    var shift = uPx + thickPx + (outlinewidth || 0) / 2 - (opts.ticks === 'outside' ? 1 : 0);
    var vals = axes_1.calcTicks(ax);
    var tickSign = axes_1.getTickSigns(ax)[2];
    axes_1.drawTicks(gd, ax, {
      vals: ax.ticks === 'inside' ? axes_1.clipEnds(ax, vals) : vals,
      layer: axLayer,
      path: axes_1.makeTickPath(ax, shift, tickSign),
      transFn: axes_1.makeTransTickFn(ax)
    });
    return axes_1.drawLabels(gd, ax, {
      vals: vals,
      layer: axLayer,
      transFn: axes_1.makeTransTickLabelFn(ax),
      labelFns: axes_1.makeLabelFns(ax, shift)
    });
  } // wait for the axis & title to finish rendering before
  // continuing positioning
  // TODO: why are we redrawing multiple times now with this?
  // I guess autoMargin doesn't like being post-promise?


  function positionCB() {
    var bb;
    var innerThickness = thickPx + outlinewidth / 2;

    if (ticklabelposition.indexOf('inside') === -1) {
      bb = drawing_1.bBox(axLayer.node());
      innerThickness += isVertical ? bb.width : bb.height;
    }

    titleEl = titleCont.select('text');
    var titleWidth = 0;
    var topSideVertical = isVertical && titleSide === 'top';
    var rightSideHorizontal = !isVertical && titleSide === 'right';
    var moveY = 0;

    if (titleEl.node() && !titleEl.classed(cn.jsPlaceholder)) {
      var _titleHeight;

      var mathJaxNode = titleCont.select('.h' + ax._id + 'title-math-group').node();

      if (mathJaxNode && (isVertical && topOrBottom || !isVertical && !topOrBottom)) {
        bb = drawing_1.bBox(mathJaxNode);
        titleWidth = bb.width;
        _titleHeight = bb.height;
      } else {
        // note: the formula below works for all title sides,
        // (except for top/bottom mathjax, above)
        // but the weird gs.l is because the titleunshift
        // transform gets removed by Drawing.bBox
        bb = drawing_1.bBox(titleCont.node());
        titleWidth = bb.right - gs.l - (isVertical ? uPx : vPx);
        _titleHeight = bb.bottom - gs.t - (isVertical ? vPx : uPx);

        if (!isVertical && titleSide === 'top') {
          innerThickness += bb.height;
          moveY = bb.height;
        }
      }

      if (rightSideHorizontal) {
        titleEl.attr('transform', strTranslate(titleWidth / 2 + titleFontSize / 2, 0));
        titleWidth *= 2;
      }

      innerThickness = Math.max(innerThickness, isVertical ? titleWidth : _titleHeight);
    }

    var outerThickness = (isVertical ? xpad : ypad) * 2 + innerThickness + borderwidth + outlinewidth / 2;
    var hColorbarMoveTitle = 0;

    if (!isVertical && title.text && yanchor === 'bottom' && optsY <= 0) {
      hColorbarMoveTitle = outerThickness / 2;
      outerThickness += hColorbarMoveTitle;
      moveY += hColorbarMoveTitle;
    }

    fullLayout._hColorbarMoveTitle = hColorbarMoveTitle;
    fullLayout._hColorbarMoveCBTitle = moveY;
    var extraW = borderwidth + outlinewidth;
    g.select('.' + cn.cbbg).attr('x', (isVertical ? uPx : vPx) - extraW / 2 - (isVertical ? xpad : 0)).attr('y', (isVertical ? vPx : uPx) - (isVertical ? lenPx : ypad + moveY - hColorbarMoveTitle)).attr(isVertical ? 'width' : 'height', Math.max(outerThickness - hColorbarMoveTitle, 2)).attr(isVertical ? 'height' : 'width', Math.max(lenPx + extraW, 2)).call(color_1.fill, bgcolor).call(color_1.stroke, opts.bordercolor).style('stroke-width', borderwidth);
    var moveX = rightSideHorizontal ? Math.max(titleWidth - 10, 0) : 0;
    g.selectAll('.' + cn.cboutline).attr('x', (isVertical ? uPx : vPx + xpad) + moveX).attr('y', (isVertical ? vPx + ypad - lenPx : uPx) + (topSideVertical ? titleHeight : 0)).attr(isVertical ? 'width' : 'height', Math.max(thickPx, 2)).attr(isVertical ? 'height' : 'width', Math.max(lenPx - (isVertical ? 2 * ypad + titleHeight : 2 * xpad + moveX), 2)).call(color_1.stroke, opts.outlinecolor).style({
      fill: 'none',
      'stroke-width': outlinewidth
    });
    g.attr('transform', strTranslate(gs.l - (isVertical ? xRatio * outerThickness : 0), gs.t - (isVertical ? 0 : (1 - yRatio) * outerThickness - moveY)));

    if (!isVertical && (borderwidth || tinycolor(bgcolor).getAlpha() && !tinycolor.equals(fullLayout.paper_bgcolor, bgcolor))) {
      // for horizontal colorbars when there is a border line or having different background color
      // hide/adjust x positioning for the first/last tick labels if they go outside the border
      var tickLabels = axLayer.selectAll('text');
      var numTicks = tickLabels[0].length;
      var border = g.select('.' + cn.cbbg).node();
      var oBb = drawing_1.bBox(border);
      var oTr = drawing_1.getTranslate(g);
      var TEXTPAD = 2;
      tickLabels.each(function (d, i) {
        var first = 0;
        var last = numTicks - 1;

        if (i === first || i === last) {
          var iBb = drawing_1.bBox(this);
          var iTr = drawing_1.getTranslate(this);
          var deltaX;

          if (i === last) {
            var iRight = iBb.right + iTr.x;
            var oRight = oBb.right + oTr.x + vPx - borderwidth - TEXTPAD + optsX;
            deltaX = oRight - iRight;
            if (deltaX > 0) deltaX = 0;
          } else if (i === first) {
            var iLeft = iBb.left + iTr.x;
            var oLeft = oBb.left + oTr.x + vPx + borderwidth + TEXTPAD;
            deltaX = oLeft - iLeft;
            if (deltaX < 0) deltaX = 0;
          }

          if (deltaX) {
            if (numTicks < 3) {
              // adjust position
              this.setAttribute('transform', 'translate(' + deltaX + ',0) ' + this.getAttribute('transform'));
            } else {
              // hide
              this.setAttribute('visibility', 'hidden');
            }
          }
        }
      });
    } // auto margin adjustment


    var marginOpts = {};
    var lFrac = FROM_TL[xanchor];
    var rFrac = FROM_BR[xanchor];
    var tFrac = FROM_TL[yanchor];
    var bFrac = FROM_BR[yanchor];
    var extraThickness = outerThickness - thickPx;

    if (isVertical) {
      if (lenmode === 'pixels') {
        marginOpts.y = optsY;
        marginOpts.t = lenPx * tFrac;
        marginOpts.b = lenPx * bFrac;
      } else {
        marginOpts.t = marginOpts.b = 0;
        marginOpts.yt = optsY + len * tFrac;
        marginOpts.yb = optsY - len * bFrac;
      }

      if (thicknessmode === 'pixels') {
        marginOpts.x = optsX;
        marginOpts.l = outerThickness * lFrac;
        marginOpts.r = outerThickness * rFrac;
      } else {
        marginOpts.l = extraThickness * lFrac;
        marginOpts.r = extraThickness * rFrac;
        marginOpts.xl = optsX - thickness * lFrac;
        marginOpts.xr = optsX + thickness * rFrac;
      }
    } else {
      // horizontal colorbars
      if (lenmode === 'pixels') {
        marginOpts.x = optsX;
        marginOpts.l = lenPx * lFrac;
        marginOpts.r = lenPx * rFrac;
      } else {
        marginOpts.l = marginOpts.r = 0;
        marginOpts.xl = optsX + len * lFrac;
        marginOpts.xr = optsX - len * rFrac;
      }

      if (thicknessmode === 'pixels') {
        marginOpts.y = 1 - optsY;
        marginOpts.t = outerThickness * tFrac;
        marginOpts.b = outerThickness * bFrac;
      } else {
        marginOpts.t = extraThickness * tFrac;
        marginOpts.b = extraThickness * bFrac;
        marginOpts.yt = optsY - thickness * tFrac;
        marginOpts.yb = optsY + thickness * bFrac;
      }
    }

    plots_1.autoMargin(gd, opts._id, marginOpts);
  }

  return lib_1.syncOrAsync([plots_1.previousPromises, drawDummyTitle, drawAxis, drawCbTitle, plots_1.previousPromises, positionCB], gd);
}

function makeEditable(g, opts, gd) {
  var isVertical = opts.orientation === 'v';
  var fullLayout = gd._fullLayout;
  var gs = fullLayout._size;
  var t0, xf, yf;
  dragelement.init({
    element: g.node(),
    gd: gd,
    prepFn: function () {
      t0 = g.attr('transform');
      setcursor(g);
    },
    moveFn: function (dx, dy) {
      g.attr('transform', t0 + strTranslate(dx, dy));
      xf = dragelement.align((isVertical ? opts._uFrac : opts._vFrac) + dx / gs.w, isVertical ? opts._thickFrac : opts._lenFrac, 0, 1, opts.xanchor);
      yf = dragelement.align((isVertical ? opts._vFrac : 1 - opts._uFrac) - dy / gs.h, isVertical ? opts._lenFrac : opts._thickFrac, 0, 1, opts.yanchor);
      var csr = dragelement.getCursor(xf, yf, opts.xanchor, opts.yanchor);
      setcursor(g, csr);
    },
    doneFn: function () {
      setcursor(g);

      if (xf !== undefined && yf !== undefined) {
        var update = {};
        update[opts._propPrefix + 'x'] = xf;
        update[opts._propPrefix + 'y'] = yf;

        if (opts._traceIndex !== undefined) {
          registry.call('_guiRestyle', gd, update, opts._traceIndex);
        } else {
          registry.call('_guiRelayout', gd, update);
        }
      }
    }
  });
}

function calcLevels(gd, opts, zrange) {
  var levelsIn = opts._levels;
  var lineLevels = [];
  var fillLevels = [];
  var l;
  var i;
  var l0 = levelsIn.end + levelsIn.size / 100;
  var ls = levelsIn.size;
  var zr0 = 1.001 * zrange[0] - 0.001 * zrange[1];
  var zr1 = 1.001 * zrange[1] - 0.001 * zrange[0];

  for (i = 0; i < 1e5; i++) {
    l = levelsIn.start + i * ls;
    if (ls > 0 ? l >= l0 : l <= l0) break;
    if (l > zr0 && l < zr1) lineLevels.push(l);
  }

  if (opts._fillgradient) {
    fillLevels = [0];
  } else if (typeof opts._fillcolor === 'function') {
    var fillLevelsIn = opts._filllevels;

    if (fillLevelsIn) {
      l0 = fillLevelsIn.end + fillLevelsIn.size / 100;
      ls = fillLevelsIn.size;

      for (i = 0; i < 1e5; i++) {
        l = fillLevelsIn.start + i * ls;
        if (ls > 0 ? l >= l0 : l <= l0) break;
        if (l > zrange[0] && l < zrange[1]) fillLevels.push(l);
      }
    } else {
      fillLevels = lineLevels.map(function (v) {
        return v - levelsIn.size / 2;
      });
      fillLevels.push(fillLevels[fillLevels.length - 1] + levelsIn.size);
    }
  } else if (opts._fillcolor && typeof opts._fillcolor === 'string') {
    // doesn't matter what this value is, with a single value
    // we'll make a single fill rect covering the whole bar
    fillLevels = [0];
  }

  if (levelsIn.size < 0) {
    lineLevels.reverse();
    fillLevels.reverse();
  }

  return {
    line: lineLevels,
    fill: fillLevels
  };
}

function mockColorBarAxis(gd, opts, zrange) {
  var fullLayout = gd._fullLayout;
  var isVertical = opts.orientation === 'v';
  var cbAxisIn = {
    type: 'linear',
    range: zrange,
    tickmode: opts.tickmode,
    nticks: opts.nticks,
    tick0: opts.tick0,
    dtick: opts.dtick,
    tickvals: opts.tickvals,
    ticktext: opts.ticktext,
    ticks: opts.ticks,
    ticklen: opts.ticklen,
    tickwidth: opts.tickwidth,
    tickcolor: opts.tickcolor,
    showticklabels: opts.showticklabels,
    ticklabelposition: opts.ticklabelposition,
    ticklabeloverflow: opts.ticklabeloverflow,
    ticklabelstep: opts.ticklabelstep,
    tickfont: opts.tickfont,
    tickangle: opts.tickangle,
    tickformat: opts.tickformat,
    exponentformat: opts.exponentformat,
    minexponent: opts.minexponent,
    separatethousands: opts.separatethousands,
    showexponent: opts.showexponent,
    showtickprefix: opts.showtickprefix,
    tickprefix: opts.tickprefix,
    showticksuffix: opts.showticksuffix,
    ticksuffix: opts.ticksuffix,
    title: opts.title,
    showline: true,
    anchor: 'free',
    side: isVertical ? 'right' : 'bottom',
    position: 1
  };
  var letter = isVertical ? 'y' : 'x';
  var cbAxisOut = {
    type: 'linear',
    _id: letter + opts._id
  };
  var axisOptions = {
    letter: letter,
    font: fullLayout.font,
    noHover: true,
    noTickson: true,
    noTicklabelmode: true,
    calendar: fullLayout.calendar // not really necessary (yet?)

  };

  function coerce(attr, dflt) {
    return lib_1.coerce(cbAxisIn, cbAxisOut, layout_attributes$1, attr, dflt);
  }

  axis_defaults(cbAxisIn, cbAxisOut, coerce, axisOptions, fullLayout);
  position_defaults(cbAxisIn, cbAxisOut, coerce, axisOptions);
  return cbAxisOut;
}

var draw_1 = {
  draw: draw
};

var colorbar = {
  moduleType: 'component',
  name: 'colorbar',
  attributes: attributes$g,
  supplyDefaults: defaults$g,
  draw: draw_1.draw,
  hasColorbar: has_colorbar
};

var localeEn = {
  moduleType: 'locale',
  name: 'en',
  dictionary: {
    'Click to enter Colorscale title': 'Click to enter Colourscale title'
  },
  format: {
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    periods: ['AM', 'PM'],
    dateTime: '%a %b %e %X %Y',
    date: '%d/%m/%Y',
    time: '%H:%M:%S',
    decimal: '.',
    thousands: ',',
    grouping: [3],
    currency: ['$', ''],
    year: '%Y',
    month: '%b %Y',
    dayMonth: '%b %-d',
    dayMonthYear: '%b %-d, %Y'
  }
};

var localeEnUs = {
  moduleType: 'locale',
  name: 'en-US',
  dictionary: {
    'Click to enter Colorscale title': 'Click to enter Colorscale title'
  },
  format: {
    date: '%m/%d/%Y'
  }
};

var extendFlat = lib_1.extendFlat;
var extendDeep = lib_1.extendDeep; // Put default plotTile layouts here

function cloneLayoutOverride(tileClass) {
  var override;

  switch (tileClass) {
    case 'themes__thumb':
      override = {
        autosize: true,
        width: 150,
        height: 150,
        title: {
          text: ''
        },
        showlegend: false,
        margin: {
          l: 5,
          r: 5,
          t: 5,
          b: 5,
          pad: 0
        },
        annotations: []
      };
      break;

    case 'thumbnail':
      override = {
        title: {
          text: ''
        },
        hidesources: true,
        showlegend: false,
        borderwidth: 0,
        bordercolor: '',
        margin: {
          l: 1,
          r: 1,
          t: 1,
          b: 1,
          pad: 0
        },
        annotations: []
      };
      break;

    default:
      override = {};
  }

  return override;
}

function keyIsAxis(keyName) {
  var types = ['xaxis', 'yaxis', 'zaxis'];
  return types.indexOf(keyName.slice(0, 5)) > -1;
}

var cloneplot = function clonePlot(graphObj, options) {
  var i;
  var oldData = graphObj.data;
  var oldLayout = graphObj.layout;
  var newData = extendDeep([], oldData);
  var newLayout = extendDeep({}, oldLayout, cloneLayoutOverride(options.tileClass));
  var context = graphObj._context || {};
  if (options.width) newLayout.width = options.width;
  if (options.height) newLayout.height = options.height;

  if (options.tileClass === 'thumbnail' || options.tileClass === 'themes__thumb') {
    // kill annotations
    newLayout.annotations = [];
    var keys = Object.keys(newLayout);

    for (i = 0; i < keys.length; i++) {
      if (keyIsAxis(keys[i])) {
        newLayout[keys[i]].title = {
          text: ''
        };
      }
    } // kill colorbar and pie labels


    for (i = 0; i < newData.length; i++) {
      var trace = newData[i];
      trace.showscale = false;
      if (trace.marker) trace.marker.showscale = false;
      if (registry.traceIs(trace, 'pie-like')) trace.textposition = 'none';
    }
  }

  if (Array.isArray(options.annotations)) {
    for (i = 0; i < options.annotations.length; i++) {
      newLayout.annotations.push(options.annotations[i]);
    }
  } // TODO: does this scene modification really belong here?
  // If we still need it, can it move into the gl3d module?


  var sceneIds = Object.keys(newLayout).filter(function (key) {
    return key.match(/^scene\d*$/);
  });

  if (sceneIds.length) {
    var axesImageOverride = {};

    if (options.tileClass === 'thumbnail') {
      axesImageOverride = {
        title: {
          text: ''
        },
        showaxeslabels: false,
        showticklabels: false,
        linetickenable: false
      };
    }

    for (i = 0; i < sceneIds.length; i++) {
      var scene = newLayout[sceneIds[i]];

      if (!scene.xaxis) {
        scene.xaxis = {};
      }

      if (!scene.yaxis) {
        scene.yaxis = {};
      }

      if (!scene.zaxis) {
        scene.zaxis = {};
      }

      extendFlat(scene.xaxis, axesImageOverride);
      extendFlat(scene.yaxis, axesImageOverride);
      extendFlat(scene.zaxis, axesImageOverride); // TODO what does this do?

      scene._scene = null;
    }
  }

  var gd = document.createElement('div');
  if (options.tileClass) gd.className = options.tileClass;
  var plotTile = {
    gd: gd,
    td: gd,
    // for external (image server) compatibility
    layout: newLayout,
    data: newData,
    config: {
      staticPlot: options.staticPlot === undefined ? true : options.staticPlot,
      plotGlPixelRatio: options.plotGlPixelRatio === undefined ? 2 : options.plotGlPixelRatio,
      displaylogo: options.displaylogo || false,
      showLink: options.showLink || false,
      showTips: options.showTips || false,
      mapboxAccessToken: context.mapboxAccessToken
    }
  };

  if (options.setBackground !== 'transparent') {
    plotTile.config.setBackground = options.setBackground || 'opaque';
  } // attaching the default Layout the gd, so you can grab it later


  plotTile.gd.defaultLayout = cloneLayoutOverride(options.tileClass);
  return plotTile;
};

var EventEmitter = events$1.EventEmitter;
/**
 * @param {object} gd figure Object
 * @param {object} opts option object
 * @param opts.format 'jpeg' | 'png' | 'webp' | 'svg'
 */

function toImage(gd, opts) {
  // first clone the GD so we can operate in a clean environment
  var ev = new EventEmitter();
  var clone = cloneplot(gd, {
    format: 'png'
  });
  var clonedGd = clone.gd; // put the cloned div somewhere off screen before attaching to DOM

  clonedGd.style.position = 'absolute';
  clonedGd.style.left = '-5000px';
  document.body.appendChild(clonedGd);

  function wait() {
    var delay = helpers$1.getDelay(clonedGd._fullLayout);
    setTimeout(function () {
      var svg = tosvg(clonedGd);
      var canvas = document.createElement('canvas');
      canvas.id = lib_1.randstr();
      ev = svgtoimg({
        format: opts.format,
        width: clonedGd._fullLayout.width,
        height: clonedGd._fullLayout.height,
        canvas: canvas,
        emitter: ev,
        svg: svg
      });

      ev.clean = function () {
        if (clonedGd) document.body.removeChild(clonedGd);
      };
    }, delay);
  }

  var redrawFunc = helpers$1.getRedrawFunc(clonedGd);
  registry.call('_doPlot', clonedGd, clone.data, clone.layout, clone.config).then(redrawFunc).then(wait).catch(function (err) {
    ev.emit('error', err);
  });
  return ev;
}

var toimage = toImage;

var Snapshot = {
  getDelay: helpers$1.getDelay,
  getRedrawFunc: helpers$1.getRedrawFunc,
  clone: cloneplot,
  toSVG: tosvg,
  svgToImg: svgtoimg,
  toImage: toimage,
  downloadImage: download
};
var snapshot = Snapshot;

var core$1 = createCommonjsModule(function (module, exports) {

  exports.version = version$2.version; // inject promise polyfill
  // inject plot css
  // include registry module and expose register method

  var register = exports.register = registry.register; // expose plot api methods

  var methodNames = Object.keys(plot_api);

  for (var i = 0; i < methodNames.length; i++) {
    var name = methodNames[i]; // _ -> private API methods, but still registered for internal use

    if (name.charAt(0) !== '_') exports[name] = plot_api[name];
    register({
      moduleType: 'apiMethod',
      name: name,
      fn: plot_api[name]
    });
  } // scatter is the only trace included by default


  register(scatter); // register all registrable components modules

  register([legend, fx, // fx needs to come after legend
  annotations, annotations3d, shapes, images, updatemenus, sliders, rangeslider, rangeselector, grid, errorbars, colorscale, colorbar, modebar]); // locales en and en-US are required for default behavior

  register([localeEn, localeEnUs]); // locales that are present in the window should be loaded

  if (window.PlotlyLocales && Array.isArray(window.PlotlyLocales)) {
    register(window.PlotlyLocales);
    delete window.PlotlyLocales;
  } // plot icons


  exports.Icons = ploticon; // unofficial 'beta' plot methods, use at your own risk

  exports.Plots = {
    resize: plots_1.resize,
    graphJson: plots_1.graphJson,
    sendDataToCloud: plots_1.sendDataToCloud
  };
  exports.Fx = {
    hover: fx.hover,
    unhover: fx.unhover,
    loneHover: fx.loneHover,
    loneUnhover: fx.loneUnhover
  };
  exports.Snapshot = snapshot;
  exports.PlotSchema = plot_schema;
});

var core = core$1;

let _$2 = t => t,
    _t$2;
const plotlyStyle = r$2(_t$2 || (_t$2 = _$2`
  /* inject:css */
  .js-plotly-plot .plotly, .js-plotly-plot .plotly div {
  direction: ltr;
  font-family: "Open Sans", verdana, arial, sans-serif;
  margin: 0;
  padding: 0;
}
.js-plotly-plot .plotly input, .js-plotly-plot .plotly button {
  font-family: "Open Sans", verdana, arial, sans-serif;
}
.js-plotly-plot .plotly input:focus, .js-plotly-plot .plotly button:focus {
  outline: none;
}
.js-plotly-plot .plotly a {
  text-decoration: none;
}
.js-plotly-plot .plotly a:hover {
  text-decoration: none;
}
.js-plotly-plot .plotly .crisp {
  shape-rendering: crispEdges;
}
.js-plotly-plot .plotly .user-select-none {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none;
}
.js-plotly-plot .plotly svg {
  overflow: hidden;
}
.js-plotly-plot .plotly svg a {
  fill: #447adb;
}
.js-plotly-plot .plotly svg a:hover {
  fill: #3c6dc5;
}
.js-plotly-plot .plotly .main-svg {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
}
.js-plotly-plot .plotly .main-svg .draglayer {
  pointer-events: all;
}
.js-plotly-plot .plotly .cursor-default {
  cursor: default;
}
.js-plotly-plot .plotly .cursor-pointer {
  cursor: pointer;
}
.js-plotly-plot .plotly .cursor-crosshair {
  cursor: crosshair;
}
.js-plotly-plot .plotly .cursor-move {
  cursor: move;
}
.js-plotly-plot .plotly .cursor-col-resize {
  cursor: col-resize;
}
.js-plotly-plot .plotly .cursor-row-resize {
  cursor: row-resize;
}
.js-plotly-plot .plotly .cursor-ns-resize {
  cursor: ns-resize;
}
.js-plotly-plot .plotly .cursor-ew-resize {
  cursor: ew-resize;
}
.js-plotly-plot .plotly .cursor-sw-resize {
  cursor: sw-resize;
}
.js-plotly-plot .plotly .cursor-s-resize {
  cursor: s-resize;
}
.js-plotly-plot .plotly .cursor-se-resize {
  cursor: se-resize;
}
.js-plotly-plot .plotly .cursor-w-resize {
  cursor: w-resize;
}
.js-plotly-plot .plotly .cursor-e-resize {
  cursor: e-resize;
}
.js-plotly-plot .plotly .cursor-nw-resize {
  cursor: nw-resize;
}
.js-plotly-plot .plotly .cursor-n-resize {
  cursor: n-resize;
}
.js-plotly-plot .plotly .cursor-ne-resize {
  cursor: ne-resize;
}
.js-plotly-plot .plotly .cursor-grab {
  cursor: -webkit-grab;
  cursor: grab;
}
.js-plotly-plot .plotly .modebar {
  position: absolute;
  top: 2px;
  right: 2px;
}
.js-plotly-plot .plotly .ease-bg {
  -webkit-transition: background-color 0.3s ease 0s;
  -moz-transition: background-color 0.3s ease 0s;
  -ms-transition: background-color 0.3s ease 0s;
  -o-transition: background-color 0.3s ease 0s;
  transition: background-color 0.3s ease 0s;
}
.js-plotly-plot .plotly .modebar--hover > :not(.watermark) {
  opacity: 0;
  -webkit-transition: opacity 0.3s ease 0s;
  -moz-transition: opacity 0.3s ease 0s;
  -ms-transition: opacity 0.3s ease 0s;
  -o-transition: opacity 0.3s ease 0s;
  transition: opacity 0.3s ease 0s;
}
.js-plotly-plot .plotly:hover .modebar--hover .modebar-group {
  opacity: 1;
}
.js-plotly-plot .plotly .modebar-group {
  float: left;
  display: inline-block;
  box-sizing: border-box;
  padding-left: 8px;
  position: relative;
  vertical-align: middle;
  white-space: nowrap;
}
.js-plotly-plot .plotly .modebar-btn {
  position: relative;
  font-size: 16px;
  padding: 3px 4px;
  height: 22px;
  /* display: inline-block; including this breaks 3d interaction in .embed mode. Chrome bug? */
  cursor: pointer;
  line-height: normal;
  box-sizing: border-box;
}
.js-plotly-plot .plotly .modebar-btn svg {
  position: relative;
  top: 2px;
}
.js-plotly-plot .plotly .modebar.vertical {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  align-content: flex-end;
  max-height: 100%;
}
.js-plotly-plot .plotly .modebar.vertical svg {
  top: -1px;
}
.js-plotly-plot .plotly .modebar.vertical .modebar-group {
  display: block;
  float: none;
  padding-left: 0px;
  padding-bottom: 8px;
}
.js-plotly-plot .plotly .modebar.vertical .modebar-group .modebar-btn {
  display: block;
  text-align: center;
}
.js-plotly-plot .plotly [data-title] {
  /**
   * tooltip body
   */
}
.js-plotly-plot .plotly [data-title]:before, .js-plotly-plot .plotly [data-title]:after {
  position: absolute;
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
  display: none;
  opacity: 0;
  z-index: 1001;
  pointer-events: none;
  top: 110%;
  right: 50%;
}
.js-plotly-plot .plotly [data-title]:hover:before, .js-plotly-plot .plotly [data-title]:hover:after {
  display: block;
  opacity: 1;
}
.js-plotly-plot .plotly [data-title]:before {
  content: "";
  position: absolute;
  background: transparent;
  border: 6px solid transparent;
  z-index: 1002;
  margin-top: -12px;
  border-bottom-color: #69738a;
  margin-right: -6px;
}
.js-plotly-plot .plotly [data-title]:after {
  content: attr(data-title);
  background: #69738a;
  color: white;
  padding: 8px 10px;
  font-size: 12px;
  line-height: 12px;
  white-space: nowrap;
  margin-right: -18px;
  border-radius: 2px;
}
.js-plotly-plot .plotly .vertical [data-title]:before, .js-plotly-plot .plotly .vertical [data-title]:after {
  top: 0%;
  right: 200%;
}
.js-plotly-plot .plotly .vertical [data-title]:before {
  border: 6px solid transparent;
  border-left-color: #69738a;
  margin-top: 8px;
  margin-right: -30px;
}
.js-plotly-plot .plotly .select-outline {
  fill: none;
  stroke-width: 1;
  shape-rendering: crispEdges;
}
.js-plotly-plot .plotly .select-outline-1 {
  stroke: white;
}
.js-plotly-plot .plotly .select-outline-2 {
  stroke: black;
  stroke-dasharray: 2px 2px;
}

.plotly-notifier {
  font-family: "Open Sans", verdana, arial, sans-serif;
  position: fixed;
  top: 50px;
  right: 20px;
  z-index: 10000;
  font-size: 10pt;
  max-width: 180px;
}
.plotly-notifier p {
  margin: 0;
}
.plotly-notifier .notifier-note {
  min-width: 180px;
  max-width: 250px;
  border: 1px solid #fff;
  z-index: 3000;
  margin: 0;
  background-color: #8c97af;
  background-color: rgba(140, 151, 175, 0.9);
  color: #fff;
  padding: 10px;
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}
.plotly-notifier .notifier-close {
  color: #fff;
  opacity: 0.8;
  float: right;
  padding: 0 5px;
  background: none;
  border: none;
  font-size: 20px;
  font-weight: bold;
  line-height: 20px;
}
.plotly-notifier .notifier-close:hover {
  color: #444;
  text-decoration: none;
  cursor: pointer;
}
  /* endinject */
`));

let _$1 = t => t,
    _t$1,
    _t2$1,
    _t3,
    _t4;
/*
  DetectableTable element
  <detectable-table>

  Attributes:
  Hit; Miss; FalseAlarm; CorrectRejection;
*/

class igtFeedback extends igtElement {
  static get properties() {
    return {
      total: {
        attribute: false,
        type: Number,
        reflect: false
      }
    };
  }

  constructor() {
    super();
    this.total = 2000;
    this.trials = [];
    this.decks = [];
    this.gains = [];
    this.losses = [];
    this.sums = [];
  }

  firstUpdated() {
    this.reset();
  }

  reset() {
    this.total = 2000;
    this.trials = [];
    this.decks = [];
    this.gains = [];
    this.losses = [];
    this.sums = [];
    this.plotDecks();
  }

  static get styles() {
    return [super.styles, plotlyStyle, r$2(_t$1 || (_t$1 = _$1`
        :host {
          display: inline-block;
        }
        div.plot{
          width:500px;
        }
      `))];
  }

  deckChosen(trial, deck, gain, loss) {
    this.total = this.total + gain + loss;
    this.trials.push(trial);
    this.decks.push(deck);
    this.gains.push(gain);
    this.losses.push(loss);
    this.sums.push(gain + loss);
    this.plotDecks();
  }

  plotDecks() {
    const plotMargins = {
      l: 40,
      r: 10,
      b: 40,
      t: 40,
      pad: 4
    };
    console.log(this.trials);
    console.log(this.decks);
    core.react(this.shadowRoot.querySelector(".plot"), [{
      y: this.decks,
      x: this.trials,
      type: 'scatter',
      mode: 'lines+markers',
      marker: {
        color: this.sums,
        size: 8,
        colorscale: [[0, 'red'], [0.926, 'yellow'], [1, 'green']],
        cmin: -1250,
        cmax: 100,
        showscale: true
      }
    }], {
      margin: plotMargins,
      title: `Deck Selections`,
      width: 815,
      height: 300,
      datarevision: this.trials[this.trials.length - 1],
      modebar: {
        remove: ['zoomIn2d', 'zoomOut2d', 'toImage', 'pan2d', 'zoom2d', 'lasso2d', 'autoScale2d', 'hoverClosestGl2d', 'resetScale2d', 'select2d']
      },
      xaxis: {
        range: [0.5, 40.5],
        title: {
          text: 'Trials'
        }
      },
      yaxis: {
        type: 'category',
        categoryarray: [1, 2, 3, 4],
        categoryorder: 'array',
        range: [-0.5, 3.5],
        title: {
          text: 'Deck'
        }
      } //coloraxis:{colorscale:[[-1250, 'white'], [0, 'black']], showscale:true}}

    });
  }

  render() {
    return $(_t2$1 || (_t2$1 = _$1`
    <p>${0}</p>
    <div class="plot"></div>
      `), this.trials[this.trials.length - 1] == 40 ? $(_t3 || (_t3 = _$1`Task complete, final total is: $${0}`), this.total) : $(_t4 || (_t4 = _$1`Total is $${0}`), this.total));
  }

}
customElements.define('igt-feedback', igtFeedback);

let _ = t => t,
    _t,
    _t2;
/*
  SDTExample Base Class - Not intended for instantiation!
  <sdt-example>
*/

class IGTExample extends igtElement {
  static get styles() {
    return [super.styles, r$2(_t || (_t = _`
        :host {
          display: inline-block;

          margin-bottom: 1rem;
        }

        .holder {
          display: flex;
        }

        .body {
          display: flex;

          flex-wrap: wrap;

          align-items: center;
          justify-content: left;

          padding: 0.625rem;

          border: var(---border);
          border-radius: var(---border-radius);
        }

        .body ::slotted(*) {
          margin: 0.625rem;
        }

        /* HACK: Sibling selectors not working with ::slotted */
        /* .body > rdk-task + detectable-response,
        ::slotted(rdk-task) + ::slotted(detectable-response) { */
        .body ::slotted(detectable-response) {
          margin-left: 0;
        }

        /* HACK: Sibling selectors not working with ::slotted */
        /* .body > detectable-control + rdk-task,
        ::slotted(detectable-control) + ::slotted(rdk-task) {
          margin-left: 0;
        } */
        .body ::slotted(rdk-task) {
          margin-left: 0;
        }
      `))];
  }

  render() {
    /* eslint-disable-line class-methods-use-this */
    return $(_t2 || (_t2 = _`
      <div class="holder">
        <div class="body">
          <slot>Empty!</slot>
        </div>
      </div>`));
  }

}
customElements.define('igt-example', IGTExample);

/*
  SDTExample_Human element
  <sdt-example-human>
*/

class IGTExampleHuman extends IGTExample {
  firstUpdated() {
    //this.count = 1;
    this.igtControl = this.querySelector('igt-control');
    this.igtTask = this.querySelector('igt-task');
    this.igtFeedback = this.querySelector('igt-feedback');

    if (this.igtControl && this.igtControl.hasAttribute('reset')) {
      this.igtControl.addEventListener('igt-control-reset', () => {
        if (this.igtTask) {
          this.igtTask.reset();
        }

        if (this.igtFeedback) {
          this.igtFeedback.reset();
        }
      });
    }

    if (this.igtTask) {
      this.igtTask.addEventListener('igt-task-change', event => {
        console.log(event.detail.gain);

        if (this.igtFeedback) {
          this.igtFeedback.deckChosen(event.detail.trial, event.detail.deck, event.detail.gain, event.detail.loss);
        }
      });
    }
  }

}
customElements.define('igt-example-human', IGTExampleHuman);
//# sourceMappingURL=page.js.map
